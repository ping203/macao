/*
 * Copyright (C) 2017 Manh Tran
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */
/*
 * We have to replace __ by number of lights we want to use
 */
#define NR_DIRECTION_LIGHTS __
#define NR_POINT_LIGHTS __
#define NR_SPOT_LIGHTS __

struct DirLight {
        vec3 direction;

        vec3 ambient;
        vec3 diffuse;
        vec3 specular;
};

struct PointLight {
        vec3 position;

        float constant;
        float linear;
        float quadratic;

        vec3 ambient;
        vec3 diffuse;
        vec3 specular;
};

struct SpotLight {
        vec3 position;
        vec3 direction;
        float cutOff;
        float outerCutOff;

        float constant;
        float linear;
        float quadratic;

        vec3 ambient;
        vec3 diffuse;
        vec3 specular;
};

struct object_light_uniform {
        float bright;
};

#if NR_DIRECTION_LIGHTS != 0
uniform DirLight        dirLights[NR_DIRECTION_LIGHTS];
#endif

#if NR_POINT_LIGHTS != 0
uniform PointLight      pointLights[NR_POINT_LIGHTS];
#endif

#if NR_SPOT_LIGHTS != 0
uniform SpotLight       spotLights[NR_SPOT_LIGHTS];
#endif

vec3 CalcDirLight(DirLight ulight, vec3 normal, float factor)
{
        vec3 lightDir   = normalize(-ulight.direction);

        float diff      = max(dot(normal, lightDir), 0.0);

        vec3 ambient    = ulight.ambient * factor;
        vec3 diffuse    = ulight.diffuse * diff * factor;
        return (ambient + diffuse);
}

vec3 CalcPointLight(PointLight ulight, vec3 normal, vec3 fragPos, vec3 viewDir)
{
        vec3 lightDir           = normalize(ulight.position - fragPos);

        float diff              = max(dot(normal, lightDir), 0.0);

        vec3 reflectDir         = reflect(-lightDir, normal);
        // float spec = pow(max(dot(viewDir, reflectDir), 0.0), 1.0);
        float spec              = max(dot(viewDir, reflectDir), 0.0);

        float distance          = length(ulight.position - fragPos);
        float attenuation       = 1.0 / (ulight.constant + ulight.linear * distance + ulight.quadratic * (distance * distance));

        vec3 ambient            = ulight.ambient * attenuation;
        vec3 diffuse            = ulight.diffuse * diff * attenuation;
        vec3 specular           = ulight.specular * spec * attenuation;

        return (ambient + diffuse + specular);
}

vec3 CalcSpotLight(SpotLight ulight, vec3 normal, vec3 fragPos, vec3 viewDir)
{
        vec3 lightDir           = normalize(ulight.position - fragPos);

        float diff              = max(dot(normal, lightDir), 0.0);

        float distance          = length(ulight.position - fragPos);
        float attenuation       = 1.0 / (ulight.constant + ulight.linear * distance + ulight.quadratic * (distance * distance));

        float theta             = dot(lightDir, normalize(-ulight.direction));
        float epsilon           = ulight.cutOff - ulight.outerCutOff;
        float intensity                 = clamp((theta - ulight.outerCutOff) / epsilon, 0.0, 1.0);

        vec3 ambient            = ulight.ambient;
        vec3 diffuse            = ulight.diffuse * diff;

        ambient                 *= attenuation * intensity;
        diffuse                 *= attenuation * intensity;
        return (ambient + diffuse);
}

vec3 calculate_light(mat4 transform, vec3 view_position, vec3 vertex, vec3 norm, float bright)
{
        vec3 result             = vec3(0.0);

#if NR_DIRECTION_LIGHTS >= 1
        result                  += CalcDirLight(dirLights[0], norm, bright);
#endif

#if NR_DIRECTION_LIGHTS >= 2
        result                  += CalcDirLight(dirLights[1], norm, bright);
#endif

#if NR_DIRECTION_LIGHTS >= 3
        result                  += CalcDirLight(dirLights[2], norm, bright);
#endif

#if NR_POINT_LIGHTS >= 1
        vec3 pixel_frag_pos     = vec3(transform * vec4(vertex, 1.0));
        vec3 viewDir            = normalize(view_position - pixel_frag_pos);
        result                  += CalcPointLight(pointLights[0], norm, pixel_frag_pos, viewDir);
#endif

        return result;
}
