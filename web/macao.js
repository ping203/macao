// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [function($0) { { var obj = __shared_object_get($0); var root = document.getElementById("root"); root.appendChild(obj); var cv = document.getElementById("canvas"); var w = root.offsetWidth; var h = root.offsetHeight; var sf = window.devicePixelRatio || 1; cv.width = w * sf; cv.height = h * sf; cv.style.width = w + "px"; cv.style.height = h + "px"; _macao_resize(w * sf, h * sf); } },
 function() { FS.mkdir('/macao'); FS.mount(IDBFS, {}, '/macao'); FS.syncfs(true, function (err) { _macao_start(); }); },
 function() { FS.syncfs(false, function (err) { _file_web_sync(); }); },
 function($0, $1) { { var img = new native_image(); img.set_native_ptr($0); img.load(Pointer_stringify($1)); return img.__soi__; } },
 function($0) { { var img = __shared_object_get($0); return img.get_width(); } },
 function($0) { { var img = __shared_object_get($0); return img.get_height(); } },
 function($0) { { __shared_object_free($0); } },
 function($0) { { var img = __shared_object_get($0); img.load_texture(); } },
 function($0) { { var obj = view_helper_shared.view_alloc(); view_helper_shared.view_set_native_ptr(obj, $0); return obj.__soi__; } },
 function($0, $1, $2) { { var pr = __shared_object_get($0); view_helper_shared.view_set_position(pr, $1, $2); } },
 function($0, $1, $2) { { var pr = __shared_object_get($0); view_helper_shared.view_set_size(pr, $1, $2); } },
 function($0, $1, $2) { { var pr = __shared_object_get($0); view_helper_shared.view_set_scale(pr, $1, $2); } },
 function($0, $1, $2, $3) { { var pr = __shared_object_get($0); view_helper_shared.view_set_rotation(pr, $1, $2, $3); } },
 function($0, $1) { { var pr = __shared_object_get($0); view_helper_shared.view_set_clip(pr, $1); } },
 function($0, $1) { { var pr = __shared_object_get($0); view_helper_shared.view_set_border(pr, $1); } },
 function($0, $1, $2, $3, $4) { { var pr = __shared_object_get($0); view_helper_shared.view_set_color(pr, $1, $2, $3, $4); } },
 function($0, $1, $2, $3, $4) { { var pr = __shared_object_get($0); view_helper_shared.view_set_border_color(pr, $1, $2, $3, $4); } },
 function($0, $1) { { var pr = __shared_object_get($0); view_helper_shared.view_set_alpha(pr, $1); } },
 function($0, $1, $2) { { var pr = __shared_object_get($0); view_helper_shared.view_set_anchor(pr, $1, $2); } },
 function($0, $1) { { var pr = __shared_object_get($0); view_helper_shared.view_set_visible(pr, $1); } },
 function($0, $1) { { var pr = __shared_object_get($0); view_helper_shared.view_set_user_interaction(pr, $1); } },
 function($0) { { var obj = view_helper_shared.image_alloc(); view_helper_shared.view_set_native_ptr(obj, $0); return obj.__soi__; } },
 function($0, $1) { { var pr = __shared_object_get($0); view_helper_shared.view_set_image(pr, Pointer_stringify($1)); } },
 function($0) { { var obj = view_helper_shared.label_alloc(); view_helper_shared.view_set_native_ptr(obj, $0); return obj.__soi__; } },
 function($0) { { var obj = view_helper_shared.textfield_alloc(); view_helper_shared.view_set_native_ptr(obj, $0); return obj.__soi__; } },
 function($0) { { var pr = __shared_object_get($0); view_helper_shared.view_remove_from_parent(pr); } },
 function($0, $1) { { var pr = __shared_object_get($0); var ch = __shared_object_get($1); view_helper_shared.view_add_child(pr, ch); } },
 function($0) { { var pr = __shared_object_get($0); return view_helper_shared.view_get_offset_window_left(pr); } },
 function($0) { { var pr = __shared_object_get($0); return view_helper_shared.view_get_offset_window_top(pr); } },
 function($0, $1, $2, $3) { { var sfs = new smartfox_client(Pointer_stringify($1), $2, Pointer_stringify($3)); sfs.set_native($0); return sfs.__soi__; } },
 function($0, $1, $2) { { var sfs = __shared_object_get($0); sfs.connect(Pointer_stringify($1), $2); } },
 function($0, $1, $2, $3, $4) { { var sfs = __shared_object_get($0); sfs.login(Pointer_stringify($1), Pointer_stringify($2), Pointer_stringify($3), JSON.parse(Pointer_stringify($4))); } },
 function($0) { { var sfs = __shared_object_get($0); sfs.logout(); } },
 function($0, $1, $2, $3, $4) { { var sfs = __shared_object_get($0); sfs.join_room($1, Pointer_stringify($2), Pointer_stringify($3), $4); } },
 function($0) { { var sfs = __shared_object_get($0); sfs.disconnect(); } },
 function($0, $1, $2, $3) { { var sfs = __shared_object_get($0); var room = __shared_object_get($1); sfs.public_message(Pointer_stringify($2), JSON.parse(Pointer_stringify($3)), room); } },
 function($0, $1, $2, $3) { { var sfs = __shared_object_get($0); var room = __shared_object_get($1); sfs.send_extension_room(Pointer_stringify($2), JSON.parse(Pointer_stringify($3)), room); } },
 function($0, $1, $2) { { var sfs = __shared_object_get($0); sfs.send_extension(Pointer_stringify($1), JSON.parse(Pointer_stringify($2))); } }];

function _emscripten_asm_const_0(code) {
 return ASM_CONSTS[code]();
}

function _emscripten_asm_const_1(code, a0) {
 return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_2(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_3(code, a0, a1, a2) {
 return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_4(code, a0, a1, a2, a3) {
 return ASM_CONSTS[code](a0, a1, a2, a3);
}

function _emscripten_asm_const_5(code, a0, a1, a2, a3, a4) {
 return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 13104;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,67,46,85,84,70,45,56,0,114,119,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+12552);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}

var EMTSTACKTOP = getMemory(1048576);
var EMT_STACK_MAX = EMTSTACKTOP + 1048576;

var eb = getMemory(444216);
assert(eb % 8 === 0);
__ATPRERUN__.push(function() {
  HEAPU8.set([140,2,112,1,0,0,0,0,1,200,0,0,143,200,108,1,136,201,0,0,0,200,201,0,143,200,109,1,136,200,0,0,25,200,200,80,137,200,0,0,130,200,0,0,136,201,0,0,49,200,200,201,60,0,0,0,135,200,0,0,141,201,109,1,25,200,201,8,143,200,107,1,1,200,132,14,143,200,110,1,141,201,107,1,25,200,201,64,143,200,111,1,141,200,107,1,141,201,110,1,78,201,201,0,83,200,201,0,141,200,107,1,25,201,200,1,143,201,107,1,141,200,110,1,25,201,200,1,143,201,110,1,141,201,107,1,141,200,111,1,54,201,201,200,92,0,0,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,2,201,0,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,201,0,0,88,77,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,189,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,100,1,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,6,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,17,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,31,201,0,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,201,0,0,88,39,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,50,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,64,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,72,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,84,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,99,201,0,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,201,0,0,88,107,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,118,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,133,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,140,201,0,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,201,0,0,88,151,201,0,127,201,0,0,65,200,2,77,65,200,200,189,142,202,100,1,65,202,202,6,65,202,202,17,64,200,200,202,65,202,31,39,65,202,202,50,64,200,200,202,65,202,64,72,65,202,202,84,63,200,200,202,65,202,99,107,65,202,202,118,63,200,200,202,65,202,133,140,65,202,202,151,64,200,200,202,89,201,200,0,141,200,109,1,127,201,0,0,78,201,201,0,107,200,8,201,141,201,109,1,25,201,201,8,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,166,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,177,200,0,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,200,0,0,88,190,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,1,1,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,8,1,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,19,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,34,1,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,42,1,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,53,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,68,1,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,76,1,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,88,1,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,101,1,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,102,1,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,103,1,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,104,1,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,200,0,0,88,3,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,4,200,0,127,200,0,0,68,201,166,0,65,201,201,177,65,201,201,190,142,202,1,1,142,203,8,1,65,202,202,203,142,203,19,1,65,202,202,203,63,201,201,202,142,202,34,1,142,203,42,1,65,202,202,203,142,203,53,1,65,202,202,203,63,201,201,202,142,202,68,1,142,203,76,1,65,202,202,203,142,203,88,1,65,202,202,203,64,201,201,202,142,202,101,1,142,203,102,1,65,202,202,203,142,203,103,1,65,202,202,203,64,201,201,202,142,202,104,1,65,202,202,3,65,202,202,4,63,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,16,200,141,200,109,1,25,200,200,8,25,200,200,16,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,16,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,16,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,25,200,1,16,114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,201,0,0,88,5,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,7,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,8,201,0,127,201,0,0,25,200,1,16,114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,201,0,0,88,9,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,10,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,11,201,0,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,201,0,0,88,12,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,13,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,14,201,0,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,201,0,0,88,15,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,16,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,18,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,19,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,20,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,21,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,22,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,23,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,24,201,0,127,201,0,0,65,200,5,7,65,200,200,8,65,202,9,10,65,202,202,11,64,200,200,202,65,202,12,13,65,202,202,14,64,200,200,202,65,202,15,16,65,202,202,18,63,200,200,202,65,202,19,20,65,202,202,21,63,200,200,202,65,202,22,23,65,202,202,24,64,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,32,201,141,201,109,1,25,201,201,8,25,201,201,32,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,32,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,32,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,25,200,0,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,200,0,0,88,26,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,27,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,28,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,29,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,30,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,32,200,0,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,200,0,0,88,33,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,34,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,35,200,0,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,200,0,0,88,36,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,37,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,38,200,0,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,200,0,0,88,40,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,41,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,42,200,0,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,200,0,0,88,43,200,0,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,200,0,0,88,44,200,0,127,200,0,0,68,201,25,0,65,201,201,26,65,201,201,27,65,202,28,29,65,202,202,30,63,201,201,202,65,202,32,33,65,202,202,34,63,201,201,202,65,202,35,36,65,202,202,37,64,201,201,202,65,202,38,40,65,202,202,41,64,201,201,202,65,202,42,43,65,202,202,44,63,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,48,200,141,200,109,1,25,200,200,8,25,200,200,48,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,48,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,48,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,45,201,0,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,201,0,0,88,46,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,47,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,48,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,49,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,51,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,52,201,0,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,201,0,0,88,53,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,54,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,55,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,56,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,57,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,58,201,0,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,201,0,0,88,59,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,60,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,61,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,62,201,0,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,201,0,0,88,63,201,0,127,201,0,0,68,200,45,0,65,200,200,46,65,200,200,47,65,202,48,49,65,202,202,51,63,200,200,202,65,202,52,53,65,202,202,54,63,200,200,202,65,202,55,56,65,202,202,57,64,200,200,202,65,202,58,59,65,202,202,60,64,200,200,202,65,202,61,62,65,202,202,63,63,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,4,201,141,201,109,1,25,201,201,8,25,201,201,4,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,4,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,4,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,65,201,0,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,201,0,0,88,66,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,67,201,0,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,68,200,0,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,200,0,0,88,69,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,70,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,71,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,73,200,0,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,200,0,0,88,74,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,75,200,0,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,200,0,0,88,76,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,78,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,79,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,80,200,0,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,200,0,0,88,81,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,82,200,0,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,200,0,0,88,83,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,85,200,0,127,200,0,0,65,201,65,66,65,201,201,67,65,202,68,69,65,202,202,70,64,201,201,202,65,202,71,73,65,202,202,74,64,201,201,202,65,202,75,76,65,202,202,78,63,201,201,202,65,202,79,80,65,202,202,81,63,201,201,202,65,202,82,83,65,202,202,85,64,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,20,200,141,200,109,1,25,200,200,8,25,200,200,20,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,20,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,20,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,86,200,0,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,200,0,0,88,87,200,0,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,200,0,0,88,88,200,0,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,89,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,90,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,91,201,0,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,201,0,0,88,92,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,93,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,94,201,0,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,201,0,0,88,95,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,96,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,97,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,98,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,100,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,101,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,102,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,103,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,104,201,0,127,201,0,0,68,200,86,0,65,200,200,87,65,200,200,88,65,202,89,90,65,202,202,91,63,200,200,202,65,202,92,93,65,202,202,94,63,200,200,202,65,202,95,96,65,202,202,97,64,200,200,202,65,202,98,100,65,202,202,101,64,200,200,202,65,202,102,103,65,202,202,104,63,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,36,201,141,201,109,1,25,201,201,8,25,201,201,36,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,36,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,36,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,105,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,106,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,108,201,0,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,109,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200], eb + 0);
  HEAPU8.set([127,200,0,0,88,110,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,111,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,112,200,0,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,200,0,0,88,113,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,114,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,115,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,116,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,117,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,119,200,0,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,200,0,0,88,120,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,121,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,122,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,123,200,0,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,200,0,0,88,124,200,0,127,200,0,0,65,201,105,106,65,201,201,108,65,202,109,110,65,202,202,111,64,201,201,202,65,202,112,113,65,202,202,114,64,201,201,202,65,202,115,116,65,202,202,117,63,201,201,202,65,202,119,120,65,202,202,121,63,201,201,202,65,202,122,123,65,202,202,124,64,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,52,200,141,200,109,1,25,200,200,8,25,200,200,52,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,52,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,52,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,125,201,0,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,201,0,0,88,126,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,127,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,128,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,129,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,130,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,131,201,0,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,201,0,0,88,132,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,134,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,135,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,136,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,137,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,138,201,0,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,201,0,0,88,139,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,141,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,142,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,143,201,0,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,201,0,0,88,144,201,0,127,201,0,0,65,200,125,126,65,200,200,127,65,202,128,129,65,202,202,130,64,200,200,202,65,202,131,132,65,202,202,134,64,200,200,202,65,202,135,136,65,202,202,137,63,200,200,202,65,202,138,139,65,202,202,141,63,200,200,202,65,202,142,143,65,202,202,144,64,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,8,201,141,201,109,1,25,201,201,8,25,201,201,8,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,8,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,8,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,145,201,0,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,201,0,0,88,146,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,147,201,0,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,148,200,0,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,200,0,0,88,149,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,150,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,152,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,153,200,0,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,200,0,0,88,154,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,155,200,0,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,200,0,0,88,156,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,157,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,158,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,159,200,0,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,200,0,0,88,160,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,161,200,0,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,200,0,0,88,162,200,0,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,200,0,0,88,163,200,0,127,200,0,0,68,201,145,0,65,201,201,146,65,201,201,147,65,202,148,149,65,202,202,150,63,201,201,202,65,202,152,153,65,202,202,154,63,201,201,202,65,202,155,156,65,202,202,157,64,201,201,202,65,202,158,159,65,202,202,160,64,201,201,202,65,202,161,162,65,202,202,163,63,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,24,200,141,200,109,1,25,200,200,8,25,200,200,24,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,24,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,24,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,164,200,0,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,200,0,0,88,165,200,0,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,200,0,0,88,167,200,0,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,168,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,169,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,170,201,0,127,201,0,0,25,200,1,16,114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,201,0,0,88,171,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,172,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,173,201,0,127,201,0,0,25,200,1,16,114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,201,0,0,88,174,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,175,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,176,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,178,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,179,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,180,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,181,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,182,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,183,201,0,127,201,0,0,65,200,164,165,65,200,200,167,65,202,168,169,65,202,202,170,64,200,200,202,65,202,171,172,65,202,202,173,64,200,200,202,65,202,174,175,65,202,202,176,63,200,200,202,65,202,178,179,65,202,202,180,63,200,200,202,65,202,181,182,65,202,202,183,64,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,40,201,141,201,109,1,25,201,201,8,25,201,201,40,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,40,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,40,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,184,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,185,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,186,201,0,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,187,200,0,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,200,0,0,88,188,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,191,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,192,200,0,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,200,0,0,88,193,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,194,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,195,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,196,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,197,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,198,200,0,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,200,0,0,88,199,200,0,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,0,1,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,2,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,3,1,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,4,1,127,200,0,0,68,201,184,0,65,201,201,185,65,201,201,186,65,202,187,188,65,202,202,191,63,201,201,202,65,202,192,193,65,202,202,194,63,201,201,202,65,202,195,196,65,202,202,197,64,201,201,202,65,202,198,199,142,203,0,1,65,202,202,203,64,201,201,202,142,202,2,1,142,203,3,1,65,202,202,203,142,203,4,1,65,202,202,203,63,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,56,200,141,200,109,1,25,200,200,8,25,200,200,56,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,56,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,56,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,5,1,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,6,1,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,7,1,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,9,1,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,10,1,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,11,1,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,12,1,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,13,1,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,14,1,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,15,1,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,16,1,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,17,1,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,18,1,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,20,1,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,21,1,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,22,1,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,23,1,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,24,1,127,201,0,0,142,200,5,1,68,200,200,0,142,202,6,1,65,200,200,202,142,202,7,1,65,200,200,202,142,202,9,1,142,203,10,1,65,202,202,203,142,203,11,1,65,202,202,203,63,200,200,202,142,202,12,1,142,203,13,1,65,202,202,203,142,203,14,1,65,202,202,203,63,200,200,202,142,202,15,1,142,203,16,1,65,202,202,203,142,203,17,1,65,202,202,203,64,200,200,202,142,202,18,1,142,203,20,1,65,202,202,203,142,203,21,1,65,202,202,203,64,200,200,202,142,202,22,1,142,203,23,1,65,202,202,203,142,203,24,1,65,202,202,203,63,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,12,201,141,201,109,1,25,201,201,8,25,201,201,12,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,12,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,12,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,25,1,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,26,1,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,27,1,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,28,1,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,29,1,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,30,1,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,31,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,32,1,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,33,1,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,35,1,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,36,1,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,37,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,38,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,39,1,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,40,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,41,1,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,43,1,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,44,1,127,200,0,0,142,201,25,1,142,202,26,1,65,201,201,202,142,202,27,1,65,201,201,202,142,202,28,1,142,203,29,1,65,202,202,203,142,203,30,1,65,202,202,203,64,201,201,202,142,202,31,1,142,203,32,1,65,202,202,203,142,203,33,1,65,202,202,203,64,201,201,202,142,202,35,1,142,203,36,1,65,202,202,203,142,203,37,1,65,202,202,203,63,201,201,202,142,202,38,1,142,203,39,1,65,202,202,203,142,203,40,1,65,202,202,203,63,201,201,202,142,202,41,1,142,203,43,1,65,202,202,203,142,203,44,1,65,202,202,203,64,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,28,200,141,200,109,1,25,200,200,8,25,200,200,28,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,28,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,28,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,45,1,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,46,1,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,47,1,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,48,1,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,49,1,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,50,1,127,201,0,0,25,200,1,16,114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,51,1,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,52,1,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,54,1,127,201,0,0,25,200,1,16], eb + 10240);
  HEAPU8.set([114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,55,1,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,56,1,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,57,1,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,58,1,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,59,1,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,60,1,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,61,1,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,62,1,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,63,1,127,201,0,0,142,200,45,1,68,200,200,0,142,202,46,1,65,200,200,202,142,202,47,1,65,200,200,202,142,202,48,1,142,203,49,1,65,202,202,203,142,203,50,1,65,202,202,203,63,200,200,202,142,202,51,1,142,203,52,1,65,202,202,203,142,203,54,1,65,202,202,203,63,200,200,202,142,202,55,1,142,203,56,1,65,202,202,203,142,203,57,1,65,202,202,203,64,200,200,202,142,202,58,1,142,203,59,1,65,202,202,203,142,203,60,1,65,202,202,203,64,200,200,202,142,202,61,1,142,203,62,1,65,202,202,203,142,203,63,1,65,202,202,203,63,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,44,201,141,201,109,1,25,201,201,8,25,201,201,44,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,44,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,44,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,64,1,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,65,1,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,66,1,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,67,1,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,69,1,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,70,1,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,71,1,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,72,1,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,73,1,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,74,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,75,1,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,77,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,78,1,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,79,1,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,80,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,81,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,82,1,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,83,1,127,200,0,0,142,201,64,1,142,202,65,1,65,201,201,202,142,202,66,1,65,201,201,202,142,202,67,1,142,203,69,1,65,202,202,203,142,203,70,1,65,202,202,203,64,201,201,202,142,202,71,1,142,203,72,1,65,202,202,203,142,203,73,1,65,202,202,203,64,201,201,202,142,202,74,1,142,203,75,1,65,202,202,203,142,203,77,1,65,202,202,203,63,201,201,202,142,202,78,1,142,203,79,1,65,202,202,203,142,203,80,1,65,202,202,203,63,201,201,202,142,202,81,1,142,203,82,1,65,202,202,203,142,203,83,1,65,202,202,203,64,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,60,200,141,200,109,1,25,200,200,8,25,200,200,60,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,60,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,60,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,84,1,127,200,0,0,141,201,109,1,25,201,201,8,114,200,201,0,127,201,0,0,141,200,109,1,25,200,200,8,102,200,200,1,107,201,1,200,127,200,0,0,141,201,109,1,25,201,201,8,102,201,201,2,107,200,2,201,127,201,0,0,141,200,109,1,25,200,200,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,85,1,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,86,1,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,16,114,200,201,0,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,16,102,200,200,1,107,201,1,200,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,16,102,201,201,2,107,200,2,201,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,87,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,89,1,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,32,114,200,201,0,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,32,102,200,200,1,107,201,1,200,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,32,102,201,201,2,107,200,2,201,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,90,1,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,91,1,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,48,114,200,201,0,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,48,102,200,200,1,107,201,1,200,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,48,102,201,201,2,107,200,2,201,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,48,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,92,1,142,201,84,1,142,202,85,1,65,201,201,202,142,202,86,1,142,203,87,1,65,202,202,203,63,201,201,202,142,202,89,1,142,203,90,1,65,202,202,203,63,201,201,202,142,202,91,1,142,203,92,1,65,202,202,203,63,200,201,202,144,200,105,1,142,202,105,1,58,200,202,0,144,200,93,1,59,202,1,0,142,201,93,1,66,200,202,201,144,200,105,1,1,200,0,0,143,200,106,1,141,201,106,1,0,200,201,0,143,200,94,1,141,200,94,1,34,200,200,16,120,200,2,0,119,0,87,0,141,201,106,1,0,200,201,0,143,200,95,1,127,200,0,0,141,201,109,1,25,201,201,8,141,202,95,1,41,202,202,2,3,201,201,202,114,200,201,0,127,201,0,0,141,200,109,1,25,200,200,8,141,202,95,1,41,202,202,2,3,200,200,202,102,200,200,1,107,201,1,200,127,200,0,0,141,201,109,1,25,201,201,8,141,202,95,1,41,202,202,2,3,201,201,202,102,201,201,2,107,200,2,201,127,201,0,0,141,200,109,1,25,200,200,8,141,202,95,1,41,202,202,2,3,200,200,202,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,96,1,142,201,105,1,58,200,201,0,144,200,97,1,141,201,106,1,0,200,201,0,143,200,98,1,127,200,0,0,142,201,96,1,142,202,97,1,65,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,141,200,98,1,41,200,200,2,127,202,0,0,78,202,202,0,95,201,200,202,141,202,109,1,25,202,202,8,141,200,98,1,41,200,200,2,3,202,202,200,127,200,0,0,102,200,200,1,107,202,1,200,141,200,109,1,25,200,200,8,141,202,98,1,41,202,202,2,3,200,200,202,127,202,0,0,102,202,202,2,107,200,2,202,141,202,109,1,25,202,202,8,141,200,98,1,41,200,200,2,3,202,202,200,127,200,0,0,102,200,200,3,107,202,3,200,141,202,106,1,0,200,202,0,143,200,99,1,141,202,99,1,25,200,202,1,143,200,106,1,119,0,164,255,0,200,0,0,143,200,107,1,141,202,109,1,25,200,202,8,143,200,110,1,141,202,107,1,25,200,202,64,143,200,111,1,141,200,107,1,141,202,110,1,78,202,202,0,83,200,202,0,141,200,107,1,25,202,200,1,143,202,107,1,141,200,110,1,25,202,200,1,143,202,110,1,141,202,107,1,141,200,111,1,54,202,202,200,236,93,0,0,141,202,109,1,137,202,0,0,139,0,0,0,140,2,112,1,0,0,0,0,1,200,0,0,143,200,108,1,136,201,0,0,0,200,201,0,143,200,109,1,136,200,0,0,25,200,200,80,137,200,0,0,130,200,0,0,136,201,0,0,49,200,200,201,108,94,0,0,135,200,0,0,141,201,109,1,25,200,201,8,143,200,107,1,1,200,132,14,143,200,110,1,141,201,107,1,25,200,201,64,143,200,111,1,141,200,107,1,141,201,110,1,78,201,201,0,83,200,201,0,141,200,107,1,25,201,200,1,143,201,107,1,141,200,110,1,25,201,200,1,143,201,110,1,141,201,107,1,141,200,111,1,54,201,201,200,140,94,0,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,2,201,0,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,201,0,0,88,77,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,189,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,100,1,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,6,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,17,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,31,201,0,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,201,0,0,88,39,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,50,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,64,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,72,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,84,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,99,201,0,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,201,0,0,88,107,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,118,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,133,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,140,201,0,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,201,0,0,88,151,201,0,127,201,0,0,65,200,2,77,65,200,200,189,142,202,100,1,65,202,202,6,65,202,202,17,64,200,200,202,65,202,31,39,65,202,202,50,64,200,200,202,65,202,64,72,65,202,202,84,63,200,200,202,65,202,99,107,65,202,202,118,63,200,200,202,65,202,133,140,65,202,202,151,64,200,200,202,89,201,200,0,141,200,109,1,127,201,0,0,78,201,201,0,107,200,8,201,141,201,109,1,25,201,201,8,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,166,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,177,200,0,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,200,0,0,88,190,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,1,1,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,8,1,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,19,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,34,1,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,42,1,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,53,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,68,1,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,76,1,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,88,1,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,101,1,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,102,1,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,103,1,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,104,1,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,200,0,0,88,3,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,4,200,0,127,200,0,0,68,201,166,0,65,201,201,177,65,201,201,190,142,202,1,1,142,203,8,1,65,202,202,203,142,203,19,1,65,202,202,203,63,201,201,202,142,202,34,1,142,203,42,1,65,202,202,203,142,203,53,1,65,202,202,203,63,201,201,202,142,202,68,1,142,203,76,1,65,202,202,203,142,203,88,1,65,202,202,203,64,201,201,202,142,202,101,1,142,203,102,1,65,202,202,203,142,203,103,1,65,202,202,203,64,201,201,202,142,202,104,1,65,202,202,3,65,202,202,4,63,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,16,200,141,200,109,1,25,200,200,8,25,200,200,16,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,16,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,16,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,25,200,1,16,114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,201,0,0,88,5,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,7,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,8,201,0,127,201,0,0,25,200,1,16,114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,201,0,0,88,9,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,10,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,11,201,0,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,201,0,0,88,12,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,13,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,14,201,0,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,201,0,0,88,15,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,16,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,18,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,19,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,20,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,21,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,22,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,23,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,24,201,0,127,201,0,0,65,200,5,7,65,200,200,8,65,202,9,10,65,202,202,11,64,200,200,202,65,202,12,13,65,202,202,14,64,200,200,202,65,202,15,16,65,202,202,18,63,200,200,202,65,202,19,20,65,202,202,21,63,200,200,202,65,202,22,23,65,202,202,24,64,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,32,201,141,201,109,1,25,201,201,8,25,201,201,32,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,32,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,32,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,25,200,0,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,200,0,0,88,26,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,27,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,28,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,29,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,30,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,32,200,0,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,200,0,0,88,33,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,34,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,35,200,0,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,200,0,0,88,36,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,37,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,38,200,0,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,200,0,0,88,40,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,41,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,42,200,0,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,200,0,0,88,43,200,0,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,200,0,0,88,44,200,0,127,200,0,0,68,201,25,0,65,201,201,26,65,201,201,27,65,202,28,29,65,202,202,30,63,201,201,202,65,202,32,33,65,202,202,34,63,201,201,202,65,202,35,36,65,202,202,37,64,201,201,202,65,202,38,40,65,202,202,41,64,201,201,202,65,202,42,43,65,202,202,44,63,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,48,200,141,200,109,1,25,200,200,8,25,200,200,48,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,48,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,48,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,45,201,0,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,201,0,0,88,46,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,47,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,48,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,49,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,51,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,52,201,0,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,201,0,0,88,53,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,54,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,55,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,56,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2], eb + 20480);
  HEAPU8.set([107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,57,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,58,201,0,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,201,0,0,88,59,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,60,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,61,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,62,201,0,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,201,0,0,88,63,201,0,127,201,0,0,68,200,45,0,65,200,200,46,65,200,200,47,65,202,48,49,65,202,202,51,63,200,200,202,65,202,52,53,65,202,202,54,63,200,200,202,65,202,55,56,65,202,202,57,64,200,200,202,65,202,58,59,65,202,202,60,64,200,200,202,65,202,61,62,65,202,202,63,63,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,4,201,141,201,109,1,25,201,201,8,25,201,201,4,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,4,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,4,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,65,201,0,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,201,0,0,88,66,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,67,201,0,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,68,200,0,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,200,0,0,88,69,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,70,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,71,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,73,200,0,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,200,0,0,88,74,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,75,200,0,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,200,0,0,88,76,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,78,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,79,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,80,200,0,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,200,0,0,88,81,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,82,200,0,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,200,0,0,88,83,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,85,200,0,127,200,0,0,65,201,65,66,65,201,201,67,65,202,68,69,65,202,202,70,64,201,201,202,65,202,71,73,65,202,202,74,64,201,201,202,65,202,75,76,65,202,202,78,63,201,201,202,65,202,79,80,65,202,202,81,63,201,201,202,65,202,82,83,65,202,202,85,64,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,20,200,141,200,109,1,25,200,200,8,25,200,200,20,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,20,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,20,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,86,200,0,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,200,0,0,88,87,200,0,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,200,0,0,88,88,200,0,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,89,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,90,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,91,201,0,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,201,0,0,88,92,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,93,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,94,201,0,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,201,0,0,88,95,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,96,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,97,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,98,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,100,201,0,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,201,0,0,88,101,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,102,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,103,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,104,201,0,127,201,0,0,68,200,86,0,65,200,200,87,65,200,200,88,65,202,89,90,65,202,202,91,63,200,200,202,65,202,92,93,65,202,202,94,63,200,200,202,65,202,95,96,65,202,202,97,64,200,200,202,65,202,98,100,65,202,202,101,64,200,200,202,65,202,102,103,65,202,202,104,63,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,36,201,141,201,109,1,25,201,201,8,25,201,201,36,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,36,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,36,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,105,201,0,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,201,0,0,88,106,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,108,201,0,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,109,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,110,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,111,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,112,200,0,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,200,0,0,88,113,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,114,200,0,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,200,0,0,88,115,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,116,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,117,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,119,200,0,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,200,0,0,88,120,200,0,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,200,0,0,88,121,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,122,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,123,200,0,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,200,0,0,88,124,200,0,127,200,0,0,65,201,105,106,65,201,201,108,65,202,109,110,65,202,202,111,64,201,201,202,65,202,112,113,65,202,202,114,64,201,201,202,65,202,115,116,65,202,202,117,63,201,201,202,65,202,119,120,65,202,202,121,63,201,201,202,65,202,122,123,65,202,202,124,64,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,52,200,141,200,109,1,25,200,200,8,25,200,200,52,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,52,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,52,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,125,201,0,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,201,0,0,88,126,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,127,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,128,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,129,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,130,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,131,201,0,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,201,0,0,88,132,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,134,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,135,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,136,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,137,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,138,201,0,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,201,0,0,88,139,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,141,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,142,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,143,201,0,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,201,0,0,88,144,201,0,127,201,0,0,65,200,125,126,65,200,200,127,65,202,128,129,65,202,202,130,64,200,200,202,65,202,131,132,65,202,202,134,64,200,200,202,65,202,135,136,65,202,202,137,63,200,200,202,65,202,138,139,65,202,202,141,63,200,200,202,65,202,142,143,65,202,202,144,64,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,8,201,141,201,109,1,25,201,201,8,25,201,201,8,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,8,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,8,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,145,201,0,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,201,0,0,88,146,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,147,201,0,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,148,200,0,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,200,0,0,88,149,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,150,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,152,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,153,200,0,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,200,0,0,88,154,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,155,200,0,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,200,0,0,88,156,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,157,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,158,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,159,200,0,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,200,0,0,88,160,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,161,200,0,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,200,0,0,88,162,200,0,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,200,0,0,88,163,200,0,127,200,0,0,68,201,145,0,65,201,201,146,65,201,201,147,65,202,148,149,65,202,202,150,63,201,201,202,65,202,152,153,65,202,202,154,63,201,201,202,65,202,155,156,65,202,202,157,64,201,201,202,65,202,158,159,65,202,202,160,64,201,201,202,65,202,161,162,65,202,202,163,63,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,24,200,141,200,109,1,25,200,200,8,25,200,200,24,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,24,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,24,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,164,200,0,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,200,0,0,88,165,200,0,127,200,0,0,25,201,1,60,114,200,201,0,127,201,0,0,25,200,1,60,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,60,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,60,102,200,200,3,107,201,3,200,127,200,0,0,88,167,200,0,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,168,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,169,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,170,201,0,127,201,0,0,25,200,1,16,114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,201,0,0,88,171,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,172,201,0,127,201,0,0,25,200,1,60,114,201,200,0,127,200,0,0,25,201,1,60,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,60,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,60,102,201,201,3,107,200,3,201,127,201,0,0,88,173,201,0,127,201,0,0,25,200,1,16,114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,201,0,0,88,174,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,175,201,0,127,201,0,0,25,200,1,52,114,201,200,0,127,200,0,0,25,201,1,52,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,52,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,52,102,201,201,3,107,200,3,201,127,201,0,0,88,176,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,178,201,0,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,201,0,0,88,179,201,0,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,201,0,0,88,180,201,0,127,201,0,0,25,200,1,48,114,201,200,0,127,200,0,0,25,201,1,48,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,48,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,48,102,201,201,3,107,200,3,201,127,201,0,0,88,181,201,0,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,201,0,0,88,182,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,183,201,0,127,201,0,0,65,200,164,165,65,200,200,167,65,202,168,169,65,202,202,170,64,200,200,202,65,202,171,172,65,202,202,173,64,200,200,202,65,202,174,175,65,202,202,176,63,200,200,202,65,202,178,179,65,202,202,180,63,200,200,202,65,202,181,182,65,202,202,183,64,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,40,201,141,201,109,1,25,201,201,8,25,201,201,40,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,40,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,40,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,201,0,0,88,184,201,0,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,201,0,0,88,185,201,0,127,201,0,0,25,200,1,56,114,201,200,0,127,200,0,0,25,201,1,56,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,56,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,56,102,201,201,3,107,200,3,201,127,201,0,0,88,186,201,0,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,200,0,0,88,187,200,0,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,200,0,0,88,188,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,191,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,192,200,0,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,200,0,0,88,193,200,0,127,200,0,0,25,201,1,56,114,200,201,0,127,201,0,0,25,200,1,56,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,56,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,56,102,200,200,3,107,201,3,200,127,200,0,0,88,194,200,0,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,200,0,0,88,195,200,0,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,200,0,0,88,196,200,0,127,200,0,0,25,201,1,52,114,200,201,0,127,201,0,0,25,200,1,52,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,52,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,52,102,200,200,3,107,201,3,200,127,200,0,0,88,197,200,0,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,200,0,0,88,198,200,0,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,200,0,0,88,199,200,0,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,0,1,127,200,0,0,25,201,1,48,114,200,201,0,127,201,0,0,25,200,1,48,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,48,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,48,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,2,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,3,1,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,4,1,127,200,0,0,68,201,184,0,65,201,201,185,65,201,201,186,65,202,187,188,65,202,202,191,63,201,201,202,65,202,192,193,65,202,202,194,63,201,201,202,65,202,195,196,65,202,202,197,64,201,201,202,65,202,198,199,142,203,0,1,65,202,202,203,64,201,201,202,142,202,2,1,142,203,3,1,65,202,202,203,142,203,4,1,65,202,202,203,63,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,56,200,141,200,109,1,25,200,200,8,25,200,200,56,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,56,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,56,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4], eb + 30720);
  HEAPU8.set([102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,5,1,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,6,1,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,7,1,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,9,1,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,10,1,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,11,1,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,12,1,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,13,1,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,14,1,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,15,1,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,16,1,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,17,1,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,18,1,127,201,0,0,25,200,1,8,114,201,200,0,127,200,0,0,25,201,1,8,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,8,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,8,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,20,1,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,21,1,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,22,1,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,23,1,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,24,1,127,201,0,0,142,200,5,1,68,200,200,0,142,202,6,1,65,200,200,202,142,202,7,1,65,200,200,202,142,202,9,1,142,203,10,1,65,202,202,203,142,203,11,1,65,202,202,203,63,200,200,202,142,202,12,1,142,203,13,1,65,202,202,203,142,203,14,1,65,202,202,203,63,200,200,202,142,202,15,1,142,203,16,1,65,202,202,203,142,203,17,1,65,202,202,203,64,200,200,202,142,202,18,1,142,203,20,1,65,202,202,203,142,203,21,1,65,202,202,203,64,200,200,202,142,202,22,1,142,203,23,1,65,202,202,203,142,203,24,1,65,202,202,203,63,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,12,201,141,201,109,1,25,201,201,8,25,201,201,12,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,12,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,12,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,25,1,127,201,0,0,25,200,1,24,114,201,200,0,127,200,0,0,25,201,1,24,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,24,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,24,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,26,1,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,27,1,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,28,1,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,29,1,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,30,1,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,31,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,32,1,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,33,1,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,35,1,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,36,1,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,37,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,38,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,39,1,127,200,0,0,25,201,1,28,114,200,201,0,127,201,0,0,25,200,1,28,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,28,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,28,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,40,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,41,1,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,43,1,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,44,1,127,200,0,0,142,201,25,1,142,202,26,1,65,201,201,202,142,202,27,1,65,201,201,202,142,202,28,1,142,203,29,1,65,202,202,203,142,203,30,1,65,202,202,203,64,201,201,202,142,202,31,1,142,203,32,1,65,202,202,203,142,203,33,1,65,202,202,203,64,201,201,202,142,202,35,1,142,203,36,1,65,202,202,203,142,203,37,1,65,202,202,203,63,201,201,202,142,202,38,1,142,203,39,1,65,202,202,203,142,203,40,1,65,202,202,203,63,201,201,202,142,202,41,1,142,203,43,1,65,202,202,203,142,203,44,1,65,202,202,203,64,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,28,200,141,200,109,1,25,200,200,8,25,200,200,28,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,28,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,28,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,45,1,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,46,1,127,200,0,0,25,201,1,44,114,200,201,0,127,201,0,0,25,200,1,44,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,44,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,44,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,47,1,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,48,1,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,49,1,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,50,1,127,201,0,0,25,200,1,16,114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,51,1,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,52,1,127,201,0,0,25,200,1,44,114,201,200,0,127,200,0,0,25,201,1,44,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,44,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,44,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,54,1,127,201,0,0,25,200,1,16,114,201,200,0,127,200,0,0,25,201,1,16,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,16,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,16,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,55,1,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,56,1,127,201,0,0,25,200,1,36,114,201,200,0,127,200,0,0,25,201,1,36,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,36,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,36,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,57,1,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,58,1,127,201,0,0,25,200,1,4,114,201,200,0,127,200,0,0,25,201,1,4,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,4,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,4,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,59,1,127,201,0,0,25,200,1,28,114,201,200,0,127,200,0,0,25,201,1,28,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,28,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,28,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,60,1,127,201,0,0,25,200,1,32,114,201,200,0,127,200,0,0,25,201,1,32,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,32,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,32,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,61,1,127,201,0,0,25,200,1,12,114,201,200,0,127,200,0,0,25,201,1,12,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,12,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,12,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,62,1,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,63,1,127,201,0,0,142,200,45,1,68,200,200,0,142,202,46,1,65,200,200,202,142,202,47,1,65,200,200,202,142,202,48,1,142,203,49,1,65,202,202,203,142,203,50,1,65,202,202,203,63,200,200,202,142,202,51,1,142,203,52,1,65,202,202,203,142,203,54,1,65,202,202,203,63,200,200,202,142,202,55,1,142,203,56,1,65,202,202,203,142,203,57,1,65,202,202,203,64,200,200,202,142,202,58,1,142,203,59,1,65,202,202,203,142,203,60,1,65,202,202,203,64,200,200,202,142,202,61,1,142,203,62,1,65,202,202,203,142,203,63,1,65,202,202,203,63,200,200,202,89,201,200,0,141,200,109,1,25,200,200,8,127,201,0,0,78,201,201,0,107,200,44,201,141,201,109,1,25,201,201,8,25,201,201,44,127,200,0,0,102,200,200,1,107,201,1,200,141,200,109,1,25,200,200,8,25,200,200,44,127,201,0,0,102,201,201,2,107,200,2,201,141,201,109,1,25,201,201,8,25,201,201,44,127,200,0,0,102,200,200,3,107,201,3,200,127,200,0,0,114,200,1,0,127,200,0,0,102,201,1,1,107,200,1,201,127,201,0,0,102,200,1,2,107,201,2,200,127,200,0,0,102,201,1,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,64,1,127,201,0,0,25,200,1,20,114,201,200,0,127,200,0,0,25,201,1,20,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,20,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,20,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,65,1,127,201,0,0,25,200,1,40,114,201,200,0,127,200,0,0,25,201,1,40,102,201,201,1,107,200,1,201,127,201,0,0,25,200,1,40,102,200,200,2,107,201,2,200,127,200,0,0,25,201,1,40,102,201,201,3,107,200,3,201,127,200,0,0,88,201,200,0,144,201,66,1,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,67,1,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,69,1,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,70,1,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,71,1,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,72,1,127,200,0,0,25,201,1,40,114,200,201,0,127,201,0,0,25,200,1,40,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,40,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,40,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,73,1,127,200,0,0,25,201,1,16,114,200,201,0,127,201,0,0,25,200,1,16,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,16,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,74,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,75,1,127,200,0,0,25,201,1,36,114,200,201,0,127,201,0,0,25,200,1,36,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,36,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,36,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,77,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,78,1,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,79,1,127,200,0,0,25,201,1,24,114,200,201,0,127,201,0,0,25,200,1,24,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,24,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,24,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,80,1,127,200,0,0,25,201,1,32,114,200,201,0,127,201,0,0,25,200,1,32,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,32,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,81,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,82,1,127,200,0,0,25,201,1,20,114,200,201,0,127,201,0,0,25,200,1,20,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,20,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,20,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,83,1,127,200,0,0,142,201,64,1,142,202,65,1,65,201,201,202,142,202,66,1,65,201,201,202,142,202,67,1,142,203,69,1,65,202,202,203,142,203,70,1,65,202,202,203,64,201,201,202,142,202,71,1,142,203,72,1,65,202,202,203,142,203,73,1,65,202,202,203,64,201,201,202,142,202,74,1,142,203,75,1,65,202,202,203,142,203,77,1,65,202,202,203,63,201,201,202,142,202,78,1,142,203,79,1,65,202,202,203,142,203,80,1,65,202,202,203,63,201,201,202,142,202,81,1,142,203,82,1,65,202,202,203,142,203,83,1,65,202,202,203,64,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,127,200,0,0,78,200,200,0,107,201,60,200,141,200,109,1,25,200,200,8,25,200,200,60,127,201,0,0,102,201,201,1,107,200,1,201,141,201,109,1,25,201,201,8,25,201,201,60,127,200,0,0,102,200,200,2,107,201,2,200,141,200,109,1,25,200,200,8,25,200,200,60,127,201,0,0,102,201,201,3,107,200,3,201,127,201,0,0,114,201,1,0,127,201,0,0,102,200,1,1,107,201,1,200,127,200,0,0,102,201,1,2,107,200,2,201,127,201,0,0,102,200,1,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,84,1,127,200,0,0,141,201,109,1,25,201,201,8,114,200,201,0,127,201,0,0,141,200,109,1,25,200,200,8,102,200,200,1,107,201,1,200,127,200,0,0,141,201,109,1,25,201,201,8,102,201,201,2,107,200,2,201,127,201,0,0,141,200,109,1,25,200,200,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,85,1,127,200,0,0,25,201,1,4,114,200,201,0,127,201,0,0,25,200,1,4,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,4,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,4,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,86,1,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,16,114,200,201,0,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,16,102,200,200,1,107,201,1,200,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,16,102,201,201,2,107,200,2,201,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,16,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,87,1,127,200,0,0,25,201,1,8,114,200,201,0,127,201,0,0,25,200,1,8,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,8,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,8,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,89,1,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,32,114,200,201,0,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,32,102,200,200,1,107,201,1,200,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,32,102,201,201,2,107,200,2,201,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,32,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,90,1,127,200,0,0,25,201,1,12,114,200,201,0,127,201,0,0,25,200,1,12,102,200,200,1,107,201,1,200,127,200,0,0,25,201,1,12,102,201,201,2,107,200,2,201,127,201,0,0,25,200,1,12,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,91,1,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,48,114,200,201,0,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,48,102,200,200,1,107,201,1,200,127,200,0,0,141,201,109,1,25,201,201,8,25,201,201,48,102,201,201,2,107,200,2,201,127,201,0,0,141,200,109,1,25,200,200,8,25,200,200,48,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,92,1,142,201,84,1,142,202,85,1,65,201,201,202,142,202,86,1,142,203,87,1,65,202,202,203,63,201,201,202,142,202,89,1,142,203,90,1,65,202,202,203,63,201,201,202,142,202,91,1,142,203,92,1,65,202,202,203,63,200,201,202,144,200,105,1,142,202,105,1,58,200,202,0,144,200,93,1,59,202,1,0,142,201,93,1,66,200,202,201,144,200,105,1,1,200,0,0,143,200,106,1,141,201,106,1,0,200,201,0,143,200,94,1,141,200,94,1,34,200,200,16,120,200,2,0,119,0,87,0,141,201,106,1,0,200,201,0,143,200,95,1,127,200,0,0,141,201,109,1,25,201,201,8,141,202,95,1,41,202,202,2,3,201,201,202,114,200,201,0,127,201,0,0,141,200,109,1,25,200,200,8,141,202,95,1,41,202,202,2,3,200,200,202,102,200,200,1,107,201,1,200,127,200,0,0,141,201,109,1,25,201,201,8,141,202,95,1,41,202,202,2,3,201,201,202,102,201,201,2,107,200,2,201,127,201,0,0,141,200,109,1,25,200,200,8,141,202,95,1,41,202,202,2,3,200,200,202,102,200,200,3,107,201,3,200,127,201,0,0,88,200,201,0,144,200,96,1,142,201,105,1,58,200,201,0,144,200,97,1,141,201,106,1,0,200,201,0,143,200,98,1,127,200,0,0,142,201,96,1,142,202,97,1,65,201,201,202,89,200,201,0,141,201,109,1,25,201,201,8,141,200,98,1,41,200,200,2,127,202,0,0,78,202,202,0,95,201,200,202,141,202,109,1,25,202,202,8,141,200,98,1,41,200,200,2,3,202,202,200,127,200,0,0,102,200,200,1,107,202,1,200,141,200,109,1,25,200,200,8,141,202,98,1,41,202,202,2,3,200,200,202,127,202,0,0,102,202,202,2,107,200,2,202,141,202,109,1,25,202,202,8,141,200,98,1,41,200,200,2,3,202,202,200,127,200,0,0,102,200,200,3,107,202,3,200,141,202,106,1,0,200,202,0,143,200,99,1,141,202,99,1,25,200,202,1,143,200,106,1,119,0,164,255,0,200,0,0,143,200,107,1,141,202,109,1,25,200,202,8,143,200,110,1,141,202,107,1,25,200,202,64,143,200,111,1,141,200,107,1,141,202,110,1,78,202,202,0,83,200,202,0,141,200,107,1,25,202,200,1,143,202,107,1,141,200,110,1,25,202,200,1,143,202,110,1,141,202,107,1,141,200,111,1,54,202,202,200,28,188,0,0,141,202,109,1,137,202,0,0,139,0,0,0,140,3,154,2,0,0,0,0,2,200,0,0,219,0,0,0,2,201,0,0,95,112,137,0,2,202,0,0,255,9,47,15,1,203,0,0,143,203,152,2,136,204,0,0,0,203,204,0,143,203,153,2,136,203,0,0,1,204,0,2,3,203,203,204,137,203,0,0,130,203,0,0,136,204,0,0,49,203,203,204,184,188,0,0,135,203,0,0,1,203,0,0,1,204,3,0,138,1,203,204,216,188,0,0,244,188,0,0,16,189,0,0,59,4,0,0,119,0,22,0,1,203,24,0,143,203,18,2,1,203,107,255,143,203,48,2,1,203,4,0,143,203,152,2,119,0,15,0,1,203,53,0,143,203,18,2,1,203,206,251,143,203,48,2,1,203,4,0,143,203,152,2,119,0,8,0,1,203,53,0,143,203,18,2,1,203,206,251,143,203,48,2,1,203,4,0,143,203,152,2,119,0,1,0,141,203,152,2,32,203,203,4,121,203,143,14,106,98,0,4,106,163,0,100,48,203,98,163,112,189,0,0,25,204,98,1,109,0,4,204,78,204,98,0,143,204,158,1,141,203,158,1,1,205,255,0,19,203,203,205,0,204,203,0,143,204,255,1,119,0,8,0,134,204,0,0,196,92,4,0,0,0,0,0,143,204,248,1,141,203,248,1,0,204,203,0,143,204,255,1,141,204,255,1,134,32,0,0,160,107,6,0,204,0,0,0,32,204,32,0,121,204,230,255,141,204,255,1,0,22,204,0,119,0,1,0,1,203,43,0,1,204,3,0,138,22,203,204,220,189,0,0,200,189,0,0,224,189,0,0,0,203,22,0,143,203,19,2,1,203,1,0,143,203,120,2,119,0,32,0,119,0,1,0,106,71,0,4,106,78,0,100,48,204,71,78,40,190,0,0,25,203,71,1,109,0,4,203,78,99,71,0,1,204,255,0,19,204,99,204,0,203,204,0,143,203,19,2,1,204,1,0,32,205,22,45,38,205,205,1,41,205,205,1,4,203,204,205,143,203,120,2,119,0,13,0,134,114,0,0,196,92,4,0,0,0,0,0,0,203,114,0,143,203,19,2,1,205,1,0,32,204,22,45,38,204,204,1,41,204,204,1,4,203,205,204,143,203,120,2,119,0,1,0,141,204,19,2,0,203,204,0,143,203,23,2,1,203,0,0,143,203,75,2,141,203,23,2,39,203,203,32,0,121,203,0,1,203,233,43,141,204,75,2,3,125,203,204,78,131,125,0,41,204,131,24,42,204,204,24,52,204,121,204,180,190,0,0,141,203,23,2,0,204,203,0,143,204,21,2,141,203,75,2,0,204,203,0,143,204,74,2,119,0,45,0,141,204,75,2,35,147,204,7,121,147,19,0,106,154,0,4,106,164,0,100,48,204,154,164,240,190,0,0,25,203,154,1,109,0,4,203,78,183,154,0,1,204,255,0,19,204,183,204,0,203,204,0,143,203,24,2,119,0,10,0,134,197,0,0,196,92,4,0,0,0,0,0,0,203,197,0,143,203,24,2,119,0,4,0,141,204,23,2,0,203,204,0,143,203,24,2,141,204,75,2,25,203,204,1,143,203,4,1,141,203,4,1,35,203,203,8,121,203,8,0,141,204,24,2,0,203,204,0,143,203,23,2,141,204,4,1,0,203,204,0,143,203,75,2,119,0,202,255,141,204,24,2,0,203,204,0,143,203,21,2,141,204,4,1,0,203,204,0,143,203,74,2,119,0,1,0,141,203,74,2,1,205,3,0,1,209,6,0,138,203,205,209,124,246,0,0,140,191,0,0,140,191,0,0,140,191,0,0,140,191,0,0,136,246,0,0,1,205,3,0,141,206,74,2,16,204,205,206,143,204,18,1,33,204,2,0,141,206,18,1,19,204,204,206,121,204,9,0,141,206,74,2,32,204,206,8,143,204,33,1,141,204,33,1,120,204,180,13,1,204,23,0,143,204,152,2,119,0,177,13,141,206,74,2,32,204,206,0,143,204,116,1,141,204,116,1,121,204,86,0,141,206,21,2,0,204,206,0,143,204,27,2,1,204,0,0,143,204,77,2,141,206,27,2,39,206,206,32,0,204,206,0,143,204,124,1,1,206,28,51,141,205,77,2,3,204,206,205,143,204,130,1,141,205,130,1,78,204,205,0,143,204,138,1,141,204,124,1,141,205,138,1,41,205,205,24,42,205,205,24,52,204,204,205,84,192,0,0,141,205,27,2,0,204,205,0,143,204,29,2,141,205,77,2,0,204,205,0,143,204,78,2,119,0,63,0,141,205,77,2,35,204,205,2,143,204,151,1,141,204,151,1,121,204,29,0,106,204,0,4,143,204,159,1,106,204,0,100,143,204,165,1,141,204,159,1,141,205,165,1,48,204,204,205,184,192,0,0,141,205,159,1,25,205,205,1,109,0,4,205,141,204,159,1,78,205,204,0,143,205,183,1,141,204,183,1,1,206,255,0,19,204,204,206,0,205,204,0,143,205,28,2,119,0,12,0,134,205,0,0,196,92,4,0,0,0,0,0,143,205,194,1,141,204,194,1,0,205,204,0,143,205,28,2,119,0,4,0,141,204,27,2,0,205,204,0,143,205,28,2,141,204,77,2,25,205,204,1,143,205,200,1,141,205,200,1,35,205,205,3,121,205,8,0,141,204,28,2,0,205,204,0,143,205,27,2,141,204,200,1,0,205,204,0,143,205,77,2,119,0,184,255,141,204,28,2,0,205,204,0,143,205,29,2,141,204,200,1,0,205,204,0,143,205,78,2,119,0,7,0,141,204,21,2,0,205,204,0,143,205,29,2,141,204,74,2,0,205,204,0,143,205,78,2,141,205,78,2,1,209,0,0,1,207,4,0,138,205,209,207,176,193,0,0,108,193,0,0,108,193,0,0,204,243,0,0,106,38,0,100,1,207,0,0,52,207,38,207,136,193,0,0,106,39,0,4,26,209,39,1,109,0,4,209,134,40,0,0,80,88,6,0,1,209,22,0,85,40,209,0,1,207,0,0,134,209,0,0,132,184,5,0,0,207,0,0,59,4,0,0,119,0,113,13,141,206,29,2,32,41,206,48,121,41,140,3,106,42,0,4,106,43,0,100,48,206,42,43,232,193,0,0,25,204,42,1,109,0,4,204,78,44,42,0,1,204,255,0,19,204,44,204,0,47,204,0,119,0,5,0,134,45,0,0,196,92,4,0,0,0,0,0,0,47,45,0,39,204,47,32,0,46,204,0,32,204,46,120,120,204,14,0,106,181,0,100,1,204,0,0,45,204,181,204,36,194,0,0,1,204,48,0,143,204,30,2,119,0,117,3,106,182,0,4,26,206,182,1,109,0,4,206,1,206,48,0,143,206,30,2,119,0,111,3,106,48,0,4,106,49,0,100,48,206,48,49,116,194,0,0,25,204,48,1,109,0,4,204,78,50,48,0,1,206,255,0,19,206,50,206,0,204,206,0,143,204,20,2,1,204,0,0,143,204,52,2,119,0,8,0,134,51,0,0,196,92,4,0,0,0,0,0,0,204,51,0,143,204,20,2,1,204,0,0,143,204,52,2,141,204,20,2,1,206,46,0,1,207,3,0,138,204,206,207,8,195,0,0,172,194,0,0,32,195,0,0,1,76,0,0,1,79,0,0,1,206,0,0,143,206,212,1,1,206,0,0,143,206,213,1,141,207,20,2,0,206,207,0,143,206,25,2,141,207,52,2,0,206,207,0,143,206,56,2,1,206,0,0,143,206,64,2,1,206,0,0,143,206,71,2,59,206,1,0,144,206,117,2,1,206,0,0,143,206,123,2,59,206,0,0,144,206,132,2,119,0,30,0,141,207,52,2,0,206,207,0,143,206,53,2,1,206,74,0,143,206,152,2,119,0,24,0,119,0,1,0,106,52,0,4,106,53,0,100,48,204,52,53,92,195,0,0,25,206,52,1,109,0,4,206,78,54,52,0,1,204,255,0,19,204,54,204,0,206,204,0,143,206,20,2,1,206,1,0,143,206,52,2,119,0,206,255,134,55,0,0,196,92,4,0,0,0,0,0,0,206,55,0,143,206,20,2,1,206,1,0,143,206,52,2,119,0,198,255,141,206,152,2,32,206,206,74,121,206,93,0,106,56,0,4,106,57,0,100,48,206,56,57,184,195,0,0,25,204,56,1,109,0,4,204,78,58,56,0,1,206,255,0,19,206,58,206,0,204,206,0,143,204,22,2,119,0,6,0,134,59,0,0,196,92,4,0,0,0,0,0,0,204,59,0,143,204,22,2,141,204,22,2,32,60,204,48,121,60,51,0,1,65,0,0,1,66,0,0,106,61,0,4,106,62,0,100,48,204,61,62,12,196,0,0,25,206,61,1,109,0,4,206,78,63,61,0,1,206,255,0,19,206,63,206,0,69,206,0,119,0,5,0,134,64,0,0,196,92,4,0,0,0,0,0,0,69,64,0,1,206,255,255,1,204,255,255,134,67,0,0,36,111,6,0,65,66,206,204,128,204,0,0,0,68,204,0,32,70,69,48,121,70,4,0,0,65,67,0,0,66,68,0,119,0,230,255,1,76,0,0,1,79,0,0,0,204,67,0,143,204,212,1,0,204,68,0,143,204,213,1,0,204,69,0,143,204,25,2,1,204,1,0,143,204,56,2,1,204,1,0,143,204,64,2,1,204,0,0,143,204,71,2,59,204,1,0,144,204,117,2,1,204,0,0,143,204,123,2,59,204,0,0,144,204,132,2,119,0,23,0,1,76,0,0,1,79,0,0,1,204,0,0,143,204,212,1,1,204,0,0,143,204,213,1,141,206,22,2,0,204,206,0,143,204,25,2,141,206,53,2,0,204,206,0,143,204,56,2,1,204,1,0,143,204,64,2,1,204,0,0,143,204,71,2,59,204,1,0,144,204,117,2,1,204,0,0,143,204,123,2,59,204,0,0,144,204,132,2,141,204,25,2,26,72,204,48,141,204,25,2,39,204,204,32,0,26,204,0,35,204,72,10,121,204,4,0,1,204,86,0,143,204,152,2,119,0,82,0,141,204,25,2,32,73,204,46,26,204,26,97,35,204,204,6,20,204,73,204,120,204,23,0,141,204,212,1,0,106,204,0,0,107,79,0,141,204,213,1,0,109,204,0,0,110,76,0,141,206,25,2,0,204,206,0,143,204,26,2,141,206,56,2,0,204,206,0,143,204,57,2,141,206,64,2,0,204,206,0,143,204,65,2,141,206,123,2,0,204,206,0,143,204,124,2,142,206,132,2,58,204,206,0,144,204,133,2,119,0,4,1,121,73,51,0,141,204,64,2,32,74,204,0,121,74,27,0,0,204,79,0,143,204,214,1,0,204,76,0,143,204,215,1,0,204,79,0,143,204,216,1,0,204,76,0,143,204,217,1,141,206,56,2,0,204,206,0,143,204,59,2,1,204,1,0,143,204,67,2,141,206,71,2,0,204,206,0,143,204,73,2,142,206,117,2,58,204,206,0,144,204,119,2,141,206,123,2,0,204,206,0,143,204,126,2,142,206,132,2,58,204,206,0,144,204,136,2,119,0,24,0,141,204,212,1,0,106,204,0,0,107,79,0,141,204,213,1,0,109,204,0,0,110,76,0,1,204,46,0,143,204,26,2,141,206,56,2,0,204,206,0,143,204,57,2,141,206,64,2,0,204,206,0,143,204,65,2,141,206,123,2,0,204,206,0,143,204,124,2,142,206,132,2,58,204,206,0,144,204,133,2,119,0,209,0,1,204,86,0,143,204,152,2,141,204,152,2,32,204,204,86,121,204,130,0,1,204,0,0,143,204,152,2,1,204,57,0,141,206,25,2,15,75,204,206,121,75,4,0,26,207,26,87,0,204,207,0,119,0,2,0,0,204,72,0,0,206,204,0,143,206,37,2,34,77,76,0,35,80,79,8,32,81,76,0,19,206,81,80,20,206,77,206,121,206,17,0,141,206,123,2,41,206,206,4,0,82,206,0,141,204,71,2,0,206,204,0,143,206,72,2,142,204,117,2,58,206,204,0,144,206,118,2,141,204,37,2,3,206,204,82,143,206,125,2,142,204,132,2,58,206,204,0,144,206,134,2,119,0,62,0,34,83,76,0,35,84,79,14,32,85,76,0,19,206,85,84,20,206,83,206,121,206,21,0,142,206,117,2,61,204,0,0,0,0,128,61,65,86,206,204,142,204,132,2,141,206,37,2,76,206,206,0,65,206,86,206,63,87,204,206,141,204,71,2,0,206,204,0,143,206,72,2,58,206,86,0,144,206,118,2,141,204,123,2,0,206,204,0,143,206,125,2,58,206,87,0,144,206,134,2,119,0,36,0,141,206,71,2,33,88,206,0,141,206,37,2,32,206,206,0,20,206,88,206,121,206,14,0,141,204,71,2,0,206,204,0,143,206,72,2,142,204,117,2,58,206,204,0,144,206,118,2,141,204,123,2,0,206,204,0,143,206,125,2,142,204,132,2,58,206,204,0,144,206,134,2,119,0,17,0,142,206,117,2,61,204,0,0,0,0,0,63,65,89,206,204,142,204,132,2,63,90,204,89,1,204,1,0,143,204,72,2,142,206,117,2,58,204,206,0,144,204,118,2,141,206,123,2,0,204,206,0,143,204,125,2,58,204,90,0,144,204,134,2,1,204,1,0,1,206,0,0,134,91,0,0,36,111,6,0,79,76,204,206], eb + 40960);
  HEAPU8.set([128,206,0,0,0,92,206,0,141,204,212,1,0,206,204,0,143,206,214,1,141,204,213,1,0,206,204,0,143,206,215,1,0,206,91,0,143,206,216,1,0,206,92,0,143,206,217,1,1,206,1,0,143,206,59,2,141,204,64,2,0,206,204,0,143,206,67,2,141,204,72,2,0,206,204,0,143,206,73,2,142,204,118,2,58,206,204,0,144,206,119,2,141,204,125,2,0,206,204,0,143,206,126,2,142,204,134,2,58,206,204,0,144,206,136,2,106,93,0,4,106,94,0,100,48,206,93,94,20,201,0,0,25,204,93,1,109,0,4,204,78,95,93,0,141,204,217,1,0,76,204,0,141,204,216,1,0,79,204,0,141,206,214,1,0,204,206,0,143,204,212,1,141,206,215,1,0,204,206,0,143,204,213,1,1,206,255,0,19,206,95,206,0,204,206,0,143,204,25,2,141,206,59,2,0,204,206,0,143,204,56,2,141,206,67,2,0,204,206,0,143,204,64,2,141,206,73,2,0,204,206,0,143,204,71,2,142,206,119,2,58,204,206,0,144,204,117,2,141,206,126,2,0,204,206,0,143,204,123,2,142,206,136,2,58,204,206,0,144,204,132,2,119,0,250,254,134,96,0,0,196,92,4,0,0,0,0,0,141,204,217,1,0,76,204,0,141,204,216,1,0,79,204,0,141,206,214,1,0,204,206,0,143,204,212,1,141,206,215,1,0,204,206,0,143,204,213,1,0,204,96,0,143,204,25,2,141,206,59,2,0,204,206,0,143,204,56,2,141,206,67,2,0,204,206,0,143,204,64,2,141,206,73,2,0,204,206,0,143,204,71,2,142,206,119,2,58,204,206,0,144,204,117,2,141,206,126,2,0,204,206,0,143,204,123,2,142,206,136,2,58,204,206,0,144,204,132,2,119,0,216,254,141,204,57,2,32,97,204,0,121,97,32,0,106,100,0,100,1,204,0,0,52,204,100,204,196,201,0,0,106,101,0,4,26,206,101,1,109,0,4,206,32,206,2,0,121,206,6,0,1,204,0,0,134,206,0,0,132,184,5,0,0,204,0,0,119,0,12,0,1,206,0,0,52,206,100,206,12,202,0,0,106,102,0,4,26,204,102,1,109,0,4,204,141,204,65,2,32,103,204,0,120,103,3,0,26,206,102,2,109,0,4,206,141,206,120,2,76,206,206,0,58,104,206,0,59,206,0,0,65,4,104,206,119,0,84,11,141,206,65,2,32,105,206,0,125,108,105,107,106,0,0,0,125,111,105,110,109,0,0,0,34,112,110,0,35,113,107,8,32,115,110,0,19,206,115,113,20,206,112,206,121,206,30,0,0,117,107,0,0,118,110,0,141,204,124,2,0,206,204,0,143,206,128,2,141,206,128,2,41,206,206,4,0,116,206,0,1,206,1,0,1,204,0,0,134,119,0,0,36,111,6,0,117,118,206,204,128,204,0,0,0,120,204,0,34,204,120,0,32,206,120,0,35,207,119,8,19,206,206,207,20,204,204,206,121,204,6,0,0,117,119,0,0,118,120,0,0,204,116,0,143,204,128,2,119,0,236,255,0,204,116,0,143,204,127,2,119,0,4,0,141,206,124,2,0,204,206,0,143,204,127,2,141,204,26,2,39,204,204,32,0,122,204,0,32,204,122,112,121,204,36,0,134,123,0,0,180,138,3,0,0,2,0,0,128,204,0,0,0,124,204,0,32,204,123,0,2,206,0,0,0,0,0,128,13,206,124,206,19,204,204,206,121,204,22,0,32,204,2,0,121,204,7,0,1,206,0,0,134,204,0,0,132,184,5,0,0,206,0,0,59,4,0,0,119,0,16,11,106,126,0,100,1,204,0,0,45,204,126,204,80,203,0,0,1,135,0,0,1,136,0,0,119,0,22,0,106,127,0,4,26,206,127,1,109,0,4,206,1,135,0,0,1,136,0,0,119,0,16,0,0,135,123,0,0,136,124,0,119,0,13,0,106,128,0,100,1,206,0,0,45,206,128,206,144,203,0,0,1,135,0,0,1,136,0,0,119,0,6,0,106,129,0,4,26,204,129,1,109,0,4,204,1,135,0,0,1,136,0,0,1,204,2,0,135,130,1,0,108,111,204,0,128,204,0,0,0,132,204,0,1,204,224,255,1,206,255,255,134,133,0,0,36,111,6,0,130,132,204,206,128,206,0,0,0,134,206,0,134,137,0,0,36,111,6,0,133,134,135,136,128,206,0,0,0,138,206,0,141,206,127,2,32,139,206,0,121,139,7,0,141,206,120,2,76,206,206,0,58,140,206,0,59,206,0,0,65,4,140,206,119,0,218,10,1,206,0,0,141,204,48,2,4,141,206,204,1,204,0,0,15,204,204,138,32,206,138,0,16,207,141,137,19,206,206,207,20,204,204,206,121,204,17,0,134,142,0,0,80,88,6,0,1,204,34,0,85,142,204,0,141,204,120,2,76,204,204,0,58,143,204,0,62,204,0,0,255,255,255,255,255,255,239,127,65,204,143,204,62,206,0,0,255,255,255,255,255,255,239,127,65,4,204,206,119,0,192,10,141,206,48,2,26,144,206,106,34,206,144,0,41,206,206,31,42,206,206,31,15,206,138,206,34,204,144,0,41,204,204,31,42,204,204,31,13,204,138,204,16,207,137,144,19,204,204,207,20,206,206,204,121,206,17,0,134,146,0,0,80,88,6,0,1,206,34,0,85,146,206,0,141,206,120,2,76,206,206,0,58,148,206,0,62,206,0,0,0,0,0,0,0,0,16,0,65,206,148,206,62,204,0,0,0,0,0,0,0,0,16,0,65,4,206,204,119,0,162,10,1,204,255,255,141,206,127,2,15,145,204,206,121,145,60,0,0,152,137,0,0,153,138,0,141,204,127,2,0,206,204,0,143,206,130,2,142,204,133,2,58,206,204,0,144,206,140,2,142,206,140,2,61,204,0,0,0,0,0,63,74,206,206,204,12,149,206,0,141,206,130,2,41,206,206,1,0,150,206,0,142,206,140,2,59,204,255,255,63,151,206,204,142,204,140,2,126,25,149,204,151,0,0,0,142,206,140,2,63,204,206,25,144,204,141,2,1,204,255,255,1,206,255,255,134,155,0,0,36,111,6,0,152,153,204,206,128,206,0,0,0,156,206,0,1,206,255,255,38,204,149,1,20,204,204,150,47,206,206,204,188,205,0,0,0,152,155,0,0,153,156,0,38,204,149,1,20,204,204,150,40,204,204,1,0,206,204,0,143,206,130,2,142,204,141,2,58,206,204,0,144,206,140,2,119,0,217,255,0,160,155,0,0,161,156,0,38,204,149,1,20,204,204,150,40,204,204,1,0,206,204,0,143,206,129,2,142,204,141,2,58,206,204,0,144,206,139,2,119,0,9,0,0,160,137,0,0,161,138,0,141,204,127,2,0,206,204,0,143,206,129,2,142,204,133,2,58,206,204,0,144,206,139,2,141,206,48,2,34,157,206,0,1,206,32,0,1,204,0,0,141,207,48,2,41,208,157,31,42,208,208,31,134,158,0,0,112,110,6,0,206,204,207,208,128,208,0,0,0,159,208,0,134,162,0,0,36,111,6,0,160,161,158,159,128,208,0,0,0,165,208,0,141,208,18,2,16,166,162,208,34,208,165,0,32,207,165,0,19,207,207,166,20,208,208,207,121,208,11,0,34,208,162,0,121,208,5,0,1,8,0,0,1,208,127,0,143,208,152,2,119,0,9,0,0,7,162,0,1,208,125,0,143,208,152,2,119,0,5,0,141,208,18,2,0,7,208,0,1,208,125,0,143,208,152,2,141,208,152,2,32,208,208,125,121,208,14,0,34,167,7,53,121,167,5,0,0,8,7,0,1,208,127,0,143,208,152,2,119,0,8,0,141,208,120,2,76,208,208,0,58,29,208,0,0,9,7,0,58,28,29,0,59,208,0,0,144,208,16,2,141,208,152,2,32,208,208,127,121,208,17,0,1,208,84,0,4,168,208,8,59,208,1,0,134,169,0,0,204,34,5,0,208,168,0,0,141,208,120,2,76,208,208,0,58,170,208,0,134,171,0,0,156,111,6,0,169,170,0,0,0,9,8,0,58,28,170,0,58,208,171,0,144,208,16,2,34,172,9,32,142,208,139,2,59,207,0,0,70,173,208,207,141,207,129,2,38,207,207,1,0,174,207,0,32,208,174,0,19,204,173,172,19,208,208,204,38,208,208,1,141,204,129,2,3,207,208,204,143,207,131,2,32,208,174,0,19,206,173,172,19,208,208,206,121,208,4,0,59,208,0,0,58,204,208,0,119,0,3,0,142,208,139,2,58,204,208,0,58,207,204,0,144,207,142,2,141,207,131,2,77,207,207,0,65,175,28,207,142,207,16,2,63,176,207,175,142,207,142,2,65,177,28,207,63,207,177,176,142,204,16,2,64,178,207,204,59,204,0,0,70,204,178,204,120,204,5,0,134,179,0,0,80,88,6,0,1,204,34,0,85,179,204,0,134,180,0,0,192,111,6,0,178,160,0,0,58,4,180,0,119,0,227,9,141,207,29,2,0,204,207,0,143,204,30,2,141,207,48,2,141,208,18,2,3,204,207,208,143,204,122,2,141,204,30,2,0,10,204,0,1,204,0,0,143,204,54,2,1,204,46,0,1,208,3,0,138,10,204,208,88,208,0,0,44,208,0,0,112,208,0,0,0,15,10,0,1,204,0,0,143,204,219,1,1,204,0,0,143,204,220,1,141,208,54,2,0,204,208,0,143,204,58,2,1,204,0,0,143,204,66,2,119,0,28,0,141,208,54,2,0,204,208,0,143,204,55,2,1,204,138,0,143,204,152,2,119,0,22,0,119,0,1,0,106,184,0,4,106,185,0,100,48,204,184,185,168,208,0,0,25,208,184,1,109,0,4,208,78,186,184,0,1,208,255,0,19,208,186,208,0,10,208,0,1,208,1,0,143,208,54,2,119,0,220,255,134,187,0,0,196,92,4,0,0,0,0,0,0,10,187,0,1,208,1,0,143,208,54,2,119,0,213,255,141,208,152,2,1,204,138,0,45,208,208,204,244,209,0,0,106,188,0,4,106,189,0,100,48,208,188,189,0,209,0,0,25,204,188,1,109,0,4,204,78,190,188,0,1,204,255,0,19,204,190,204,0,12,204,0,119,0,5,0,134,191,0,0,196,92,4,0,0,0,0,0,0,12,191,0,32,192,12,48,121,192,46,0,1,193,0,0,1,194,0,0,1,204,255,255,1,208,255,255,134,195,0,0,36,111,6,0,193,194,204,208,128,208,0,0,0,196,208,0,106,198,0,4,106,199,0,100,48,208,198,199,112,209,0,0,25,204,198,1,109,0,4,204,78,204,198,0,143,204,0,1,141,204,0,1,1,208,255,0,19,204,204,208,0,11,204,0,119,0,7,0,134,204,0,0,196,92,4,0,0,0,0,0,143,204,1,1,141,204,1,1,0,11,204,0,32,204,11,48,143,204,2,1,141,204,2,1,121,204,4,0,0,193,195,0,0,194,196,0,119,0,224,255,0,15,11,0,0,204,195,0,143,204,219,1,0,204,196,0,143,204,220,1,1,204,1,0,143,204,58,2,1,204,1,0,143,204,66,2,119,0,11,0,0,15,12,0,1,204,0,0,143,204,219,1,1,204,0,0,143,204,220,1,141,208,55,2,0,204,208,0,143,204,58,2,1,204,1,0,143,204,66,2,141,204,153,2,1,208,0,0,85,204,208,0,26,208,15,48,143,208,3,1,32,208,15,46,143,208,5,1,141,208,5,1,141,204,3,1,35,204,204,10,20,208,208,204,121,208,114,1,0,18,15,0,1,208,0,0,143,208,7,1,1,208,0,0,143,208,8,1,141,204,5,1,0,208,204,0,143,208,221,1,141,204,3,1,0,208,204,0,143,208,222,1,141,204,219,1,0,208,204,0,143,208,223,1,141,204,220,1,0,208,204,0,143,208,224,1,141,204,58,2,0,208,204,0,143,208,61,2,141,204,66,2,0,208,204,0,143,208,69,2,1,208,0,0,143,208,82,2,1,208,0,0,143,208,90,2,1,208,0,0,143,208,103,2,141,208,221,1,121,208,58,0,141,204,69,2,32,208,204,0,143,208,36,2,141,208,36,2,121,208,28,0,141,204,7,1,0,208,204,0,143,208,225,1,141,204,8,1,0,208,204,0,143,208,226,1,141,204,7,1,0,208,204,0,143,208,227,1,141,204,8,1,0,208,204,0,143,208,228,1,141,204,61,2,0,208,204,0,143,208,63,2,1,208,1,0,143,208,70,2,141,204,82,2,0,208,204,0,143,208,87,2,141,204,90,2,0,208,204,0,143,208,95,2,141,204,103,2,0,208,204,0,143,208,108,2,119,0,180,0,141,204,223,1,0,208,204,0,143,208,229,1,141,204,224,1,0,208,204,0,143,208,230,1,141,204,7,1,0,208,204,0,143,208,231,1,141,204,8,1,0,208,204,0,143,208,232,1,141,204,61,2,0,208,204,0,143,208,62,2,141,204,82,2,0,208,204,0,143,208,83,2,141,204,90,2,0,208,204,0,143,208,91,2,141,204,103,2,0,208,204,0,143,208,104,2,119,0,255,0,141,204,90,2,34,208,204,125,143,208,6,1,141,204,7,1,141,207,8,1,1,206,1,0,1,209,0,0,134,208,0,0,36,111,6,0,204,207,206,209,143,208,9,1,128,209,0,0,0,208,209,0,143,208,10,1,33,208,18,48,143,208,11,1,141,208,6,1,120,208,68,0,141,208,11,1,120,208,29,0,141,209,223,1,0,208,209,0,143,208,225,1,141,209,224,1,0,208,209,0,143,208,226,1,141,209,9,1,0,208,209,0,143,208,227,1,141,209,10,1,0,208,209,0,143,208,228,1,141,209,61,2,0,208,209,0,143,208,63,2,141,209,69,2,0,208,209,0,143,208,70,2,141,209,82,2,0,208,209,0,143,208,87,2,141,209,90,2,0,208,209,0,143,208,95,2,141,209,103,2,0,208,209,0,143,208,108,2,119,0,107,0,141,209,153,2,1,206,240,1,94,208,209,206,143,208,17,1,141,208,153,2,1,209,240,1,141,206,17,1,39,206,206,1,97,208,209,206,141,209,223,1,0,206,209,0,143,206,225,1,141,209,224,1,0,206,209,0,143,206,226,1,141,209,9,1,0,206,209,0,143,206,227,1,141,209,10,1,0,206,209,0,143,206,228,1,141,209,61,2,0,206,209,0,143,206,63,2,141,209,69,2,0,206,209,0,143,206,70,2,141,209,82,2,0,206,209,0,143,206,87,2,141,209,90,2,0,206,209,0,143,206,95,2,141,209,103,2,0,206,209,0,143,206,108,2,119,0,70,0,141,206,11,1,141,209,9,1,141,208,103,2,125,23,206,209,208,0,0,0,141,209,82,2,32,208,209,0,143,208,12,1,141,209,153,2,141,206,90,2,41,206,206,2,3,208,209,206,143,208,13,1,141,208,12,1,121,208,5,0,141,206,222,1,0,208,206,0,143,208,121,2,119,0,11,0,141,206,13,1,82,208,206,0,143,208,14,1,26,208,18,48,143,208,15,1,141,206,15,1,141,209,14,1,27,209,209,10,3,208,206,209,143,208,121,2,141,208,13,1,141,209,121,2,85,208,209,0,141,208,82,2,25,209,208,1,143,209,16,1,141,209,16,1,32,209,209,9,38,209,209,1,141,208,90,2,3,20,209,208,141,208,16,1,32,208,208,9,1,209,0,0,141,206,16,1,125,13,208,209,206,0,0,0,141,209,223,1,0,206,209,0,143,206,225,1,141,209,224,1,0,206,209,0,143,206,226,1,141,209,9,1,0,206,209,0,143,206,227,1,141,209,10,1,0,206,209,0,143,206,228,1,1,206,1,0,143,206,63,2,141,209,69,2,0,206,209,0,143,206,70,2,0,206,13,0,143,206,87,2,0,206,20,0,143,206,95,2,0,206,23,0,143,206,108,2,106,206,0,4,143,206,19,1,106,206,0,100,143,206,20,1,141,206,19,1,141,209,20,1,48,206,206,209,56,214,0,0,141,209,19,1,25,209,209,1,109,0,4,209,141,206,19,1,78,209,206,0,143,209,21,1,141,209,21,1,1,206,255,0,19,209,209,206,0,16,209,0,119,0,7,0,134,209,0,0,196,92,4,0,0,0,0,0,143,209,22,1,141,209,22,1,0,16,209,0,26,209,16,48,143,209,23,1,32,209,16,46,143,209,24,1,141,209,24,1,141,206,23,1,35,206,206,10,20,209,209,206,121,209,36,0,0,18,16,0,141,206,227,1,0,209,206,0,143,209,7,1,141,206,228,1,0,209,206,0,143,209,8,1,141,206,24,1,0,209,206,0,143,209,221,1,141,206,23,1,0,209,206,0,143,209,222,1,141,206,225,1,0,209,206,0,143,209,223,1,141,206,226,1,0,209,206,0,143,209,224,1,141,206,63,2,0,209,206,0,143,209,61,2,141,206,70,2,0,209,206,0,143,209,69,2,141,206,87,2,0,209,206,0,143,209,82,2,141,206,95,2,0,209,206,0,143,209,90,2,141,206,108,2,0,209,206,0,143,209,103,2,119,0,231,254,0,17,16,0,141,206,225,1,0,209,206,0,143,209,26,1,141,206,227,1,0,209,206,0,143,209,27,1,141,206,226,1,0,209,206,0,143,209,29,1,141,206,228,1,0,209,206,0,143,209,30,1,141,206,63,2,0,209,206,0,143,209,60,2,141,206,70,2,0,209,206,0,143,209,68,2,141,206,87,2,0,209,206,0,143,209,81,2,141,206,95,2,0,209,206,0,143,209,89,2,141,206,108,2,0,209,206,0,143,209,102,2,1,209,161,0,143,209,152,2,119,0,53,0,141,206,231,1,0,209,206,0,143,209,233,1,141,206,232,1,0,209,206,0,143,209,234,1,141,206,229,1,0,209,206,0,143,209,235,1,141,206,230,1,0,209,206,0,143,209,236,1,141,206,62,2,33,209,206,0,143,209,237,1,141,206,83,2,0,209,206,0,143,209,86,2,141,206,91,2,0,209,206,0,143,209,94,2,141,206,104,2,0,209,206,0,143,209,107,2,1,209,169,0,143,209,152,2,119,0,26,0,0,17,15,0,141,206,219,1,0,209,206,0,143,209,26,1,1,209,0,0,143,209,27,1,141,206,220,1,0,209,206,0,143,209,29,1,1,209,0,0,143,209,30,1,141,206,58,2,0,209,206,0,143,209,60,2,141,206,66,2,0,209,206,0,143,209,68,2,1,209,0,0,143,209,81,2,1,209,0,0,143,209,89,2,1,209,0,0,143,209,102,2,1,209,161,0,143,209,152,2,141,209,152,2,1,206,161,0,45,209,209,206,0,219,0,0,141,206,68,2,32,209,206,0,143,209,25,1,141,206,25,1,141,208,27,1,141,207,26,1,125,209,206,208,207,0,0,0,143,209,28,1,141,207,25,1,141,208,30,1,141,206,29,1,125,209,207,208,206,0,0,0,143,209,31,1,141,206,60,2,33,209,206,0,143,209,32,1,39,206,17,32,0,209,206,0,143,209,34,1,141,209,34,1,32,209,209,101,141,206,32,1,19,209,209,206,120,209,60,0,1,206,255,255,15,209,206,17,143,209,44,1,141,209,44,1,121,209,28,0,141,206,27,1,0,209,206,0,143,209,233,1,141,206,30,1,0,209,206,0,143,209,234,1,141,206,28,1,0,209,206,0,143,209,235,1,141,206,31,1,0,209,206,0,143,209,236,1,141,206,32,1,0,209,206,0,143,209,237,1,141,206,81,2,0,209,206,0,143,209,86,2,141,206,89,2,0,209,206,0,143,209,94,2,141,206,102,2,0,209,206,0,143,209,107,2,1,209,169,0,143,209,152,2,119,0,112,0,141,206,27,1,0,209,206,0,143,209,238,1,141,206,30,1,0,209,206,0,143,209,239,1,141,206,32,1,0,209,206,0,143,209,240,1,141,206,28,1,0,209,206,0,143,209,241,1,141,206,31,1,0,209,206,0,143,209,242,1,141,206,81,2,0,209,206,0,143,209,85,2,141,206,89,2,0,209,206,0,143,209,93,2,141,206,102,2,0,209,206,0,143,209,106,2,1,209,171,0,143,209,152,2,119,0,85,0,134,209,0,0,180,138,3,0,0,2,0,0,143,209,35,1,128,206,0,0,0,209,206,0,143,209,36,1,141,209,35,1,32,209,209,0,141,206,36,1,2,208,0,0,0,0,0,128,13,206,206,208,19,209,209,206,121,209,30,0,32,209,2,0,121,209,7,0,1,206,0,0,134,209,0,0,132,184,5,0,0,206,0,0,59,5,0,0,119,0,62,0,106,209,0,100,143,209,37,1,141,209,37,1,1,206,0,0,45,209,209,206,56,218,0,0,1,209,0,0,143,209,40,1,1,209,0,0,143,209,41,1,119,0,17,0,106,209,0,4,143,209,39,1,141,206,39,1,26,206,206,1,109,0,4,206,1,206,0,0,143,206,40,1,1,206,0,0,143,206,41,1,119,0,7,0,141,209,35,1,0,206,209,0,143,206,40,1,141,209,36,1,0,206,209,0,143,206,41,1,141,209,40,1,141,208,41,1,141,207,28,1,141,204,31,1,134,206,0,0,36,111,6,0,209,208,207,204,143,206,42,1,128,204,0,0,0,206,204,0,143,206,43,1,141,204,42,1,0,206,204,0,143,206,50,1,141,204,27,1,0,206,204,0,143,206,52,1,141,204,43,1,0,206,204,0,143,206,53,1,141,204,30,1,0,206,204,0,143,206,56,1,141,204,81,2,0,206,204,0,143,206,84,2,141,204,89,2,0,206,204,0,143,206,92,2,141,204,102,2,0,206,204,0,143,206,105,2,1,206,173,0,143,206,152,2,141,206,152,2,1,204,169,0,45,206,206,204,24,220,0,0,106,206,0,100,143,206,45,1,141,206,45,1,1,204,0,0,45,206,206,204,148,219,0,0,141,204,233,1,0,206,204,0,143,206,238,1,141,204,234,1,0,206,204,0,143,206,239,1,141,204,237,1,0,206,204,0,143,206,240,1,141,204,235,1,0,206,204,0,143,206,241,1,141,204,236,1,0,206,204,0,143,206,242,1,141,204,86,2,0,206,204,0,143,206,85,2,141,204,94,2,0,206,204,0,143,206,93,2,141,204,107,2,0,206,204,0,143,206,106,2,1,206,171,0,143,206,152,2,119,0,34,0,106,206,0,4,143,206,46,1,141,204,46,1,26,204,204,1,109,0,4,204,141,204,237,1,121,204,25,0,141,206,235,1,0,204,206,0,143,204,50,1,141,206,233,1,0,204,206,0,143,204,52,1,141,206,236,1,0,204,206,0,143,204,53,1,141,206,234,1,0,204,206,0,143,204,56,1,141,206,86,2,0,204,206,0,143,204,84,2,141,206,94,2,0,204,206,0,143,204,92,2,141,206,107,2,0,204,206,0,143,204,105,2,1,204,173,0,143,204,152,2,119,0,3,0,1,204,172,0,143,204,152,2,141,204,152,2,1,206,171,0,45,204,204,206,152,220,0,0,141,204,240,1,121,204,25,0,141,206,241,1,0,204,206,0,143,204,50,1,141,206,238,1,0,204,206,0,143,204,52,1,141,206,242,1,0,204,206,0,143,204,53,1,141,206,239,1,0,204,206,0,143,204,56,1,141,206,85,2,0,204,206,0,143,204,84,2,141,206,93,2,0,204,206,0,143,204,92,2,141,206,106,2,0,204,206,0,143,204,105,2,1,204,173,0,143,204,152,2,119,0,3,0,1,204,172,0,143,204,152,2,141,204,152,2,1,206,172,0,45,204,204,206,216,220,0,0,134,204,0,0,80,88,6,0,143,204,47,1,141,204,47,1,1,206,22,0,85,204,206,0,1,204,0,0,134,206,0,0,132,184,5,0,0,204,0,0,59,5,0,0,119,0,188,5,141,206,152,2,1,204,173,0,45,206,206,204,196,243,0,0,141,204,153,2,82,206,204,0,143,206,48,1,141,206,48,1,32,206,206,0,121,206,9,0,141,204,120,2,76,204,204,0,58,206,204,0,144,206,49,1,142,206,49,1,59,204,0,0,65,5,206,204,119,0,170,5,141,206,50,1,141,207,52,1,13,204,206,207,143,204,51,1,141,207,53,1,141,206,56,1,13,204,207,206,143,204,55,1,141,206,56,1,34,204,206,0,143,204,57,1,141,206,52,1,35,204,206,10,143,204,58,1,141,206,56,1,32,204,206,0,143,204,59,1,141,204,57,1,141,206,59,1,141,207,58,1,19,206,206,207,20,204,204,206,141,206,51,1,141,207,55,1,19,206,206,207,19,204,204,206,121,204,24,0,1,206,30,0,141,207,18,2,16,204,206,207,143,204,60,1,141,207,48,1,141,206,18,2,24,207,207,206,0,204,207,0,143,204,61,1,141,204,60,1,141,207,61,1,32,207,207,0,20,204,204,207,121,204,10,0,141,207,120,2,76,207,207,0,58,204,207,0,144,204,62,1,142,204,62,1,141,207,48,1,77,207,207,0,65,5,204,207,119,0,120,5,141,204,48,2,28,204,204,254,38,204,204,255,0,207,204,0,143,207,63,1,141,204,63,1,34,204,204,0,41,204,204,31,42,204,204,31,141,206,53,1,15,207,204,206,143,207,64,1,141,206,63,1,141,204,50,1,16,207,206,204,143,207,65,1,141,204,53,1,141,206,63,1,34,206,206,0,41,206,206,31,42,206,206,31,13,207,204,206,143,207,66,1,141,207,64,1,141,206,66,1,141,204,65,1,19,206,206,204,20,207,207,206,121,207,21,0,134,207,0,0,80,88,6,0,143,207,67,1,141,207,67,1,1,206,34,0,85,207,206,0,141,207,120,2,76,207,207,0,58,206,207,0,144,206,68,1,142,206,68,1,62,207,0,0,255,255,255,255,255,255,239,127,65,206,206,207,62,207,0,0,255,255,255,255,255,255,239,127,65,5,206,207,119,0,71,5,141,206,48,2,26,207,206,106,143,207,69,1,141,206,53,1,141,204,69,1,34,204,204,0,41,204,204,31,42,204,204,31,15,207,206,204,143,207,70,1,141,204,50,1,141,206,69,1,16,207,204,206,143,207,72,1,141,206,53,1,141,204,69,1,34,204,204,0,41,204,204,31,42,204,204,31,13,207,206,204,143,207,73,1,141,207,70,1,141,204,73,1,141,206,72,1,19,204,204,206,20,207,207,204,121,207,21,0,134,207,0,0,80,88,6,0,143,207,74,1,141,207,74,1,1,204,34,0,85,207,204,0,141,207,120,2,76,207,207,0,58,204,207,0,144,204,75,1,142,204,75,1,62,207,0,0,0,0,0,0,0,0,16,0,65,204,204,207,62,207,0,0,0,0,0,0,0,0,16,0,65,5,204,207,119,0,24,5,141,204,84,2,32,207,204,0,143,207,76,1,141,207,76,1,121,207,5,0,141,204,92,2,0,207,204,0,143,207,96,2,119,0,43,0,141,204,84,2,34,207,204,9,143,207,77,1,141,207,77,1,121,207,32,0,141,204,153,2,141,206,92,2,41,206,206,2,3,207,204,206,143,207,79,1,141,207,79,1,82,30,207,0,0,207,30,0,143,207,81,1,141,206,84,2,0,207,206,0,143,207,88,2,141,206,81,1,27,207,206,10,143,207,80,1,141,206,88,2,25,207,206,1,143,207,82,1,141,207,82,1,32,207,207,9,120,207,8,0,141,206,80,1,0,207,206,0,143,207,81,1,141,206,82,1,0,207,206,0,143,207,88,2,119,0,241,255,141,207,79,1,141,206,80,1,85,207,206,0,141,207,92,2,25,206,207,1,143,206,83,1,141,207,83,1,0,206,207,0,143,206,96,2,141,207,105,2,34,206,207,9,143,206,84,1,141,206,84,1,121,206,94,0,141,207,105,2,141,204,50,1,17,206,207,204,143,206,85,1,141,204,50,1,34,206,204,18,143,206,86,1,141,206,85,1,141,204,86,1,19,206,206,204,121,206,83,0,141,204,50,1,32,206,204,9,143,206,87,1,141,206,87,1,121,206,13,0,141,204,120,2,76,204,204,0,58,206,204,0,144,206,88,1,141,204,153,2,82,206,204,0,143,206,89,1,142,206,88,1,141,204,89,1,77,204,204,0,65,5,206,204,119,0,196,4,141,206,50,1,34,204,206,9,143,204,90,1,141,204,90,1,121,204,25,0,141,206,120,2,76,206,206,0,58,204,206,0,144,204,91,1,141,206,153,2,82,204,206,0,143,204,92,1,1,206,8,0,141,207,50,1,4,204,206,207,143,204,93,1,1,207,96,6,141,206,93,1,41,206,206,2,94,204,207,206,143,204,95,1,142,204,91,1,141,207,92,1,77,207,207,0,65,204,204,207,141,207,95,1,76,207,207,0,66,5,204,207,119,0,167,4,141,207,18,2,25,24,207,27,141,204,50,1,27,207,204,253,143,207,96,1,141,207,153,2,82,27,207,0,1,207,30,0,141,204,96,1,3,204,24,204,15,207,207,204,141,204,96,1,3,204,24,204,24,204,27,204,32,204,204,0,20,207,207,204,121,207,20,0,141,204,120,2,76,204,204,0,58,207,204,0,144,207,97,1,141,204,50,1,26,207,204,10,143,207,99,1,1,204,96,6,141,206,99,1,41,206,206,2,94,207,204,206,143,207,100,1,142,207,97,1,77,204,27,0,65,207,207,204,141,204,100,1,76,204,204,0,65,5,207,204,119,0,131,4,141,207,50,1,30,207,207,9,38,207,207,255,0,204,207,0,143,204,101,1,141,204,101,1,32,204,204,0,121,204,12,0,1,204,0,0,143,204,8,2,1,204,0,0,143,204,41,2,141,207,50,1,0,204,207,0,143,204,112,2,141,207,96,2,0,204,207,0,143,204,145,2,119,0,174,0,1,207,255,255,141,206,50,1,15,204,207,206,143,204,102,1,141,207,102,1,121,207,4,0,141,207,101,1,0,206,207,0,119,0,4,0,141,207,101,1,25,207,207,9,0,206,207,0,0,204,206,0,143,204,104,1,1,206,96,6,1,207,8,0,141,208,104,1,4,207,207,208,41,207,207,2,94,204,206,207,143,204,105,1,141,206,96,2,32,204,206,0,143,204,106,1,141,204,106,1,121,204,9,0,1,204,0,0,143,204,5,2,141,206,50,1,0,204,206,0,143,204,109,2,1,204,0,0,143,204,143,2,119,0,123,0,1,204,0,0,143,204,6,2,1,204,0,0,143,204,31,2,1,204,0,0,143,204,97,2,141,206,50,1,0,204,206,0,143,204,110,2,141,206,153,2,141,207,97,2,41,207,207,2,3,204,206,207,143,204,107,1,141,207,107,1,82,204,207,0,143,204,108,1,141,207,108,1,141,206,105,1,7,207,207,206,38,207,207,255,141,206,31,2,3,204,207,206,143,204,109,1,141,204,107,1,141,206,109,1,85,204,206,0,141,204,108,1,141,207,105,1,9,204,204,207,38,204,204,255,2,207,0,0,0,202,154,59,141,208,105,1,6,207,207,208,38,207,207,255,5,206,204,207,143,206,110,1,141,207,97,2,141,204,6,2,13,206,207,204,143,206,111,1,141,204,97,2,25,206,204,1,143,206,112,1,141,204,110,2,26,206,204,9,143,206,113,1,141,204,111,1,141,207,109,1,32,207,207,0,19,204,204,207,141,207,113,1,141,208,110,2,125,206,204,207,208,0,0,0,143,206,111,2,141,207,111,1,141,204,109,1,32,204,204,0,19,207,207,204,121,207,5,0,141,207,112,1,38,207,207,127,0,208,207,0,119,0,3,0,141,207,6,2,0,208,207,0,0,206,208,0,143,206,7,2,141,208,112,1,141,207,96,2,13,206,208,207,143,206,114,1,141,206,114,1,120,206,14,0,141,207,7,2,0,206,207,0,143,206,6,2,141,207,110,1,0,206,207,0,143,206,31,2,141,207,112,1,0,206,207,0,143,206,97,2,141,207,111,2,0,206,207,0,143,206,110,2,119,0,177,255,141,206,110,1,32,206,206,0,121,206,11,0,141,207,7,2,0,206,207,0,143,206,5,2,141,207,111,2,0,206,207,0,143,206,109,2,141,207,96,2,0,206,207,0,143,206,143,2,119,0,21,0,141,207,96,2,25,206,207,1,143,206,115,1,141,207,153,2,141,208,96,2,41,208,208,2,3,206,207,208,143,206,117,1,141,206,117,1,141,208,110,1,85,206,208,0,141,206,7,2,0,208,206,0,143,208,5,2,141,206,111,2,0,208,206,0,143,208,109,2,141,206,115,1,0,208,206,0,143,208,143,2,1,206,9,0,141,207,104,1,4,206,206,207,141,207,109,2,3,208,206,207,143,208,118,1,141,207,5,2,0,208,207,0,143,208,8,2,1,208,0,0,143,208,41,2,141,207,118,1,0,208,207,0,143,208,112,2,141,207,143,2,0,208,207,0,143,208,145,2,141,207,112,2,34,208,207,18,143,208,119,1,141,207,112,2,32,208,207,18,143,208,120,1,141,207,153,2,141,206,8,2,41,206,206,2,3,208,207,206,143,208,121,1,141,206,41,2,0,208,206,0,143,208,40,2,141,206,145,2,0,208,206,0,143,208,144,2,141,208,119,1,120,208,34,0,141,208,120,1,120,208,14,0,141,206,8,2,0,208,206,0,143,208,12,2,141,206,40,2,0,208,206,0,143,208,44,2,141,206,112,2,0,208,206,0,143,208,114,2,141,206,144,2,0,208,206,0,143,208,149,2,119,0,227,0,141,206,121,1,82,208,206,0,143,208,122,1,141,208,122,1,55,208,208,201,140,229,0,0,141,206,8,2,0,208,206,0,143,208,12,2,141,206,40,2,0,208,206,0,143,208,44,2,1,208,18,0,143,208,114,2,141,206,144,2,0,208,206,0,143,208,149,2,119,0,209,0,141,206,144,2,25,208,206,127,143,208,123,1,1,208,0,0,143,208,32,2,141,206,123,1,0,208,206,0,143,208,99,2,141,206,144,2,0,208,206,0,143,208,146,2,141,206,99,2,38,206,206,127,0,208,206,0,143,208,98,2,141,206,153,2,141,207,98,2,41,207,207,2,94,208,206,207,143,208,125,1,141,206,125,1,1,207,0,0,1,204,29,0,135,208,1,0,206,207,204,0,143,208,126,1,128,204,0,0,0,208,204,0,143,208,127,1,141,204,126,1,141,207,127,1,141,206,32,2,1,209,0,0,134,208,0,0,36,111,6,0,204,207,206,209,143,208,128,1,128,209,0,0,0,208,209,0,143,208,129,1,1,208,0,0,141,209,129,1,16,208,208,209,141,209,129,1,32,209,209,0,2,206,0,0,0,202,154,59,141,207,128,1,16,206,206,207,19,209,209,206,20,208,208,209,121,208,31,0,141,209,128,1,141,206,129,1,2,207,0,0,0,202,154,59,1,204,0,0,134,208,0,0,4,111,6,0,209,206,207,204,143,208,131,1,128,204,0,0,0,208,204,0,143,208,132,1,141,204,128,1,141,207,129,1,2,206,0,0,0,202,154,59,1,209,0,0,134,208,0,0,228,59,6,0,204,207,206,209,143,208,133,1,128,209,0,0,0,208,209,0,143,208,134,1,141,208,133,1,0,31,208,0,141,209,131,1,0,208,209,0,143,208,33,2,119,0,5,0,141,208,128,1,0,31,208,0,1,208,0,0,143,208,33,2,141,208,153,2,141,209,98,2,41,209,209,2,97,208,209,31,141,208,146,2,25,209,208,127,143,209,135,1,141,208,98,2,141,206,8,2,13,209,208,206,143,209,136,1,32,209,31,0,143,209,137,1,141,206,137,1,141,208,98,2,141,207,146,2,125,209,206,208,207,0,0,0,143,209,100,2,141,207,98,2,141,208,135,1,38,208,208,127,14,207,207,208,141,208,136,1,20,207,207,208,141,208,146,2,141,206,100,2,125,209,207,208,206,0,0,0,143,209,147,2,141,209,136,1,121,209,5,0,141,206,33,2,0,209,206,0,143,209,34,2,119,0,11,0,141,206,33,2,0,209,206,0,143,209,32,2,141,206,98,2,26,209,206,1,143,209,99,2,141,206,147,2,0,209,206,0,143,209,146,2,119,0,136,255,141,206,40,2,26,209,206,29,143,209,139,1,141,209,34,2,32,209,209,0,121,209,8,0,141,206,139,1,0,209,206,0,143,209,40,2,141,206,147,2,0,209,206,0,143,209,144,2,119,0,77,255,141,206,112,2,25,209,206,9,143,209,140,1,141,206,8,2,25,209,206,127,143,209,141,1,141,209,141,1,38,209,209,127,141,206,147,2,45,209,209,206,112,232,0,0,141,206,153,2,141,208,147,2,25,208,208,127,38,208,208,127,41,208,208,2,94,209,206,208,143,209,142,1,141,206,153,2,141,208,147,2,25,208,208,126,38,208,208,127,41,208,208,2,94,209,206,208,143,209,143,1,141,209,153,2,141,206,147,2,25,206,206,126,38,206,206,127,41,206,206,2,141,208,143,1,141,207,142,1,20,208,208,207,97,209,206,208,141,206,147,2,25,206,206,127,38,206,206,127,0,208,206,0,143,208,148,2,119,0,4,0,141,206,147,2,0,208,206,0,143,208,148,2,141,208,153,2,141,206,141,1,38,206,206,127,41,206,206,2,141,209,34,2,97,208,206,209,141,206,141,1,38,206,206,127,0,209,206,0,143,209,8,2,141,206,139,1,0,209,206,0,143,209,41,2,141,206,140,1,0,209,206,0,143,209,112,2,141,206,148,2,0,209,206,0,143,209,145,2,119,0,253,254,141,206,149,2,25,209,206,1,143,209,163,1,141,206,149,2,25,209,206,127,143,209,164,1,141,206,12,2,0,209,206,0,143,209,13,2,141,206,44,2,0,209,206,0,143,209,45,2,141,206,114,2,0,209,206,0,143,209,113,2,141,206,113,2,32,209,206,18,143,209,166,1,1,206,27,0,141,208,113,2,15,209,206,208,143,209,167,1,141,209,167,1,1,208,9,0,1,206,1,0,125,14,209,208,206,0,0,0,141,208,13,2,0,206,208,0,143,206,9,2,141,208,45,2,0,206,208,0,143,206,42,2,141,208,9,2,38,208,208,127,0,206,208,0,143,206,144,1,141,208,144,1,141,209,149,2,13,206,208,209,143,206,145,1,141,206,145,1,121,206,4,0,1,206,219,0,143,206,152,2,119,0,59,0,141,209,153,2,141,208,144,1,41,208,208,2,94,206,209,208,143,206,146,1,141,206,146,1,48,206,206,201,176,233,0,0,1,206,219,0,143,206,152,2,119,0,48,0,141,206,146,1,55,206,201,206,108,234,0,0,141,209,9,2,25,206,209,1,143,206,147,1,141,209,147,1,38,209,209,127,141,208,149,2,13,206,209,208,143,206,148,1,141,206,148,1,121,206,4,0,1,206,219,0,143,206,152,2,119,0,32,0,141,208,153,2,141,209,147,1,38,209,209,127,41,209,209,2,94,206,208,209,143,206,211,1,141,206,211,1,48,206,206,202,32,234,0,0,1,206,219,0,143,206,152,2,119,0,20,0,141,206,211,1,16,206,202,206,141,208,166,1,40,208,208,1,20,206,206,208,120,206,14,0,141,208,144,1,0,206,208,0,143,206,170,1,141,208,9,2,0,206,208,0,143,206,11,2,141,208,42,2,0,206,208,0,143,206,43,2,141,208,149,2,0,206,208,0,143,206,151,2,119,0,185,0,141,206,152,2,45,206,206,200,148,234,0,0,1,206,0,0,143,206,152,2,141,206,166,1,121,206,4,0,1,206,220,0,143,206,152,2,119,0,175,0,141,208,42,2,3,206,208,14,143,206,149,1,141,208,9,2,141,209,149,2,13,206,208,209,143,206,150,1,141,206,150,1,121,206,8,0,141,209,149,2,0,206,209,0,143,206,9,2,141,209,149,1,0,206,209,0,143,206,42,2,119,0,160,255,141,209,9,2,0,206,209,0,143,206,10,2,119,0,1,0,141,209,10,2,0,206,209,0,143,206,14,2,1,206,0,0,143,206,35,2,141,209,10,2,0,206,209,0,143,206,101,2,141,209,113,2,0,206,209,0,143,206,115,2,141,209,153,2,141,208,101,2,41,208,208,2,3,206,209,208,143,206,152,1,141,208,152,1,82,206,208,0,143,206,153,1,141,208,153,1,24,208,208,14,141,209,35,2,3,206,208,209,143,206,154,1,141,206,152,1,141,209,154,1,85,206,209,0,141,206,153,1,1,208,1,0,22,208,208,14,26,208,208,1,19,206,206,208,2,208,0,0,0,202,154,59,24,208,208,14,5,209,206,208,143,209,155,1,141,208,101,2,141,206,14,2,13,209,208,206,143,209,156,1,141,206,101,2,25,209,206,1,143,209,157,1,141,206,115,2,26,209,206,9,143,209,160,1,141,206,156,1,141,208,154,1,32,208,208,0,19,206,206,208,141,208,160,1,141,207,115,2,125,209,206,208,207,0,0,0,143,209,116,2,141,208,156,1,141,206,154,1,32,206,206,0,19,208,208,206,121,208,5,0,141,208,157,1,38,208,208,127,0,207,208,0,119,0,3,0,141,208,14,2,0,207,208,0,0,209,207,0,143,209,15,2,141,207,157,1,38,207,207,127,141,208,149,2,13,209,207,208,143,209,161,1,141,209,161,1,120,209,15,0,141,208,15,2,0,209,208,0,143,209,14,2,141,208,155,1,0,209,208,0,143,209,35,2,141,208,157,1,38,208,208,127,0,209,208,0,143,209,101,2,141,208,116,2,0,209,208,0,143,209,115,2,119,0,178,255,141,209,155,1,32,209,209,0,121,209,11,0,141,208,15,2,0,209,208,0,143,209,13,2,141,208,149,1,0,209,208,0,143,209,45,2,141,208,116,2,0,209,208,0,143,209,113,2,119,0,35,255,141,209,163,1,38,209,209,127,141,208,15,2,52,209,209,208,152,236,0,0,119,0,24,0,141,208,153,2,141,207,164,1,38,207,207,127,41,207,207,2,94,209,208,207,143,209,168,1,141,209,153,2,141,208,164,1,38,208,208,127,41,208,208,2,141,207,168,1,39,207,207,1,97,209,208,207,141,208,15,2,0,207,208,0,143,207,13,2,141,208,149,1,0,207,208,0,143,207,45,2,141,208,116,2,0,207,208,0,143,207,113,2,119,0,6,255,141,208,153,2,141,209,149,2,41,209,209,2,3,207,208,209,143,207,162,1,141,207,162,1,141,209,155,1,85,207,209,0,141,207,15,2,0,209,207,0,143,209,12,2,141,207,149,1,0,209,207,0,143,209,44,2,141,207,116,2,0,209,207,0,143,209,114,2,141,207,163,1,38,207,207,127,0,209,207,0,143,209,149,2,119,0,225,254,141,209,152,2,1,207,220,0,45,209,209,207,232,237,0,0,141,209,145,1,121,209,22,0,141,209,153,2,141,207,163,1,38,207,207,127,26,207,207,1,41,207,207,2,1,208,0,0,97,209,207,208,141,207,149,2,0,208,207,0,143,208,170,1,141,207,9,2,0,208,207,0,143,208,11,2,141,207,42,2,0,208,207,0,143,208,43,2,141,207,163,1,38,207,207,127,0,208,207,0,143,208,151,2,119,0,13,0,141,207,144,1,0,208,207,0,143,208,170,1,141,207,9,2,0,208,207,0,143,208,11,2,141,207,42,2,0,208,207,0,143,208,43,2,141,207,149,2,0,208,207,0,143,208,151,2,141,207,153,2,141,209,170,1,41,209,209,2,3,208,207,209,143,208,169,1,141,209,169,1,82,208,209,0,143,208,171,1,141,209,11,2,25,208,209,1,143,208,172,1,141,209,172,1,38,209,209,127,141,207,151,2,13,208,209,207,143,208,173,1,141,208,173,1,121,208,16,0,141,207,11,2,25,208,207,2,143,208,208,1,141,208,153,2,141,207,208,1,38,207,207,127,26,207,207,1,41,207,207,2,1,209,0,0,97,208,207,209,141,207,208,1,38,207,207,127,0,209,207,0,143,209,150,2,119,0,4,0,141,207,151,2,0,209,207,0,143,209,150,2,141,207,153,2,141,208,172,1,38,208,208,127,41,208,208,2,94,209,207,208,143,209,209,1,141,207,120,2,76,207,207,0,58,209,207,0,144,209,185,1,142,207,185,1,141,208,171,1,77,208,208,0,60,206,0,0,0,202,154,59,65,208,208,206,141,206,209,1,77,206,206,0,63,208,208,206,65,209,207,208,144,209,175,1,141,208,43,2,25,209,208,53,143,209,197,1,141,208,197,1,141,207,48,2,4,209,208,207,143,209,199,1,141,207,199,1,141,208,18,2,15,209,207,208,143,209,201,1,141,209,199,1,34,209,209,0,1,208,0,0,141,207,199,1,125,3,209,208,207,0,0,0,141,207,201,1,141,208,18,2,125,6,207,3,208,0,0,0,34,208,6,53,121,208,40,0,59,207,1,0,1,209,105,0,4,209,209,6,134,208,0,0,204,34,5,0,207,209,0,0,144,208,174,1,142,209,174,1,142,207,175,1,134,208,0,0,156,111,6,0,209,207,0,0,144,208,176,1,59,207,1,0,1,209,53,0,4,209,209,6,134,208,0,0,204,34,5,0,207,209,0,0,144,208,177,1,142,209,175,1,142,207,177,1,134,208,0,0,48,112,6,0,209,207,0,0,144,208,178,1,142,207,176,1,58,208,207,0,144,208,17,2,142,207,178,1,58,208,207,0,144,208,49,2,142,207,176,1,142,209,175,1,142,206,178,1,64,209,209,206,63,208,207,209,144,208,135,2,119,0,8,0,59,208,0,0,144,208,17,2,59,208,0,0,144,208,49,2,142,209,175,1,58,208,209,0,144,208,135,2,141,209,11,2,25,208,209,2,143,208,179,1,141,209,179,1,38,209,209,127,141,207,150,2,13,208,209,207,143,208,180,1], eb + 51200);
  HEAPU8.set([141,208,180,1,121,208,5,0,142,207,49,2,58,208,207,0,144,208,51,2,119,0,118,0,141,207,153,2,141,209,179,1,38,209,209,127,41,209,209,2,94,208,207,209,143,208,181,1,141,208,181,1,2,207,0,0,0,101,205,29,48,208,208,207,180,240,0,0,141,208,181,1,32,208,208,0,121,208,15,0,141,207,11,2,25,208,207,3,143,208,182,1,141,207,182,1,38,207,207,127,141,209,150,2,13,208,207,209,143,208,184,1,141,208,184,1,121,208,5,0,142,209,49,2,58,208,209,0,144,208,50,2,119,0,60,0,142,209,185,1,61,207,0,0,0,0,128,62,65,209,209,207,142,207,49,2,63,208,209,207,144,208,186,1,142,207,186,1,58,208,207,0,144,208,50,2,119,0,49,0,2,208,0,0,0,101,205,29,141,207,181,1,48,208,208,207,244,240,0,0,142,207,185,1,61,209,0,0,0,0,64,63,65,207,207,209,142,209,49,2,63,208,207,209,144,208,187,1,142,209,187,1,58,208,209,0,144,208,50,2,119,0,33,0,141,209,11,2,25,208,209,3,143,208,188,1,141,209,188,1,38,209,209,127,141,207,150,2,13,208,209,207,143,208,189,1,141,208,189,1,121,208,12,0,142,207,185,1,61,209,0,0,0,0,0,63,65,207,207,209,142,209,49,2,63,208,207,209,144,208,190,1,142,209,190,1,58,208,209,0,144,208,50,2,119,0,12,0,142,209,185,1,61,207,0,0,0,0,64,63,65,209,209,207,142,207,49,2,63,208,209,207,144,208,191,1,142,207,191,1,58,208,207,0,144,208,50,2,119,0,1,0,1,208,1,0,1,207,53,0,4,207,207,6,54,208,208,207,152,241,0,0,142,207,50,2,58,208,207,0,144,208,51,2,119,0,22,0,142,207,50,2,59,209,1,0,134,208,0,0,48,112,6,0,207,209,0,0,144,208,192,1,142,208,192,1,59,209,0,0,70,208,208,209,121,208,5,0,142,209,50,2,58,208,209,0,144,208,51,2,119,0,8,0,142,209,50,2,59,207,1,0,63,208,209,207,144,208,193,1,142,207,193,1,58,208,207,0,144,208,51,2,142,207,135,2,142,209,51,2,63,208,207,209,144,208,195,1,142,209,195,1,142,207,17,2,64,208,209,207,144,208,196,1,1,208,254,255,141,207,122,2,4,208,208,207,141,207,197,1,2,209,0,0,255,255,255,127,19,207,207,209,47,208,208,207,140,243,0,0,142,207,196,1,135,208,2,0,207,0,0,0,144,208,198,1,142,208,198,1,61,207,0,0,0,0,0,90,74,208,208,207,120,208,12,0,141,207,201,1,38,207,207,1,0,208,207,0,143,208,39,2,141,207,43,2,0,208,207,0,143,208,46,2,142,207,196,1,58,208,207,0,144,208,137,2,119,0,28,0,141,209,201,1,141,206,199,1,13,206,6,206,19,209,209,206,121,209,4,0,1,209,0,0,0,207,209,0,119,0,4,0,141,209,201,1,38,209,209,1,0,207,209,0,0,208,207,0,143,208,38,2,141,207,43,2,25,208,207,1,143,208,202,1,141,207,38,2,0,208,207,0,143,208,39,2,141,207,202,1,0,208,207,0,143,208,46,2,142,207,196,1,61,209,0,0,0,0,0,63,65,208,207,209,144,208,137,2,141,209,46,2,25,208,209,50,143,208,203,1,1,208,0,0,141,209,122,2,4,208,208,209,141,209,203,1,54,208,208,209,88,243,0,0,141,209,39,2,33,208,209,0,143,208,204,1,142,209,51,2,59,207,0,0,70,208,209,207,143,208,205,1,141,208,205,1,141,207,204,1,19,208,208,207,120,208,8,0,141,207,46,2,0,208,207,0,143,208,47,2,142,207,137,2,58,208,207,0,144,208,138,2,119,0,20,0,134,208,0,0,80,88,6,0,143,208,206,1,141,208,206,1,1,207,34,0,85,208,207,0,141,208,46,2,0,207,208,0,143,207,47,2,142,208,137,2,58,207,208,0,144,207,138,2,119,0,7,0,141,208,43,2,0,207,208,0,143,207,47,2,142,208,196,1,58,207,208,0,144,207,138,2,142,208,138,2,141,209,47,2,134,207,0,0,192,111,6,0,208,209,0,0,144,207,207,1,142,207,207,1,58,5,207,0,58,4,5,0,119,0,234,0,106,204,0,4,143,204,210,1,106,204,0,100,143,204,218,1,141,204,210,1,141,206,218,1,48,204,204,206,28,244,0,0,141,206,210,1,25,206,206,1,109,0,4,206,141,204,210,1,78,206,204,0,143,206,243,1,141,204,243,1,1,207,255,0,19,204,204,207,0,206,204,0,143,206,245,1,119,0,8,0,134,206,0,0,196,92,4,0,0,0,0,0,143,206,244,1,141,204,244,1,0,206,204,0,143,206,245,1,141,204,245,1,32,206,204,40,143,206,246,1,141,206,246,1,121,206,4,0,1,206,1,0,143,206,79,2,119,0,22,0,106,206,0,100,143,206,247,1,141,206,247,1,1,204,0,0,45,206,206,204,132,244,0,0,62,206,0,0,0,0,0,0,0,0,248,127,58,4,206,0,119,0,188,0,106,206,0,4,143,206,249,1,141,204,249,1,26,204,204,1,109,0,4,204,62,204,0,0,0,0,0,0,0,0,248,127,58,4,204,0,119,0,178,0,106,204,0,4,143,204,250,1,106,204,0,100,143,204,251,1,141,204,250,1,141,206,251,1,48,204,204,206,252,244,0,0,141,206,250,1,25,206,206,1,109,0,4,206,141,204,250,1,78,206,204,0,143,206,252,1,141,204,252,1,1,207,255,0,19,204,204,207,0,206,204,0,143,206,0,2,119,0,8,0,134,206,0,0,196,92,4,0,0,0,0,0,143,206,253,1,141,204,253,1,0,206,204,0,143,206,0,2,141,204,0,2,26,206,204,48,143,206,254,1,141,204,0,2,26,206,204,65,143,206,1,2,141,206,254,1,35,206,206,10,141,204,1,2,35,204,204,26,20,206,206,204,120,206,18,0,141,204,0,2,26,206,204,97,143,206,2,2,141,204,0,2,32,206,204,95,143,206,3,2,141,206,3,2,141,204,2,2,35,204,204,26,20,206,206,204,120,206,7,0,141,206,0,2,0,21,206,0,141,204,79,2,0,206,204,0,143,206,80,2,119,0,6,0,141,206,79,2,25,37,206,1,0,206,37,0,143,206,79,2,119,0,196,255,32,206,21,41,121,206,6,0,62,206,0,0,0,0,0,0,0,0,248,127,58,4,206,0,119,0,110,0,106,206,0,100,143,206,4,2,141,206,4,2,1,204,0,0,52,206,206,204,224,245,0,0,106,33,0,4,26,204,33,1,109,0,4,204,33,204,2,0,120,204,11,0,134,34,0,0,80,88,6,0,1,204,22,0,85,34,204,0,1,206,0,0,134,204,0,0,132,184,5,0,0,206,0,0,59,4,0,0,119,0,89,0,141,204,80,2,32,204,204,0,121,204,6,0,62,204,0,0,0,0,0,0,0,0,248,127,58,4,204,0,119,0,81,0,141,204,80,2,0,19,204,0,26,35,19,1,141,204,4,2,1,206,0,0,52,204,204,206,88,246,0,0,106,36,0,4,26,206,36,1,109,0,4,206,32,206,35,0,121,206,6,0,62,206,0,0,0,0,0,0,0,0,248,127,58,4,206,0,119,0,64,0,0,19,35,0,119,0,240,255,1,204,23,0,143,204,152,2,119,0,2,0,119,0,1,0,141,203,152,2,32,203,203,23,121,203,44,0,106,203,0,100,143,203,38,1,141,203,38,1,1,205,0,0,52,203,203,205,196,246,0,0,106,203,0,4,143,203,54,1,141,205,54,1,26,205,205,1,109,0,4,205,1,203,3,0,141,209,74,2,16,205,203,209,143,205,71,1,33,205,2,0,141,209,71,1,19,205,205,209,121,205,25,0,141,209,74,2,0,205,209,0,143,205,76,2,141,205,38,1,1,209,0,0,52,205,205,209,20,247,0,0,106,205,0,4,143,205,78,1,141,209,78,1,26,209,209,1,109,0,4,209,141,205,76,2,26,209,205,1,143,209,94,1,1,209,3,0,141,205,94,1,48,209,209,205,64,247,0,0,141,205,94,1,0,209,205,0,143,209,76,2,119,0,237,255,119,0,1,0,141,205,120,2,76,205,205,0,58,209,205,0,144,209,98,1,142,205,98,1,61,203,0,0,0,0,128,127,65,209,205,203,144,209,103,1,142,209,103,1,58,4,209,0,141,209,153,2,137,209,0,0,139,4,0,0,140,5,134,2,0,0,0,0,2,200,0,0,76,2,0,0,2,201,0,0,0,202,154,59,2,202,0,0,36,51,0,0,1,203,0,0,143,203,132,2,136,204,0,0,0,203,204,0,143,203,133,2,136,203,0,0,1,204,112,2,3,203,203,204,137,203,0,0,130,203,0,0,136,204,0,0,49,203,203,204,212,247,0,0,135,203,0,0,141,203,133,2,1,204,24,2,3,203,203,204,25,52,203,40,141,204,133,2,1,205,64,2,3,204,204,205,25,203,204,12,143,203,222,1,141,203,133,2,3,203,203,200,25,68,203,9,1,203,0,0,143,203,254,1,0,203,1,0,143,203,30,2,1,203,0,0,143,203,56,2,1,203,0,0,143,203,60,2,1,203,255,255,141,204,254,1,15,84,203,204,121,84,21,0,2,204,0,0,255,255,255,127,141,203,254,1,4,87,204,203,141,203,56,2,15,91,87,203,121,91,8,0,134,97,0,0,80,88,6,0,1,203,75,0,85,97,203,0,1,203,255,255,143,203,255,1,119,0,10,0,141,203,56,2,141,204,254,1,3,105,203,204,0,204,105,0,143,204,255,1,119,0,4,0,141,203,254,1,0,204,203,0,143,204,255,1,141,204,30,2,78,109,204,0,41,204,109,24,42,204,204,24,32,204,204,0,121,204,10,0,141,203,255,1,0,204,203,0,143,204,0,2,141,203,60,2,0,204,203,0,143,204,61,2,1,204,245,0,143,204,132,2,119,0,54,16,0,119,109,0,141,203,30,2,0,204,203,0,143,204,29,2,41,204,119,24,42,204,204,24,1,203,0,0,1,205,38,0,138,204,203,205,140,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,136,249,0,0,168,249,0,0,119,0,17,0,141,205,29,2,0,203,205,0,143,203,27,2,141,205,29,2,0,203,205,0,143,203,117,2,119,0,17,0,141,205,29,2,0,203,205,0,143,203,28,2,141,205,29,2,0,203,205,0,143,203,118,2,1,203,9,0,143,203,132,2,119,0,8,0,141,204,29,2,25,123,204,1,78,45,123,0,0,119,45,0,0,204,123,0,143,204,29,2,119,0,190,255,141,204,132,2,32,204,204,9,121,204,38,0,1,204,0,0,143,204,132,2,141,204,28,2,25,127,204,1,78,134,127,0,41,204,134,24,42,204,204,24,32,204,204,37,120,204,8,0,141,203,28,2,0,204,203,0,143,204,27,2,141,203,118,2,0,204,203,0,143,204,117,2,119,0,22,0,141,204,118,2,25,141,204,1,141,204,28,2,25,146,204,2,78,150,146,0,41,204,150,24,42,204,204,24,32,204,204,37,121,204,8,0,0,204,146,0,143,204,28,2,0,204,141,0,143,204,118,2,1,204,9,0,143,204,132,2,119,0,225,255,0,204,146,0,143,204,27,2,0,204,141,0,143,204,117,2,119,0,1,0,141,204,117,2,0,162,204,0,141,204,30,2,0,167,204,0,1,204,0,0,46,204,0,204,200,250,0,0,82,183,0,0,38,204,183,32,32,204,204,0,121,204,6,0,141,203,30,2,4,205,162,167,134,204,0,0,68,94,4,0,203,205,0,0,141,204,117,2,141,205,30,2,13,197,204,205,120,197,16,0,141,204,60,2,0,205,204,0,143,205,62,2,141,204,255,1,0,205,204,0,143,205,254,1,141,204,27,2,0,205,204,0,143,205,30,2,4,205,162,167,143,205,56,2,141,204,62,2,0,205,204,0,143,205,60,2,119,0,69,255,141,204,27,2,25,205,204,1,143,205,3,1,141,204,3,1,78,205,204,0,143,205,7,1,141,205,7,1,41,205,205,24,42,205,205,24,26,205,205,48,35,205,205,10,121,205,52,0,141,204,27,2,25,205,204,2,143,205,16,1,141,204,16,1,78,205,204,0,143,205,20,1,141,204,27,2,25,205,204,3,143,205,27,1,141,205,20,1,41,205,205,24,42,205,205,24,32,205,205,36,141,204,27,1,141,203,3,1,125,30,205,204,203,0,0,0,141,203,20,1,41,203,203,24,42,203,203,24,32,203,203,36,1,204,1,0,141,205,60,2,125,36,203,204,205,0,0,0,141,203,20,1,41,203,203,24,42,203,203,24,32,203,203,36,121,203,7,0,141,203,7,1,41,203,203,24,42,203,203,24,26,203,203,48,0,204,203,0,119,0,3,0,1,203,255,255,0,204,203,0,0,205,204,0,143,205,49,2,78,49,30,0,0,205,49,0,143,205,34,1,141,204,49,2,0,205,204,0,143,205,251,1,0,205,36,0,143,205,63,2,0,205,30,0,143,205,103,2,119,0,12,0,141,204,7,1,0,205,204,0,143,205,34,1,1,205,255,255,143,205,251,1,141,204,60,2,0,205,204,0,143,205,63,2,141,204,3,1,0,205,204,0,143,205,103,2,141,204,34,1,41,204,204,24,42,204,204,24,0,205,204,0,143,205,31,1,141,205,31,1,38,205,205,224,32,205,205,32,121,205,83,0,141,204,31,1,0,205,204,0,143,205,63,1,141,204,34,1,0,205,204,0,143,205,89,1,1,205,0,0,143,205,20,2,141,204,103,2,0,205,204,0,143,205,105,2,141,204,63,1,26,205,204,32,143,205,54,1,1,205,1,0,141,204,54,1,22,205,205,204,2,204,0,0,137,40,1,0,19,205,205,204,32,205,205,0,121,205,11,0,141,204,89,1,0,205,204,0,143,205,133,1,141,204,20,2,0,205,204,0,143,205,21,2,141,204,105,2,0,205,204,0,143,205,106,2,119,0,59,0,141,204,89,1,41,204,204,24,42,204,204,24,0,205,204,0,143,205,83,1,1,204,1,0,141,203,83,1,26,203,203,32,22,204,204,203,141,203,20,2,20,204,204,203,0,205,204,0,143,205,100,1,141,204,105,2,25,205,204,1,143,205,106,1,141,204,106,1,78,205,204,0,143,205,114,1,141,205,114,1,41,205,205,24,42,205,205,24,38,205,205,224,32,205,205,32,121,205,16,0,141,204,114,1,41,204,204,24,42,204,204,24,0,205,204,0,143,205,63,1,141,204,114,1,0,205,204,0,143,205,89,1,141,204,100,1,0,205,204,0,143,205,20,2,141,204,106,1,0,205,204,0,143,205,105,2,119,0,196,255,141,204,114,1,0,205,204,0,143,205,133,1,141,204,100,1,0,205,204,0,143,205,21,2,141,204,106,1,0,205,204,0,143,205,106,2,119,0,9,0,141,204,34,1,0,205,204,0,143,205,133,1,1,205,0,0,143,205,21,2,141,204,103,2,0,205,204,0,143,205,106,2,141,204,133,1,41,204,204,24,42,204,204,24,32,205,204,42,143,205,140,1,141,205,140,1,121,205,158,0,141,204,106,2,25,205,204,1,143,205,147,1,141,204,147,1,78,205,204,0,143,205,150,1,141,205,150,1,41,205,205,24,42,205,205,24,26,205,205,48,35,205,205,10,121,205,50,0,141,204,106,2,25,205,204,2,143,205,163,1,141,204,163,1,78,205,204,0,143,205,168,1,141,205,168,1,41,205,205,24,42,205,205,24,32,205,205,36,121,205,36,0,141,205,150,1,41,205,205,24,42,205,205,24,26,205,205,48,41,205,205,2,1,204,10,0,97,4,205,204,141,205,147,1,78,204,205,0,143,204,190,1,141,205,190,1,41,205,205,24,42,205,205,24,26,205,205,48,41,205,205,3,3,204,3,205,143,204,213,1,141,205,213,1,82,204,205,0,143,204,223,1,141,205,213,1,106,204,205,4,143,204,224,1,141,205,106,2,25,204,205,3,143,204,225,1,1,204,1,0,143,204,64,2,141,205,225,1,0,204,205,0,143,204,104,2,141,205,223,1,0,204,205,0,143,204,110,2,119,0,6,0,1,204,24,0,143,204,132,2,119,0,3,0,1,204,24,0,143,204,132,2,141,204,132,2,32,204,204,24,121,204,52,0,1,204,0,0,143,204,132,2,141,205,63,2,32,204,205,0,143,204,226,1,141,204,226,1,120,204,3,0,1,7,255,255,119,0,165,14,1,204,0,0,53,204,0,204,72,255,0,0,141,205,21,2,0,204,205,0,143,204,22,2,141,205,147,1,0,204,205,0,143,204,31,2,1,204,0,0,143,204,65,2,1,204,0,0,143,204,111,2,119,0,140,0,82,204,2,0,143,204,249,1,141,205,249,1,1,203,0,0,25,203,203,4,26,203,203,1,3,205,205,203,1,203,0,0,25,203,203,4,26,203,203,1,40,203,203,255,19,205,205,203,0,204,205,0,143,204,227,1,141,205,227,1,82,204,205,0,143,204,228,1,141,204,227,1,25,204,204,4,85,2,204,0,1,204,0,0,143,204,64,2,141,205,147,1,0,204,205,0,143,204,104,2,141,205,228,1,0,204,205,0,143,204,110,2,141,205,110,2,34,204,205,0,143,204,229,1,141,204,229,1,121,204,23,0,141,205,21,2,1,203,0,32,20,205,205,203,0,204,205,0,143,204,230,1,1,205,0,0,141,203,110,2,4,204,205,203,143,204,231,1,141,203,230,1,0,204,203,0,143,204,22,2,141,203,104,2,0,204,203,0,143,204,31,2,141,203,64,2,0,204,203,0,143,204,65,2,141,203,231,1,0,204,203,0,143,204,111,2,119,0,85,0,141,203,21,2,0,204,203,0,143,204,22,2,141,203,104,2,0,204,203,0,143,204,31,2,141,203,64,2,0,204,203,0,143,204,65,2,141,203,110,2,0,204,203,0,143,204,111,2,119,0,72,0,141,203,133,1,41,203,203,24,42,203,203,24,0,204,203,0,143,204,232,1,141,204,232,1,26,204,204,48,35,204,204,10,121,204,52,0,141,204,106,2,0,53,204,0,1,204,0,0,143,204,39,2,141,203,232,1,26,204,203,48,143,204,50,2,141,203,39,2,27,204,203,10,143,204,233,1,141,203,233,1,141,205,50,2,3,204,203,205,143,204,234,1,25,204,53,1,143,204,235,1,141,204,235,1,78,54,204,0,41,204,54,24,42,204,204,24,26,204,204,48,35,204,204,10,121,204,11,0,141,204,235,1,0,53,204,0,141,205,234,1,0,204,205,0,143,204,39,2,41,205,54,24,42,205,205,24,26,204,205,48,143,204,50,2,119,0,231,255,141,204,234,1,34,204,204,0,121,204,3,0,1,7,255,255,119,0,36,14,141,205,21,2,0,204,205,0,143,204,22,2,141,205,235,1,0,204,205,0,143,204,31,2,141,205,63,2,0,204,205,0,143,204,65,2,141,205,234,1,0,204,205,0,143,204,111,2,119,0,12,0,141,205,21,2,0,204,205,0,143,204,22,2,141,205,106,2,0,204,205,0,143,204,31,2,141,205,63,2,0,204,205,0,143,204,65,2,1,204,0,0,143,204,111,2,141,204,31,2,78,55,204,0,41,204,55,24,42,204,204,24,32,204,204,46,121,204,120,0,141,204,31,2,25,56,204,1,78,57,56,0,41,204,57,24,42,204,204,24,32,204,204,42,120,204,43,0,41,204,57,24,42,204,204,24,26,204,204,48,35,204,204,10,121,204,9,0,0,74,56,0,1,204,0,0,143,204,40,2,41,205,57,24,42,205,205,24,26,204,205,48,143,204,51,2,119,0,6,0,0,204,56,0,143,204,34,2,1,204,0,0,143,204,67,2,119,0,100,0,141,204,40,2,27,71,204,10,141,204,51,2,3,72,71,204,25,73,74,1,78,75,73,0,41,204,75,24,42,204,204,24,26,204,204,48,35,204,204,10,121,204,9,0,0,74,73,0,0,204,72,0,143,204,40,2,41,205,75,24,42,205,205,24,26,204,205,48,143,204,51,2,119,0,238,255,0,204,73,0,143,204,34,2,0,204,72,0,143,204,67,2,119,0,76,0,141,204,31,2,25,58,204,2,78,59,58,0,41,204,59,24,42,204,204,24,26,204,204,48,35,204,204,10,121,204,29,0,141,204,31,2,25,60,204,3,78,61,60,0,41,204,61,24,42,204,204,24,32,204,204,36,121,204,22,0,41,204,59,24,42,204,204,24,26,204,204,48,41,204,204,2,1,205,10,0,97,4,204,205,78,62,58,0,41,205,62,24,42,205,205,24,26,205,205,48,41,205,205,3,3,63,3,205,82,64,63,0,106,65,63,4,141,205,31,2,25,66,205,4,0,205,66,0,143,205,34,2,0,205,64,0,143,205,67,2,119,0,40,0,141,205,65,2,32,67,205,0,120,67,3,0,1,7,255,255,119,0,172,13,1,205,0,0,46,205,0,205,84,3,1,0,82,205,2,0,143,205,250,1,141,205,250,1,1,204,0,0,25,204,204,4,26,204,204,1,3,205,205,204,1,204,0,0,25,204,204,4,26,204,204,1,40,204,204,255,19,205,205,204,0,69,205,0,82,70,69,0,25,205,69,4,85,2,205,0,0,205,58,0,143,205,34,2,0,205,70,0,143,205,67,2,119,0,11,0,0,205,58,0,143,205,34,2,1,205,0,0,143,205,67,2,119,0,6,0,141,204,31,2,0,205,204,0,143,205,34,2,1,205,255,255,143,205,67,2,141,204,34,2,0,205,204,0,143,205,32,2,1,205,0,0,143,205,101,2,141,205,32,2,78,76,205,0,1,205,57,0,41,204,76,24,42,204,204,24,26,204,204,65,48,205,205,204,184,3,1,0,1,7,255,255,119,0,123,13,141,205,32,2,25,77,205,1,1,205,16,49,141,204,101,2,27,204,204,58,3,205,205,204,41,204,76,24,42,204,204,24,26,204,204,65,3,78,205,204,78,79,78,0,1,204,255,0,19,204,79,204,26,204,204,1,35,204,204,8,121,204,8,0,0,204,77,0,143,204,32,2,1,205,255,0,19,205,79,205,0,204,205,0,143,204,101,2,119,0,224,255,141,205,32,2,0,204,205,0,143,204,33,2,141,205,101,2,0,204,205,0,143,204,102,2,119,0,1,0,41,204,79,24,42,204,204,24,32,204,204,0,121,204,3,0,1,7,255,255,119,0,87,13,1,204,255,255,141,205,251,1,15,80,204,205,41,205,79,24,42,205,205,24,32,205,205,19,121,205,7,0,121,80,3,0,1,7,255,255,119,0,77,13,1,205,52,0,143,205,132,2,119,0,31,0,121,80,19,0,141,205,251,1,41,205,205,2,3,81,4,205,1,205,255,0,19,205,79,205,85,81,205,0,141,205,251,1,41,205,205,3,3,82,3,205,82,83,82,0,106,85,82,4,141,205,133,2,85,205,83,0,141,205,133,2,109,205,4,85,1,205,52,0,143,205,132,2,119,0,12,0,1,205,0,0,53,205,0,205,220,4,1,0,1,7,0,0,119,0,50,13,141,204,133,2,1,203,255,0,19,203,79,203,134,205,0,0,160,228,2,0,204,203,2,0,141,205,132,2,32,205,205,52,121,205,17,0,1,205,0,0,143,205,132,2,1,205,0,0,53,205,0,205,64,5,1,0,141,203,255,1,0,205,203,0,143,205,254,1,0,205,77,0,143,205,30,2,4,205,162,167,143,205,56,2,141,203,65,2,0,205,203,0,143,205,60,2,119,0,186,252,141,205,33,2,78,86,205,0,141,204,102,2,33,204,204,0,41,206,86,24,42,206,206,24,38,206,206,15,32,206,206,3,19,204,204,206,121,204,6,0,41,204,86,24,42,204,204,24,38,204,204,223,0,203,204,0,119,0,4,0,41,204,86,24,42,204,204,24,0,203,204,0,0,205,203,0,143,205,107,2,141,205,22,2,1,203,0,32,19,205,205,203,0,88,205,0,141,205,22,2,2,203,0,0,255,255,254,255,19,205,205,203,0,89,205,0,32,203,88,0,141,204,22,2,125,205,203,204,89,0,0,0,143,205,23,2,141,205,107,2,1,208,65,0,1,207,56,0,138,205,208,207,248,6,1,0,184,6,1,0,252,6,1,0,184,6,1,0,72,7,1,0,76,7,1,0,80,7,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,84,7,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,172,7,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,184,6,1,0,176,7,1,0,184,6,1,0,180,7,1,0,28,8,1,0,4,9,1,0,148,44,1,0,152,44,1,0,184,6,1,0,156,44,1,0,184,6,1,0,184,6,1,0,184,6,1,0,160,44,1,0,204,44,1,0,16,47,1,0,84,48,1,0,184,6,1,0,184,6,1,0,156,48,1,0,184,6,1,0,204,48,1,0,184,6,1,0,184,6,1,0,0,49,1,0,141,207,30,2,0,208,207,0,143,208,240,1,141,207,23,2,0,208,207,0,143,208,26,2,141,207,67,2,0,208,207,0,143,208,73,2,1,208,0,0,143,208,78,2,1,208,240,50,143,208,83,2,0,208,52,0,143,208,122,2,119,0,143,10,119,0,131,0,141,206,133,2,82,166,206,0,141,206,133,2,106,168,206,4,141,206,133,2,109,206,8,166,141,206,133,2,25,206,206,8,1,203,0,0,109,206,4,203,141,203,133,2,141,206,133,2,25,206,206,8,85,203,206,0,1,206,255,255,143,206,72,2,1,206,86,0,143,206,132,2,119,0,123,10,119,0,111,0,119,0,110,0,119,0,109,0,141,206,67,2,32,169,206,0,121,169,14,0,1,203,32,0,141,204,111,2,1,207,0,0,141,208,23,2,134,206,0,0,16,223,4,0,0,203,204,207,208,0,0,0,1,206,0,0,143,206,36,2,1,206,98,0,143,206,132,2,119,0,104,10,141,208,67,2,0,206,208,0,143,206,72,2,1,206,86,0,143,206,132,2,119,0,98,10,119,0,85,10,119,0,85,0,141,206,133,2,82,155,206,0,141,206,133,2,106,156,206,4,141,206,133,2,1,203,24,2,3,206,206,203,1,203,255,0,19,203,155,203,107,206,39,203,141,206,133,2,1,204,24,2,3,206,206,204,25,203,206,39,143,203,240,1,0,203,89,0,143,203,26,2,1,203,1,0,143,203,73,2,1,203,0,0,143,203,78,2,1,203,240,50,143,203,83,2,0,203,52,0,143,203,122,2,119,0,70,10,141,203,133,2,82,137,203,0,141,203,133,2,106,138,203,4,34,203,138,0,121,203,21,0,1,203,0,0,1,204,0,0,134,139,0,0,112,110,6,0,203,204,137,138,128,204,0,0,0,140,204,0,141,204,133,2,85,204,139,0,141,204,133,2,109,204,4,140,0,142,139,0,0,143,140,0,1,204,1,0,143,204,74,2,1,204,240,50,143,204,79,2,1,204,76,0,143,204,132,2,119,0,44,10,141,204,23,2,1,203,0,8,19,204,204,203,32,204,204,0,121,204,19,0,141,204,23,2,38,204,204,1,32,204,204,0,1,203,240,50,1,206,242,50,125,5,204,203,206,0,0,0,0,142,137,0,0,143,138,0,141,203,23,2,38,203,203,1,0,206,203,0,143,206,74,2,0,206,5,0,143,206,79,2,1,206,76,0,143,206,132,2,119,0,21,10,0,142,137,0,0,143,138,0,1,206,1,0,143,206,74,2,1,206,241,50,143,206,79,2,1,206,76,0,143,206,132,2,119,0,12,10,141,206,133,2,86,190,206,0,141,206,133,2,1,208,0,0,109,206,16,208,127,208,0,0,87,208,190,0,127,208,0,0,82,191,208,0,127,208,0,0,106,192,208,4,34,208,192,0,121,208,7,0,68,13,190,0,1,208,1,0,143,208,75,2,1,208,1,51,143,208,81,2,119,0,26,0,141,208,23,2,1,206,0,8,19,208,208,206,32,208,208,0,121,208,16,0,141,208,23,2,38,208,208,1,32,208,208,0,1,206,2,51,1,207,7,51,125,6,208,206,207,0,0,0,58,13,190,0,141,206,23,2,38,206,206,1,0,207,206,0,143,207,75,2,0,207,6,0,143,207,81,2,119,0,6,0,58,13,190,0,1,207,1,0,143,207,75,2,1,207,4,51,143,207,81,2,127,207,0,0,87,207,13,0,127,207,0,0,82,193,207,0,127,207,0,0,106,194,207,4,2,207,0,0,0,0,240,127,19,207,194,207,2,206,0,0,0,0,240,127,16,207,207,206,2,206,0,0,0,0,240,127,19,206,194,206,2,208,0,0,0,0,240,127,13,206,206,208,1,208,0,0,34,208,208,0,19,206,206,208,20,207,207,206,121,207,60,8,141,206,133,2,25,206,206,16,134,207,0,0,12,112,6,0,13,206,0,0,144,207,5,1,142,207,5,1,59,206,2,0,65,207,207,206,59,206,0,0,70,207,207,206,121,207,8,0,141,206,133,2,106,207,206,16,143,207,6,1,141,207,133,2,141,206,6,1,26,206,206,1,109,207,16,206,141,206,107,2,39,206,206,32,32,206,206,97,121,206,124,1,141,207,81,2,25,206,207,9,143,206,8,1,141,207,107,2,38,207,207,32,32,207,207,0,141,208,81,2,141,204,8,1,125,206,207,208,204,0,0,0,143,206,80,2,141,204,75,2,39,204,204,2,0,206,204,0,143,206,9,1,1,204,11,0,141,208,67,2,16,206,204,208,143,206,10,1,1,208,12,0,141,204,67,2,4,206,208,204,143,206,11,1,141,206,10,1,141,204,11,1,32,204,204,0,20,206,206,204,121,206,5,0,142,206,5,1,59,204,2,0,65,14,206,204,119,0,49,0,141,206,11,1,0,204,206,0,143,204,85,2,59,204,8,0,144,204,86,2,141,206,85,2,26,204,206,1,143,204,12,1,142,206,86,2,59,208,16,0,65,204,206,208,144,204,13,1,141,204,12,1,32,204,204,0,120,204,8,0,141,208,12,1,0,204,208,0,143,204,85,2,142,208,13,1,58,204,208,0,144,204,86,2,119,0,240,255,141,208,80,2,78,204,208,0,143,204,14,1,141,204,14,1,41,204,204,24,42,204,204,24,32,204,204,45,121,204,11,0,142,204,13,1,142,208,5,1,59,206,2,0,65,208,208,206,68,208,208,0,142,206,13,1,64,208,208,206,63,204,204,208,68,14,204,0,119,0,9,0,142,204,5,1,59,208,2,0,65,204,204,208,142,208,13,1,63,204,204,208,142,208,13,1,64,14,204,208,119,0,1,0,141,204,133,2,106,208,204,16,143,208,15,1,141,206,15,1,34,206,206,0,121,206,6,0,1,206,0,0,141,207,15,1,4,206,206,207,0,204,206,0,119,0,3,0,141,206,15,1,0,204,206,0,0,208,204,0,143,208,17,1,141,204,17,1,141,206,17,1,34,206,206,0,41,206,206,31,42,206,206,31,141,207,133,2,1,203,64,2,3,207,207,203,25,207,207,12,134,208,0,0,116,200,4,0,204,206,207,0,143,208,18,1,141,208,18,1,141,207,133,2,1,206,64,2,3,207,207,206,25,207,207,12,45,208,208,207,100,12,1,0,141,208,133,2,1,207,64,2,3,208,208,207,1,207,48,0,107,208,11,207,141,208,133,2,1,206,64,2,3,208,208,206,25,207,208,11,143,207,16,2,119,0,4,0,141,208,18,1,0,207,208,0,143,207,16,2,141,208,16,2,26,207,208,1,143,207,19,1,141,207,19,1,141,208,15,1,42,208,208,31,38,208,208,2,25,208,208,43,1,206,255,0,19,208,208,206,83,207,208,0,141,207,16,2,26,208,207,2,143,208,21,1,141,208,21,1,141,207,107,2,25,207,207,15,1,206,255,0,19,207,207,206,83,208,207,0,141,208,67,2,34,207,208,1,143,207,66,2,58,16,14,0,141,208,133,2,3,207,208,200,143,207,88,2,75,207,16,0,143,207,22,1,1,208,224,50,141,206,22,1,90,207,208,206,143,207,23,1,141,208,88,2,25,207,208,1,143,207,24,1,141,207,88,2,141,208,23,1,1,206,255,0,19,208,208,206,141,206,107,2,38,206,206,32,20,208,208,206,1,206,255,0,19,208,208,206,83,207,208,0,141,207,22,1,76,207,207,0,64,208,16,207,144,208,25,1,141,208,24,1,141,207,133,2,3,207,207,200,4,208,208,207,32,208,208,1,121,208,27,0,141,208,23,2,38,208,208,8,32,208,208,0,141,207,66,2,142,206,25,1,59,204,16,0,65,206,206,204,59,204,0,0,69,206,206,204,19,207,207,206,19,208,208,207,121,208,5,0,141,207,24,1,0,208,207,0,143,208,89,2,119,0,14,0,141,207,88,2,25,208,207,2,143,208,26,1,141,208,24,1,1,207,46,0,83,208,207,0,141,208,26,1,0,207,208,0,143,207,89,2,119,0,4,0,141,208,24,1,0,207,208,0,143,207,89,2,142,207,25,1,59,208,16,0,65,207,207,208,59,208,0,0,70,207,207,208,121,207,8,0,142,207,25,1,59,208,16,0,65,16,207,208,141,207,89,2,0,208,207,0,143,208,88,2,119,0,186,255,141,207,89,2,0,208,207,0,143,208,90,2,119,0,1,0,141,207,67,2,33,208,207,0,143,208,28,1,1,207,254,255,141,206,133,2,3,206,206,200,4,207,207,206,141,206,90,2,3,207,207,206,141,206,67,2,15,208,207,206,143,208,29,1,141,206,222,1,25,206,206,2,141,207,67,2,3,208,206,207,143,208,30,1,141,206,28,1,141,204,29,1,19,206,206,204,121,206,6,0,141,206,30,1,141,204,21,1,4,206,206,204,0,207,206,0,119,0,10,0,141,206,222,1,141,204,133,2,3,204,204,200,4,206,206,204,141,204,21,1,4,206,206,204,141,204,90,2,3,206,206,204,0,207,206,0,0,208,207,0,143,208,57,2,1,207,32,0,141,206,111,2,141,204,57,2,141,203,9,1,3,204,204,203,141,203,23,2,134,208,0,0,16,223,4,0,0,207,206,204,203,0,0,0,82,208,0,0,143,208,32,1,141,208,32,1,38,208,208,32,32,208,208,0,121,208,6,0,141,203,80,2,141,204,9,1,134,208,0,0,68,94,4,0,203,204,0,0,1,204,48,0,141,203,111,2,141,206,57,2,141,207,9,1,3,206,206,207,141,207,23,2,2,209,0,0,0,0,1,0,21,207,207,209,134,208,0,0,16,223,4,0,0,204,203,206,207,0,0,0,82,208,0,0,143,208,33,1,141,208,33,1,38,208,208,32,32,208,208,0,121,208,10,0,141,207,133,2,3,207,207,200,141,206,90,2,141,203,133,2,3,203,203,200,4,206,206,203,134,208,0,0,68,94,4,0,207,206,0,0,1,206,48,0,141,207,57,2,141,203,90,2,141,204,133,2,3,204,204,200,4,203,203,204,141,204,222,1,141,209,21,1,4,204,204,209,3,203,203,204,4,207,207,203,1,203,0,0,1,204,0,0,134,208,0,0,16,223,4,0,0,206,207,203,204,0,0,0,82,208,0,0,143,208,35,1,141,208,35,1,38,208,208,32,32,208,208,0,121,208,8,0,141,204,21,1,141,203,222,1,141,207,21,1,4,203,203,207,134,208,0,0,68,94,4,0,204,203,0,0,1,203,32,0,141,204,111,2,141,207,57,2,141,206,9,1,3,207,207,206,141,206,23,2,1,209,0,32,21,206,206,209,134,208,0,0,16,223,4,0,0,203,204,207,206,0,0,0,141,206,57,2,141,207,9,1,3,206,206,207,141,207,111,2,15,208,206,207,143,208,36,1,141,206,36,1,121,206,4,0,141,206,111,2,0,207,206,0,119,0,5,0,141,206,57,2,141,204,9,1,3,206,206,204,0,207,206,0,0,208,207,0,143,208,109,2,141,208,109,2,0,8,208,0,119,0,5,7,141,207,67,2,34,208,207,0,143,208,37,1,141,208,37,1,1,207,6,0,141,206,67,2,125,41,208,207,206,0,0,0,142,206,5,1,59,207,2,0,65,206,206,207,59,207,0,0,70,206,206,207,121,206,18,0,141,207,133,2,106,206,207,16,143,206,38,1,141,206,133,2,141,207,38,1,26,207,207,28,109,206,16,207,142,207,5,1,59,206,2,0,65,207,207,206,60,206,0,0,0,0,0,16,65,23,207,206,141,207,38,1,26,206,207,28,143,206,39,1,119,0,8,0,141,206,133,2,106,48,206,16,142,206,5,1,59,207,2,0,65,23,206,207,0,207,48,0,143,207,39,1,141,206,39,1,34,207,206,0,143,207,40,1,141,206,40,1,121,206,5,0,141,206,133,2,25,206,206,24,0,207,206,0,119,0,6,0,141,206,133,2,25,206,206,24,1,208,32,1,3,206,206,208,0,207,206,0,0,24,207,0,58,26,23,0,0,207,24,0,143,207,116,2,75,207,26,0,143,207,41,1,141,207,116,2,141,206,41,1,85,207,206,0,141,207,116,2,25,206,207,4,143,206,42,1,141,207,41,1,77,207,207,0,64,206,26,207,144,206,43,1,142,206,43,1,60,207,0,0,0,202,154,59,65,206,206,207,59,207,0,0,70,206,206,207,121,206,9,0,142,206,43,1,60,207,0,0,0,202,154,59,65,26,206,207,141,206,42,1,0,207,206,0,143,207,116,2,119,0,230,255,141,207,133,2,106,43,207,16,1,207,0,0,47,207,207,43,128,20,1,0,0,207,43,0,143,207,44,1,0,207,24,0,143,207,239,1,141,206,42,1,0,207,206,0,143,207,121,2,1,206,29,0,141,208,44,1,15,207,206,208,143,207,45,1,141,208,45,1,1,206,29,0,141,204,44,1,125,207,208,206,204,0,0,0,143,207,46,1,141,204,121,2,26,207,204,4,143,207,2,2,141,204,2,2,141,206,239,1,16,207,204,206,143,207,47,1,141,207,47,1,121,207,5,0,141,206,239,1,0,207,206,0,143,207,241,1,119,0,84,0,1,207,0,0,143,207,252,1,141,206,2,2,0,207,206,0,143,207,3,2,141,206,3,2,82,207,206,0,143,207,48,1,141,206,48,1,1,204,0,0,141,208,46,1,135,207,1,0,206,204,208,0,143,207,49,1,128,208,0,0,0,207,208,0,143,207,50,1,141,208,49,1,141,204,50,1,141,206,252,1,1,203,0,0,134,207,0,0,36,111,6,0,208,204,206,203,143,207,51,1,128,203,0,0,0,207,203,0,143,207,52,1,141,203,51,1,141,206,52,1,1,204,0,0,134,207,0,0,228,59,6,0,203,206,201,204,143,207,53,1,128,204,0,0,0,207,204,0,143,207,55,1,141,207,3,2,141,204,53,1,85,207,204,0,141,207,51,1,141,206,52,1,1,203,0,0,134,204,0,0,4,111,6,0,207,206,201,203,143,204,56,1,128,203,0,0,0,204,203,0,143,204,57,1,141,203,3,2,26,204,203,4,143,204,1,2,141,203,1,2,141,206,239,1,16,204,203,206,143,204,58,1,141,204,58,1,120,204,8,0,141,206,56,1,0,204,206,0,143,204,252,1,141,206,1,2,0,204,206,0,143,204,3,2,119,0,195,255,141,204,56,1,32,204,204,0,121,204,5,0,141,206,239,1,0,204,206,0,143,204,241,1,119,0,10,0,141,206,239,1,26,204,206,4,143,204,59,1,141,204,59,1,141,206,56,1,85,204,206,0,141,204,59,1,0,206,204,0,143,206,241,1,141,204,121,2,0,206,204,0,143,206,123,2,141,204,241,1,141,203,123,2,16,206,204,203,143,206,60,1,141,206,60,1,120,206,5,0,141,203,123,2,0,206,203,0,143,206,124,2,119,0,18,0,141,203,123,2,26,206,203,4,143,206,61,1,141,203,61,1,82,206,203,0,143,206,62,1,141,206,62,1,32,206,206,0,121,206,5,0,141,203,61,1,0,206,203,0,143,206,123,2,119,0,234,255,141,203,123,2,0,206,203,0,143,206,124,2,119,0,1,0,141,203,133,2,106,206,203,16,143,206,64,1,141,206,133,2,141,203,64,1,141,204,46,1,4,203,203,204,109,206,16,203,1,203,0,0,141,206,64,1,141,204,46,1,4,206,206,204,47,203,203,206,88,20,1,0,141,206,64,1,141,204,46,1,4,203,206,204,143,203,44,1,141,204,241,1,0,203,204,0,143,203,239,1,141,204,124,2,0,203,204,0,143,203,121,2,119,0,96,255,141,203,64,1,141,204,46,1,4,44,203,204,141,203,241,1,0,204,203,0,143,204,238,1,141,203,124,2,0,204,203,0,143,204,120,2,119,0,7,0,0,44,43,0,0,204,24,0,143,204,238,1,141,203,42,1,0,204,203,0,143,204,120,2,34,204,44,0,143,204,65,1,141,204,65,1,121,204,175,0,0,204,44,0,143,204,67,1,141,203,238,1,0,204,203,0,143,204,243,1,141,203,120,2,0,204,203,0,143,204,126,2,1,203,0,0,141,206,67,1,4,204,203,206,143,204,66,1,1,206,9,0,141,203,66,1,15,206,206,203,1,203,9,0,141,207,66,1,125,204,206,203,207,0,0,0,143,204,68,1,141,207,243,1,141,203,126,2,16,204,207,203,143,204,69,1,141,204,69,1,121,204,75,0,1,204,0,0,143,204,253,1,141,203,243,1,0,204,203,0,143,204,4,2,141,203,4,2,82,204,203,0,143,204,72,1,141,203,72,1,141,207,68,1,24,203,203,207,141,207,253,1,3,204,203,207,143,204,73,1,141,204,4,2,141,207,73,1,85,204,207,0,141,204,72,1,1,203,1,0,141,206,68,1,22,203,203,206,26,203,203,1,19,204,204,203,141,203,68,1,24,203,201,203,5,207,204,203,143,207,74,1,141,203,4,2,25,207,203,4,143,207,75,1,141,203,75,1,141,204,126,2,16,207,203,204,143,207,76,1,141,207,76,1,121,207,8,0,141,204,74,1,0,207,204,0,143,207,253,1,141,204,75,1,0,207,204,0,143,207,4,2,119,0,219,255,141,204,243,1,82,207,204,0,143,207,77,1,141,204,243,1,25,207,204,4,143,207,78,1,141,207,77,1,32,207,207,0,141,204,78,1,141,203,243,1,125,32,207,204,203,0,0,0,141,203,74,1,32,203,203,0,121,203,6,0,0,34,32,0,141,204,126,2,0,203,204,0,143,203,127,2,119,0,28,0,141,204,126,2,25,203,204,4,143,203,79,1,141,203,126,2,141,204,74,1,85,203,204,0,0,34,32,0,141,203,79,1,0,204,203,0,143,204,127,2,119,0,17,0,141,203,243,1,82,204,203,0,143,204,70,1,141,203,243,1,25,204,203,4,143,204,71,1,141,204,70,1,32,204,204,0,141,203,71,1,141,207,243,1,125,33,204,203,207,0,0,0,0,34,33,0,141,203,126,2,0,207,203,0,143,207,127,2,141,203,107,2,39,203,203,32,32,203,203,102,125,207,203,24,34,0,0,0,143,207,80,1,141,203,127,2,0,207,203,0,143,207,81,1,25,203,41,25,28,203,203,9,38,203,203,255,25,203,203,1,141,204,81,1,141,206,80,1,4,204,204,206,42,204,204,2,47,203,203,204,232,22,1,0,141,203,80,1,25,204,41,25,28,204,204,9,38,204,204,255,25,204,204,1,41,204,204,2,3,203,203,204,0,207,203,0,119,0,3,0,141,203,127,2,0,207,203,0,0,51,207,0,141,203,133,2,106,207,203,16,143,207,82,1,141,207,133,2,141,203,82,1,141,204,68,1,3,203,203,204,109,207,16,203,141,203,82,1,141,207,68,1,3,203,203,207,34,203,203,0,121,203,10,0,141,207,82,1,141,204,68,1,3,203,207,204,143,203,67,1,0,203,34,0,143,203,243,1,0,203,51,0,143,203,126,2,119,0,96,255,0,203,34,0,143,203,242,1,0,203,51,0,143,203,125,2,119,0,7,0,141,204,238,1,0,203,204,0,143,203,242,1,141,204,120,2,0,203,204,0,143,203,125,2,141,204,242,1,141,207,125,2,16,203,204,207,143,203,84,1,141,203,84,1,121,203,44,0,141,207,242,1,0,203,207,0,143,203,85,1,141,207,242,1,82,203,207,0,143,203,86,1,141,203,86,1,35,203,203,10,121,203,7,0,141,207,85,1,4,207,24,207,42,207,207,2,27,203,207,9,143,203,12,2,119,0,31,0,141,207,85,1,4,207,24,207,42,207,207,2,27,203,207,9,143,203,11,2,1,203,10,0,143,203,38,2,141,207,38,2,27,203,207,10,143,203,87,1,141,207,11,2,25,203,207,1,143,203,88,1], eb + 61440);
  HEAPU8.set([141,203,86,1,141,207,87,1,48,203,203,207,32,24,1,0,141,207,88,1,0,203,207,0,143,203,12,2,119,0,10,0,141,207,88,1,0,203,207,0,143,203,11,2,141,207,87,1,0,203,207,0,143,203,38,2,119,0,236,255,1,203,0,0,143,203,12,2,141,207,107,2,39,207,207,32,33,207,207,102,141,204,12,2,1,206,0,0,125,203,207,204,206,0,0,0,143,203,90,1,141,206,90,1,4,206,41,206,33,204,41,0,141,207,107,2,39,207,207,32,32,207,207,103,19,204,204,207,41,204,204,31,42,204,204,31,3,203,206,204,143,203,91,1,141,204,125,2,0,203,204,0,143,203,92,1,141,203,91,1,141,204,92,1,4,204,204,24,42,204,204,2,27,204,204,9,26,204,204,9,47,203,203,204,108,30,1,0,141,204,91,1,1,206,0,36,3,204,204,206,28,204,204,9,38,204,204,255,1,206,255,3,4,204,204,206,41,204,204,2,3,203,24,204,143,203,93,1,141,203,91,1,1,204,0,36,3,203,203,204,30,203,203,9,38,203,203,255,25,203,203,1,34,203,203,9,121,203,30,0,1,203,10,0,143,203,42,2,141,204,91,1,1,206,0,36,3,204,204,206,30,204,204,9,38,204,204,255,25,203,204,1,143,203,53,2,141,204,42,2,27,203,204,10,143,203,94,1,141,204,53,2,25,203,204,1,143,203,52,2,141,203,52,2,32,203,203,9,121,203,5,0,141,204,94,1,0,203,204,0,143,203,41,2,119,0,10,0,141,204,94,1,0,203,204,0,143,203,42,2,141,204,52,2,0,203,204,0,143,203,53,2,119,0,237,255,1,203,10,0,143,203,41,2,141,204,93,1,82,203,204,0,143,203,95,1,141,204,95,1,141,206,41,2,9,204,204,206,38,204,204,255,0,203,204,0,143,203,96,1,141,203,96,1,32,203,203,0,121,203,28,0,141,204,91,1,1,206,0,36,3,204,204,206,28,204,204,9,38,204,204,255,1,206,254,3,4,204,204,206,41,204,204,2,3,204,24,204,141,206,125,2,13,203,204,206,143,203,97,1,141,203,97,1,121,203,11,0,141,206,242,1,0,203,206,0,143,203,247,1,141,206,93,1,0,203,206,0,143,203,7,2,141,206,12,2,0,203,206,0,143,203,14,2,119,0,6,0,1,203,163,0,143,203,132,2,119,0,3,0,1,203,163,0,143,203,132,2,141,203,132,2,1,206,163,0,45,203,203,206,24,30,1,0,1,203,0,0,143,203,132,2,141,206,95,1,141,204,41,2,7,206,206,204,38,206,206,255,0,203,206,0,143,203,98,1,141,206,98,1,38,206,206,1,32,206,206,0,121,206,5,0,61,206,0,0,0,0,0,90,58,203,206,0,119,0,5,0,62,206,0,0,1,0,0,0,0,0,64,67,58,203,206,0,58,17,203,0,141,206,41,2,28,206,206,2,38,206,206,255,0,203,206,0,143,203,99,1,141,203,96,1,141,206,99,1,48,203,203,206,188,26,1,0,61,203,0,0,0,0,0,63,144,203,99,2,119,0,25,0,141,203,96,1,141,206,99,1,45,203,203,206,16,27,1,0,141,206,91,1,1,204,0,36,3,206,206,204,28,206,206,9,38,206,206,255,1,204,254,3,4,206,206,204,41,206,206,2,3,206,24,206,141,204,125,2,13,203,206,204,143,203,101,1,141,203,101,1,121,203,4,0,59,203,1,0,144,203,99,2,119,0,4,0,61,203,0,0,0,0,192,63,144,203,99,2,141,204,75,2,32,203,204,0,143,203,102,1,141,203,102,1,121,203,7,0,58,203,17,0,144,203,87,2,142,204,99,2,58,203,204,0,144,203,100,2,119,0,23,0,141,204,81,2,78,203,204,0,143,203,103,1,141,203,103,1,41,203,203,24,42,203,203,24,32,203,203,45,120,203,7,0,58,203,17,0,144,203,87,2,142,204,99,2,58,203,204,0,144,203,100,2,119,0,9,0,142,204,99,2,68,203,204,0,144,203,104,1,68,203,17,0,144,203,87,2,142,204,104,1,58,203,204,0,144,203,100,2,141,203,93,1,141,204,95,1,141,206,96,1,4,204,204,206,85,203,204,0,142,203,87,2,142,206,100,2,63,204,203,206,144,204,105,1,142,206,105,1,142,203,87,2,70,204,206,203,143,204,107,1,141,204,107,1,120,204,11,0,141,203,242,1,0,204,203,0,143,204,247,1,141,203,93,1,0,204,203,0,143,204,7,2,141,203,12,2,0,204,203,0,143,204,14,2,119,0,134,0,141,203,95,1,141,206,96,1,4,203,203,206,141,206,41,2,3,204,203,206,143,204,108,1,141,204,93,1,141,206,108,1,85,204,206,0,2,206,0,0,255,201,154,59,141,204,108,1,48,206,206,204,36,29,1,0,141,204,242,1,0,206,204,0,143,206,245,1,141,204,93,1,0,206,204,0,143,206,6,2,141,204,6,2,26,206,204,4,143,206,109,1,141,206,6,2,1,204,0,0,85,206,204,0,141,206,109,1,141,203,245,1,16,204,206,203,143,204,110,1,141,204,110,1,121,204,11,0,141,203,245,1,26,204,203,4,143,204,111,1,141,204,111,1,1,203,0,0,85,204,203,0,141,204,111,1,0,203,204,0,143,203,246,1,119,0,4,0,141,204,245,1,0,203,204,0,143,203,246,1,141,204,109,1,82,203,204,0,143,203,112,1,141,203,109,1,141,204,112,1,25,204,204,1,85,203,204,0,2,204,0,0,255,201,154,59,141,203,112,1,25,203,203,1,48,204,204,203,8,29,1,0,141,203,246,1,0,204,203,0,143,204,245,1,141,203,109,1,0,204,203,0,143,204,6,2,119,0,212,255,141,203,246,1,0,204,203,0,143,204,244,1,141,203,109,1,0,204,203,0,143,204,5,2,119,0,7,0,141,203,242,1,0,204,203,0,143,204,244,1,141,203,93,1,0,204,203,0,143,204,5,2,141,203,244,1,0,204,203,0,143,204,113,1,141,203,244,1,82,204,203,0,143,204,115,1,141,204,115,1,35,204,204,10,121,204,13,0,141,203,244,1,0,204,203,0,143,204,247,1,141,203,5,2,0,204,203,0,143,204,7,2,141,203,113,1,4,203,24,203,42,203,203,2,27,204,203,9,143,204,14,2,119,0,35,0,141,203,113,1,4,203,24,203,42,203,203,2,27,204,203,9,143,204,13,2,1,204,10,0,143,204,46,2,141,203,46,2,27,204,203,10,143,204,116,1,141,203,13,2,25,204,203,1,143,204,117,1,141,204,115,1,141,203,116,1,48,204,204,203,252,29,1,0,141,203,244,1,0,204,203,0,143,204,247,1,141,203,5,2,0,204,203,0,143,204,7,2,141,203,117,1,0,204,203,0,143,204,14,2,119,0,8,0,141,203,117,1,0,204,203,0,143,204,13,2,141,203,116,1,0,204,203,0,143,204,46,2,119,0,230,255,141,203,7,2,25,204,203,4,143,204,118,1,141,203,118,1,141,206,125,2,16,204,203,206,143,204,119,1,141,204,119,1,141,206,118,1,141,203,125,2,125,50,204,206,203,0,0,0,141,206,247,1,0,203,206,0,143,203,248,1,141,206,14,2,0,203,206,0,143,203,15,2,0,203,50,0,143,203,131,2,119,0,10,0,141,206,242,1,0,203,206,0,143,203,248,1,141,206,12,2,0,203,206,0,143,203,15,2,141,206,125,2,0,203,206,0,143,203,131,2,1,206,0,0,141,204,15,2,4,203,206,204,143,203,120,1,141,204,131,2,0,203,204,0,143,203,129,2,141,204,248,1,141,206,129,2,16,203,204,206,143,203,121,1,141,203,121,1,120,203,6,0,1,37,0,0,141,206,129,2,0,203,206,0,143,203,130,2,119,0,19,0,141,206,129,2,26,203,206,4,143,203,122,1,141,206,122,1,82,203,206,0,143,203,123,1,141,203,123,1,32,203,203,0,121,203,5,0,141,206,122,1,0,203,206,0,143,203,129,2,119,0,233,255,1,37,1,0,141,206,129,2,0,203,206,0,143,203,130,2,119,0,1,0,141,203,107,2,39,203,203,32,32,203,203,103,121,203,148,0,33,203,41,0,38,203,203,1,40,203,203,1,3,38,203,41,141,206,15,2,15,203,206,38,143,203,124,1,1,206,251,255,141,204,15,2,15,203,206,204,143,203,125,1,141,203,124,1,141,204,125,1,19,203,203,204,121,203,10,0,26,204,38,1,141,206,15,2,4,203,204,206,143,203,126,1,141,203,107,2,26,11,203,1,141,203,126,1,0,21,203,0,119,0,4,0,141,203,107,2,26,11,203,2,26,21,38,1,141,203,23,2,38,203,203,8,32,203,203,0,120,203,7,0,0,15,11,0,0,25,21,0,141,203,23,2,38,203,203,8,0,47,203,0,119,0,117,0,121,37,49,0,141,206,130,2,26,203,206,4,143,203,127,1,141,206,127,1,82,203,206,0,143,203,128,1,141,203,128,1,32,203,203,0,121,203,4,0,1,203,9,0,143,203,55,2,119,0,39,0,141,203,128,1,31,203,203,10,38,203,203,255,32,203,203,0,121,203,6,0,1,203,10,0,143,203,48,2,1,203,0,0,143,203,54,2,119,0,4,0,1,203,0,0,143,203,55,2,119,0,26,0,141,206,48,2,27,203,206,10,143,203,129,1,141,206,54,2,25,203,206,1,143,203,130,1,141,203,128,1,141,206,129,1,9,203,203,206,38,203,203,255,32,203,203,0,121,203,8,0,141,206,129,1,0,203,206,0,143,203,48,2,141,206,130,1,0,203,206,0,143,203,54,2,119,0,238,255,141,206,130,1,0,203,206,0,143,203,55,2,119,0,3,0,1,203,9,0,143,203,55,2,39,206,11,32,0,203,206,0,143,203,131,1,141,206,130,2,0,203,206,0,143,203,132,1,141,203,131,1,32,203,203,102,121,203,24,0,141,206,132,1,4,206,206,24,42,206,206,2,27,206,206,9,26,206,206,9,141,204,55,2,4,203,206,204,143,203,134,1,141,203,134,1,34,203,203,0,1,204,0,0,141,206,134,1,125,18,203,204,206,0,0,0,15,206,21,18,143,206,135,1,141,206,135,1,125,19,206,21,18,0,0,0,0,15,11,0,0,25,19,0,1,47,0,0,119,0,34,0,141,204,132,1,4,204,204,24,42,204,204,2,27,204,204,9,26,204,204,9,141,203,15,2,3,206,204,203,143,206,136,1,141,203,136,1,141,204,55,2,4,206,203,204,143,206,137,1,141,206,137,1,34,206,206,0,1,204,0,0,141,203,137,1,125,22,206,204,203,0,0,0,15,203,21,22,143,203,138,1,141,203,138,1,125,20,203,21,22,0,0,0,0,15,11,0,0,25,20,0,1,47,0,0,119,0,7,0,141,203,107,2,0,15,203,0,0,25,41,0,141,203,23,2,38,203,203,8,0,47,203,0,20,204,25,47,0,203,204,0,143,203,139,1,39,204,15,32,0,203,204,0,143,203,141,1,141,203,141,1,32,203,203,102,121,203,16,0,1,204,0,0,141,206,15,2,15,203,204,206,143,203,142,1,141,206,142,1,141,204,15,2,1,207,0,0,125,203,206,204,207,0,0,0,143,203,143,1,141,203,143,1,0,42,203,0,1,203,0,0,143,203,19,2,119,0,83,0,141,207,15,2,34,203,207,0,143,203,144,1,141,207,144,1,141,204,120,1,141,206,15,2,125,203,207,204,206,0,0,0,143,203,145,1,141,206,145,1,141,204,145,1,34,204,204,0,41,204,204,31,42,204,204,31,141,207,133,2,1,208,64,2,3,207,207,208,25,207,207,12,134,203,0,0,116,200,4,0,206,204,207,0,143,203,146,1,141,203,222,1,141,207,146,1,4,203,203,207,34,203,203,2,121,203,23,0,141,207,146,1,0,203,207,0,143,203,18,2,141,207,18,2,26,203,207,1,143,203,148,1,141,203,148,1,1,207,48,0,83,203,207,0,141,207,222,1,141,203,148,1,4,207,207,203,34,207,207,2,121,207,5,0,141,203,148,1,0,207,203,0,143,207,18,2,119,0,242,255,141,203,148,1,0,207,203,0,143,207,17,2,119,0,4,0,141,203,146,1,0,207,203,0,143,207,17,2,141,203,15,2,42,203,203,31,0,207,203,0,143,207,149,1,141,203,17,2,26,207,203,1,143,207,151,1,141,207,151,1,141,203,149,1,38,203,203,2,25,203,203,43,1,204,255,0,19,203,203,204,83,207,203,0,1,207,255,0,19,207,15,207,0,203,207,0,143,203,152,1,141,207,17,2,26,203,207,2,143,203,153,1,141,203,153,1,141,207,152,1,83,203,207,0,141,207,222,1,141,203,153,1,4,42,207,203,141,207,153,1,0,203,207,0,143,203,19,2,141,207,75,2,25,203,207,1,143,203,154,1,141,207,154,1,3,203,207,25,143,203,155,1,141,207,155,1,141,204,139,1,33,204,204,0,38,204,204,1,3,207,207,204,3,203,207,42,143,203,156,1,1,207,32,0,141,204,111,2,141,206,156,1,141,208,23,2,134,203,0,0,16,223,4,0,0,207,204,206,208,0,0,0,82,203,0,0,143,203,157,1,141,203,157,1,38,203,203,32,32,203,203,0,121,203,6,0,141,208,81,2,141,206,75,2,134,203,0,0,68,94,4,0,208,206,0,0,1,206,48,0,141,208,111,2,141,204,156,1,141,207,23,2,2,209,0,0,0,0,1,0,21,207,207,209,134,203,0,0,16,223,4,0,0,206,208,204,207,0,0,0,141,203,141,1,32,203,203,102,121,203,224,0,141,207,248,1,16,203,24,207,143,203,158,1,141,207,158,1,141,204,248,1,125,203,207,24,204,0,0,0,143,203,84,2,141,204,84,2,0,203,204,0,143,203,8,2,141,204,8,2,82,203,204,0,143,203,159,1,141,204,159,1,1,207,0,0,134,203,0,0,116,200,4,0,204,207,68,0,143,203,160,1,141,207,8,2,141,204,84,2,13,203,207,204,143,203,161,1,141,203,161,1,121,203,17,0,141,203,160,1,52,203,203,68,120,36,1,0,141,204,160,1,0,203,204,0,143,203,93,2,119,0,42,0,141,203,133,2,3,203,203,200,1,204,48,0,107,203,8,204,141,203,133,2,3,203,203,200,25,204,203,8,143,204,93,2,119,0,33,0,141,204,133,2,3,204,204,200,141,203,160,1,48,204,204,203,192,36,1,0,141,203,160,1,0,204,203,0,143,204,92,2,119,0,5,0,141,203,160,1,0,204,203,0,143,204,93,2,119,0,20,0,141,203,92,2,26,204,203,1,143,204,162,1,141,204,162,1,1,203,48,0,83,204,203,0,141,203,133,2,3,203,203,200,141,204,162,1,48,203,203,204,12,37,1,0,141,204,162,1,0,203,204,0,143,203,92,2,119,0,242,255,141,204,162,1,0,203,204,0,143,203,93,2,119,0,1,0,82,203,0,0,143,203,164,1,141,203,164,1,38,203,203,32,32,203,203,0,121,203,10,0,141,204,93,2,0,203,204,0,143,203,165,1,141,204,93,2,141,207,165,1,4,207,68,207,134,203,0,0,68,94,4,0,204,207,0,0,141,207,8,2,25,203,207,4,143,203,166,1,141,203,166,1,55,203,24,203,128,37,1,0,141,207,166,1,0,203,207,0,143,203,8,2,119,0,169,255,141,203,139,1,32,203,203,0,120,203,12,0,82,203,0,0,143,203,167,1,141,203,167,1,38,203,203,32,32,203,203,0,120,203,2,0,119,0,5,0,1,207,1,0,134,203,0,0,68,94,4,0,202,207,0,0,141,207,166,1,141,204,130,2,16,203,207,204,143,203,169,1,1,204,0,0,15,203,204,25,143,203,170,1,141,203,170,1,141,204,169,1,19,203,203,204,121,203,88,0,0,28,25,0,141,204,166,1,0,203,204,0,143,203,9,2,141,204,9,2,82,203,204,0,143,203,171,1,141,204,171,1,1,207,0,0,134,203,0,0,116,200,4,0,204,207,68,0,143,203,172,1,141,203,133,2,3,203,203,200,141,207,172,1,48,203,203,207,132,38,1,0,141,207,172,1,0,203,207,0,143,203,95,2,141,207,95,2,26,203,207,1,143,203,173,1,141,203,173,1,1,207,48,0,83,203,207,0,141,207,133,2,3,207,207,200,141,203,173,1,48,207,207,203,116,38,1,0,141,203,173,1,0,207,203,0,143,207,95,2,119,0,242,255,141,203,173,1,0,207,203,0,143,207,94,2,119,0,4,0,141,203,172,1,0,207,203,0,143,207,94,2,82,207,0,0,143,207,174,1,141,207,174,1,38,207,207,32,32,207,207,0,121,207,14,0,1,203,9,0,15,207,203,28,143,207,175,1,141,203,175,1,1,204,9,0,125,207,203,204,28,0,0,0,143,207,176,1,141,204,94,2,141,203,176,1,134,207,0,0,68,94,4,0,204,203,0,0,141,203,9,2,25,207,203,4,143,207,177,1,26,207,28,9,143,207,178,1,141,203,177,1,141,204,130,2,16,207,203,204,143,207,179,1,1,204,9,0,15,207,204,28,143,207,180,1,141,207,180,1,141,204,179,1,19,207,207,204,121,207,7,0,141,207,178,1,0,28,207,0,141,204,177,1,0,207,204,0,143,207,9,2,119,0,177,255,141,207,178,1,0,27,207,0,119,0,2,0,0,27,25,0,25,207,27,9,143,207,181,1,1,204,48,0,141,203,181,1,1,208,9,0,1,206,0,0,134,207,0,0,16,223,4,0,0,204,203,208,206,0,0,0,119,0,205,0,141,206,248,1,25,207,206,4,143,207,182,1,141,206,130,2,141,208,182,1,125,207,37,206,208,0,0,0,143,207,128,2,1,208,255,255,15,207,208,25,143,207,183,1,141,207,183,1,121,207,164,0,32,207,47,0,143,207,184,1,0,31,25,0,141,208,248,1,0,207,208,0,143,207,10,2,141,208,10,2,82,207,208,0,143,207,185,1,141,208,185,1,1,206,0,0,134,207,0,0,116,200,4,0,208,206,68,0,143,207,186,1,141,207,186,1,45,207,207,68,16,40,1,0,141,207,133,2,3,207,207,200,1,206,48,0,107,207,8,206,141,207,133,2,3,207,207,200,25,206,207,8,143,206,96,2,119,0,4,0,141,207,186,1,0,206,207,0,143,206,96,2,141,207,10,2,141,208,248,1,13,206,207,208,143,206,187,1,141,206,187,1,121,206,43,0,141,208,96,2,25,206,208,1,143,206,191,1,82,206,0,0,143,206,192,1,141,206,192,1,38,206,206,32,32,206,206,0,121,206,6,0,141,208,96,2,1,207,1,0,134,206,0,0,68,94,4,0,208,207,0,0,34,206,31,1,143,206,193,1,141,206,184,1,141,207,193,1,19,206,206,207,121,206,5,0,141,207,191,1,0,206,207,0,143,206,98,2,119,0,53,0,82,206,0,0,143,206,194,1,141,206,194,1,38,206,206,32,32,206,206,0,120,206,5,0,141,207,191,1,0,206,207,0,143,206,98,2,119,0,43,0,1,207,1,0,134,206,0,0,68,94,4,0,202,207,0,0,141,207,191,1,0,206,207,0,143,206,98,2,119,0,35,0,141,207,133,2,3,207,207,200,141,208,96,2,16,206,207,208,143,206,188,1,141,206,188,1,121,206,5,0,141,208,96,2,0,206,208,0,143,206,97,2,119,0,5,0,141,208,96,2,0,206,208,0,143,206,98,2,119,0,20,0,141,208,97,2,26,206,208,1,143,206,189,1,141,206,189,1,1,208,48,0,83,206,208,0,141,208,133,2,3,208,208,200,141,206,189,1,48,208,208,206,84,41,1,0,141,206,189,1,0,208,206,0,143,208,97,2,119,0,242,255,141,206,189,1,0,208,206,0,143,208,98,2,119,0,1,0,141,206,98,2,0,208,206,0,143,208,195,1,82,208,0,0,143,208,196,1,141,208,196,1,38,208,208,32,32,208,208,0,121,208,19,0,141,206,195,1,4,206,68,206,15,208,206,31,143,208,197,1,141,207,197,1,121,207,5,0,141,207,195,1,4,207,68,207,0,206,207,0,119,0,2,0,0,206,31,0,0,208,206,0,143,208,198,1,141,206,98,2,141,207,198,1,134,208,0,0,68,94,4,0,206,207,0,0,141,207,195,1,4,207,68,207,4,208,31,207,143,208,199,1,141,207,10,2,25,208,207,4,143,208,200,1,141,208,200,1,141,207,128,2,16,208,208,207,1,207,255,255,141,206,199,1,15,207,207,206,19,208,208,207,121,208,7,0,141,208,199,1,0,31,208,0,141,207,200,1,0,208,207,0,143,208,10,2,119,0,103,255,141,208,199,1,0,29,208,0,119,0,2,0,0,29,25,0,25,208,29,18,143,208,201,1,1,207,48,0,141,206,201,1,1,203,18,0,1,204,0,0,134,208,0,0,16,223,4,0,0,207,206,203,204,0,0,0,82,208,0,0,143,208,202,1,141,208,202,1,38,208,208,32,32,208,208,0,120,208,2,0,119,0,11,0,141,204,19,2,0,208,204,0,143,208,203,1,141,204,19,2,141,203,222,1,141,206,203,1,4,203,203,206,134,208,0,0,68,94,4,0,204,203,0,0,1,203,32,0,141,204,111,2,141,206,156,1,141,207,23,2,1,209,0,32,21,207,207,209,134,208,0,0,16,223,4,0,0,203,204,206,207,0,0,0,141,207,156,1,141,206,111,2,15,208,207,206,143,208,204,1,141,206,204,1,141,207,111,2,141,204,156,1,125,208,206,207,204,0,0,0,143,208,113,2,141,208,113,2,0,8,208,0,119,0,92,0,141,208,107,2,38,208,208,32,33,208,208,0,1,204,20,51,1,207,24,51,125,195,208,204,207,0,0,0,70,207,13,13,59,204,0,0,59,208,0,0,70,204,204,208,20,207,207,204,0,196,207,0,141,207,107,2,38,207,207,32,33,207,207,0,1,204,28,51,1,208,32,51,125,198,207,204,208,0,0,0,1,204,0,0,141,207,75,2,125,208,196,204,207,0,0,0,143,208,77,2,125,208,196,198,195,0,0,0,143,208,91,2,1,207,32,0,141,204,111,2,141,206,77,2,25,206,206,3,134,208,0,0,16,223,4,0,0,207,204,206,89,0,0,0,82,199,0,0,38,208,199,32,32,208,208,0,121,208,10,0,141,206,81,2,141,204,77,2,134,208,0,0,68,94,4,0,206,204,0,0,82,46,0,0,0,208,46,0,143,208,1,1,119,0,3,0,0,208,199,0,143,208,1,1,141,204,1,1,38,204,204,32,0,208,204,0,143,208,0,1,141,208,0,1,32,208,208,0,121,208,6,0,141,204,91,2,1,206,3,0,134,208,0,0,68,94,4,0,204,206,0,0,1,206,32,0,141,204,111,2,141,207,77,2,25,207,207,3,141,203,23,2,1,209,0,32,21,203,203,209,134,208,0,0,16,223,4,0,0,206,204,207,203,0,0,0,141,203,77,2,25,203,203,3,141,207,111,2,15,208,203,207,143,208,2,1,141,203,2,1,121,203,4,0,141,203,111,2,0,207,203,0,119,0,4,0,141,203,77,2,25,203,203,3,0,207,203,0,0,208,207,0,143,208,4,1,141,208,4,1,0,8,208,0,141,207,255,1,0,208,207,0,143,208,254,1,0,208,77,0,143,208,30,2,0,208,8,0,143,208,56,2,141,207,65,2,0,208,207,0,143,208,60,2,119,0,229,242,119,0,28,247,119,0,27,247,119,0,224,246,134,157,0,0,80,88,6,0,82,158,157,0,134,159,0,0,76,37,5,0,158,0,0,0,0,203,159,0,143,203,237,1,1,203,82,0,143,203,132,2,119,0,26,1,141,204,102,2,1,203,0,0,1,206,8,0,138,204,203,206,40,45,1,0,100,45,1,0,160,45,1,0,240,45,1,0,60,46,1,0,252,44,1,0,132,46,1,0,192,46,1,0,141,206,255,1,0,203,206,0,143,203,254,1,0,203,77,0,143,203,30,2,4,203,162,167,143,203,56,2,141,206,65,2,0,203,206,0,143,203,60,2,119,0,192,242,141,203,133,2,82,93,203,0,141,203,255,1,85,93,203,0,141,206,255,1,0,203,206,0,143,203,254,1,0,203,77,0,143,203,30,2,4,203,162,167,143,203,56,2,141,206,65,2,0,203,206,0,143,203,60,2,119,0,177,242,141,203,133,2,82,94,203,0,141,203,255,1,85,94,203,0,141,206,255,1,0,203,206,0,143,203,254,1,0,203,77,0,143,203,30,2,4,203,162,167,143,203,56,2,141,206,65,2,0,203,206,0,143,203,60,2,119,0,162,242,141,203,255,1,34,95,203,0,141,203,133,2,82,96,203,0,141,203,255,1,85,96,203,0,41,206,95,31,42,206,206,31,109,96,4,206,141,203,255,1,0,206,203,0,143,206,254,1,0,206,77,0,143,206,30,2,4,206,162,167,143,206,56,2,141,203,65,2,0,206,203,0,143,206,60,2,119,0,142,242,141,206,255,1,2,203,0,0,255,255,0,0,19,206,206,203,0,98,206,0,141,206,133,2,82,99,206,0,84,99,98,0,141,203,255,1,0,206,203,0,143,206,254,1,0,206,77,0,143,206,30,2,4,206,162,167,143,206,56,2,141,203,65,2,0,206,203,0,143,206,60,2,119,0,123,242,141,206,255,1,1,203,255,0,19,206,206,203,0,100,206,0,141,206,133,2,82,101,206,0,83,101,100,0,141,203,255,1,0,206,203,0,143,206,254,1,0,206,77,0,143,206,30,2,4,206,162,167,143,206,56,2,141,203,65,2,0,206,203,0,143,206,60,2,119,0,105,242,141,206,133,2,82,102,206,0,141,206,255,1,85,102,206,0,141,203,255,1,0,206,203,0,143,206,254,1,0,206,77,0,143,206,30,2,4,206,162,167,143,206,56,2,141,203,65,2,0,206,203,0,143,206,60,2,119,0,90,242,141,206,255,1,34,103,206,0,141,206,133,2,82,104,206,0,141,206,255,1,85,104,206,0,41,203,103,31,42,203,203,31,109,104,4,203,141,206,255,1,0,203,206,0,143,203,254,1,0,203,77,0,143,203,30,2,4,203,162,167,143,203,56,2,141,206,65,2,0,203,206,0,143,203,60,2,119,0,70,242,141,204,133,2,82,125,204,0,141,204,133,2,106,126,204,4,32,204,125,0,32,203,126,0,19,204,204,203,121,204,3,0,0,9,52,0,119,0,26,0,0,12,52,0,0,129,125,0,0,131,126,0,38,204,129,7,0,128,204,0,26,130,12,1,39,204,128,48,1,203,255,0,19,204,204,203,83,130,204,0,1,204,3,0,135,132,3,0,129,131,204,0,128,204,0,0,0,133,204,0,32,204,132,0,32,203,133,0,19,204,204,203,121,204,3,0,0,9,130,0,119,0,5,0,0,12,130,0,0,129,132,0,0,131,133,0,119,0,235,255,141,204,23,2,38,204,204,8,32,204,204,0,121,204,16,0,0,204,9,0,143,204,236,1,141,203,23,2,0,204,203,0,143,204,25,2,141,203,67,2,0,204,203,0,143,204,69,2,1,204,0,0,143,204,76,2,1,204,240,50,143,204,82,2,1,204,77,0,143,204,132,2,119,0,83,0,0,135,9,0,141,204,67,2,4,203,52,135,25,203,203,1,15,136,204,203,121,136,5,0,4,204,52,135,25,204,204,1,0,203,204,0,119,0,3,0,141,204,67,2,0,203,204,0,0,39,203,0,0,203,9,0,143,203,236,1,141,204,23,2,0,203,204,0,143,203,25,2,0,203,39,0,143,203,69,2,1,203,0,0,143,203,76,2,1,203,240,50,143,203,82,2,1,203,77,0,143,203,132,2,119,0,56,0,1,204,8,0,141,203,67,2,16,106,204,203,141,203,67,2,1,204,8,0,125,107,106,203,204,0,0,0,141,203,23,2,39,203,203,8,0,204,203,0,143,204,24,2,0,204,107,0,143,204,68,2,1,204,120,0,143,204,108,2,1,204,64,0,143,204,132,2,119,0,38,0,141,203,133,2,82,160,203,0,1,203,0,0,14,203,160,203,1,206,250,50,125,161,203,160,206,0,0,0,0,206,161,0,143,206,237,1,1,206,82,0,143,206,132,2,119,0,26,0,141,206,133,2,82,90,206,0,141,206,133,2,106,92,206,4,0,142,90,0,0,143,92,0,1,206,0,0,143,206,74,2,1,206,240,50,143,206,79,2,1,206,76,0,143,206,132,2,119,0,13,0,141,203,23,2,0,204,203,0,143,204,24,2,141,203,67,2,0,204,203,0,143,204,68,2,141,203,107,2,0,204,203,0,143,204,108,2,1,204,64,0,143,204,132,2,119,0,1,0,141,205,132,2,32,205,205,64,121,205,103,0,1,205,0,0,143,205,132,2,141,205,133,2,82,108,205,0,141,205,133,2,106,110,205,4,141,205,108,2,38,205,205,32,0,111,205,0,32,205,108,0,32,208,110,0,19,205,205,208,121,205,16,0,0,205,52,0,143,205,236,1,141,208,24,2,0,205,208,0,143,205,25,2,141,208,68,2,0,205,208,0,143,205,69,2,1,205,0,0,143,205,76,2,1,205,240,50,143,205,82,2,1,205,77,0,143,205,132,2,119,0,33,1,0,10,52,0,0,113,108,0,0,116,110,0,38,205,113,15,0,112,205,0,1,205,224,50,90,114,205,112,26,115,10,1,1,205,255,0,19,205,114,205,20,205,205,111,1,208,255,0,19,205,205,208,83,115,205,0,1,205,4,0,135,117,3,0,113,116,205,0,128,205,0,0,0,118,205,0,32,205,117,0,32,208,118,0,19,205,205,208,120,205,5,0,0,10,115,0,0,113,117,0,0,116,118,0,119,0,233,255,141,205,133,2,82,120,205,0,141,205,133,2,106,121,205,4,141,205,24,2,38,205,205,8,0,122,205,0,32,205,122,0,32,208,120,0,32,207,121,0,19,208,208,207,20,205,205,208,121,205,16,0,0,205,115,0,143,205,236,1,141,208,24,2,0,205,208,0,143,205,25,2,141,208,68,2,0,205,208,0,143,205,69,2,1,205,0,0,143,205,76,2,1,205,240,50,143,205,82,2,1,205,77,0,143,205,132,2,119,0,234,0,141,205,108,2,42,205,205,4,0,124,205,0,0,205,115,0,143,205,236,1,141,208,24,2,0,205,208,0,143,205,25,2,141,208,68,2,0,205,208,0,143,205,69,2,1,205,2,0,143,205,76,2,1,208,240,50,3,205,208,124,143,205,82,2,1,205,77,0,143,205,132,2,119,0,215,0,141,205,132,2,32,205,205,76,121,205,23,0,1,205,0,0,143,205,132,2,134,144,0,0,116,200,4,0,142,143,52,0,0,205,144,0,143,205,236,1,141,208,23,2,0,205,208,0,143,205,25,2,141,208,67,2,0,205,208,0,143,205,69,2,141,208,74,2,0,205,208,0,143,205,76,2,141,208,79,2,0,205,208,0,143,205,82,2,1,205,77,0,143,205,132,2,119,0,190,0,141,205,132,2,32,205,205,82,121,205,45,0,1,205,0,0,143,205,132,2,141,205,237,1,1,208,0,0,141,207,67,2,134,163,0,0,224,221,3,0,205,208,207,0,141,207,237,1,0,164,207,0,141,207,237,1,141,208,67,2,3,165,207,208,1,207,0,0,13,207,163,207,125,208,207,165,163,0,0,0,143,208,119,2,1,205,0,0,45,205,163,205,164,51,1,0,141,205,67,2,0,207,205,0,119,0,3,0,4,205,163,164,0,207,205,0,0,208,207,0,143,208,71,2,141,207,237,1,0,208,207,0,143,208,240,1,0,208,89,0,143,208,26,2,141,207,71,2,0,208,207,0,143,208,73,2,1,208,0,0,143,208,78,2,1,208,240,50,143,208,83,2,141,207,119,2,0,208,207,0,143,208,122,2,119,0,143,0,141,208,132,2,32,208,208,86,121,208,140,0,1,208,0,0,143,208,132,2,141,208,133,2,82,170,208,0,1,208,0,0,143,208,37,2,1,208,0,0,143,208,58,2,0,208,170,0,143,208,114,2,141,208,114,2,82,171,208,0,32,208,171,0,121,208,8,0,141,207,37,2,0,208,207,0,143,208,35,2,141,207,58,2,0,208,207,0,143,208,59,2,119,0,39,0,141,208,133,2,1,207,16,2,3,208,208,207,134,172,0,0,4,105,6,0,208,171,0,0,141,208,72,2,141,207,37,2,4,173,208,207,34,207,172,0,16,208,173,172,20,207,207,208,121,207,7,0,141,208,37,2,0,207,208,0,143,207,35,2,0,207,172,0,143,207,59,2,119,0,20,0,141,207,114,2,25,174,207,4,141,207,37,2,3,175,172,207,141,207,72,2,16,176,175,207,121,176,8,0,0,207,175,0,143,207,37,2,0,207,172,0,143,207,58,2,0,207,174,0,143,207,114,2,119,0,213,255,0,207,175,0,143,207,35,2,0,207,172,0,143,207,59,2,119,0,1,0,141,207,59,2,34,177,207,0,121,177,3,0,1,7,255,255,119,0,41,1,1,208,32,0,141,205,111,2,141,203,35,2,141,204,23,2,134,207,0,0,16,223,4,0,0,208,205,203,204,0,0,0,141,207,35,2,32,178,207,0,121,178,6,0,1,207,0,0,143,207,36,2,1,207,98,0,143,207,132,2,119,0,60,0,141,207,133,2,82,179,207,0,1,207,0,0,143,207,43,2,0,207,179,0,143,207,115,2,141,207,115,2,82,180,207,0,32,207,180,0,121,207,7,0,141,204,35,2,0,207,204,0,143,207,36,2,1,207,98,0,143,207,132,2,119,0,44,0,141,207,115,2,25,181,207,4,141,207,133,2,1,204,16,2,3,207,207,204,134,182,0,0,4,105,6,0,207,180,0,0,141,207,43,2,3,184,182,207,141,207,35,2,15,185,207,184,121,185,7,0,141,204,35,2,0,207,204,0,143,207,36,2,1,207,98,0,143,207,132,2,119,0,25,0,82,186,0,0,38,207,186,32,32,207,207,0,121,207,7,0,141,204,133,2,1,203,16,2,3,204,204,203,134,207,0,0,68,94,4,0,204,182,0,0,141,207,35,2,16,187,184,207,121,187,6,0,0,207,184,0,143,207,43,2,0,207,181,0,143,207,115,2,119,0,210,255,141,204,35,2,0,207,204,0,143,207,36,2,1,207,98,0,143,207,132,2,119,0,1,0,141,207,132,2,32,207,207,98,121,207,31,0,1,207,0,0,143,207,132,2,1,204,32,0,141,203,111,2,141,205,36,2,141,208,23,2,1,206,0,32,21,208,208,206,134,207,0,0,16,223,4,0,0,204,203,205,208,0,0,0,141,207,36,2,141,208,111,2,15,188,207,208,141,208,111,2,141,207,36,2,125,189,188,208,207,0,0,0,141,208,255,1,0,207,208,0,143,207,254,1,0,207,77,0,143,207,30,2,0,207,189,0,143,207,56,2,141,208,65,2,0,207,208,0,143,207,60,2,119,0,94,240,141,207,132,2,32,207,207,77,121,207,71,0,1,207,0,0,143,207,132,2,1,207,255,255,141,208,69,2,15,145,207,208,141,208,25,2,2,207,0,0,255,255,254,255,19,208,208,207,0,147,208,0,141,208,25,2,125,35,145,147,208,0,0,0,141,208,133,2,82,148,208,0,141,208,133,2,106,149,208,4,141,208,69,2,33,151,208,0,33,208,148,0,33,207,149,0,20,208,208,207,20,208,151,208,121,208,33,0,141,208,236,1,0,152,208,0,33,208,148,0,33,207,149,0,20,208,208,207,38,208,208,1,40,208,208,1,4,207,52,152,3,153,208,207,141,207,69,2,15,154,153,207,141,208,69,2,125,207,154,208,153,0,0,0,143,207,70,2,141,208,236,1,0,207,208,0,143,207,240,1,0,207,35,0,143,207,26,2,141,208,70,2,0,207,208,0,143,207,73,2,141,208,76,2,0,207,208,0,143,207,78,2,141,208,82,2,0,207,208,0,143,207,83,2,0,207,52,0,143,207,122,2,119,0,15,0,0,207,52,0,143,207,240,1,0,207,35,0,143,207,26,2,1,207,0,0,143,207,73,2,141,208,76,2,0,207,208,0,143,207,78,2,141,208,82,2,0,207,208,0,143,207,83,2,0,207,52,0,143,207,122,2,141,208,122,2,0,207,208,0,143,207,205,1,141,208,240,1,0,207,208,0,143,207,206,1,141,208,73,2,141,205,205,1,141,203,206,1,4,205,205,203,15,207,208,205,143,207,207,1,141,205,207,1,121,205,6,0,141,205,205,1,141,208,206,1,4,205,205,208,0,207,205,0,119,0,3,0,141,205,73,2,0,207,205,0,0,40,207,0,141,205,78,2,3,207,205,40,143,207,208,1,141,205,111,2,141,208,208,1,15,207,205,208,143,207,209,1,141,208,209,1,141,205,208,1,141,203,111,2,125,207,208,205,203,0,0,0,143,207,112,2,1,203,32,0,141,205,112,2,141,208,208,1,141,204,26,2,134,207,0,0,16,223,4,0,0,203,205,208,204,0,0,0,82,207,0,0,143,207,210,1,141,207,210,1,38,207,207,32,32,207,207,0,121,207,6,0,141,204,83,2,141,208,78,2,134,207,0,0,68,94,4,0,204,208,0,0,141,208,26,2,2,204,0,0,0,0,1,0,21,208,208,204,0,207,208,0,143,207,211,1,1,208,48,0,141,204,112,2,141,205,208,1,141,203,211,1,134,207,0,0,16,223,4,0,0,208,204,205,203,0,0,0,1,203,48,0,141,205,205,1,141,204,206,1,4,205,205,204,1,204,0,0,134,207,0,0,16,223,4,0,0,203,40,205,204,0,0,0,82,207,0,0,143,207,212,1,141,207,212,1,38,207,207,32,32,207,207,0,121,207,8,0,141,204,240,1,141,205,205,1,141,203,206,1,4,205,205,203,134,207,0,0,68,94,4,0,204,205,0,0,141,205,26,2,1,204,0,32,21,205,205,204,0,207,205,0,143,207,214,1,1,205,32,0,141,204,112,2,141,203,208,1,141,208,214,1,134,207,0,0,16,223,4,0,0,205,204,203,208,0,0,0,141,208,255,1,0,207,208,0,143,207,254,1,0,207,77,0,143,207,30,2,141,208,112,2,0,207,208,0,143,207,56,2,141,208,65,2,0,207,208,0,143,207,60,2,119,0,162,239,141,207,132,2,1,208,245,0,45,207,207,208,236,58,1,0,1,207,0,0,45,207,0,207,228,58,1,0,141,207,61,2,32,207,207,0,121,207,3,0,1,7,0,0,119,0,72,0,1,207,1,0,143,207,44,2,141,208,44,2,41,208,208,2,3,207,4,208,143,207,215,1,141,208,215,1,82,207,208,0,143,207,216,1,141,207,216,1,32,207,207,0,121,207,5,0,141,208,44,2,0,207,208,0,143,207,45,2,119,0,22,0,141,208,44,2,41,208,208,3,3,207,3,208,143,207,217,1,141,208,217,1,141,203,216,1,134,207,0,0,160,228,2,0,208,203,2,0,141,203,44,2,25,207,203,1,143,207,218,1,141,207,218,1,34,207,207,10,121,207,5,0,141,203,218,1,0,207,203,0,143,207,44,2,119,0,224,255,1,7,1,0,119,0,35,0,141,207,45,2,34,207,207,10,121,207,28,0,141,203,45,2,0,207,203,0,143,207,47,2,141,203,47,2,41,203,203,2,3,207,4,203,143,207,220,1,141,203,220,1,82,207,203,0,143,207,221,1,141,203,47,2,25,207,203,1,143,207,219,1,141,207,221,1,32,207,207,0,120,207,3,0,1,7,255,255,119,0,14,0,141,207,219,1,34,207,207,10,121,207,5,0,141,203,219,1,0,207,203,0,143,207,47,2,119,0,235,255,1,7,1,0,119,0,5,0,1,7,1,0,119,0,3,0,141,207,0,2,0,7,207,0,141,207,133,2,137,207,0,0,139,7,0,0,140,3,139,0,0,0,0,0,1,132,0,0,136,136,0,0,0,133,136,0,136,136,0,0,25,136,136,64,137,136,0,0,130,136,0,0,136,137,0,0,49,136,136,137,44,59,1,0,135,136,0,0,127,136,0,0,114,136,1,0,127,136,0,0,102,137,1,1,107,136,1,137,127,137,0,0,102,136,1,2,107,137,2,136,127,136,0,0,102,137,1,3,107,136,3,137,127,137,0,0,88,3,137,0,127,137,0,0,114,137,2,0,127,137,0,0,102,136,2,1,107,137,1,136,127,136,0,0,102,137,2,2,107,136,2,137,127,137,0,0,102,136,2,3,107,137,3,136,127,136,0,0,88,4,136,0,127,136,0,0,25,137,1,16,114,136,137,0,127,137,0,0,25,136,1,16,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,16,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,16,102,136,136,3,107,137,3,136,127,136,0,0,88,108,136,0,127,136,0,0,25,137,2,4,114,136,137,0,127,137,0,0,25,136,2,4,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,4,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,4,102,136,136,3,107,137,3,136,127,136,0,0,88,116,136,0,127,136,0,0,25,137,1,32,114,136,137,0,127,137,0,0,25,136,1,32,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,32,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,32,102,136,136,3,107,137,3,136,127,136,0,0,88,5,136,0,127,136,0,0,25,137,2,8,114,136,137,0,127,137,0,0,25,136,2,8,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,8,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,8,102,136,136,3,107,137,3,136,127,136,0,0,88,13,136,0,127,136,0,0,25,137,1,48,114,136,137,0,127,137,0,0,25,136,1,48,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,48,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,48,102,136,136,3,107,137,3,136,127,136,0,0,88,27,136,0,127,136,0,0,25,137,2,12,114,136,137,0,127,137,0,0,25,136,2,12,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,12,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,12,102,136,136,3,107,137,3,136,127,136,0,0,88,35,136,0,127,136,0,0,65,137,3,4,65,138,108,116,63,137,137,138,65,138,5,13,63,137,137,138,65,138,27,35,63,137,137,138,89,136,137,0,127,137,0,0,114,133,137,0,127,136,0,0,102,136,136,1,107,133,1,136,127,137,0,0,102,137,137,2,107,133,2,137,127,136,0,0,102,136,136,3,107,133,3,136,127,136,0,0,114,136,1,0,127,136,0,0,102,137,1,1,107,136,1,137,127,137,0,0,102,136,1,2,107,137,2,136,127,136,0,0,102,137,1,3,107,136,3,137,127,137,0,0,88,46,137,0,127,137,0,0,25,136,2,16,114,137,136,0,127,136,0,0,25,137,2,16,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,16,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,16,102,137,137,3,107,136,3,137,127,137,0,0,88,54,137,0,127,137,0,0,25,136,1,16,114,137,136,0,127,136,0,0,25,137,1,16,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,16,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,16,102,137,137,3,107,136,3,137,127,137,0,0,88,65,137,0,127,137,0,0,25,136,2,20,114,137,136,0,127,136,0,0,25,137,2,20,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,20,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,20,102,137,137,3,107,136,3,137,127,137,0,0,88,72,137,0,127,137,0,0,25,136,1,32,114,137,136,0,127,136,0,0,25,137,1,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,32,102,137,137,3,107,136,3,137,127,137,0,0,88,87,137,0,127,137,0,0,25,136,2,24,114,137,136,0,127,136,0,0,25,137,2,24,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,24,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,24,102,137,137,3,107,136,3,137,127,137,0,0,88,95,137,0,127,137,0,0,25,136,1,48,114,137,136,0,127,136,0,0,25,137,1,48,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,48,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,48,102,137,137,3,107,136,3,137,127,137,0,0,88,107,137,0,127,137,0,0,25,136,2,28,114,137,136,0,127,136,0,0,25,137,2,28,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,28,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,28,102,137,137,3,107,136,3,137,127,137,0,0,88,109,137,0,127,137,0,0,65,136,46,54,65,138,65,72,63,136,136,138,65,138,87,95,63,136,136,138,65,138,107,109,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,16,137,25,137,133,16,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,16,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,16,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,114,136,1,0,127,136,0,0,102,137,1,1,107,136,1,137], eb + 71680);
  HEAPU8.set([127,137,0,0,102,136,1,2,107,137,2,136,127,136,0,0,102,137,1,3,107,136,3,137,127,137,0,0,88,110,137,0,127,137,0,0,25,136,2,32,114,137,136,0,127,136,0,0,25,137,2,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,32,102,137,137,3,107,136,3,137,127,137,0,0,88,111,137,0,127,137,0,0,25,136,1,16,114,137,136,0,127,136,0,0,25,137,1,16,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,16,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,16,102,137,137,3,107,136,3,137,127,137,0,0,88,112,137,0,127,137,0,0,25,136,2,36,114,137,136,0,127,136,0,0,25,137,2,36,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,36,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,36,102,137,137,3,107,136,3,137,127,137,0,0,88,113,137,0,127,137,0,0,25,136,1,32,114,137,136,0,127,136,0,0,25,137,1,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,32,102,137,137,3,107,136,3,137,127,137,0,0,88,114,137,0,127,137,0,0,25,136,2,40,114,137,136,0,127,136,0,0,25,137,2,40,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,40,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,40,102,137,137,3,107,136,3,137,127,137,0,0,88,115,137,0,127,137,0,0,25,136,1,48,114,137,136,0,127,136,0,0,25,137,1,48,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,48,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,48,102,137,137,3,107,136,3,137,127,137,0,0,88,117,137,0,127,137,0,0,25,136,2,44,114,137,136,0,127,136,0,0,25,137,2,44,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,44,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,44,102,137,137,3,107,136,3,137,127,137,0,0,88,118,137,0,127,137,0,0,65,136,110,111,65,138,112,113,63,136,136,138,65,138,114,115,63,136,136,138,65,138,117,118,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,32,137,25,137,133,32,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,32,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,32,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,114,136,1,0,127,136,0,0,102,137,1,1,107,136,1,137,127,137,0,0,102,136,1,2,107,137,2,136,127,136,0,0,102,137,1,3,107,136,3,137,127,137,0,0,88,119,137,0,127,137,0,0,25,136,2,48,114,137,136,0,127,136,0,0,25,137,2,48,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,48,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,48,102,137,137,3,107,136,3,137,127,137,0,0,88,120,137,0,127,137,0,0,25,136,1,16,114,137,136,0,127,136,0,0,25,137,1,16,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,16,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,16,102,137,137,3,107,136,3,137,127,137,0,0,88,121,137,0,127,137,0,0,25,136,2,52,114,137,136,0,127,136,0,0,25,137,2,52,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,52,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,52,102,137,137,3,107,136,3,137,127,137,0,0,88,122,137,0,127,137,0,0,25,136,1,32,114,137,136,0,127,136,0,0,25,137,1,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,32,102,137,137,3,107,136,3,137,127,137,0,0,88,123,137,0,127,137,0,0,25,136,2,56,114,137,136,0,127,136,0,0,25,137,2,56,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,56,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,56,102,137,137,3,107,136,3,137,127,137,0,0,88,124,137,0,127,137,0,0,25,136,1,48,114,137,136,0,127,136,0,0,25,137,1,48,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,48,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,48,102,137,137,3,107,136,3,137,127,137,0,0,88,125,137,0,127,137,0,0,25,136,2,60,114,137,136,0,127,136,0,0,25,137,2,60,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,60,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,60,102,137,137,3,107,136,3,137,127,137,0,0,88,126,137,0,127,137,0,0,65,136,119,120,65,138,121,122,63,136,136,138,65,138,123,124,63,136,136,138,65,138,125,126,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,48,137,25,137,133,48,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,48,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,48,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,4,114,136,137,0,127,137,0,0,25,136,1,4,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,4,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,4,102,136,136,3,107,137,3,136,127,136,0,0,88,127,136,0,127,136,0,0,114,136,2,0,127,136,0,0,102,137,2,1,107,136,1,137,127,137,0,0,102,136,2,2,107,137,2,136,127,136,0,0,102,137,2,3,107,136,3,137,127,137,0,0,88,128,137,0,127,137,0,0,25,136,1,20,114,137,136,0,127,136,0,0,25,137,1,20,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,20,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,20,102,137,137,3,107,136,3,137,127,137,0,0,88,129,137,0,127,137,0,0,25,136,2,4,114,137,136,0,127,136,0,0,25,137,2,4,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,4,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,4,102,137,137,3,107,136,3,137,127,137,0,0,88,130,137,0,127,137,0,0,25,136,1,36,114,137,136,0,127,136,0,0,25,137,1,36,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,36,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,36,102,137,137,3,107,136,3,137,127,137,0,0,88,6,137,0,127,137,0,0,25,136,2,8,114,137,136,0,127,136,0,0,25,137,2,8,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,8,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,8,102,137,137,3,107,136,3,137,127,137,0,0,88,7,137,0,127,137,0,0,25,136,1,52,114,137,136,0,127,136,0,0,25,137,1,52,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,52,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,52,102,137,137,3,107,136,3,137,127,137,0,0,88,8,137,0,127,137,0,0,25,136,2,12,114,137,136,0,127,136,0,0,25,137,2,12,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,12,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,12,102,137,137,3,107,136,3,137,127,137,0,0,88,9,137,0,127,137,0,0,65,136,127,128,65,138,129,130,63,136,136,138,65,138,6,7,63,136,136,138,65,138,8,9,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,4,137,25,137,133,4,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,4,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,4,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,4,114,136,137,0,127,137,0,0,25,136,1,4,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,4,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,4,102,136,136,3,107,137,3,136,127,136,0,0,88,10,136,0,127,136,0,0,25,137,2,16,114,136,137,0,127,137,0,0,25,136,2,16,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,16,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,16,102,136,136,3,107,137,3,136,127,136,0,0,88,11,136,0,127,136,0,0,25,137,1,20,114,136,137,0,127,137,0,0,25,136,1,20,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,20,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,20,102,136,136,3,107,137,3,136,127,136,0,0,88,12,136,0,127,136,0,0,25,137,2,20,114,136,137,0,127,137,0,0,25,136,2,20,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,20,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,20,102,136,136,3,107,137,3,136,127,136,0,0,88,14,136,0,127,136,0,0,25,137,1,36,114,136,137,0,127,137,0,0,25,136,1,36,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,36,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,36,102,136,136,3,107,137,3,136,127,136,0,0,88,15,136,0,127,136,0,0,25,137,2,24,114,136,137,0,127,137,0,0,25,136,2,24,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,24,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,24,102,136,136,3,107,137,3,136,127,136,0,0,88,16,136,0,127,136,0,0,25,137,1,52,114,136,137,0,127,137,0,0,25,136,1,52,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,52,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,52,102,136,136,3,107,137,3,136,127,136,0,0,88,17,136,0,127,136,0,0,25,137,2,28,114,136,137,0,127,137,0,0,25,136,2,28,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,28,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,28,102,136,136,3,107,137,3,136,127,136,0,0,88,18,136,0,127,136,0,0,65,137,10,11,65,138,12,14,63,137,137,138,65,138,15,16,63,137,137,138,65,138,17,18,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,20,136,25,136,133,20,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,20,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,20,127,137,0,0,102,137,137,3,107,136,3,137,127,137,0,0,25,136,1,4,114,137,136,0,127,136,0,0,25,137,1,4,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,4,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,4,102,137,137,3,107,136,3,137,127,137,0,0,88,19,137,0,127,137,0,0,25,136,2,32,114,137,136,0,127,136,0,0,25,137,2,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,32,102,137,137,3,107,136,3,137,127,137,0,0,88,20,137,0,127,137,0,0,25,136,1,20,114,137,136,0,127,136,0,0,25,137,1,20,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,20,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,20,102,137,137,3,107,136,3,137,127,137,0,0,88,21,137,0,127,137,0,0,25,136,2,36,114,137,136,0,127,136,0,0,25,137,2,36,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,36,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,36,102,137,137,3,107,136,3,137,127,137,0,0,88,22,137,0,127,137,0,0,25,136,1,36,114,137,136,0,127,136,0,0,25,137,1,36,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,36,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,36,102,137,137,3,107,136,3,137,127,137,0,0,88,23,137,0,127,137,0,0,25,136,2,40,114,137,136,0,127,136,0,0,25,137,2,40,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,40,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,40,102,137,137,3,107,136,3,137,127,137,0,0,88,24,137,0,127,137,0,0,25,136,1,52,114,137,136,0,127,136,0,0,25,137,1,52,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,52,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,52,102,137,137,3,107,136,3,137,127,137,0,0,88,25,137,0,127,137,0,0,25,136,2,44,114,137,136,0,127,136,0,0,25,137,2,44,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,44,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,44,102,137,137,3,107,136,3,137,127,137,0,0,88,26,137,0,127,137,0,0,65,136,19,20,65,138,21,22,63,136,136,138,65,138,23,24,63,136,136,138,65,138,25,26,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,36,137,25,137,133,36,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,36,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,36,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,4,114,136,137,0,127,137,0,0,25,136,1,4,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,4,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,4,102,136,136,3,107,137,3,136,127,136,0,0,88,28,136,0,127,136,0,0,25,137,2,48,114,136,137,0,127,137,0,0,25,136,2,48,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,48,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,48,102,136,136,3,107,137,3,136,127,136,0,0,88,29,136,0,127,136,0,0,25,137,1,20,114,136,137,0,127,137,0,0,25,136,1,20,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,20,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,20,102,136,136,3,107,137,3,136,127,136,0,0,88,30,136,0,127,136,0,0,25,137,2,52,114,136,137,0,127,137,0,0,25,136,2,52,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,52,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,52,102,136,136,3,107,137,3,136,127,136,0,0,88,31,136,0,127,136,0,0,25,137,1,36,114,136,137,0,127,137,0,0,25,136,1,36,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,36,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,36,102,136,136,3,107,137,3,136,127,136,0,0,88,32,136,0,127,136,0,0,25,137,2,56,114,136,137,0,127,137,0,0,25,136,2,56,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,56,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,56,102,136,136,3,107,137,3,136,127,136,0,0,88,33,136,0,127,136,0,0,25,137,1,52,114,136,137,0,127,137,0,0,25,136,1,52,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,52,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,52,102,136,136,3,107,137,3,136,127,136,0,0,88,34,136,0,127,136,0,0,25,137,2,60,114,136,137,0,127,137,0,0,25,136,2,60,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,60,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,60,102,136,136,3,107,137,3,136,127,136,0,0,88,36,136,0,127,136,0,0,65,137,28,29,65,138,30,31,63,137,137,138,65,138,32,33,63,137,137,138,65,138,34,36,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,52,136,25,136,133,52,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,52,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,52,127,137,0,0,102,137,137,3,107,136,3,137,127,137,0,0,25,136,1,8,114,137,136,0,127,136,0,0,25,137,1,8,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,8,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,8,102,137,137,3,107,136,3,137,127,137,0,0,88,37,137,0,127,137,0,0,114,137,2,0,127,137,0,0,102,136,2,1,107,137,1,136,127,136,0,0,102,137,2,2,107,136,2,137,127,137,0,0,102,136,2,3,107,137,3,136,127,136,0,0,88,38,136,0,127,136,0,0,25,137,1,24,114,136,137,0,127,137,0,0,25,136,1,24,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,24,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,24,102,136,136,3,107,137,3,136,127,136,0,0,88,39,136,0,127,136,0,0,25,137,2,4,114,136,137,0,127,137,0,0,25,136,2,4,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,4,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,4,102,136,136,3,107,137,3,136,127,136,0,0,88,40,136,0,127,136,0,0,25,137,1,40,114,136,137,0,127,137,0,0,25,136,1,40,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,40,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,40,102,136,136,3,107,137,3,136,127,136,0,0,88,41,136,0,127,136,0,0,25,137,2,8,114,136,137,0,127,137,0,0,25,136,2,8,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,8,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,8,102,136,136,3,107,137,3,136,127,136,0,0,88,42,136,0,127,136,0,0,25,137,1,56,114,136,137,0,127,137,0,0,25,136,1,56,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,56,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,56,102,136,136,3,107,137,3,136,127,136,0,0,88,43,136,0,127,136,0,0,25,137,2,12,114,136,137,0,127,137,0,0,25,136,2,12,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,12,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,12,102,136,136,3,107,137,3,136,127,136,0,0,88,44,136,0,127,136,0,0,65,137,37,38,65,138,39,40,63,137,137,138,65,138,41,42,63,137,137,138,65,138,43,44,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,8,136,25,136,133,8,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,8,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,8,127,137,0,0,102,137,137,3,107,136,3,137,127,137,0,0,25,136,1,8,114,137,136,0,127,136,0,0,25,137,1,8,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,8,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,8,102,137,137,3,107,136,3,137,127,137,0,0,88,45,137,0,127,137,0,0,25,136,2,16,114,137,136,0,127,136,0,0,25,137,2,16,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,16,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,16,102,137,137,3,107,136,3,137,127,137,0,0,88,47,137,0,127,137,0,0,25,136,1,24,114,137,136,0,127,136,0,0,25,137,1,24,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,24,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,24,102,137,137,3,107,136,3,137,127,137,0,0,88,48,137,0,127,137,0,0,25,136,2,20,114,137,136,0,127,136,0,0,25,137,2,20,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,20,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,20,102,137,137,3,107,136,3,137,127,137,0,0,88,49,137,0,127,137,0,0,25,136,1,40,114,137,136,0,127,136,0,0,25,137,1,40,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,40,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,40,102,137,137,3,107,136,3,137,127,137,0,0,88,50,137,0,127,137,0,0,25,136,2,24,114,137,136,0,127,136,0,0,25,137,2,24,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,24,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,24,102,137,137,3,107,136,3,137,127,137,0,0,88,51,137,0,127,137,0,0,25,136,1,56,114,137,136,0,127,136,0,0,25,137,1,56,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,56,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,56,102,137,137,3,107,136,3,137,127,137,0,0,88,52,137,0,127,137,0,0,25,136,2,28,114,137,136,0,127,136,0,0,25,137,2,28,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,28,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,28,102,137,137,3,107,136,3,137,127,137,0,0,88,53,137,0,127,137,0,0,65,136,45,47,65,138,48,49,63,136,136,138,65,138,50,51,63,136,136,138,65,138,52,53,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,24,137,25,137,133,24,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,24,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,24,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,8,114,136,137,0,127,137,0,0,25,136,1,8,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,8,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,8,102,136,136,3,107,137,3,136,127,136,0,0,88,55,136,0,127,136,0,0,25,137,2,32,114,136,137,0,127,137,0,0,25,136,2,32,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,32,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,32,102,136,136,3,107,137,3,136,127,136,0,0,88,56,136,0,127,136,0,0,25,137,1,24,114,136,137,0,127,137,0,0,25,136,1,24,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,24,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,24,102,136,136,3,107,137,3,136,127,136,0,0,88,57,136,0,127,136,0,0,25,137,2,36,114,136,137,0,127,137,0,0,25,136,2,36,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,36,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,36,102,136,136,3,107,137,3,136,127,136,0,0,88,58,136,0,127,136,0,0,25,137,1,40,114,136,137,0,127,137,0,0,25,136,1,40,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,40,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,40,102,136,136,3,107,137,3,136,127,136,0,0,88,59,136,0,127,136,0,0,25,137,2,40,114,136,137,0,127,137,0,0,25,136,2,40,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,40,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,40,102,136,136,3,107,137,3,136,127,136,0,0,88,60,136,0,127,136,0,0,25,137,1,56,114,136,137,0,127,137,0,0,25,136,1,56,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,56,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,56,102,136,136,3,107,137,3,136,127,136,0,0,88,61,136,0,127,136,0,0,25,137,2,44,114,136,137,0,127,137,0,0,25,136,2,44,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,44,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,44,102,136,136,3,107,137,3,136,127,136,0,0,88,62,136,0,127,136,0,0,65,137,55,56,65,138,57,58,63,137,137,138,65,138,59,60,63,137,137,138,65,138,61,62,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,40,136,25,136,133,40,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,40,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,40,127,137,0,0,102,137,137,3,107,136,3,137,127,137,0,0,25,136,1,8,114,137,136,0,127,136,0,0,25,137,1,8,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,8,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,8,102,137,137,3,107,136,3,137,127,137,0,0,88,63,137,0,127,137,0,0,25,136,2,48,114,137,136,0,127,136,0,0,25,137,2,48,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,48,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,48,102,137,137,3,107,136,3,137,127,137,0,0,88,64,137,0,127,137,0,0,25,136,1,24,114,137,136,0,127,136,0,0,25,137,1,24,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,24,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,24,102,137,137,3,107,136,3,137,127,137,0,0,88,66,137,0,127,137,0,0,25,136,2,52,114,137,136,0,127,136,0,0,25,137,2,52,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,52,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,52,102,137,137,3,107,136,3,137,127,137,0,0,88,67,137,0,127,137,0,0,25,136,1,40,114,137,136,0,127,136,0,0,25,137,1,40,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,40,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,40,102,137,137,3,107,136,3,137,127,137,0,0,88,68,137,0,127,137,0,0,25,136,2,56,114,137,136,0,127,136,0,0,25,137,2,56,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,56,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,56,102,137,137,3,107,136,3,137,127,137,0,0,88,69,137,0,127,137,0,0,25,136,1,56,114,137,136,0,127,136,0,0,25,137,1,56,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,56,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,56,102,137,137,3,107,136,3,137,127,137,0,0,88,70,137,0,127,137,0,0,25,136,2,60,114,137,136,0,127,136,0,0,25,137,2,60,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,60,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,60,102,137,137,3,107,136,3,137,127,137,0,0,88,71,137,0,127,137,0,0,65,136,63,64,65,138,66,67,63,136,136,138,65,138,68,69,63,136,136,138,65,138,70,71,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,56,137,25,137,133,56,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,56,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,56,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,12,114,136,137,0,127,137,0,0,25,136,1,12,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,12,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,12,102,136,136,3,107,137,3,136,127,136,0,0,88,73,136,0,127,136,0,0,114,136,2,0,127,136,0,0,102,137,2,1,107,136,1,137,127,137,0,0,102,136,2,2,107,137,2,136,127,136,0,0,102,137,2,3,107,136,3,137,127,137,0,0,88,74,137,0,127,137,0,0,25,136,1,28,114,137,136,0,127,136,0,0,25,137,1,28,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,28,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,28,102,137,137,3,107,136,3,137,127,137,0,0,88,75,137,0,127,137,0,0,25,136,2,4,114,137,136,0,127,136,0,0,25,137,2,4,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,4,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,4,102,137,137,3,107,136,3,137,127,137,0,0,88,76,137,0,127,137,0,0,25,136,1,44,114,137,136,0,127,136,0,0,25,137,1,44,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,44,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,44,102,137,137,3,107,136,3,137,127,137,0,0,88,77,137,0,127,137,0,0,25,136,2,8,114,137,136,0,127,136,0,0,25,137,2,8,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,8,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,8,102,137,137,3,107,136,3,137,127,137,0,0,88,78,137,0,127,137,0,0,25,136,1,60,114,137,136,0,127,136,0,0,25,137,1,60,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,60,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,60,102,137,137,3,107,136,3,137,127,137,0,0,88,79,137,0,127,137,0,0,25,136,2,12,114,137,136,0,127,136,0,0,25,137,2,12,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,12,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,12,102,137,137,3,107,136,3,137,127,137,0,0,88,80,137,0,127,137,0,0,65,136,73,74,65,138,75,76,63,136,136,138,65,138,77,78,63,136,136,138,65,138,79,80,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,12,137,25,137,133,12,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,12,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,12,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,12,114,136,137,0,127,137,0,0,25,136,1,12,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,12,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,12,102,136,136,3,107,137,3,136,127,136,0,0,88,81,136,0,127,136,0,0,25,137,2,16,114,136,137,0,127,137,0,0,25,136,2,16,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,16,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,16,102,136,136,3,107,137,3,136,127,136,0,0,88,82,136,0,127,136,0,0,25,137,1,28,114,136,137,0,127,137,0,0,25,136,1,28,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,28,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,28,102,136,136,3,107,137,3,136,127,136,0,0,88,83,136,0,127,136,0,0,25,137,2,20,114,136,137,0,127,137,0,0,25,136,2,20,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,20,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,20,102,136,136,3,107,137,3,136,127,136,0,0,88,84,136,0,127,136,0,0,25,137,1,44,114,136,137,0,127,137,0,0,25,136,1,44,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,44,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,44,102,136,136,3,107,137,3,136,127,136,0,0,88,85,136,0,127,136,0,0,25,137,2,24,114,136,137,0,127,137,0,0,25,136,2,24,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,24,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,24,102,136,136,3,107,137,3,136,127,136,0,0,88,86,136,0,127,136,0,0,25,137,1,60,114,136,137,0,127,137,0,0,25,136,1,60,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,60,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,60,102,136,136,3,107,137,3,136,127,136,0,0,88,88,136,0,127,136,0,0,25,137,2,28,114,136,137,0,127,137,0,0,25,136,2,28,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,28,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,28,102,136,136,3,107,137,3,136,127,136,0,0,88,89,136,0,127,136,0,0,65,137,81,82,65,138,83,84,63,137,137,138,65,138,85,86,63,137,137,138,65,138,88,89,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,28,136,25,136,133,28,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,28,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,28,127,137,0,0,102,137,137,3,107,136,3,137,127,137,0,0,25,136,1,12,114,137,136,0,127,136,0,0,25,137,1,12,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,12,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,12,102,137,137,3,107,136,3,137,127,137,0,0,88,90,137,0,127,137,0,0,25,136,2,32,114,137,136,0,127,136,0,0,25,137,2,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,32,102,137,137,3,107,136,3,137,127,137,0,0,88,91,137,0,127,137,0,0,25,136,1,28,114,137,136,0,127,136,0,0,25,137,1,28,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,28,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,28,102,137,137,3,107,136,3,137,127,137,0,0,88,92,137,0,127,137,0,0,25,136,2,36,114,137,136,0,127,136,0,0,25,137,2,36,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,36,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,36,102,137,137,3,107,136,3,137,127,137,0,0,88,93,137,0,127,137,0,0,25,136,1,44,114,137,136,0,127,136,0,0,25,137,1,44,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,44,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,44,102,137,137,3,107,136,3,137,127,137,0,0,88,94,137,0,127,137,0,0,25,136,2,40,114,137,136,0,127,136,0,0,25,137,2,40,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,40,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,40,102,137,137,3,107,136,3,137,127,137,0,0,88,96,137,0,127,137,0,0,25,136,1,60,114,137,136,0,127,136,0,0,25,137,1,60,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,60,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,60,102,137,137,3,107,136,3,137,127,137,0,0,88,97,137,0,127,137,0,0,25,136,2,44,114,137,136,0,127,136,0,0,25,137,2,44,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,44,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,44,102,137,137,3,107,136,3,137,127,137,0,0,88,98,137,0,127,137,0,0,65,136,90,91,65,138,92,93,63,136,136,138,65,138,94,96,63,136,136,138,65,138,97,98,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,44,137,25,137,133,44,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,44,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,44,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,12,114,136,137,0,127,137,0,0,25,136,1,12,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,12,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,12,102,136,136,3,107,137,3,136,127,136,0,0,88,99,136,0,127,136,0,0,25,137,2,48,114,136,137,0,127,137,0,0,25,136,2,48,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,48,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,48,102,136,136,3,107,137,3,136,127,136,0,0,88,100,136,0,127,136,0,0,25,137,1,28,114,136,137,0,127,137,0,0,25,136,1,28,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,28,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,28,102,136,136,3,107,137,3,136,127,136,0,0,88,101,136,0,127,136,0,0,25,137,2,52,114,136,137,0,127,137,0,0,25,136,2,52,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,52,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,52,102,136,136,3,107,137,3,136,127,136,0,0,88,102,136,0,127,136,0,0,25,137,1,44,114,136,137,0,127,137,0,0,25,136,1,44,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,44,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,44,102,136,136,3,107,137,3,136,127,136,0,0,88,103,136,0,127,136,0,0,25,137,2,56,114,136,137,0,127,137,0,0,25,136,2,56,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,56,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,56,102,136,136,3,107,137,3,136,127,136,0,0,88,104,136,0,127,136,0,0,25,137,1,60,114,136,137,0,127,137,0,0,25,136,1,60,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,60,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,60,102,136,136,3,107,137,3,136,127,136,0,0,88,105,136,0,127,136,0,0,25,137,2,60,114,136,137,0,127,137,0,0,25,136,2,60,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,60,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,60,102,136,136,3,107,137,3,136,127,136,0,0,88,106,136,0,127,136,0,0,65,137,99,100,65,138,101,102,63,137,137,138,65,138,103,104,63,137,137,138,65,138,105,106,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,60,136,25,136,133,60,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,60,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,60,127,137,0,0,102,137,137,3,107,136,3,137,0,131,0,0,0,134,133,0,25,135,131,64,78,137,134,0,83,131,137,0,25,131,131,1,25,134,134,1,54,137,131,135,168,98,1,0,137,133,0,0,139,0,0,0,140,3,139,0,0,0,0,0,1,132,0,0,136,136,0,0,0,133,136,0,136,136,0,0,25,136,136,64,137,136,0,0,130,136,0,0,136,137,0,0,49,136,136,137,252,98,1,0,135,136,0,0,127,136,0,0,114,136,1,0,127,136,0,0,102,137,1,1,107,136,1,137,127,137,0,0,102,136,1,2,107,137,2,136,127,136,0,0,102,137,1,3,107,136,3,137,127,137,0,0,88,3,137,0,127,137,0,0,114,137,2,0,127,137,0,0,102,136,2,1,107,137,1,136,127,136,0,0,102,137,2,2,107,136,2,137,127,137,0,0,102,136,2,3,107,137,3,136,127,136,0,0,88,4,136,0,127,136,0,0,25,137,1,16,114,136,137,0,127,137,0,0,25,136,1,16,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,16,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,16,102,136,136,3,107,137,3,136,127,136,0,0,88,108,136,0,127,136,0,0,25,137,2,4,114,136,137,0,127,137,0,0,25,136,2,4,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,4,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,4,102,136,136,3,107,137,3,136,127,136,0,0,88,116,136,0,127,136,0,0,25,137,1,32,114,136,137,0,127,137,0,0,25,136,1,32,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,32,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,32,102,136,136,3,107,137,3,136,127,136,0,0,88,5,136,0,127,136,0,0,25,137,2,8,114,136,137,0,127,137,0,0,25,136,2,8,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,8,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,8,102,136,136,3,107,137,3,136,127,136,0,0,88,13,136,0,127,136,0,0,25,137,1,48,114,136,137,0,127,137,0,0,25,136,1,48,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,48,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,48,102,136,136,3,107,137,3,136,127,136,0,0,88,27,136,0,127,136,0,0,25,137,2,12,114,136,137,0,127,137,0,0,25,136,2,12,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,12,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,12,102,136,136,3,107,137,3,136,127,136,0,0,88,35,136,0,127,136,0,0,65,137,3,4,65,138,108,116,63,137,137,138,65,138,5,13,63,137,137,138,65,138,27,35,63,137,137,138,89,136,137,0,127,137,0,0,114,133,137,0,127,136,0,0,102,136,136,1,107,133,1,136,127,137,0,0,102,137,137,2,107,133,2,137,127,136,0,0,102,136,136,3,107,133,3,136,127,136,0,0,114,136,1,0,127,136,0,0,102,137,1,1,107,136,1,137,127,137,0,0,102,136,1,2,107,137,2,136,127,136,0,0,102,137,1,3,107,136,3,137,127,137,0,0,88,46,137,0,127,137,0,0,25,136,2,16,114,137,136,0,127,136,0,0,25,137,2,16,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,16,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,16,102,137,137,3,107,136,3,137,127,137,0,0,88,54,137,0,127,137,0,0,25,136,1,16,114,137,136,0,127,136,0,0,25,137,1,16,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,16,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,16,102,137,137,3,107,136,3,137,127,137,0,0,88,65,137,0,127,137,0,0,25,136,2,20,114,137,136,0,127,136,0,0,25,137,2,20,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,20,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,20,102,137,137,3,107,136,3,137,127,137,0,0,88,72,137,0,127,137,0,0,25,136,1,32,114,137,136,0,127,136,0,0,25,137,1,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,32,102,137,137,3,107,136,3,137,127,137,0,0,88,87,137,0,127,137,0,0,25,136,2,24,114,137,136,0,127,136,0,0,25,137,2,24,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,24,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,24,102,137,137,3,107,136,3,137,127,137,0,0,88,95,137,0,127,137,0,0,25,136,1,48,114,137,136,0,127,136,0,0,25,137,1,48,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,48,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,48,102,137,137,3,107,136,3,137,127,137,0,0,88,107,137,0,127,137,0,0,25,136,2,28,114,137,136,0,127,136,0,0,25,137,2,28,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,28,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,28,102,137,137,3,107,136,3,137,127,137,0,0,88,109,137,0,127,137,0,0,65,136,46,54,65,138,65,72,63,136,136,138,65,138,87,95,63,136,136,138,65,138,107,109,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,16,137,25,137,133,16,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,16,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,16,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,114,136,1,0,127,136,0,0,102,137,1,1,107,136,1,137,127,137,0,0,102,136,1,2,107,137,2,136,127,136,0,0,102,137,1,3,107,136,3,137,127,137,0,0,88,110,137,0,127,137,0,0,25,136,2,32,114,137,136,0,127,136,0,0], eb + 81920);
  HEAPU8.set([25,137,2,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,32,102,137,137,3,107,136,3,137,127,137,0,0,88,111,137,0,127,137,0,0,25,136,1,16,114,137,136,0,127,136,0,0,25,137,1,16,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,16,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,16,102,137,137,3,107,136,3,137,127,137,0,0,88,112,137,0,127,137,0,0,25,136,2,36,114,137,136,0,127,136,0,0,25,137,2,36,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,36,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,36,102,137,137,3,107,136,3,137,127,137,0,0,88,113,137,0,127,137,0,0,25,136,1,32,114,137,136,0,127,136,0,0,25,137,1,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,32,102,137,137,3,107,136,3,137,127,137,0,0,88,114,137,0,127,137,0,0,25,136,2,40,114,137,136,0,127,136,0,0,25,137,2,40,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,40,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,40,102,137,137,3,107,136,3,137,127,137,0,0,88,115,137,0,127,137,0,0,25,136,1,48,114,137,136,0,127,136,0,0,25,137,1,48,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,48,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,48,102,137,137,3,107,136,3,137,127,137,0,0,88,117,137,0,127,137,0,0,25,136,2,44,114,137,136,0,127,136,0,0,25,137,2,44,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,44,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,44,102,137,137,3,107,136,3,137,127,137,0,0,88,118,137,0,127,137,0,0,65,136,110,111,65,138,112,113,63,136,136,138,65,138,114,115,63,136,136,138,65,138,117,118,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,32,137,25,137,133,32,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,32,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,32,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,114,136,1,0,127,136,0,0,102,137,1,1,107,136,1,137,127,137,0,0,102,136,1,2,107,137,2,136,127,136,0,0,102,137,1,3,107,136,3,137,127,137,0,0,88,119,137,0,127,137,0,0,25,136,2,48,114,137,136,0,127,136,0,0,25,137,2,48,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,48,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,48,102,137,137,3,107,136,3,137,127,137,0,0,88,120,137,0,127,137,0,0,25,136,1,16,114,137,136,0,127,136,0,0,25,137,1,16,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,16,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,16,102,137,137,3,107,136,3,137,127,137,0,0,88,121,137,0,127,137,0,0,25,136,2,52,114,137,136,0,127,136,0,0,25,137,2,52,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,52,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,52,102,137,137,3,107,136,3,137,127,137,0,0,88,122,137,0,127,137,0,0,25,136,1,32,114,137,136,0,127,136,0,0,25,137,1,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,32,102,137,137,3,107,136,3,137,127,137,0,0,88,123,137,0,127,137,0,0,25,136,2,56,114,137,136,0,127,136,0,0,25,137,2,56,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,56,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,56,102,137,137,3,107,136,3,137,127,137,0,0,88,124,137,0,127,137,0,0,25,136,1,48,114,137,136,0,127,136,0,0,25,137,1,48,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,48,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,48,102,137,137,3,107,136,3,137,127,137,0,0,88,125,137,0,127,137,0,0,25,136,2,60,114,137,136,0,127,136,0,0,25,137,2,60,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,60,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,60,102,137,137,3,107,136,3,137,127,137,0,0,88,126,137,0,127,137,0,0,65,136,119,120,65,138,121,122,63,136,136,138,65,138,123,124,63,136,136,138,65,138,125,126,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,48,137,25,137,133,48,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,48,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,48,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,4,114,136,137,0,127,137,0,0,25,136,1,4,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,4,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,4,102,136,136,3,107,137,3,136,127,136,0,0,88,127,136,0,127,136,0,0,114,136,2,0,127,136,0,0,102,137,2,1,107,136,1,137,127,137,0,0,102,136,2,2,107,137,2,136,127,136,0,0,102,137,2,3,107,136,3,137,127,137,0,0,88,128,137,0,127,137,0,0,25,136,1,20,114,137,136,0,127,136,0,0,25,137,1,20,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,20,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,20,102,137,137,3,107,136,3,137,127,137,0,0,88,129,137,0,127,137,0,0,25,136,2,4,114,137,136,0,127,136,0,0,25,137,2,4,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,4,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,4,102,137,137,3,107,136,3,137,127,137,0,0,88,130,137,0,127,137,0,0,25,136,1,36,114,137,136,0,127,136,0,0,25,137,1,36,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,36,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,36,102,137,137,3,107,136,3,137,127,137,0,0,88,6,137,0,127,137,0,0,25,136,2,8,114,137,136,0,127,136,0,0,25,137,2,8,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,8,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,8,102,137,137,3,107,136,3,137,127,137,0,0,88,7,137,0,127,137,0,0,25,136,1,52,114,137,136,0,127,136,0,0,25,137,1,52,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,52,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,52,102,137,137,3,107,136,3,137,127,137,0,0,88,8,137,0,127,137,0,0,25,136,2,12,114,137,136,0,127,136,0,0,25,137,2,12,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,12,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,12,102,137,137,3,107,136,3,137,127,137,0,0,88,9,137,0,127,137,0,0,65,136,127,128,65,138,129,130,63,136,136,138,65,138,6,7,63,136,136,138,65,138,8,9,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,4,137,25,137,133,4,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,4,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,4,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,4,114,136,137,0,127,137,0,0,25,136,1,4,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,4,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,4,102,136,136,3,107,137,3,136,127,136,0,0,88,10,136,0,127,136,0,0,25,137,2,16,114,136,137,0,127,137,0,0,25,136,2,16,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,16,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,16,102,136,136,3,107,137,3,136,127,136,0,0,88,11,136,0,127,136,0,0,25,137,1,20,114,136,137,0,127,137,0,0,25,136,1,20,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,20,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,20,102,136,136,3,107,137,3,136,127,136,0,0,88,12,136,0,127,136,0,0,25,137,2,20,114,136,137,0,127,137,0,0,25,136,2,20,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,20,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,20,102,136,136,3,107,137,3,136,127,136,0,0,88,14,136,0,127,136,0,0,25,137,1,36,114,136,137,0,127,137,0,0,25,136,1,36,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,36,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,36,102,136,136,3,107,137,3,136,127,136,0,0,88,15,136,0,127,136,0,0,25,137,2,24,114,136,137,0,127,137,0,0,25,136,2,24,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,24,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,24,102,136,136,3,107,137,3,136,127,136,0,0,88,16,136,0,127,136,0,0,25,137,1,52,114,136,137,0,127,137,0,0,25,136,1,52,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,52,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,52,102,136,136,3,107,137,3,136,127,136,0,0,88,17,136,0,127,136,0,0,25,137,2,28,114,136,137,0,127,137,0,0,25,136,2,28,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,28,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,28,102,136,136,3,107,137,3,136,127,136,0,0,88,18,136,0,127,136,0,0,65,137,10,11,65,138,12,14,63,137,137,138,65,138,15,16,63,137,137,138,65,138,17,18,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,20,136,25,136,133,20,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,20,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,20,127,137,0,0,102,137,137,3,107,136,3,137,127,137,0,0,25,136,1,4,114,137,136,0,127,136,0,0,25,137,1,4,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,4,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,4,102,137,137,3,107,136,3,137,127,137,0,0,88,19,137,0,127,137,0,0,25,136,2,32,114,137,136,0,127,136,0,0,25,137,2,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,32,102,137,137,3,107,136,3,137,127,137,0,0,88,20,137,0,127,137,0,0,25,136,1,20,114,137,136,0,127,136,0,0,25,137,1,20,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,20,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,20,102,137,137,3,107,136,3,137,127,137,0,0,88,21,137,0,127,137,0,0,25,136,2,36,114,137,136,0,127,136,0,0,25,137,2,36,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,36,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,36,102,137,137,3,107,136,3,137,127,137,0,0,88,22,137,0,127,137,0,0,25,136,1,36,114,137,136,0,127,136,0,0,25,137,1,36,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,36,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,36,102,137,137,3,107,136,3,137,127,137,0,0,88,23,137,0,127,137,0,0,25,136,2,40,114,137,136,0,127,136,0,0,25,137,2,40,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,40,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,40,102,137,137,3,107,136,3,137,127,137,0,0,88,24,137,0,127,137,0,0,25,136,1,52,114,137,136,0,127,136,0,0,25,137,1,52,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,52,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,52,102,137,137,3,107,136,3,137,127,137,0,0,88,25,137,0,127,137,0,0,25,136,2,44,114,137,136,0,127,136,0,0,25,137,2,44,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,44,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,44,102,137,137,3,107,136,3,137,127,137,0,0,88,26,137,0,127,137,0,0,65,136,19,20,65,138,21,22,63,136,136,138,65,138,23,24,63,136,136,138,65,138,25,26,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,36,137,25,137,133,36,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,36,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,36,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,4,114,136,137,0,127,137,0,0,25,136,1,4,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,4,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,4,102,136,136,3,107,137,3,136,127,136,0,0,88,28,136,0,127,136,0,0,25,137,2,48,114,136,137,0,127,137,0,0,25,136,2,48,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,48,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,48,102,136,136,3,107,137,3,136,127,136,0,0,88,29,136,0,127,136,0,0,25,137,1,20,114,136,137,0,127,137,0,0,25,136,1,20,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,20,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,20,102,136,136,3,107,137,3,136,127,136,0,0,88,30,136,0,127,136,0,0,25,137,2,52,114,136,137,0,127,137,0,0,25,136,2,52,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,52,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,52,102,136,136,3,107,137,3,136,127,136,0,0,88,31,136,0,127,136,0,0,25,137,1,36,114,136,137,0,127,137,0,0,25,136,1,36,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,36,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,36,102,136,136,3,107,137,3,136,127,136,0,0,88,32,136,0,127,136,0,0,25,137,2,56,114,136,137,0,127,137,0,0,25,136,2,56,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,56,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,56,102,136,136,3,107,137,3,136,127,136,0,0,88,33,136,0,127,136,0,0,25,137,1,52,114,136,137,0,127,137,0,0,25,136,1,52,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,52,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,52,102,136,136,3,107,137,3,136,127,136,0,0,88,34,136,0,127,136,0,0,25,137,2,60,114,136,137,0,127,137,0,0,25,136,2,60,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,60,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,60,102,136,136,3,107,137,3,136,127,136,0,0,88,36,136,0,127,136,0,0,65,137,28,29,65,138,30,31,63,137,137,138,65,138,32,33,63,137,137,138,65,138,34,36,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,52,136,25,136,133,52,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,52,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,52,127,137,0,0,102,137,137,3,107,136,3,137,127,137,0,0,25,136,1,8,114,137,136,0,127,136,0,0,25,137,1,8,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,8,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,8,102,137,137,3,107,136,3,137,127,137,0,0,88,37,137,0,127,137,0,0,114,137,2,0,127,137,0,0,102,136,2,1,107,137,1,136,127,136,0,0,102,137,2,2,107,136,2,137,127,137,0,0,102,136,2,3,107,137,3,136,127,136,0,0,88,38,136,0,127,136,0,0,25,137,1,24,114,136,137,0,127,137,0,0,25,136,1,24,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,24,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,24,102,136,136,3,107,137,3,136,127,136,0,0,88,39,136,0,127,136,0,0,25,137,2,4,114,136,137,0,127,137,0,0,25,136,2,4,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,4,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,4,102,136,136,3,107,137,3,136,127,136,0,0,88,40,136,0,127,136,0,0,25,137,1,40,114,136,137,0,127,137,0,0,25,136,1,40,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,40,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,40,102,136,136,3,107,137,3,136,127,136,0,0,88,41,136,0,127,136,0,0,25,137,2,8,114,136,137,0,127,137,0,0,25,136,2,8,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,8,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,8,102,136,136,3,107,137,3,136,127,136,0,0,88,42,136,0,127,136,0,0,25,137,1,56,114,136,137,0,127,137,0,0,25,136,1,56,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,56,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,56,102,136,136,3,107,137,3,136,127,136,0,0,88,43,136,0,127,136,0,0,25,137,2,12,114,136,137,0,127,137,0,0,25,136,2,12,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,12,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,12,102,136,136,3,107,137,3,136,127,136,0,0,88,44,136,0,127,136,0,0,65,137,37,38,65,138,39,40,63,137,137,138,65,138,41,42,63,137,137,138,65,138,43,44,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,8,136,25,136,133,8,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,8,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,8,127,137,0,0,102,137,137,3,107,136,3,137,127,137,0,0,25,136,1,8,114,137,136,0,127,136,0,0,25,137,1,8,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,8,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,8,102,137,137,3,107,136,3,137,127,137,0,0,88,45,137,0,127,137,0,0,25,136,2,16,114,137,136,0,127,136,0,0,25,137,2,16,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,16,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,16,102,137,137,3,107,136,3,137,127,137,0,0,88,47,137,0,127,137,0,0,25,136,1,24,114,137,136,0,127,136,0,0,25,137,1,24,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,24,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,24,102,137,137,3,107,136,3,137,127,137,0,0,88,48,137,0,127,137,0,0,25,136,2,20,114,137,136,0,127,136,0,0,25,137,2,20,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,20,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,20,102,137,137,3,107,136,3,137,127,137,0,0,88,49,137,0,127,137,0,0,25,136,1,40,114,137,136,0,127,136,0,0,25,137,1,40,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,40,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,40,102,137,137,3,107,136,3,137,127,137,0,0,88,50,137,0,127,137,0,0,25,136,2,24,114,137,136,0,127,136,0,0,25,137,2,24,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,24,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,24,102,137,137,3,107,136,3,137,127,137,0,0,88,51,137,0,127,137,0,0,25,136,1,56,114,137,136,0,127,136,0,0,25,137,1,56,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,56,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,56,102,137,137,3,107,136,3,137,127,137,0,0,88,52,137,0,127,137,0,0,25,136,2,28,114,137,136,0,127,136,0,0,25,137,2,28,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,28,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,28,102,137,137,3,107,136,3,137,127,137,0,0,88,53,137,0,127,137,0,0,65,136,45,47,65,138,48,49,63,136,136,138,65,138,50,51,63,136,136,138,65,138,52,53,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,24,137,25,137,133,24,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,24,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,24,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,8,114,136,137,0,127,137,0,0,25,136,1,8,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,8,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,8,102,136,136,3,107,137,3,136,127,136,0,0,88,55,136,0,127,136,0,0,25,137,2,32,114,136,137,0,127,137,0,0,25,136,2,32,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,32,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,32,102,136,136,3,107,137,3,136,127,136,0,0,88,56,136,0,127,136,0,0,25,137,1,24,114,136,137,0,127,137,0,0,25,136,1,24,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,24,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,24,102,136,136,3,107,137,3,136,127,136,0,0,88,57,136,0,127,136,0,0,25,137,2,36,114,136,137,0,127,137,0,0,25,136,2,36,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,36,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,36,102,136,136,3,107,137,3,136,127,136,0,0,88,58,136,0,127,136,0,0,25,137,1,40,114,136,137,0,127,137,0,0,25,136,1,40,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,40,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,40,102,136,136,3,107,137,3,136,127,136,0,0,88,59,136,0,127,136,0,0,25,137,2,40,114,136,137,0,127,137,0,0,25,136,2,40,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,40,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,40,102,136,136,3,107,137,3,136,127,136,0,0,88,60,136,0,127,136,0,0,25,137,1,56,114,136,137,0,127,137,0,0,25,136,1,56,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,56,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,56,102,136,136,3,107,137,3,136,127,136,0,0,88,61,136,0,127,136,0,0,25,137,2,44,114,136,137,0,127,137,0,0,25,136,2,44,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,44,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,44,102,136,136,3,107,137,3,136,127,136,0,0,88,62,136,0,127,136,0,0,65,137,55,56,65,138,57,58,63,137,137,138,65,138,59,60,63,137,137,138,65,138,61,62,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,40,136,25,136,133,40,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,40,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,40,127,137,0,0,102,137,137,3,107,136,3,137,127,137,0,0,25,136,1,8,114,137,136,0,127,136,0,0,25,137,1,8,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,8,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,8,102,137,137,3,107,136,3,137,127,137,0,0,88,63,137,0,127,137,0,0,25,136,2,48,114,137,136,0,127,136,0,0,25,137,2,48,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,48,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,48,102,137,137,3,107,136,3,137,127,137,0,0,88,64,137,0,127,137,0,0,25,136,1,24,114,137,136,0,127,136,0,0,25,137,1,24,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,24,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,24,102,137,137,3,107,136,3,137,127,137,0,0,88,66,137,0,127,137,0,0,25,136,2,52,114,137,136,0,127,136,0,0,25,137,2,52,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,52,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,52,102,137,137,3,107,136,3,137,127,137,0,0,88,67,137,0,127,137,0,0,25,136,1,40,114,137,136,0,127,136,0,0,25,137,1,40,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,40,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,40,102,137,137,3,107,136,3,137,127,137,0,0,88,68,137,0,127,137,0,0,25,136,2,56,114,137,136,0,127,136,0,0,25,137,2,56,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,56,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,56,102,137,137,3,107,136,3,137,127,137,0,0,88,69,137,0,127,137,0,0,25,136,1,56,114,137,136,0,127,136,0,0,25,137,1,56,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,56,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,56,102,137,137,3,107,136,3,137,127,137,0,0,88,70,137,0,127,137,0,0,25,136,2,60,114,137,136,0,127,136,0,0,25,137,2,60,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,60,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,60,102,137,137,3,107,136,3,137,127,137,0,0,88,71,137,0,127,137,0,0,65,136,63,64,65,138,66,67,63,136,136,138,65,138,68,69,63,136,136,138,65,138,70,71,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,56,137,25,137,133,56,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,56,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,56,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,12,114,136,137,0,127,137,0,0,25,136,1,12,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,12,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,12,102,136,136,3,107,137,3,136,127,136,0,0,88,73,136,0,127,136,0,0,114,136,2,0,127,136,0,0,102,137,2,1,107,136,1,137,127,137,0,0,102,136,2,2,107,137,2,136,127,136,0,0,102,137,2,3,107,136,3,137,127,137,0,0,88,74,137,0,127,137,0,0,25,136,1,28,114,137,136,0,127,136,0,0,25,137,1,28,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,28,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,28,102,137,137,3,107,136,3,137,127,137,0,0,88,75,137,0,127,137,0,0,25,136,2,4,114,137,136,0,127,136,0,0,25,137,2,4,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,4,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,4,102,137,137,3,107,136,3,137,127,137,0,0,88,76,137,0,127,137,0,0,25,136,1,44,114,137,136,0,127,136,0,0,25,137,1,44,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,44,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,44,102,137,137,3,107,136,3,137,127,137,0,0,88,77,137,0,127,137,0,0,25,136,2,8,114,137,136,0,127,136,0,0,25,137,2,8,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,8,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,8,102,137,137,3,107,136,3,137,127,137,0,0,88,78,137,0,127,137,0,0,25,136,1,60,114,137,136,0,127,136,0,0,25,137,1,60,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,60,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,60,102,137,137,3,107,136,3,137,127,137,0,0,88,79,137,0,127,137,0,0,25,136,2,12,114,137,136,0,127,136,0,0,25,137,2,12,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,12,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,12,102,137,137,3,107,136,3,137,127,137,0,0,88,80,137,0,127,137,0,0,65,136,73,74,65,138,75,76,63,136,136,138,65,138,77,78,63,136,136,138,65,138,79,80,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,12,137,25,137,133,12,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,12,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,12,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,12,114,136,137,0,127,137,0,0,25,136,1,12,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,12,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,12,102,136,136,3,107,137,3,136,127,136,0,0,88,81,136,0,127,136,0,0,25,137,2,16,114,136,137,0,127,137,0,0,25,136,2,16,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,16,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,16,102,136,136,3,107,137,3,136,127,136,0,0,88,82,136,0,127,136,0,0,25,137,1,28,114,136,137,0,127,137,0,0,25,136,1,28,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,28,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,28,102,136,136,3,107,137,3,136,127,136,0,0,88,83,136,0,127,136,0,0,25,137,2,20,114,136,137,0,127,137,0,0,25,136,2,20,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,20,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,20,102,136,136,3,107,137,3,136,127,136,0,0,88,84,136,0,127,136,0,0,25,137,1,44,114,136,137,0,127,137,0,0,25,136,1,44,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,44,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,44,102,136,136,3,107,137,3,136,127,136,0,0,88,85,136,0,127,136,0,0,25,137,2,24,114,136,137,0,127,137,0,0,25,136,2,24,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,24,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,24,102,136,136,3,107,137,3,136,127,136,0,0,88,86,136,0,127,136,0,0,25,137,1,60,114,136,137,0,127,137,0,0,25,136,1,60,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,60,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,60,102,136,136,3,107,137,3,136,127,136,0,0,88,88,136,0,127,136,0,0,25,137,2,28,114,136,137,0,127,137,0,0,25,136,2,28,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,28,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,28,102,136,136,3,107,137,3,136,127,136,0,0,88,89,136,0,127,136,0,0,65,137,81,82,65,138,83,84,63,137,137,138,65,138,85,86,63,137,137,138,65,138,88,89,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,28,136,25,136,133,28,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,28,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,28,127,137,0,0,102,137,137,3,107,136,3,137,127,137,0,0,25,136,1,12,114,137,136,0,127,136,0,0,25,137,1,12,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,12,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,12,102,137,137,3,107,136,3,137,127,137,0,0,88,90,137,0,127,137,0,0,25,136,2,32,114,137,136,0,127,136,0,0,25,137,2,32,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,32,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,32,102,137,137,3,107,136,3,137,127,137,0,0,88,91,137,0,127,137,0,0,25,136,1,28,114,137,136,0,127,136,0,0,25,137,1,28,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,28,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,28,102,137,137,3,107,136,3,137,127,137,0,0,88,92,137,0,127,137,0,0,25,136,2,36,114,137,136,0,127,136,0,0,25,137,2,36,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,36,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,36,102,137,137,3,107,136,3,137,127,137,0,0,88,93,137,0,127,137,0,0,25,136,1,44,114,137,136,0,127,136,0,0,25,137,1,44,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,44,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,44,102,137,137,3,107,136,3,137,127,137,0,0,88,94,137,0,127,137,0,0,25,136,2,40,114,137,136,0,127,136,0,0,25,137,2,40,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,40,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,40,102,137,137,3,107,136,3,137,127,137,0,0,88,96,137,0,127,137,0,0,25,136,1,60,114,137,136,0,127,136,0,0,25,137,1,60,102,137,137,1,107,136,1,137,127,137,0,0,25,136,1,60,102,136,136,2,107,137,2,136,127,136,0,0,25,137,1,60,102,137,137,3,107,136,3,137,127,137,0,0,88,97,137,0,127,137,0,0,25,136,2,44,114,137,136,0,127,136,0,0,25,137,2,44,102,137,137,1,107,136,1,137,127,137,0,0,25,136,2,44,102,136,136,2,107,137,2,136,127,136,0,0,25,137,2,44,102,137,137,3,107,136,3,137,127,137,0,0,88,98,137,0,127,137,0,0,65,136,90,91,65,138,92,93,63,136,136,138,65,138,94,96,63,136,136,138,65,138,97,98,63,136,136,138,89,137,136,0,127,137,0,0,78,137,137,0,107,133,44,137,25,137,133,44,127,136,0,0,102,136,136,1,107,137,1,136,25,136,133,44,127,137,0,0,102,137,137,2,107,136,2,137,25,137,133,44,127,136,0,0,102,136,136,3,107,137,3,136,127,136,0,0,25,137,1,12,114,136,137,0,127,137,0,0,25,136,1,12,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,12,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,12,102,136,136,3,107,137,3,136,127,136,0,0,88,99,136,0,127,136,0,0,25,137,2,48,114,136,137,0,127,137,0,0,25,136,2,48,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,48,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,48,102,136,136,3,107,137,3,136,127,136,0,0,88,100,136,0,127,136,0,0,25,137,1,28,114,136,137,0,127,137,0,0,25,136,1,28,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,28,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,28,102,136,136,3,107,137,3,136,127,136,0,0,88,101,136,0,127,136,0,0,25,137,2,52,114,136,137,0,127,137,0,0,25,136,2,52,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,52,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,52,102,136,136,3,107,137,3,136,127,136,0,0,88,102,136,0,127,136,0,0,25,137,1,44,114,136,137,0,127,137,0,0,25,136,1,44,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,44,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,44,102,136,136,3,107,137,3,136,127,136,0,0,88,103,136,0,127,136,0,0,25,137,2,56,114,136,137,0,127,137,0,0,25,136,2,56,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,56,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,56,102,136,136,3,107,137,3,136,127,136,0,0,88,104,136,0,127,136,0,0,25,137,1,60,114,136,137,0,127,137,0,0,25,136,1,60,102,136,136,1,107,137,1,136,127,136,0,0,25,137,1,60,102,137,137,2,107,136,2,137,127,137,0,0,25,136,1,60,102,136,136,3,107,137,3,136,127,136,0,0,88,105,136,0,127,136,0,0,25,137,2,60,114,136,137,0,127,137,0,0,25,136,2,60,102,136,136,1,107,137,1,136,127,136,0,0,25,137,2,60,102,137,137,2,107,136,2,137,127,137,0,0,25,136,2,60,102,136,136,3,107,137,3,136,127,136,0,0,88,106,136,0,127,136,0,0,65,137,99,100,65,138,101,102,63,137,137,138,65,138,103,104,63,137,137,138,65,138,105,106,63,137,137,138,89,136,137,0,127,136,0,0,78,136,136,0,107,133,60,136,25,136,133,60,127,137,0,0,102,137,137,1,107,136,1,137,25,137,133,60,127,136,0,0,102,136,136,2,107,137,2,136,25,136,133,60,127,137,0,0,102,137,137,3,107,136,3,137,0,131,0,0,0,134,133,0,25,135,131,64,78,137,134,0,83,131,137,0,25,131,131,1,25,134,134,1,54,137,131,135,120,138,1,0,137,133,0,0,139,0,0,0,140,3,47,1,0,0,0,0,1,200,0,0,143,200,45,1,136,201,0,0,0,200,201,0,143,200,46,1,136,200,0,0,1,201,144,0,3,200,200,201,137,200,0,0,130,200,0,0,136,201,0,0,49,200,200,201,216,138,1,0,135,200,0,0,134,72,0,0,20,83,6,0,1,201,0,0,109,72,8,201,25,201,72,8,1,200,0,0,109,201,4,200,1,200,0,0,134,5,0,0,148,94,6,0,200,0,0,0,82,12,2,0,90,21,0,12,82,36,2,0,41,200,21,24,42,200,200,24,32,200,200,39,121,200,103,0,25,200,36,1,85,2,200,0,82,45,2,0,50,200,1,45,100,139,1,0,0,200,5,0,143,200,23,1,141,201,23,1,134,200,0,0,148,105,6,0,201,0,0,0,0,200,72,0,143,200,24,1,141,200,46,1,137,200,0,0,141,200,24,1,139,200,0,0,82,58,2,0,1,200,0,0,143,200,30,1,82,68,2,0,90,78,0,68,82,91,2,0,41,200,78,24,42,200,200,24,32,200,200,39,120,200,10,0,25,200,91,1,85,2,200,0,82,186,2,0,50,200,1,186,172,139,1,0,1,200,117,0,143,200,45,1,119,0,21,0,119,0,241,255,26,200,91,1,90,104,0,200,82,117,2,0,41,200,104,24,42,200,200,24,33,200,200,92,121,200,4,0,1,200,6,0,143,200,45,1,119,0,10,0,25,200,117,1,85,2,200,0,82,172,2,0,50,200,1,172,248,139,1,0,1,200,117,0,143,200,45,1,119,0,2,0,119,0,222,255,141,200,45,1,32,200,200,6,121,200,30,0,26,200,117,1,143,200,30,1,1,200,9,0,83,72,200,0,141,200,30,1,0,136,200,0,3,200,0,58,4,201,136,58,25,201,201,1,134,146,0,0,240,9,6,0,200,201,0,0,109,72,8,146,82,159,2,0,25,201,159,1,85,2,201,0,0,201,5,0,143,201,23,1,141,200,23,1,134,201,0,0,148,105,6,0,200,0,0,0,0,201,72,0,143,201,24,1,141,201,46,1,137,201,0,0,141,201,24,1,139,201,0,0,119,0,16,0,141,201,45,1,32,201,201,117,121,201,13,0,0,201,5,0,143,201,23,1,141,200,23,1,134,201,0,0,148,105,6,0,200,0,0,0,0,201,72,0,143,201,24,1,141,201,46,1,137,201,0,0,141,201,24,1,139,201,0,0,90,201,0,36,143,201,3,1,82,201,2,0,143,201,15,1,141,201,3,1,41,201,201,24,42,201,201,24,32,201,201,34,121,201,130,0,141,201,15,1,25,201,201,1,85,2,201,0,82,201,2,0,143,201,22,1,141,201,22,1,50,201,1,201,44,141,1,0,0,201,5,0,143,201,23,1,141,200,23,1,134,201,0,0,148,105,6,0,200,0,0,0,0,201,72,0,143,201,24,1,141,201,46,1,137,201,0,0,141,201,24,1,139,201,0,0,82,201,2,0,143,201,25,1,1,201,0,0,143,201,33,1,82,201,2,0,143,201,26,1,141,200,26,1,90,201,0,200,143,201,27,1,82,201,2,0,143,201,28,1,141,201,27,1,41,201,201,24,42,201,201,24,32,201,201,34,120,201,11,0,141,201,28,1,25,201,201,1,85,2,201,0,82,11,2,0,50,201,1,11,144,141,1,0,1,201,117,0,143,201,45,1,119,0,24,0,119,0,235,255,141,200,28,1,26,200,200,1,90,201,0,200,143,201,29,1,82,3,2,0,141,201,29,1,41,201,201,24,42,201,201,24,33,201,201,92,121,201,4,0,1,201,14,0,143,201,45,1,119,0,10,0,25,201,3,1,85,2,201,0,82,10,2,0,50,201,1,10,232,141,1,0,1,201,117,0,143,201,45,1,119,0,2,0,119,0,213,255,141,201,45,1,32,201,201,14,121,201,44,0,26,201,3,1,143,201,33,1,1,201,9,0,83,72,201,0,141,201,33,1,0,4,201,0,141,201,25,1,3,201,0,201,141,200,25,1,4,200,4,200,25,200,200,1,134,6,0,0,240,9,6,0,201,200,0,0,109,72,8,6,106,7,72,8,1,201,182,31,1,202,185,31,134,200,0,0,96,157,5,0,7,201,202,0,106,8,72,8,1,202,187,31,1,201,190,31,134,200,0,0,96,157,5,0,8,202,201,0,82,9,2,0,25,200,9,1,85,2,200,0,0,200,5,0,143,200,23,1,141,201,23,1,134,200,0,0,148,105,6,0,201,0,0,0,0,200,72,0,143,200,24,1,141,200,46,1,137,200,0,0,141,200,24,1,139,200,0,0,119,0,16,0,141,200,45,1,32,200,200,117,121,200,13,0,0,200,5,0,143,200,23,1,141,201,23,1,134,200,0,0,148,105,6,0,201,0,0,0,0,200,72,0,143,200,24,1,141,200,46,1,137,200,0,0,141,200,24,1,139,200,0,0,141,200,15,1,90,13,0,200,41,200,13,24,42,200,200,24,32,200,200,123,121,200,19,0,1,200,10,0,83,72,200,0,134,14,0,0,96,99,3,0,0,1,2,0,109,72,8,14,0,200,5,0,143,200,23,1,141,201,23,1,134,200,0,0,148,105,6,0,201,0,0,0,0,200,72,0,143,200,24,1,141,200,46,1,137,200,0,0,141,200,24,1,139,200,0,0,82,15,2,0,90,16,0,15,82,17,2,0,41,200,16,24,42,200,200,24,32,200,200,91,120,200,32,1,90,182,0,17,41,200,182,24,42,200,200,24,32,200,200,116,121,200,20,0,1,200,2,0,83,72,200,0,1,201,1,0,107,72,8,201,82,183,2,0,25,201,183,4,85,2,201,0,0,201,5,0,143,201,23,1,141,200,23,1,134,201,0,0,148,105,6,0,200,0,0,0,0,201,72,0,143,201,24,1,141,201,46,1,137,201,0,0,141,201,24,1,139,201,0,0,82,184,2,0,90,185,0,184,41,201,185,24,42,201,201,24,32,201,201,102,121,201,20,0,1,201,2,0,83,72,201,0,1,200,0,0,107,72,8,200,82,187,2,0,25,200,187,5,85,2,200,0,0,200,5,0,143,200,23,1,141,201,23,1,134,200,0,0], eb + 92160);
  HEAPU8.set([148,105,6,0,201,0,0,0,0,200,72,0,143,200,24,1,141,200,46,1,137,200,0,0,141,200,24,1,139,200,0,0,82,188,2,0,90,189,0,188,41,200,189,24,42,200,200,24,32,200,200,110,121,200,18,0,1,200,0,0,83,72,200,0,82,190,2,0,25,200,190,4,85,2,200,0,0,200,5,0,143,200,23,1,141,201,23,1,134,200,0,0,148,105,6,0,201,0,0,0,0,200,72,0,143,200,24,1,141,200,46,1,137,200,0,0,141,200,24,1,139,200,0,0,82,191,2,0,0,200,191,0,143,200,32,1,1,200,1,0,143,200,37,1,1,200,0,0,143,200,39,1,141,200,32,1,0,192,200,0,90,193,0,192,41,200,193,24,42,200,200,24,32,200,200,45,121,200,8,0,1,200,1,0,143,200,39,1,141,200,32,1,0,194,200,0,25,200,194,1,143,200,32,1,119,0,243,255,141,200,32,1,0,195,200,0,90,196,0,195,41,200,196,24,42,200,200,24,32,200,200,46,121,200,8,0,1,200,0,0,143,200,37,1,141,200,32,1,0,197,200,0,25,200,197,1,143,200,32,1,119,0,229,255,141,200,32,1,0,198,200,0,90,199,0,198,41,201,199,24,42,201,201,24,134,200,0,0,160,107,6,0,201,0,0,0,143,200,0,1,141,200,0,1,33,200,200,0,120,200,41,0,141,201,32,1,0,200,201,0,143,200,1,1,141,201,1,1,90,200,0,201,143,200,2,1,141,200,2,1,41,200,200,24,42,200,200,24,32,200,200,93,120,200,30,0,141,201,32,1,0,200,201,0,143,200,4,1,141,201,4,1,90,200,0,201,143,200,5,1,141,200,5,1,41,200,200,24,42,200,200,24,32,200,200,125,120,200,19,0,141,201,32,1,0,200,201,0,143,200,6,1,141,201,6,1,90,200,0,201,143,200,7,1,141,200,7,1,41,200,200,24,42,200,200,24,32,200,200,44,120,200,8,0,141,201,32,1,0,200,201,0,143,200,13,1,141,201,13,1,25,200,201,1,143,200,32,1,119,0,177,255,141,201,32,1,0,200,201,0,143,200,8,1,141,200,8,1,85,2,200,0,141,201,32,1,0,200,201,0,143,200,9,1,141,201,9,1,26,200,201,1,143,200,32,1,141,201,37,1,0,200,201,0,143,200,10,1,141,200,10,1,33,200,200,0,120,200,36,0,1,200,0,0,85,5,200,0,141,201,32,1,0,200,201,0,143,200,14,1,3,201,0,191,141,202,14,1,4,202,202,191,25,202,202,1,134,200,0,0,128,39,6,0,5,201,202,0,1,200,7,0,83,72,200,0,106,200,5,4,143,200,16,1,141,202,16,1,134,200,0,0,252,99,6,0,202,0,0,0,144,200,17,1,142,202,17,1,111,72,8,202,0,202,5,0,143,202,23,1,141,200,23,1,134,202,0,0,148,105,6,0,200,0,0,0,0,202,72,0,143,202,24,1,141,202,46,1,137,202,0,0,141,202,24,1,139,202,0,0,141,200,39,1,0,202,200,0,143,202,11,1,1,202,0,0,85,5,202,0,141,200,32,1,0,202,200,0,143,202,12,1,3,200,0,191,141,201,12,1,4,201,201,191,25,201,201,1,134,202,0,0,128,39,6,0,5,200,201,0,141,202,11,1,33,202,202,0,121,202,31,0,1,202,5,0,83,72,202,0,106,202,5,4,143,202,18,1,141,201,18,1,134,202,0,0,216,188,4,0,201,0,0,0,143,202,19,1,141,201,19,1,109,72,8,201,25,201,72,8,141,202,19,1,34,202,202,0,41,202,202,31,42,202,202,31,109,201,4,202,0,202,5,0,143,202,23,1,141,201,23,1,134,202,0,0,148,105,6,0,201,0,0,0,0,202,72,0,143,202,24,1,141,202,46,1,137,202,0,0,141,202,24,1,139,202,0,0,119,0,29,0,1,202,6,0,83,72,202,0,106,202,5,4,143,202,20,1,141,201,20,1,1,200,0,0,1,203,10,0,134,202,0,0,56,109,6,0,201,200,203,0,143,202,21,1,141,203,21,1,109,72,8,203,25,203,72,8,1,202,0,0,109,203,4,202,0,202,5,0,143,202,23,1,141,203,23,1,134,202,0,0,148,105,6,0,203,0,0,0,0,202,72,0,143,202,24,1,141,202,46,1,137,202,0,0,141,202,24,1,139,202,0,0,0,202,17,0,143,202,44,1,1,202,0,0,143,202,38,1,141,202,44,1,0,18,202,0,25,202,18,1,143,202,44,1,141,202,44,1,0,19,202,0,90,20,0,19,41,202,20,24,42,202,202,24,134,22,0,0,160,107,6,0,202,0,0,0,141,202,44,1,0,23,202,0,33,202,22,0,120,202,2,0,119,0,4,0,25,202,23,1,143,202,44,1,119,0,241,255,90,24,0,23,41,202,24,24,42,202,202,24,32,202,202,34,121,202,158,0,1,202,20,0,83,72,202,0,1,202,4,0,1,203,1,0,134,46,0,0,224,168,5,0,202,203,0,0,109,72,8,46,82,47,2,0,0,203,47,0,143,203,41,1,1,203,0,0,143,203,34,1,82,48,2,0,90,49,0,48,82,50,2,0,41,203,49,24,42,203,203,24,32,203,203,93,121,203,4,0,1,203,38,0,143,203,45,1,119,0,102,0,90,51,0,50,82,52,2,0,25,203,52,1,85,2,203,0,82,53,2,0,41,203,51,24,42,203,203,24,32,203,203,34,120,203,7,0,50,203,1,53,224,148,1,0,1,203,117,0,143,203,45,1,119,0,88,0,119,0,232,255,50,203,1,53,248,148,1,0,1,203,117,0,143,203,45,1,119,0,82,0,82,54,2,0,0,203,54,0,143,203,41,1,82,55,2,0,90,56,0,55,82,57,2,0,41,203,56,24,42,203,203,24,32,203,203,34,120,203,10,0,25,203,57,1,85,2,203,0,82,73,2,0,50,203,1,73,64,149,1,0,1,203,117,0,143,203,45,1,119,0,64,0,119,0,241,255,26,203,57,1,90,59,0,203,82,60,2,0,41,203,59,24,42,203,203,24,33,203,203,92,120,203,10,0,25,203,60,1,85,2,203,0,82,71,2,0,50,203,1,71,128,149,1,0,1,203,117,0,143,203,45,1,119,0,48,0,119,0,225,255,26,203,60,1,143,203,34,1,141,203,41,1,0,61,203,0,141,203,34,1,0,62,203,0,141,203,41,1,0,63,203,0,3,203,0,61,4,202,62,63,25,202,202,1,134,64,0,0,240,9,6,0,203,202,0,0,141,202,46,1,109,202,84,64,141,202,46,1,106,65,202,84,1,203,182,31,1,200,185,31,134,202,0,0,96,157,5,0,65,203,200,0,141,202,46,1,106,66,202,84,1,200,187,31,1,203,190,31,134,202,0,0,96,157,5,0,66,200,203,0,106,67,72,8,141,203,46,1,25,203,203,84,134,202,0,0,88,242,4,0,67,203,0,0,82,69,2,0,25,202,69,1,85,2,202,0,82,70,2,0,50,202,1,70,56,150,1,0,1,202,117,0,143,202,45,1,119,0,2,0,119,0,146,255,141,202,45,1,32,202,202,38,121,202,16,0,25,202,50,1,85,2,202,0,0,202,5,0,143,202,23,1,141,203,23,1,134,202,0,0,148,105,6,0,203,0,0,0,0,202,72,0,143,202,24,1,141,202,46,1,137,202,0,0,141,202,24,1,139,202,0,0,119,0,16,0,141,202,45,1,32,202,202,117,121,202,13,0,0,202,5,0,143,202,23,1,141,203,23,1,134,202,0,0,148,105,6,0,203,0,0,0,0,202,72,0,143,202,24,1,141,202,46,1,137,202,0,0,141,202,24,1,139,202,0,0,141,202,44,1,0,25,202,0,90,26,0,25,41,202,26,24,42,202,202,24,32,202,202,123,120,202,128,2,141,202,44,1,0,27,202,0,90,28,0,27,41,202,28,24,42,202,202,24,32,202,202,93,120,202,121,2,141,202,44,1,0,29,202,0,90,30,0,29,41,202,30,24,42,202,202,24,32,202,202,110,120,202,114,2,141,202,44,1,0,31,202,0,90,32,0,31,41,202,32,24,42,202,202,24,32,202,202,116,120,202,193,1,141,202,44,1,0,33,202,0,90,34,0,33,41,202,34,24,42,202,202,24,32,202,202,102,120,202,186,1,141,202,44,1,0,35,202,0,55,202,35,1,104,151,1,0,1,202,117,0,143,202,45,1,119,0,36,0,141,202,44,1,0,37,202,0,90,38,0,37,41,202,38,24,42,202,202,24,32,202,202,45,121,202,4,0,1,202,1,0,143,202,38,1,119,0,21,0,141,202,44,1,0,39,202,0,90,40,0,39,41,202,40,24,42,202,202,24,32,202,202,46,121,202,4,0,1,202,48,0,143,202,45,1,119,0,16,0,141,202,44,1,0,41,202,0,90,42,0,41,41,202,42,24,42,202,202,24,32,202,202,93,121,202,4,0,1,202,63,0,143,202,45,1,119,0,6,0,141,202,44,1,0,43,202,0,25,202,43,1,143,202,44,1,119,0,215,255,141,202,45,1,32,202,202,48,121,202,172,0,1,202,19,0,83,72,202,0,1,202,8,0,1,203,1,0,134,74,0,0,224,168,5,0,202,203,0,0,109,72,8,74,82,75,2,0,0,203,75,0,143,203,42,1,1,203,0,0,143,203,35,1,1,203,0,0,85,5,203,0,82,76,2,0,90,77,0,76,82,79,2,0,41,203,77,24,42,203,203,24,32,203,203,93,121,203,4,0,1,203,51,0,143,203,45,1,119,0,113,0,90,80,0,79,41,203,80,24,42,203,203,24,134,81,0,0,160,107,6,0,203,0,0,0,82,82,2,0,33,203,81,0,120,203,2,0,119,0,4,0,25,203,82,1,85,2,203,0,119,0,234,255,90,83,0,82,41,203,83,24,42,203,203,24,32,203,203,91,121,203,4,0,82,84,2,0,25,203,84,1,85,2,203,0,82,85,2,0,50,203,1,85,208,152,1,0,1,203,117,0,143,203,45,1,119,0,86,0,82,86,2,0,0,203,86,0,143,203,42,1,82,87,2,0,90,88,0,87,41,203,88,24,42,203,203,24,32,203,203,44,120,203,26,0,82,89,2,0,90,90,0,89,41,203,90,24,42,203,203,24,134,92,0,0,160,107,6,0,203,0,0,0,33,203,92,0,120,203,17,0,82,93,2,0,90,94,0,93,41,203,94,24,42,203,203,24,32,203,203,93,120,203,11,0,82,107,2,0,25,203,107,1,85,2,203,0,82,108,2,0,50,203,1,108,84,153,1,0,1,203,117,0,143,203,45,1,119,0,53,0,119,0,226,255,82,95,2,0,90,96,0,95,82,97,2,0,26,203,97,1,143,203,35,1,141,203,42,1,0,98,203,0,141,203,35,1,0,99,203,0,141,203,42,1,0,100,203,0,3,202,0,98,4,200,99,100,25,200,200,1,134,203,0,0,128,39,6,0,5,202,200,0,141,203,46,1,1,200,0,0,109,203,16,200,141,200,46,1,25,200,200,16,1,203,0,0,109,200,4,203,106,101,5,4,134,102,0,0,252,99,6,0,101,0,0,0,141,203,46,1,113,203,16,102,106,103,72,8,141,200,46,1,25,200,200,16,134,203,0,0,88,242,4,0,103,200,0,0,82,105,2,0,25,203,105,1,85,2,203,0,82,106,2,0,18,203,1,106,41,200,96,24,42,200,200,24,32,200,200,93,38,200,200,1,33,200,200,0,20,203,203,200,121,203,136,255,1,203,117,0,143,203,45,1,119,0,1,0,141,203,45,1,32,203,203,51,121,203,16,0,25,203,79,1,85,2,203,0,0,203,5,0,143,203,23,1,141,200,23,1,134,203,0,0,148,105,6,0,200,0,0,0,0,203,72,0,143,203,24,1,141,203,46,1,137,203,0,0,141,203,24,1,139,203,0,0,119,0,242,0,141,203,45,1,32,203,203,117,121,203,239,0,0,203,5,0,143,203,23,1,141,200,23,1,134,203,0,0,148,105,6,0,200,0,0,0,0,203,72,0,143,203,24,1,141,203,46,1,137,203,0,0,141,203,24,1,139,203,0,0,119,0,226,0,141,203,45,1,32,203,203,63,121,203,208,0,141,203,38,1,0,109,203,0,33,203,109,0,1,200,16,0,1,202,17,0,125,110,203,200,202,0,0,0,1,202,255,0,19,202,110,202,83,72,202,0,1,202,8,0,1,200,1,0,134,111,0,0,224,168,5,0,202,200,0,0,109,72,8,111,82,112,2,0,0,200,112,0,143,200,43,1,1,200,0,0,143,200,36,1,1,200,0,0,85,5,200,0,82,113,2,0,90,114,0,113,82,115,2,0,41,200,114,24,42,200,200,24,32,200,200,93,121,200,4,0,1,200,66,0,143,200,45,1,119,0,141,0,90,116,0,115,41,200,116,24,42,200,200,24,134,118,0,0,160,107,6,0,200,0,0,0,82,119,2,0,33,200,118,0,120,200,2,0,119,0,10,0,25,200,119,1,85,2,200,0,82,120,2,0,50,200,1,120,132,155,1,0,1,200,117,0,143,200,45,1,119,0,123,0,119,0,228,255,90,121,0,119,41,200,121,24,42,200,200,24,32,200,200,91,121,200,4,0,82,122,2,0,25,200,122,1,85,2,200,0,82,123,2,0,50,200,1,123,192,155,1,0,1,200,117,0,143,200,45,1,119,0,108,0,82,124,2,0,0,200,124,0,143,200,43,1,82,125,2,0,90,126,0,125,41,200,126,24,42,200,200,24,32,200,200,44,120,200,26,0,82,127,2,0,90,128,0,127,41,200,128,24,42,200,200,24,134,129,0,0,160,107,6,0,200,0,0,0,33,200,129,0,120,200,17,0,82,130,2,0,90,131,0,130,41,200,131,24,42,200,200,24,32,200,200,93,120,200,11,0,82,147,2,0,25,200,147,1,85,2,200,0,82,148,2,0,50,200,1,148,68,156,1,0,1,200,117,0,143,200,45,1,119,0,75,0,119,0,226,255,82,132,2,0,90,133,0,132,82,134,2,0,26,200,134,1,143,200,36,1,141,200,43,1,0,135,200,0,141,200,36,1,0,137,200,0,141,200,43,1,0,138,200,0,3,202,0,135,4,203,137,138,25,203,203,1,134,200,0,0,128,39,6,0,5,202,203,0,141,200,38,1,0,139,200,0,141,200,46,1,1,203,0,0,109,200,8,203,141,203,46,1,25,203,203,8,1,200,0,0,109,203,4,200,106,140,5,4,33,200,139,0,121,200,13,0,134,141,0,0,216,188,4,0,140,0,0,0,141,200,46,1,109,200,8,141,141,200,46,1,25,200,200,8,34,203,141,0,41,203,203,31,42,203,203,31,109,200,4,203,119,0,12,0,1,203,0,0,1,200,10,0,134,142,0,0,56,109,6,0,140,203,200,0,141,200,46,1,109,200,8,142,141,200,46,1,25,200,200,8,1,203,0,0,109,200,4,203,106,143,72,8,141,200,46,1,25,200,200,8,134,203,0,0,88,242,4,0,143,200,0,0,82,144,2,0,25,203,144,1,85,2,203,0,82,145,2,0,18,203,1,145,41,200,133,24,42,200,200,24,32,200,200,93,38,200,200,1,33,200,200,0,20,203,203,200,121,203,108,255,1,203,117,0,143,203,45,1,119,0,1,0,141,203,45,1,32,203,203,66,121,203,16,0,25,203,115,1,85,2,203,0,0,203,5,0,143,203,23,1,141,200,23,1,134,203,0,0,148,105,6,0,200,0,0,0,0,203,72,0,143,203,24,1,141,203,46,1,137,203,0,0,141,203,24,1,139,203,0,0,119,0,32,0,141,203,45,1,32,203,203,117,121,203,29,0,0,203,5,0,143,203,23,1,141,200,23,1,134,203,0,0,148,105,6,0,200,0,0,0,0,203,72,0,143,203,24,1,141,203,46,1,137,203,0,0,141,203,24,1,139,203,0,0,119,0,16,0,141,203,45,1,32,203,203,117,121,203,13,0,0,203,5,0,143,203,23,1,141,200,23,1,134,203,0,0,148,105,6,0,200,0,0,0,0,203,72,0,143,203,24,1,141,203,46,1,137,203,0,0,141,203,24,1,139,203,0,0,1,203,13,0,83,72,203,0,1,203,8,0,1,200,1,0,134,149,0,0,224,168,5,0,203,200,0,0,109,72,8,149,82,150,2,0,0,200,150,0,143,200,40,1,1,200,0,0,143,200,31,1,1,200,0,0,85,5,200,0,82,151,2,0,90,152,0,151,82,153,2,0,41,200,152,24,42,200,200,24,32,200,200,93,121,200,4,0,1,200,84,0,143,200,45,1,119,0,113,0,90,154,0,153,41,200,154,24,42,200,200,24,134,155,0,0,160,107,6,0,200,0,0,0,82,156,2,0,33,200,155,0,120,200,2,0,119,0,10,0,25,200,156,1,85,2,200,0,82,157,2,0,50,200,1,157,220,158,1,0,1,200,117,0,143,200,45,1,119,0,95,0,119,0,228,255,90,158,0,156,41,200,158,24,42,200,200,24,32,200,200,91,121,200,4,0,82,160,2,0,25,200,160,1,85,2,200,0,82,161,2,0,50,200,1,161,24,159,1,0,1,200,117,0,143,200,45,1,119,0,80,0,82,162,2,0,0,200,162,0,143,200,40,1,82,163,2,0,90,164,0,163,41,200,164,24,42,200,200,24,32,200,200,44,120,200,26,0,82,165,2,0,90,166,0,165,41,200,166,24,42,200,200,24,134,167,0,0,160,107,6,0,200,0,0,0,33,200,167,0,120,200,17,0,82,168,2,0,90,169,0,168,41,200,169,24,42,200,200,24,32,200,200,93,120,200,11,0,82,180,2,0,25,200,180,1,85,2,200,0,82,181,2,0,50,200,1,181,156,159,1,0,1,200,117,0,143,200,45,1,119,0,47,0,119,0,226,255,82,170,2,0,90,171,0,170,82,173,2,0,26,200,173,1,143,200,31,1,141,200,46,1,1,203,0,0,85,200,203,0,141,203,46,1,1,200,0,0,109,203,4,200,141,200,40,1,0,174,200,0,90,175,0,174,41,200,175,24,42,200,200,24,32,200,200,116,1,203,1,0,1,202,0,0,125,176,200,203,202,0,0,0,141,202,46,1,1,203,255,0,19,203,176,203,83,202,203,0,106,177,72,8,141,202,46,1,134,203,0,0,88,242,4,0,177,202,0,0,82,178,2,0,25,203,178,1,85,2,203,0,82,179,2,0,18,203,1,179,41,202,171,24,42,202,202,24,32,202,202,93,38,202,202,1,33,202,202,0,20,203,203,202,121,203,136,255,1,203,117,0,143,203,45,1,119,0,1,0,141,203,45,1,32,203,203,84,121,203,16,0,25,203,153,1,85,2,203,0,0,203,5,0,143,203,23,1,141,202,23,1,134,203,0,0,148,105,6,0,202,0,0,0,0,203,72,0,143,203,24,1,141,203,46,1,137,203,0,0,141,203,24,1,139,203,0,0,119,0,16,0,141,203,45,1,32,203,203,117,121,203,13,0,0,203,5,0,143,203,23,1,141,202,23,1,134,203,0,0,148,105,6,0,202,0,0,0,0,203,72,0,143,203,24,1,141,203,46,1,137,203,0,0,141,203,24,1,139,203,0,0,1,203,11,0,83,72,203,0,134,44,0,0,232,4,4,0,0,1,2,0,109,72,8,44,0,203,5,0,143,203,23,1,141,202,23,1,134,203,0,0,148,105,6,0,202,0,0,0,0,203,72,0,143,203,24,1,141,203,46,1,137,203,0,0,141,203,24,1,139,203,0,0,140,2,96,0,0,0,0,0,2,91,0,0,152,0,0,0,1,89,0,0,136,92,0,0,0,90,92,0,136,92,0,0,1,93,128,2,3,92,92,93,137,92,0,0,130,92,0,0,136,93,0,0,49,92,92,93,96,161,1,0,135,92,0,0,1,92,8,1,94,38,0,92,1,92,160,0,3,92,0,92,112,46,92,4,25,92,0,56,112,52,92,4,64,88,46,52,58,55,88,0,59,92,0,0,71,92,55,92,121,92,2,0,59,88,0,0,102,62,38,2,41,92,62,24,42,92,92,24,33,92,92,0,121,92,135,1,78,30,38,0,41,92,30,24,42,92,92,24,33,92,92,0,121,92,7,0,0,83,0,0,134,92,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,3,92,0,91,112,31,92,4,59,92,0,0,73,92,31,92,121,92,169,0,102,32,38,1,41,92,32,24,42,92,92,24,33,92,92,0,120,92,36,0,1,93,1,0,107,38,1,93,3,93,0,91,112,33,93,4,25,93,38,4,68,92,33,0,59,94,4,0,65,92,92,94,113,93,4,92,3,92,0,91,112,34,92,4,25,92,38,12,59,93,6,0,65,93,34,93,113,92,4,93,25,93,38,4,112,35,93,4,25,93,38,4,59,92,1,0,65,92,35,92,113,93,4,92,25,92,38,12,112,36,92,4,25,92,38,12,62,93,0,0,154,153,153,153,153,153,169,63,65,93,36,93,113,92,4,93,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,102,37,38,1,41,93,37,24,42,93,93,24,33,93,93,0,120,93,7,0,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,3,93,0,91,112,39,93,4,59,93,0,0,73,93,39,93,120,93,7,0,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,100,40,0,91,112,41,38,4,112,42,38,12,65,92,41,1,63,92,40,92,65,94,42,1,65,94,94,1,61,95,0,0,0,0,0,63,65,94,94,95,63,92,92,94,101,0,91,92,3,92,0,91,112,43,92,4,25,92,38,4,112,44,92,4,25,92,38,12,112,45,92,4,3,92,0,91,65,93,44,1,63,93,43,93,65,94,45,1,65,94,94,1,61,95,0,0,0,0,0,63,65,94,94,95,63,93,93,94,113,92,4,93,112,47,38,4,112,48,38,12,65,92,48,1,63,92,47,92,113,38,4,92,25,92,38,4,112,49,92,4,25,92,38,12,112,50,92,4,25,92,38,4,65,93,50,1,63,93,49,93,113,92,4,93,3,93,0,91,112,51,93,4,59,93,0,0,72,93,51,93,121,93,11,0,3,93,0,91,59,92,0,0,113,93,4,92,1,93,38,30,1,94,16,0,134,92,0,0,108,120,5,0,0,93,94,0,1,94,0,0,107,38,3,94,1,94,96,2,106,92,38,4,97,90,94,92,1,92,96,2,3,92,90,92,25,94,38,4,106,94,94,4,109,92,4,94,25,92,90,24,1,93,96,2,3,93,90,93,61,95,0,0,51,51,115,63,134,94,0,0,24,234,5,0,92,93,95,0,106,95,90,24,109,38,4,95,25,95,38,4,25,94,90,24,106,94,94,4,109,95,4,94,1,94,104,2,106,95,38,12,97,90,94,95,1,95,104,2,3,95,90,95,25,94,38,12,106,94,94,4,109,95,4,94,25,95,90,16,1,93,104,2,3,93,90,93,61,92,0,0,154,153,25,63,134,94,0,0,24,234,5,0,95,93,92,0,106,92,90,16,109,38,12,92,25,92,38,12,25,94,90,16,106,94,94,4,109,92,4,94,0,83,0,0,134,94,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,3,94,0,91,112,53,94,4,59,94,0,0,71,94,53,94,120,94,7,0,0,83,0,0,134,94,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,102,54,38,1,41,94,54,24,42,94,94,24,33,94,94,0,120,94,61,0,1,92,1,0,107,38,1,92,3,92,0,91,112,56,92,4,58,57,88,0,25,92,38,4,68,94,56,0,64,94,94,57,59,93,4,0,65,94,94,93,113,92,4,94,3,94,0,91,112,58,94,4,58,59,88,0,25,94,38,12,68,92,58,0,64,92,92,59,68,92,92,0,59,93,6,0,65,92,92,93,113,94,4,92,25,92,38,4,112,60,92,4,25,92,38,4,59,94,1,0,65,94,60,94,113,92,4,94,25,94,38,12,112,61,94,4,25,94,38,12,62,92,0,0,154,153,153,153,153,153,169,63,65,92,61,92,113,94,4,92,3,92,0,91,112,63,92,4,58,64,88,0,68,92,64,0,73,92,63,92,120,92,7,0,0,83,0,0,134,92,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,1,94,38,30,1,93,16,0,134,92,0,0,108,120,5,0,0,94,93,0,1,93,0,0,107,38,3,93,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,102,65,38,1,41,93,65,24,42,93,93,24,33,93,93,0,120,93,7,0,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,3,93,0,91,112,66,93,4,58,67,88,0,68,93,67,0,71,93,66,93,120,93,7,0,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,100,68,0,91,112,69,38,4,112,70,38,12,65,92,69,1,63,92,68,92,65,94,70,1,65,94,94,1,61,95,0,0,0,0,0,63,65,94,94,95,63,92,92,94,101,0,91,92,3,92,0,91,112,72,92,4,25,92,38,4,112,73,92,4,25,92,38,12,112,74,92,4,3,92,0,91,65,93,73,1,63,93,72,93,65,94,74,1,65,94,94,1,61,95,0,0,0,0,0,63,65,94,94,95,63,93,93,94,113,92,4,93,112,75,38,4,112,77,38,12,65,92,77,1,63,92,75,92,113,38,4,92,25,92,38,4,112,78,92,4,25,92,38,12,112,79,92,4,25,92,38,4,65,93,79,1,63,93,78,93,113,92,4,93,3,93,0,91,112,80,93,4,58,81,88,0,68,93,81,0,74,93,80,93,121,93,12,0,58,82,88,0,3,93,0,91,68,92,82,0,113,93,4,92,1,93,38,30,1,94,16,0,134,92,0,0,108,120,5,0,0,93,94,0,1,94,0,0,107,38,3,94,1,94,112,2,106,92,38,4,97,90,94,92,1,92,112,2,3,92,90,92,25,94,38,4,106,94,94,4,109,92,4,94,25,92,90,8,1,93,112,2,3,93,90,93,61,95,0,0,51,51,115,63,134,94,0,0,24,234,5,0,92,93,95,0,106,95,90,8,109,38,4,95,25,95,38,4,25,94,90,8,106,94,94,4,109,95,4,94,1,94,120,2,106,95,38,12,97,90,94,95,1,95,120,2,3,95,90,95,25,94,38,12,106,94,94,4,109,95,4,94,1,95,120,2,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,90,95,93,0,82,93,90,0,109,38,12,93,25,93,38,12,106,94,90,4,109,93,4,94,0,83,0,0,134,94,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,119,0,222,3,100,71,0,91,112,76,38,4,112,84,38,12,65,93,76,1,63,93,71,93,65,95,84,1,65,95,95,1,61,92,0,0,0,0,0,63,65,95,95,92,63,93,93,95,101,0,91,93,3,93,0,91,112,85,93,4,25,93,38,4,112,86,93,4,25,93,38,12,112,87,93,4,3,93,0,91,65,94,86,1,63,94,85,94,65,95,87,1,65,95,95,1,61,92,0,0,0,0,0,63,65,95,95,92,63,94,94,95,113,93,4,94,112,2,38,4,112,3,38,12,65,93,3,1,63,93,2,93,113,38,4,93,25,93,38,4,112,4,93,4,25,93,38,12,112,5,93,4,25,93,38,4,65,94,5,1,63,94,4,94,113,93,4,94,1,94,64,1,106,93,38,4,97,90,94,93,1,93,64,1,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,1,93,40,1,3,93,90,93,1,95,64,1,3,95,90,95,134,94,0,0,208,182,5,0,93,95,0,0,1,94,72,1,106,95,38,12,97,90,94,95,1,95,72,1,3,95,90,95,25,94,38,12,106,94,94,4,109,95,4,94,1,95,32,1,3,95,90,95,1,93,72,1,3,93,90,93,134,94,0,0,208,182,5,0,95,93,0,0,25,94,38,4,112,6,94,4,59,94,0,0,73,94,6,94,121,94,247,0,3,94,0,91,112,7,94,4,58,8,88,0,68,94,8,0,71,94,7,94,121,94,3,0,1,89,7,0,119,0,7,0,3,94,0,91,112,9,94,4,59,94,0,0,73,94,9,94,121,94,2,0,1,89,7,0,32,94,89,7,121,94,10,0,25,94,38,4,112,10,94,4,135,11,2,0,10,0,0,0,59,94,30,0,72,94,11,94,121,94,3,0,1,93,1,0,107,38,2,93,3,93,0,91,112,12,93,4,59,93,40,0,74,93,12,93,121,93,106,0,78,13,38,0,41,93,13,24,42,93,93,24,33,93,93,0,120,93,101,0,1,93,80,1,106,94,38,4,97,90,93,94,1,94,80,1,3,94,90,94,25,93,38,4,106,93,93,4,109,94,4,93,1,94,24,1,3,94,90,94,1,95,80,1,3,95,90,95,61,92,0,0,51,51,115,63,134,93,0,0,24,234,5,0,94,95,92,0,1,92,24,1,94,92,90,92,109,38,4,92,25,92,38,4,1,93,24,1,3,93,90,93,106,93,93,4,109,92,4,93,1,93,88,1,106,92,38,12,97,90,93,92,1,92,88,1,3,92,90,92,25,93,38,12,106,93,93,4,109,92,4,93,1,92,16,1,3,92,90,92,1,95,88,1,3,95,90,95,61,94,0,0,154,153,25,63,134,93,0,0,24,234,5,0,92,95,94,0,1,94,16,1,94,94,90,94,109,38,12,94,25,94,38,12,1,93,16,1,3,93,90,93,106,93,93,4,109,94,4,93,1,93,96,1,106,94,38,4,97,90,93,94,1,94,96,1,3,94,90,94,25,93,38,4,106,93,93,4,109,94,4,93,1,94,8,1,3,94,90,94,1,95,96,1,3,95,90,95,61,92,0,0,51,51,115,63,134,93,0,0,24,234,5,0,94,95,92,0,1,92,8,1,94,92,90,92,109,38,4,92,25,92,38,4,1,93,8,1,3,93,90,93,106,93,93,4,109,92,4,93,1,93,104,1,106,92,38,12,97,90,93,92,1,92,104,1,3,92,90,92,25,93,38,12,106,93,93,4,109,92,4,93,1,92,0,1,3,92,90,92,1,95,104,1,3,95,90,95,61,94,0,0,154,153,25,63,134,93,0,0,24,234,5,0,92,95,94,0,1,94,0,1,94,94,90,94,109,38,12,94,25,94,38,12,1,93,0,1,3,93,90,93,106,93,93,4,109,94,4,93,3,93,0,91,112,14,93,4,59,93,140,0,74,93,14,93,121,93,107,1,78,15,38,0,41,93,15,24,42,93,93,24,33,93,93,0,120,93,102,1,1,93,112,1,106,94,38,4,97,90,93,94,1,94,112,1,3,94,90,94,25,93,38,4,106,93,93,4,109,94,4,93,1,94,248,0,3,94,90,94,1,95,112,1,3,95,90,95,61,92,0,0,51,51,115,63,134,93,0,0,24,234,5,0,94,95,92,0,1,92,248,0,94,92,90,92,109,38,4,92,25,92,38,4,1,93,248,0,3,93,90,93,106,93,93,4,109,92,4,93,1,93,120,1,106,92,38,12,97,90,93,92,1,92,120,1,3,92,90,92,25,93,38,12,106,93,93,4,109,92,4,93,1,92,240,0,3,92,90,92,1,95,120,1,3,95,90,95,61,94,0,0,154,153,25,63,134,93,0,0,24,234,5,0,92,95,94,0,1,94,240,0,94,94,90,94,109,38,12,94,25,94,38,12,1,93,240,0,3,93,90,93,106,93,93,4,109,94,4,93,1,93,128,1,106,94,38,4,97,90,93,94,1,94,128,1,3,94,90,94,25,93,38,4,106,93,93,4,109,94,4,93,1,94,232,0,3,94,90,94,1,95,128,1,3,95,90,95,61,92,0,0,51,51,115,63,134,93,0,0,24,234,5,0,94,95,92,0,1,92,232,0,94,92,90,92,109,38,4,92,25,92,38,4,1,93,232,0,3,93,90,93,106,93,93,4,109,92,4,93,1,93,136,1,106,92,38,12,97,90,93,92,1,92,136,1,3,92,90,92,25,93,38,12,106,93,93,4,109,92,4,93,1,92,224,0,3,92,90,92,1,95,136,1,3,95,90,95,61,94,0,0,154,153,25,63,134,93,0,0,24,234,5,0,92,95,94,0,1,94,224,0,94,94,90,94,109,38,12,94,25,94,38,12,1,93,224,0,3,93,90,93,106,93,93,4,109,94,4,93,119,0,1,1,25,93,38,4,112,16,93,4,59,93,0,0,71,93,16,93,121,93,252,0,3,93,0,91,112,17,93,4,58,18,88,0,68,93,18,0,71,93,17,93,121,93,3,0,1,89,18,0,119,0,7,0,3,93,0,91,112,19,93,4,59,93,0,0,73,93,19,93,121,93,2,0,1,89,18,0,32,93,89,18,121,93,10,0,25,93,38,4,112,20,93,4,135,21,2,0,20,0,0,0,59,93,30,0,72,93,21,93,121,93,3,0,1,94,1,0,107,38,2,94,3,94,0,91,112,22,94,4,58,23,88,0,68,94,23,0,59,93,40,0,64,94,94,93,71,94,22,94,121,94,106,0,78,24,38,0,41,94,24,24,42,94,94,24,33,94,94,0,120,94,101,0,1,94,144,1,106,93,38,4,97,90,94,93,1,93,144,1,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,1,93,216,0,3,93,90,93,1,95,144,1,3,95,90,95,61,92,0,0,51,51,115,63,134,94,0,0,24,234,5,0,93,95,92,0,1,92,216,0,94,92,90,92,109,38,4,92,25,92,38,4,1,94,216,0,3,94,90,94,106,94,94,4,109,92,4,94,1,94,152,1,106,92,38,12,97,90,94,92,1,92,152,1,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,1,92,208,0,3,92,90,92,1,95,152,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,208,0,94,93,90,93,109,38,12,93,25,93,38,12,1,94,208,0,3,94,90,94,106,94,94,4,109,93,4,94,1,94,160,1,106,93,38,4,97,90,94,93,1,93,160,1,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,1,93,200,0,3,93,90,93,1,95,160,1,3,95,90,95,61,92,0,0,51,51,115,63,134,94,0,0,24,234,5,0,93,95,92,0,1,92,200,0,94,92,90,92,109,38,4,92,25,92,38,4,1,94,200,0,3,94,90,94,106,94,94,4,109,92,4,94,1,94,168,1,106,92,38,12,97,90,94,92,1,92,168,1,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,1,92,192,0,3,92,90,92,1,95,168,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,192,0,94,93,90,93,109,38,12,93,25,93,38,12,1,94,192,0,3,94,90,94,106,94,94,4,109,93,4,94,3,94,0,91,112,25,94,4,58,26,88,0,68,94,26,0,59,93,140,0,64,94,94,93,71,94,25,94,121,94,106,0,78,27,38,0,41,94,27,24,42,94,94,24,33,94,94,0,120,94,101,0,1,94,176,1,106,93,38,4,97,90,94,93,1,93,176,1,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,1,93,184,0,3,93,90,93,1,95,176,1,3,95,90,95,61,92,0,0,51,51,115,63,134,94,0,0,24,234,5,0,93,95,92,0,1,92,184,0,94,92,90,92,109,38,4,92,25,92,38,4,1,94,184,0,3,94,90,94,106,94,94,4,109,92,4,94,1,94,184,1,106,92,38,12,97,90,94,92,1,92,184,1,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,1,92,176,0,3,92,90,92,1,95,184,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,176,0,94,93,90,93,109,38,12,93,25,93,38,12,1,94,176,0,3,94,90,94,106,94,94,4,109,93,4,94,1,94,192,1,106,93,38,4,97,90,94,93,1,93,192,1,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,1,93,168,0,3,93,90,93,1,95,192,1,3,95,90,95,61,92,0,0,51,51,115,63,134,94,0,0,24,234,5,0,93,95,92,0,1,92,168,0,94,92,90,92,109,38,4,92,25,92,38,4,1,94,168,0,3,94,90,94,106,94,94,4,109,92,4,94,1,94,200,1,106,92,38,12,97,90,94,92,1,92,200,1,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,1,92,160,0,3,92,90,92,1,95,200,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,160,0,94,93,90,93,109,38,12,93,25,93,38,12,1,94,160,0,3,94,90,94,106,94,94,4,109,93,4,94,78,28,38,0,41,94,28,24,42,94,94,24,33,94,94,0,121,94,187,0,1,94,208,1,106,93,38,4,97,90,94,93,1,93,208,1,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,3,93,90,91,1,95,208,1,3,95,90,95,61,92,0,0,102,102,102,63,134,94,0,0,24,234,5,0,93,95,92,0,94,92,90,91,109,38,4,92,25,92,38,4,3,94,90,91,106,94,94,4,109,92,4,94,1,94,216,1,106,92,38,12,97,90,94,92,1,92,216,1,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,1,92,144,0,3,92,90,92,1,95,216,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,144,0,94,93,90,93,109,38,12,93,25,93,38,12,1,94,144,0,3,94,90,94,106,94,94,4,109,93,4,94,1,94,224,1,106,93,38,4,97,90,94,93,1,93,224,1,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,1,93,136,0,3,93,90,93,1,95,224,1,3,95,90,95,61,92,0,0,102,102,102,63,134,94,0,0,24,234,5,0,93,95,92,0,1,92,136,0,94,92,90,92,109,38,4,92,25,92,38,4,1,94,136,0,3,94,90,94,106,94,94,4,109,92,4,94,1,94,232,1,106,92,38,12,97,90,94,92,1,92,232,1,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,1,92,128,0,3,92,90,92,1,95,232,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,128,0,94,93,90,93,109,38,12,93,25,93,38,12,1,94,128,0,3,94,90,94,106,94,94,4,109,93,4,94,1,94,240,1,106,93,38,4,97,90,94,93,1,93,240,1,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,25,93,90,120,1,95,240,1,3,95,90,95,61,92,0,0,102,102,102,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,120,109,38,4,92,25,92,38,4,25,94,90,120,106,94,94,4,109,92,4,94,1,94,248,1,106,92,38,12,97,90,94,92,1,92,248,1,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,25,92,90,112,1,95,248,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,112,109,38,12,93,25,93,38,12,25,94,90,112,106,94,94,4,109,93,4,94,1,94,0,2,106,93,38,4,97,90,94,93,1,93,0,2,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,25,93,90,104,1,95,0,2,3,95,90,95,61,92,0,0,102,102,102,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,104,109,38,4,92,25,92,38,4,25,94,90,104,106,94,94,4,109,92,4,94,1,94,8,2,106,92,38,12,97,90,94,92,1,92,8,2,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,25,92,90,96,1,95,8,2,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,96,109,38,12,93,25,93,38,12,25,94,90,96,106,94,94,4,109,93,4,94,119,0,177,0,1,94,16,2,106,93,38,4,97,90,94,93,1,93,16,2,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,25,93,90,88,1,95,16,2,3,95,90,95,61,92,0,0,182,243,125,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,88,109,38,4,92,25,92,38,4,25,94,90,88,106,94,94,4,109,92,4,94,1,94,24,2,106,92,38,12,97,90,94,92,1,92,24,2,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,25,92,90,80,1,95,24,2,3,95,90,95,61,93,0,0,154,153,153,62,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,80,109,38,12,93,25,93,38,12,25,94,90,80,106,94,94,4,109,93,4,94,1,94,32,2,106,93,38,4,97,90,94,93,1,93,32,2,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,25,93,90,72,1,95,32,2,3,95,90,95,61,92,0,0,182,243,125,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,72,109,38,4,92,25,92,38,4,25,94,90,72,106,94,94,4,109,92,4,94,1,94,40,2,106,92,38,12,97,90,94,92,1,92,40,2,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,25,92,90,64,1,95,40,2,3,95,90,95,61,93,0,0,154,153,153,62,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,64,109,38,12,93,25,93,38,12,25,94,90,64,106,94,94,4,109,93,4,94,1,94,48,2,106,93,38,4,97,90,94,93,1,93,48,2,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,25,93,90,56,1,95,48,2,3,95,90,95,61,92,0,0,182,243,125,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,56,109,38,4,92,25,92,38,4,25,94,90,56,106,94,94,4,109,92,4,94,1,94,56,2,106,92,38,12,97,90,94,92,1,92,56,2,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,25,92,90,48,1,95,56,2,3,95,90,95,61,93,0,0,154,153,153,62,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,48,109,38,12,93,25,93,38,12,25,94,90,48,106,94,94,4,109,93,4,94,1,94,64,2,106,93,38,4,97,90,94,93,1,93,64,2,3,93,90,93,25,94,38,4,106,94,94,4,109,93,4,94,25,93,90,40,1,95,64,2,3,95,90,95,61,92,0,0,182,243,125,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,40,109,38,4,92,25,92,38,4,25,94,90,40,106,94,94,4,109,92,4,94,1,94,72,2,106,92,38,12,97,90,94,92,1,92,72,2,3,92,90,92,25,94,38,12,106,94,94,4,109,92,4,94,25,92,90,32,1,95,72,2,3,95,90,95,61,93,0,0,154,153,153,62,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,32,109,38,12,93,25,93,38,12,25,94,90,32,106,94,94,4,109,93,4,94,1,94,80,2,1,93,40,1,94,93,90,93,97,90,94,93,1,93,80,2,3,93,90,93,1,94,40,1,3,94,90,94,106,94,94,4,109,93,4,94,1,94,88,2,1,93,32,1,94,93,90,93,97,90,94,93,1,93,88,2,3,93,90,93,1,94,32,1,3,94,90,94,106,94,94,4,109,93,4,94,1,94,80,2,3,94,90,94,1,93,88,2,3,93,90,93,134,29,0,0,168,59,6,0,94,93,0,0,59,93,0,0,74,93,29,93,120,93,7,0,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,1,94,1,0,107,38,2,94,0,83,0,0,134,94,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,139,0,0,0,140,2,96,0,0,0,0,0,2,91,0,0,152,0,0,0,1,89,0,0,136,92,0,0,0,90,92,0,136,92,0,0,1,93,128,2,3,92,92,93,137,92,0,0,130,92,0,0,136,93,0,0,49,92,92,93,120,183,1,0,135,92,0,0,1,92,8,1,94,42,0,92,1,92,160,0,100,48,0,92,112,52,0,56,64,88,48,52,58,56,88,0,59,92,0,0,71,92,56,92,121,92,2,0,59,88,0,0,102,65,42,2,41,92,65,24,42,92,92,24,33,92,92,0,121,92,110,1,78,30,42,0,41,92,30,24,42,92,92,24,33,92,92,0,121,92,7,0,0,83,0,0,134,92,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,100,31,0,91,59,92,0,0,73,92,31,92,121,92,158,0,102,32,42,1,41,92,32,24,42,92,92,24], eb + 102400);
  HEAPU8.set([33,92,92,0,120,92,28,0,1,93,1,0,107,42,1,93,100,33,0,91,68,92,33,0,59,94,4,0,65,92,92,94,113,42,4,92,100,34,0,91,59,93,6,0,65,93,34,93,113,42,12,93,112,35,42,4,59,92,1,0,65,92,35,92,113,42,4,92,112,36,42,12,62,93,0,0,154,153,153,153,153,153,169,63,65,93,36,93,113,42,12,93,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,102,37,42,1,41,93,37,24,42,93,93,24,33,93,93,0,120,93,7,0,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,100,38,0,91,59,93,0,0,73,93,38,93,120,93,7,0,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,100,39,0,91,112,40,42,4,112,41,42,12,65,92,40,1,63,92,39,92,65,94,41,1,65,94,94,1,61,95,0,0,0,0,0,63,65,94,94,95,63,92,92,94,101,0,91,92,3,92,0,91,112,43,92,4,25,92,42,4,112,44,92,4,25,92,42,12,112,45,92,4,3,92,0,91,65,93,44,1,63,93,43,93,65,94,45,1,65,94,94,1,61,95,0,0,0,0,0,63,65,94,94,95,63,93,93,94,113,92,4,93,112,46,42,4,112,47,42,12,65,92,47,1,63,92,46,92,113,42,4,92,25,92,42,4,112,49,92,4,25,92,42,12,112,50,92,4,25,92,42,4,65,93,50,1,63,93,49,93,113,92,4,93,100,51,0,91,59,93,0,0,72,93,51,93,121,93,10,0,59,92,0,0,101,0,91,92,1,93,38,30,1,94,16,0,134,92,0,0,108,120,5,0,0,93,94,0,1,94,0,0,107,42,3,94,1,94,96,2,106,92,42,4,97,90,94,92,1,92,96,2,3,92,90,92,25,94,42,4,106,94,94,4,109,92,4,94,25,92,90,24,1,93,96,2,3,93,90,93,61,95,0,0,51,51,115,63,134,94,0,0,24,234,5,0,92,93,95,0,106,95,90,24,109,42,4,95,25,95,42,4,25,94,90,24,106,94,94,4,109,95,4,94,1,94,104,2,106,95,42,12,97,90,94,95,1,95,104,2,3,95,90,95,25,94,42,12,106,94,94,4,109,95,4,94,25,95,90,16,1,93,104,2,3,93,90,93,61,92,0,0,154,153,25,63,134,94,0,0,24,234,5,0,95,93,92,0,106,92,90,16,109,42,12,92,25,92,42,12,25,94,90,16,106,94,94,4,109,92,4,94,0,83,0,0,134,94,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,100,53,0,91,59,94,0,0,71,94,53,94,120,94,7,0,0,83,0,0,134,94,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,102,54,42,1,41,94,54,24,42,94,94,24,33,94,94,0,120,94,52,0,1,92,1,0,107,42,1,92,100,55,0,91,58,57,88,0,68,94,55,0,64,94,94,57,59,93,4,0,65,94,94,93,113,42,4,94,100,58,0,91,58,59,88,0,68,92,58,0,64,92,92,59,68,92,92,0,59,93,6,0,65,92,92,93,113,42,12,92,112,60,42,4,59,94,1,0,65,94,60,94,113,42,4,94,112,61,42,12,62,92,0,0,154,153,153,153,153,153,169,63,65,92,61,92,113,42,12,92,100,62,0,91,58,63,88,0,68,92,63,0,73,92,62,92,120,92,7,0,0,83,0,0,134,92,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,1,94,38,30,1,93,16,0,134,92,0,0,108,120,5,0,0,94,93,0,1,93,0,0,107,42,3,93,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,102,64,42,1,41,93,64,24,42,93,93,24,33,93,93,0,120,93,7,0,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,100,66,0,91,58,67,88,0,68,93,67,0,71,93,66,93,120,93,7,0,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,100,68,0,91,112,69,42,4,112,70,42,12,65,92,69,1,63,92,68,92,65,94,70,1,65,94,94,1,61,95,0,0,0,0,0,63,65,94,94,95,63,92,92,94,101,0,91,92,3,92,0,91,112,71,92,4,25,92,42,4,112,72,92,4,25,92,42,12,112,74,92,4,3,92,0,91,65,93,72,1,63,93,71,93,65,94,74,1,65,94,94,1,61,95,0,0,0,0,0,63,65,94,94,95,63,93,93,94,113,92,4,93,112,75,42,4,112,76,42,12,65,92,76,1,63,92,75,92,113,42,4,92,25,92,42,4,112,77,92,4,25,92,42,12,112,78,92,4,25,92,42,4,65,93,78,1,63,93,77,93,113,92,4,93,100,80,0,91,58,81,88,0,68,93,81,0,74,93,80,93,121,93,11,0,58,82,88,0,68,92,82,0,101,0,91,92,1,93,38,30,1,94,16,0,134,92,0,0,108,120,5,0,0,93,94,0,1,94,0,0,107,42,3,94,1,94,112,2,106,92,42,4,97,90,94,92,1,92,112,2,3,92,90,92,25,94,42,4,106,94,94,4,109,92,4,94,25,92,90,8,1,93,112,2,3,93,90,93,61,95,0,0,51,51,115,63,134,94,0,0,24,234,5,0,92,93,95,0,106,95,90,8,109,42,4,95,25,95,42,4,25,94,90,8,106,94,94,4,109,95,4,94,1,94,120,2,106,95,42,12,97,90,94,95,1,95,120,2,3,95,90,95,25,94,42,12,106,94,94,4,109,95,4,94,1,95,120,2,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,90,95,93,0,82,93,90,0,109,42,12,93,25,93,42,12,106,94,90,4,109,93,4,94,0,83,0,0,134,94,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,119,0,210,3,100,73,0,91,112,79,42,4,112,84,42,12,65,93,79,1,63,93,73,93,65,95,84,1,65,95,95,1,61,92,0,0,0,0,0,63,65,95,95,92,63,93,93,95,101,0,91,93,3,93,0,91,112,85,93,4,25,93,42,4,112,86,93,4,25,93,42,12,112,87,93,4,3,93,0,91,65,94,86,1,63,94,85,94,65,95,87,1,65,95,95,1,61,92,0,0,0,0,0,63,65,95,95,92,63,94,94,95,113,93,4,94,112,2,42,4,112,3,42,12,65,93,3,1,63,93,2,93,113,42,4,93,25,93,42,4,112,4,93,4,25,93,42,12,112,5,93,4,25,93,42,4,65,94,5,1,63,94,4,94,113,93,4,94,1,94,64,1,106,93,42,4,97,90,94,93,1,93,64,1,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,1,93,40,1,3,93,90,93,1,95,64,1,3,95,90,95,134,94,0,0,208,182,5,0,93,95,0,0,1,94,72,1,106,95,42,12,97,90,94,95,1,95,72,1,3,95,90,95,25,94,42,12,106,94,94,4,109,95,4,94,1,95,32,1,3,95,90,95,1,93,72,1,3,93,90,93,134,94,0,0,208,182,5,0,95,93,0,0,112,6,42,4,59,94,0,0,73,94,6,94,121,94,242,0,100,7,0,91,58,8,88,0,68,94,8,0,71,94,7,94,121,94,3,0,1,89,7,0,119,0,6,0,100,9,0,91,59,94,0,0,73,94,9,94,121,94,2,0,1,89,7,0,32,94,89,7,121,94,9,0,112,10,42,4,135,11,2,0,10,0,0,0,59,94,30,0,72,94,11,94,121,94,3,0,1,93,1,0,107,42,2,93,100,12,0,91,59,93,40,0,74,93,12,93,121,93,106,0,78,13,42,0,41,93,13,24,42,93,93,24,33,93,93,0,120,93,101,0,1,93,80,1,106,94,42,4,97,90,93,94,1,94,80,1,3,94,90,94,25,93,42,4,106,93,93,4,109,94,4,93,1,94,24,1,3,94,90,94,1,95,80,1,3,95,90,95,61,92,0,0,51,51,115,63,134,93,0,0,24,234,5,0,94,95,92,0,1,92,24,1,94,92,90,92,109,42,4,92,25,92,42,4,1,93,24,1,3,93,90,93,106,93,93,4,109,92,4,93,1,93,88,1,106,92,42,12,97,90,93,92,1,92,88,1,3,92,90,92,25,93,42,12,106,93,93,4,109,92,4,93,1,92,16,1,3,92,90,92,1,95,88,1,3,95,90,95,61,94,0,0,154,153,25,63,134,93,0,0,24,234,5,0,92,95,94,0,1,94,16,1,94,94,90,94,109,42,12,94,25,94,42,12,1,93,16,1,3,93,90,93,106,93,93,4,109,94,4,93,1,93,96,1,106,94,42,4,97,90,93,94,1,94,96,1,3,94,90,94,25,93,42,4,106,93,93,4,109,94,4,93,1,94,8,1,3,94,90,94,1,95,96,1,3,95,90,95,61,92,0,0,51,51,115,63,134,93,0,0,24,234,5,0,94,95,92,0,1,92,8,1,94,92,90,92,109,42,4,92,25,92,42,4,1,93,8,1,3,93,90,93,106,93,93,4,109,92,4,93,1,93,104,1,106,92,42,12,97,90,93,92,1,92,104,1,3,92,90,92,25,93,42,12,106,93,93,4,109,92,4,93,1,92,0,1,3,92,90,92,1,95,104,1,3,95,90,95,61,94,0,0,154,153,25,63,134,93,0,0,24,234,5,0,92,95,94,0,1,94,0,1,94,94,90,94,109,42,12,94,25,94,42,12,1,93,0,1,3,93,90,93,106,93,93,4,109,94,4,93,100,14,0,91,59,93,140,0,74,93,14,93,121,93,101,1,78,15,42,0,41,93,15,24,42,93,93,24,33,93,93,0,120,93,96,1,1,93,112,1,106,94,42,4,97,90,93,94,1,94,112,1,3,94,90,94,25,93,42,4,106,93,93,4,109,94,4,93,1,94,248,0,3,94,90,94,1,95,112,1,3,95,90,95,61,92,0,0,51,51,115,63,134,93,0,0,24,234,5,0,94,95,92,0,1,92,248,0,94,92,90,92,109,42,4,92,25,92,42,4,1,93,248,0,3,93,90,93,106,93,93,4,109,92,4,93,1,93,120,1,106,92,42,12,97,90,93,92,1,92,120,1,3,92,90,92,25,93,42,12,106,93,93,4,109,92,4,93,1,92,240,0,3,92,90,92,1,95,120,1,3,95,90,95,61,94,0,0,154,153,25,63,134,93,0,0,24,234,5,0,92,95,94,0,1,94,240,0,94,94,90,94,109,42,12,94,25,94,42,12,1,93,240,0,3,93,90,93,106,93,93,4,109,94,4,93,1,93,128,1,106,94,42,4,97,90,93,94,1,94,128,1,3,94,90,94,25,93,42,4,106,93,93,4,109,94,4,93,1,94,232,0,3,94,90,94,1,95,128,1,3,95,90,95,61,92,0,0,51,51,115,63,134,93,0,0,24,234,5,0,94,95,92,0,1,92,232,0,94,92,90,92,109,42,4,92,25,92,42,4,1,93,232,0,3,93,90,93,106,93,93,4,109,92,4,93,1,93,136,1,106,92,42,12,97,90,93,92,1,92,136,1,3,92,90,92,25,93,42,12,106,93,93,4,109,92,4,93,1,92,224,0,3,92,90,92,1,95,136,1,3,95,90,95,61,94,0,0,154,153,25,63,134,93,0,0,24,234,5,0,92,95,94,0,1,94,224,0,94,94,90,94,109,42,12,94,25,94,42,12,1,93,224,0,3,93,90,93,106,93,93,4,109,94,4,93,119,0,251,0,112,16,42,4,59,93,0,0,71,93,16,93,121,93,247,0,100,17,0,91,58,18,88,0,68,93,18,0,71,93,17,93,121,93,3,0,1,89,18,0,119,0,6,0,100,19,0,91,59,93,0,0,73,93,19,93,121,93,2,0,1,89,18,0,32,93,89,18,121,93,9,0,112,20,42,4,135,21,2,0,20,0,0,0,59,93,30,0,72,93,21,93,121,93,3,0,1,94,1,0,107,42,2,94,100,22,0,91,58,23,88,0,68,94,23,0,59,93,40,0,64,94,94,93,71,94,22,94,121,94,106,0,78,24,42,0,41,94,24,24,42,94,94,24,33,94,94,0,120,94,101,0,1,94,144,1,106,93,42,4,97,90,94,93,1,93,144,1,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,1,93,216,0,3,93,90,93,1,95,144,1,3,95,90,95,61,92,0,0,51,51,115,63,134,94,0,0,24,234,5,0,93,95,92,0,1,92,216,0,94,92,90,92,109,42,4,92,25,92,42,4,1,94,216,0,3,94,90,94,106,94,94,4,109,92,4,94,1,94,152,1,106,92,42,12,97,90,94,92,1,92,152,1,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,1,92,208,0,3,92,90,92,1,95,152,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,208,0,94,93,90,93,109,42,12,93,25,93,42,12,1,94,208,0,3,94,90,94,106,94,94,4,109,93,4,94,1,94,160,1,106,93,42,4,97,90,94,93,1,93,160,1,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,1,93,200,0,3,93,90,93,1,95,160,1,3,95,90,95,61,92,0,0,51,51,115,63,134,94,0,0,24,234,5,0,93,95,92,0,1,92,200,0,94,92,90,92,109,42,4,92,25,92,42,4,1,94,200,0,3,94,90,94,106,94,94,4,109,92,4,94,1,94,168,1,106,92,42,12,97,90,94,92,1,92,168,1,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,1,92,192,0,3,92,90,92,1,95,168,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,192,0,94,93,90,93,109,42,12,93,25,93,42,12,1,94,192,0,3,94,90,94,106,94,94,4,109,93,4,94,100,25,0,91,58,26,88,0,68,94,26,0,59,93,140,0,64,94,94,93,71,94,25,94,121,94,106,0,78,27,42,0,41,94,27,24,42,94,94,24,33,94,94,0,120,94,101,0,1,94,176,1,106,93,42,4,97,90,94,93,1,93,176,1,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,1,93,184,0,3,93,90,93,1,95,176,1,3,95,90,95,61,92,0,0,51,51,115,63,134,94,0,0,24,234,5,0,93,95,92,0,1,92,184,0,94,92,90,92,109,42,4,92,25,92,42,4,1,94,184,0,3,94,90,94,106,94,94,4,109,92,4,94,1,94,184,1,106,92,42,12,97,90,94,92,1,92,184,1,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,1,92,176,0,3,92,90,92,1,95,184,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,176,0,94,93,90,93,109,42,12,93,25,93,42,12,1,94,176,0,3,94,90,94,106,94,94,4,109,93,4,94,1,94,192,1,106,93,42,4,97,90,94,93,1,93,192,1,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,1,93,168,0,3,93,90,93,1,95,192,1,3,95,90,95,61,92,0,0,51,51,115,63,134,94,0,0,24,234,5,0,93,95,92,0,1,92,168,0,94,92,90,92,109,42,4,92,25,92,42,4,1,94,168,0,3,94,90,94,106,94,94,4,109,92,4,94,1,94,200,1,106,92,42,12,97,90,94,92,1,92,200,1,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,1,92,160,0,3,92,90,92,1,95,200,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,160,0,94,93,90,93,109,42,12,93,25,93,42,12,1,94,160,0,3,94,90,94,106,94,94,4,109,93,4,94,78,28,42,0,41,94,28,24,42,94,94,24,33,94,94,0,121,94,187,0,1,94,208,1,106,93,42,4,97,90,94,93,1,93,208,1,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,3,93,90,91,1,95,208,1,3,95,90,95,61,92,0,0,102,102,102,63,134,94,0,0,24,234,5,0,93,95,92,0,94,92,90,91,109,42,4,92,25,92,42,4,3,94,90,91,106,94,94,4,109,92,4,94,1,94,216,1,106,92,42,12,97,90,94,92,1,92,216,1,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,1,92,144,0,3,92,90,92,1,95,216,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,144,0,94,93,90,93,109,42,12,93,25,93,42,12,1,94,144,0,3,94,90,94,106,94,94,4,109,93,4,94,1,94,224,1,106,93,42,4,97,90,94,93,1,93,224,1,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,1,93,136,0,3,93,90,93,1,95,224,1,3,95,90,95,61,92,0,0,102,102,102,63,134,94,0,0,24,234,5,0,93,95,92,0,1,92,136,0,94,92,90,92,109,42,4,92,25,92,42,4,1,94,136,0,3,94,90,94,106,94,94,4,109,92,4,94,1,94,232,1,106,92,42,12,97,90,94,92,1,92,232,1,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,1,92,128,0,3,92,90,92,1,95,232,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,1,93,128,0,94,93,90,93,109,42,12,93,25,93,42,12,1,94,128,0,3,94,90,94,106,94,94,4,109,93,4,94,1,94,240,1,106,93,42,4,97,90,94,93,1,93,240,1,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,25,93,90,120,1,95,240,1,3,95,90,95,61,92,0,0,102,102,102,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,120,109,42,4,92,25,92,42,4,25,94,90,120,106,94,94,4,109,92,4,94,1,94,248,1,106,92,42,12,97,90,94,92,1,92,248,1,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,25,92,90,112,1,95,248,1,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,112,109,42,12,93,25,93,42,12,25,94,90,112,106,94,94,4,109,93,4,94,1,94,0,2,106,93,42,4,97,90,94,93,1,93,0,2,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,25,93,90,104,1,95,0,2,3,95,90,95,61,92,0,0,102,102,102,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,104,109,42,4,92,25,92,42,4,25,94,90,104,106,94,94,4,109,92,4,94,1,94,8,2,106,92,42,12,97,90,94,92,1,92,8,2,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,25,92,90,96,1,95,8,2,3,95,90,95,61,93,0,0,154,153,25,63,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,96,109,42,12,93,25,93,42,12,25,94,90,96,106,94,94,4,109,93,4,94,119,0,177,0,1,94,16,2,106,93,42,4,97,90,94,93,1,93,16,2,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,25,93,90,88,1,95,16,2,3,95,90,95,61,92,0,0,182,243,125,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,88,109,42,4,92,25,92,42,4,25,94,90,88,106,94,94,4,109,92,4,94,1,94,24,2,106,92,42,12,97,90,94,92,1,92,24,2,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,25,92,90,80,1,95,24,2,3,95,90,95,61,93,0,0,154,153,153,62,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,80,109,42,12,93,25,93,42,12,25,94,90,80,106,94,94,4,109,93,4,94,1,94,32,2,106,93,42,4,97,90,94,93,1,93,32,2,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,25,93,90,72,1,95,32,2,3,95,90,95,61,92,0,0,182,243,125,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,72,109,42,4,92,25,92,42,4,25,94,90,72,106,94,94,4,109,92,4,94,1,94,40,2,106,92,42,12,97,90,94,92,1,92,40,2,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,25,92,90,64,1,95,40,2,3,95,90,95,61,93,0,0,154,153,153,62,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,64,109,42,12,93,25,93,42,12,25,94,90,64,106,94,94,4,109,93,4,94,1,94,48,2,106,93,42,4,97,90,94,93,1,93,48,2,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,25,93,90,56,1,95,48,2,3,95,90,95,61,92,0,0,182,243,125,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,56,109,42,4,92,25,92,42,4,25,94,90,56,106,94,94,4,109,92,4,94,1,94,56,2,106,92,42,12,97,90,94,92,1,92,56,2,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,25,92,90,48,1,95,56,2,3,95,90,95,61,93,0,0,154,153,153,62,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,48,109,42,12,93,25,93,42,12,25,94,90,48,106,94,94,4,109,93,4,94,1,94,64,2,106,93,42,4,97,90,94,93,1,93,64,2,3,93,90,93,25,94,42,4,106,94,94,4,109,93,4,94,25,93,90,40,1,95,64,2,3,95,90,95,61,92,0,0,182,243,125,63,134,94,0,0,24,234,5,0,93,95,92,0,106,92,90,40,109,42,4,92,25,92,42,4,25,94,90,40,106,94,94,4,109,92,4,94,1,94,72,2,106,92,42,12,97,90,94,92,1,92,72,2,3,92,90,92,25,94,42,12,106,94,94,4,109,92,4,94,25,92,90,32,1,95,72,2,3,95,90,95,61,93,0,0,154,153,153,62,134,94,0,0,24,234,5,0,92,95,93,0,106,93,90,32,109,42,12,93,25,93,42,12,25,94,90,32,106,94,94,4,109,93,4,94,1,94,80,2,1,93,40,1,94,93,90,93,97,90,94,93,1,93,80,2,3,93,90,93,1,94,40,1,3,94,90,94,106,94,94,4,109,93,4,94,1,94,88,2,1,93,32,1,94,93,90,93,97,90,94,93,1,93,88,2,3,93,90,93,1,94,32,1,3,94,90,94,106,94,94,4,109,93,4,94,1,94,80,2,3,94,90,94,1,93,88,2,3,93,90,93,134,29,0,0,168,59,6,0,94,93,0,0,59,93,0,0,74,93,29,93,120,93,7,0,0,83,0,0,134,93,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,1,94,1,0,107,42,2,94,0,83,0,0,134,94,0,0,24,152,4,0,83,0,0,0,137,90,0,0,139,0,0,0,139,0,0,0,140,1,55,0,0,0,0,0,2,46,0,0,16,10,0,0,2,47,0,0,0,10,0,0,2,48,0,0,240,9,0,0,2,49,0,0,188,0,0,0,2,50,0,0,160,9,0,0,1,42,0,0,136,51,0,0,0,43,51,0,136,51,0,0,1,52,32,10,3,51,51,52,137,51,0,0,130,51,0,0,136,52,0,0,49,51,51,52,20,205,1,0,135,51,0,0,102,25,0,100,41,51,25,24,42,51,51,24,33,51,51,0,121,51,81,6,25,51,0,68,134,26,0,0,64,56,6,0,51,0,0,0,33,51,26,0,120,51,179,0,3,41,43,46,1,44,196,14,25,45,41,16,78,51,44,0,83,41,51,0,25,41,41,1,25,44,44,1,54,51,41,45,76,205,1,0,25,51,0,68,106,27,51,4,0,39,27,0,0,28,39,0,25,51,0,68,53,51,28,51,132,205,1,0,119,0,72,0,0,29,39,0,127,51,0,0,25,52,29,8,114,51,52,0,127,52,0,0,25,51,29,8,102,51,51,1,107,52,1,51,127,51,0,0,25,52,29,8,102,52,52,2,107,51,2,52,127,52,0,0,25,51,29,8,102,51,51,3,107,52,3,51,127,51,0,0,88,30,51,0,3,52,43,47,25,53,29,8,25,53,53,4,134,51,0,0,224,130,4,0,52,30,53,0,94,53,43,46,109,43,32,53,25,53,43,32,3,51,43,46,106,51,51,4,109,53,4,51,25,51,43,32,3,53,43,46,106,53,53,8,109,51,8,53,25,53,43,32,3,51,43,46,106,51,51,12,109,53,12,51,94,53,43,47,109,43,48,53,25,53,43,48,3,51,43,47,106,51,51,4,109,53,4,51,25,51,43,48,3,53,43,47,106,53,53,8,109,51,8,53,25,53,43,48,3,51,43,47,106,51,51,12,109,53,12,51,3,53,43,48,25,52,43,32,25,54,43,48,134,51,0,0,48,193,2,0,53,52,54,0,3,41,43,46,3,44,43,48,25,45,41,16,78,51,44,0,83,41,51,0,25,41,41,1,25,44,44,1,54,51,41,45,120,206,1,0,0,31,39,0,106,32,31,4,0,39,32,0,119,0,181,255,1,51,204,0,3,41,0,51,3,44,43,46,25,45,41,16,78,51,44,0,83,41,51,0,25,41,41,1,25,44,44,1,54,51,41,45,176,206,1,0,25,51,0,52,25,51,51,8,134,33,0,0,64,56,6,0,51,0,0,0,33,51,33,0,121,51,74,0,94,54,0,49,109,43,64,54,25,54,43,64,3,51,0,49,106,51,51,4,109,54,4,51,25,51,43,64,3,54,0,49,106,54,54,8,109,51,8,54,25,54,43,64,3,51,0,49,106,51,51,12,109,54,12,51,94,54,43,46,109,43,80,54,25,54,43,80,3,51,43,46,106,51,51,4,109,54,4,51,25,51,43,80,3,54,43,46,106,54,54,8,109,51,8,54,25,54,43,80,3,51,43,46,106,51,51,12,109,54,12,51,1,54,224,9,3,54,43,54,25,52,43,64,25,53,43,80,134,51,0,0,48,193,2,0,54,52,53,0,3,41,0,49,1,51,224,9,3,44,43,51,25,45,41,16,78,51,44,0,83,41,51,0,25,41,41,1,25,44,44,1,54,51,41,45,128,207,1,0,1,51,204,0,3,41,0,51,1,44,196,14,25,45,41,16,78,51,44,0,83,41,51,0,25,41,41,1,25,44,44,1,54,51,41,45,168,207,1,0,25,51,0,68,134,34,0,0,64,56,6,0,51,0,0,0,33,51,34,0,120,51,13,0,25,51,0,68,106,35,51,4,0,39,35,0,1,51,0,0,53,51,35,51,244,207,1,0,119,0,6,0,0,36,39,0,134,51,0,0,224,93,6,0,36,0,0,0,119,0,239,255,3,41,43,50,1,44,132,14,25,45,41,64,78,51,44,0,83,41,51,0,25,41,41,1,25,44,44,1,54,51,41,45,20,208,1,0,25,41,43,96,3,44,43,50,25,45,41,64,82,51,44,0,85,41,51,0,25,41,41,4,25,44,44,4,54,51,41,45,56,208,1,0,1,51,160,0,106,53,0,108,97,43,51,53,1,53,160,0,3,53,43,53,25,51,0,108,106,51,51,4,109,53,4,51,1,51,160,0,3,51,43,51,25,53,0,108,106,53,53,8,109,51,8,53,1,51,96,9,3,51,43,51,25,52,43,96,1,54,160,0,3,54,43,54,134,53,0,0,244,93,2,0,51,52,54,0,3,41,43,50,1,53,96,9,3,44,43,53,25,45,41,64,78,53,44,0,83,41,53,0,25,41,41,1,25,44,44,1,54,53,41,45,180,208,1,0,106,37,0,48,1,53,0,0,46,53,37,53,64,212,1,0,127,53,0,0,61,54,0,0,0,0,0,63,89,53,54,0,1,54,60,9,127,53,0,0,78,53,53,0,95,43,54,53,1,53,60,9,3,53,43,53,127,54,0,0,102,54,54,1,107,53,1,54,1,54,60,9,3,54,43,54,127,53,0,0,102,53,53,2,107,54,2,53,1,53,60,9,3,53,43,53,127,54,0,0,102,54,54,3,107,53,3,54,127,54,0,0,61,53,0,0,0,0,0,63,89,54,53,0,1,53,60,9,3,53,43,53,127,54,0,0,78,54,54,0,107,53,4,54,1,54,60,9,3,54,43,54,25,54,54,4,127,53,0,0,102,53,53,1,107,54,1,53,1,53,60,9,3,53,43,53,25,53,53,4,127,54,0,0,102,54,54,2,107,53,2,54,1,54,60,9,3,54,43,54,25,54,54,4,127,53,0,0,102,53,53,3,107,54,3,53,127,53,0,0,61,54,0,0,0,0,0,63,89,53,54,0,1,54,60,9,3,54,43,54,127,53,0,0,78,53,53,0,107,54,8,53,1,53,60,9,3,53,43,53,25,53,53,8,127,54,0,0,102,54,54,1,107,53,1,54,1,54,60,9,3,54,43,54,25,54,54,8,127,53,0,0,102,53,53,2,107,54,2,53,1,53,60,9,3,53,43,53,25,53,53,8,127,54,0,0,102,54,54,3,107,53,3,54,1,54,48,9,3,41,43,54,1,54,60,9,3,44,43,54,25,45,41,12,78,54,44,0,83,41,54,0,25,41,41,1,25,44,44,1,54,54,41,45,36,210,1,0,106,38,0,48,1,54,172,0,1,53,48,9,94,53,43,53,97,43,54,53,1,53,172,0,3,53,43,53,1,54,48,9,3,54,43,54,106,54,54,4,109,53,4,54,1,54,172,0,3,54,43,54,1,53,48,9,3,53,43,53,106,53,53,8,109,54,8,53,1,53,184,0,1,54,172,0,94,54,38,54,97,43,53,54,1,54,184,0,3,54,43,54,1,53,172,0,3,53,38,53,106,53,53,4,109,54,4,53,1,53,184,0,3,53,43,53,1,54,172,0,3,54,38,54,106,54,54,8,109,53,8,54,1,53,72,9,3,53,43,53,1,52,172,0,3,52,43,52,1,51,184,0,3,51,43,51,134,54,0,0,244,23,4,0,53,52,51,0,106,1,0,48,1,54,196,0,1,51,72,9,94,51,43,51,97,43,54,51,1,51,196,0,3,51,43,51,1,54,72,9,3,54,43,54,106,54,54,4,109,51,4,54,1,54,196,0,3,54,43,54,1,51,72,9,3,51,43,51,106,51,51,8,109,54,8,51,1,51,208,0,1,54,140,0,94,54,1,54,97,43,51,54,1,54,208,0,3,54,43,54,1,51,140,0,3,51,1,51,106,51,51,4,109,54,4,51,1,51,208,0,3,51,43,51,1,54,140,0,3,54,1,54,106,54,54,8,109,51,8,54,1,51,84,9,3,51,43,51,1,52,196,0,3,52,43,52,1,53,208,0,3,53,43,53,134,54,0,0,36,30,4,0,51,52,53,0,1,54,224,0,3,41,43,54,3,44,43,50,25,45,41,64,82,54,44,0,85,41,54,0,25,41,41,4,25,44,44,4,54,54,41,45,156,211,1,0,1,54,32,1,1,53,84,9,94,53,43,53,97,43,54,53,1,53,32,1,3,53,43,53,1,54,84,9,3,54,43,54,106,54,54,4,109,53,4,54,1,54,32,1,3,54,43,54,1,53,84,9,3,53,43,53,106,53,53,8,109,54,8,53,1,54,240,8,3,54,43,54,1,52,224,0,3,52,43,52,1,51,32,1,3,51,43,51,134,53,0,0,244,93,2,0,54,52,51,0,3,41,43,50,1,53,240,8,3,44,43,53,25,45,41,64,78,53,44,0,83,41,53,0,25,41,41,1,25,44,44,1,54,53,41,45,40,212,1,0,1,53,48,1,94,51,0,49,97,43,53,51,1,51,48,1,3,51,43,51,3,53,0,49,106,53,53,4,109,51,4,53,1,53,48,1,3,53,43,53,3,51,0,49,106,51,51,8,109,53,8,51,1,51,48,1,3,51,43,51,3,53,0,49,106,53,53,12,109,51,12,53,1,51,176,8,3,51,43,51,1,52,48,1,3,52,43,52,134,53,0,0,16,51,3,0,51,52,0,0,1,53,64,1,3,41,43,53,3,44,43,50,25,45,41,64,82,53,44,0,85,41,53,0,25,41,41,4,25,44,44,4,54,53,41,45,180,212,1,0,1,53,128,1,3,41,43,53,1,53,176,8,3,44,43,53,25,45,41,64,82,53,44,0,85,41,53,0,25,41,41,4,25,44,44,4,54,53,41,45,224,212,1,0,1,52,112,8,3,52,43,52,1,51,64,1,3,51,43,51,1,54,128,1,3,54,43,54,134,53,0,0,248,58,1,0,52,51,54,0,3,41,43,50,1,53,112,8,3,44,43,53,25,45,41,64,78,53,44,0,83,41,53,0,25,41,41,1,25,44,44,1,54,53,41,45,44,213,1,0,1,53,192,1,1,54,204,0,94,54,0,54,97,43,53,54,1,54,192,1,3,54,43,54,1,53,204,0,3,53,0,53,106,53,53,4,109,54,4,53,1,53,192,1,3,53,43,53,1,54,204,0,3,54,0,54,106,54,54,8,109,53,8,54,1,54,192,1,3,54,43,54,1,53,204,0,3,53,0,53,106,53,53,12,109,54,12,53,1,54,48,8,3,54,43,54,1,51,192,1,3,51,43,51,134,53,0,0,16,51,3,0,54,51,0,0,1,53,208,1,3,41,43,53,3,44,43,50,25,45,41,64,82,53,44,0,85,41,53,0,25,41,41,4,25,44,44,4,54,53,41,45,200,213,1,0,1,53,16,2,3,41,43,53,1,53,48,8,3,44,43,53,25,45,41,64,82,53,44,0,85,41,53,0,25,41,41,4,25,44,44,4,54,53,41,45,244,213,1,0,1,51,240,7,3,51,43,51,1,54,208,1,3,54,43,54,1,52,16,2,3,52,43,52,134,53,0,0,248,58,1,0,51,54,52,0,3,41,43,50,1,53,240,7,3,44,43,53,25,45,41,64,78,53,44,0,83,41,53,0,25,41,41,1,25,44,44,1,54,53,41,45,64,214,1,0,106,2,0,48,1,53,0,0,46,53,2,53,204,217,1,0,106,3,0,48,127,53,0,0,61,52,0,0,0,0,0,63,89,53,52,0,1,52,204,7,127,53,0,0,78,53,53,0,95,43,52,53,1,53,204,7,3,53,43,53,127,52,0,0,102,52,52,1,107,53,1,52,1,52,204,7,3,52,43,52,127,53,0,0,102,53,53,2,107,52,2,53,1,53,204,7,3,53,43,53,127,52,0,0,102,52,52,3,107,53,3,52,127,52,0,0,61,53,0,0,0,0,0,63,89,52,53,0,1,53,204,7,3,53,43,53,127,52,0,0,78,52,52,0,107,53,4,52,1,52,204,7,3,52,43,52,25,52,52,4,127,53,0,0,102,53,53,1,107,52,1,53,1,53,204,7,3,53,43,53,25,53,53,4,127,52,0,0,102,52,52,2,107,53,2,52,1,52,204,7,3,52,43,52,25,52,52,4,127,53,0,0,102,53,53,3,107,52,3,53,127,53,0,0,61,52,0,0,0,0,0,63,89,53,52,0,1,52,204,7,3,52,43,52,127,53,0,0,78,53,53,0,107,52,8,53,1,53,204,7,3,53,43,53,25,53,53,8,127,52,0,0,102,52,52,1,107,53,1,52,1,52,204,7,3,52,43,52,25,52,52,8,127,53,0,0,102,53,53,2,107,52,2,53,1,53,204,7,3,53,43,53,25,53,53,8,127,52,0,0,102,52,52,3,107,53,3,52,1,52,192,7,3,41,43,52,1,52,204,7,3,44,43,52,25,45,41,12,78,52,44,0,83,41,52,0,25,41,41,1,25,44,44,1,54,52,41,45,180,215,1,0,1,52,80,2,1,53,172,0,94,53,3,53,97,43,52,53,1,53,80,2,3,53,43,53,1,52,172,0,3,52,3,52,106,52,52,4,109,53,4,52,1,52,80,2,3,52,43,52,1,53,172,0,3,53,3,53,106,53,53,8,109,52,8,53,1,53,92,2,1,52,192,7,94,52,43,52,97,43,53,52,1,52,92,2,3,52,43,52,1,53,192,7,3,53,43,53,106,53,53,4,109,52,4,53,1,53,92,2,3,53,43,53,1,52,192,7,3,52,43,52,106,52,52,8,109,53,8,52,1,53,216,7,3,53,43,53,1,54,80,2,3,54,43,54,1,51,92,2,3,51,43,51,134,52,0,0,244,23,4,0,53,54,51,0,106,4,0,48,1,52,104,2,1,51,216,7,94,51,43,51,97,43,52,51,1,51,104,2,3,51,43,51,1,52,216,7,3,52,43,52,106,52,52,4,109,51,4,52,1,52,104,2,3,52,43,52,1,51,216,7,3,51,43,51,106,51,51,8,109,52,8,51,1,51,116,2,1,52,140,0,94,52,4,52,97,43,51,52,1,52,116,2,3,52,43,52,1,51,140,0,3,51,4,51,106,51,51,4,109,52,4,51,1,51,116,2,3,51,43,51,1,52,140,0,3,52,4,52,106,52,52,8,109,51,8,52,1,51,228,7,3,51,43,51,1,54,104,2,3,54,43,54,1,53,116,2,3,53,43,53,134,52,0,0,36,30,4,0,51,54,53,0,1,52,128,2,3,41,43,52,3,44,43,50,25,45,41,64,82,52,44,0,85,41,52,0,25,41,41,4,25,44,44,4,54,52,41,45,40,217,1,0,1,52,192,2,1,53,228,7,94,53,43,53,97,43,52,53,1,53,192,2,3,53,43,53,1,52,228,7,3,52,43,52,106,52,52,4,109,53,4,52,1,52,192,2,3,52,43,52,1,53,228,7,3,53,43,53,106,53,53,8,109,52,8,53,1,52,128,7,3,52,43,52,1,54,128,2,3,54,43,54,1,51,192,2,3,51,43,51,134,53,0,0,244,93,2,0,52,54,51,0,3,41,43,50,1,53,128,7,3,44,43,53,25,45,41,64,78,53,44,0,83,41,53,0,25,41,41,1,25,44,44,1,54,53,41,45,180,217,1,0,127,53,0,0,61,51,0,0,0,0,0,63,89,53,51,0,1,51,92,7,127,53,0,0,78,53,53,0,95,43,51,53,1,53,92,7,3,53,43,53,127,51,0,0,102,51,51,1,107,53,1,51,1,51,92,7,3,51,43,51,127,53,0,0,102,53,53,2,107,51,2,53,1,53,92,7,3,53,43,53,127,51,0,0,102,51,51,3,107,53,3,51,127,51,0,0,61,53,0,0,0,0,0,63,89,51,53,0,1,53,92,7,3,53,43,53,127,51,0,0,78,51,51,0,107,53,4,51,1,51,92,7,3,51,43,51,25,51,51,4,127,53,0,0,102,53,53,1,107,51,1,53,1,53,92,7,3,53,43,53,25,53,53,4,127,51,0,0,102,51,51,2,107,53,2,51,1,51,92,7,3,51,43,51,25,51,51,4,127,53,0,0,102,53,53,3,107,51,3,53,127,53,0,0,61,51,0,0,0,0,0,63,89,53,51,0,1,51,92,7,3,51,43,51,127,53,0,0,78,53,53,0,107,51,8,53,1,53,92,7,3,53,43,53,25,53,53,8,127,51,0,0,102,51,51,1,107,53,1,51,1,51,92,7,3,51,43,51,25,51,51,8,127,53,0,0,102,53,53,2,107,51,2,53,1,53,92,7,3,53,43,53,25,53,53,8,127,51,0,0,102,51,51,3,107,53,3,51,1,51,80,7,3,41,43,51,1,51,92,7,3,44,43,51,25,45,41,12,78,51,44,0,83,41,51,0,25,41,41,1,25,44,44,1,54,51,41,45,20,219,1,0,1,51,204,2,1,53,80,7,94,53,43,53,97,43,51,53,1,53,204,2,3,53,43,53,1,51,80,7,3,51,43,51,106,51,51,4,109,53,4,51,1,51,204,2,3,51,43,51,1,53,80,7,3,53,43,53,106,53,53,8,109,51,8,53,1,53,216,2,1,51,172,0,94,51,0,51,97,43,53,51,1,51,216,2,3,51,43,51,1,53,172,0,3,53,0,53,106,53,53,4,109,51,4,53,1,53,216,2,3,53,43,53,1,51,172,0,3,51,0,51,106,51,51,8,109,53,8,51,1,53,104,7,3,53,43,53,1,54,204,2,3,54,43,54,1,52,216,2,3,52,43,52,134,51,0,0,244,23,4,0,53,54,52,0,1,51,228,2,1,52,104,7,94,52,43,52,97,43,51,52,1,52,228,2,3,52,43,52,1,51,104,7,3,51,43,51,106,51,51,4,109,52,4,51,1,51,228,2,3,51,43,51,1,52,104,7,3,52,43,52,106,52,52,8,109,51,8,52,1,52,240,2,1,51,140,0,94,51,0,51,97,43,52,51,1,51,240,2,3,51,43,51,1,52,140,0,3,52,0,52,106,52,52,4,109,51,4,52,1,52,240,2,3,52,43,52,1,51,140,0,3,51,0,51,106,51,51,8,109,52,8,51,1,52,116,7,3,52,43,52,1,54,228,2,3,54,43,54,1,53,240,2,3,53,43,53,134,51,0,0,36,30,4,0,52,54,53,0,1,51,0,3,3,41,43,51,3,44,43,50,25,45,41,64,82,51,44,0,85,41,51,0,25,41,41,4,25,44,44,4,54,51,41,45,132,220,1,0,1,51,64,3,1,53,116,7,94,53,43,53,97,43,51,53,1,53,64,3,3,53,43,53,1,51,116,7,3,51,43,51,106,51,51,4,109,53,4,51,1,51,64,3,3,51,43,51,1,53,116,7,3,53,43,53,106,53,53,8,109,51,8,53,1,51,16,7,3,51,43,51,1,54,0,3,3,54,43,54,1,52,64,3,3,52,43,52,134,53,0,0,244,93,2,0,51,54,52,0,3,41,43,50,1,53,16,7,3,44,43,53,25,45,41,64,78,53,44,0,83,41,53,0,25,41,41,1,25,44,44,1,54,53,41,45,16,221,1,0,1,53,80,3,3,41,43,53,3,44,43,50,25,45,41,64,82,53,44,0,85,41,53,0,25,41,41,4,25,44,44,4,54,53,41,45,56,221,1,0,1,53,144,3,106,52,0,124,97,43,53,52,1,52,144,3,3,52,43,52,25,53,0,124,106,53,53,4,109,52,4,53,1,53,144,3,3,53,43,53,25,52,0,124,106,52,52,8,109,53,8,52,1,53,208,6,3,53,43,53,1,54,80,3,3,54,43,54,1,51,144,3,3,51,43,51,134,52,0,0,224,150,2,0,53,54,51,0,3,41,43,50,1,52,208,6,3,44,43,52,25,45,41,64,78,52,44,0,83,41,52,0,25,41,41,1,25,44,44,1,54,52,41,45,184,221,1,0,106,5,0,48,1,52,0,0,46,52,5,52,132,222,1,0,106,6,0,48,1,52,160,3,3,41,43,52,1,52,220,0,3,44,6,52,25,45,41,64,82,52,44,0,85,41,52,0,25,41,41,4,25,44,44,4,54,52,41,45,248,221,1,0,1,52,224,3,3,41,43,52,3,44,43,50,25,45,41,64,82,52,44,0,85,41,52,0,25,41,41,4,25,44,44,4,54,52,41,45,32,222,1,0,1,51,144,6,3,51,43,51,1,54,160,3,3,54,43,54,1,53,224,3,3,53,43,53,134,52,0,0,248,58,1,0,51,54,53,0,3,41,43,50,1,52,144,6,3,44,43,52,25,45,41,64,78,52,44,0,83,41,52,0,25,41,41,1,25,44,44,1,54,52,41,45,108,222,1,0,1,52,220,0,3,41,0,52,3,44,43,50,25,45,41,64,78,52,44,0,83,41,52,0,25,41,41,1,25,44,44,1,54,52,41,45,148,222,1,0,106,7,0,48,1,52,0,0,46,52,7,52,32,226,1,0,127,52,0,0,61,53,0,0,0,0,0,63,89,52,53,0,1,53,108,6,127,52,0,0,78,52,52,0,95,43,53,52,1,52,108,6,3,52,43,52,127,53,0,0,102,53,53,1,107,52,1,53,1,53,108,6,3,53,43,53,127,52,0,0,102,52,52,2,107,53,2,52,1,52,108,6,3,52,43,52,127,53,0,0,102,53,53,3,107,52,3,53,127,53,0,0,61,52,0,0,0,0,0,63,89,53,52,0,1,52,108,6,3,52,43,52,127,53,0,0,78,53,53,0,107,52,4,53,1,53,108,6,3,53,43,53,25,53,53,4,127,52,0,0,102,52,52,1,107,53,1,52,1,52,108,6,3,52,43,52,25,52,52,4,127,53,0,0,102,53,53,2,107,52,2,53,1,53,108,6,3,53,43,53,25,53,53,4,127,52,0,0,102,52,52,3,107,53,3,52,127,52,0,0,61,53,0,0,0,0,0,63,89,52,53,0,1,53,108,6,3,53,43,53,127,52,0,0,78,52,52,0,107,53,8,52,1,52,108,6,3,52,43,52,25,52,52,8,127,53,0,0,102,53,53,1,107,52,1,53,1,53,108,6,3,53,43,53,25,53,53,8,127,52,0,0,102,52,52,2,107,53,2,52,1,52,108,6,3,52,43,52,25,52,52,8,127,53,0,0,102,53,53,3,107,52,3,53,1,53,96,6,3,41,43,53,1,53,108,6,3,44,43,53], eb + 112640);
  HEAPU8.set([25,45,41,12,78,53,44,0,83,41,53,0,25,41,41,1,25,44,44,1,54,53,41,45,4,224,1,0,106,8,0,48,1,53,32,4,1,52,96,6,94,52,43,52,97,43,53,52,1,52,32,4,3,52,43,52,1,53,96,6,3,53,43,53,106,53,53,4,109,52,4,53,1,53,32,4,3,53,43,53,1,52,96,6,3,52,43,52,106,52,52,8,109,53,8,52,1,52,44,4,1,53,172,0,94,53,8,53,97,43,52,53,1,53,44,4,3,53,43,53,1,52,172,0,3,52,8,52,106,52,52,4,109,53,4,52,1,52,44,4,3,52,43,52,1,53,172,0,3,53,8,53,106,53,53,8,109,52,8,53,1,52,120,6,3,52,43,52,1,54,32,4,3,54,43,54,1,51,44,4,3,51,43,51,134,53,0,0,244,23,4,0,52,54,51,0,106,9,0,48,1,53,56,4,1,51,120,6,94,51,43,51,97,43,53,51,1,51,56,4,3,51,43,51,1,53,120,6,3,53,43,53,106,53,53,4,109,51,4,53,1,53,56,4,3,53,43,53,1,51,120,6,3,51,43,51,106,51,51,8,109,53,8,51,1,51,68,4,1,53,140,0,94,53,9,53,97,43,51,53,1,53,68,4,3,53,43,53,1,51,140,0,3,51,9,51,106,51,51,4,109,53,4,51,1,51,68,4,3,51,43,51,1,53,140,0,3,53,9,53,106,53,53,8,109,51,8,53,1,51,132,6,3,51,43,51,1,54,56,4,3,54,43,54,1,52,68,4,3,52,43,52,134,53,0,0,36,30,4,0,51,54,52,0,1,53,80,4,3,41,43,53,3,44,43,50,25,45,41,64,82,53,44,0,85,41,53,0,25,41,41,4,25,44,44,4,54,53,41,45,124,225,1,0,1,53,144,4,1,52,132,6,94,52,43,52,97,43,53,52,1,52,144,4,3,52,43,52,1,53,132,6,3,53,43,53,106,53,53,4,109,52,4,53,1,53,144,4,3,53,43,53,1,52,132,6,3,52,43,52,106,52,52,8,109,53,8,52,1,53,32,6,3,53,43,53,1,54,80,4,3,54,43,54,1,51,144,4,3,51,43,51,134,52,0,0,244,93,2,0,53,54,51,0,3,41,43,50,1,52,32,6,3,44,43,52,25,45,41,64,78,52,44,0,83,41,52,0,25,41,41,1,25,44,44,1,54,52,41,45,8,226,1,0,127,52,0,0,59,51,1,0,89,52,51,0,1,51,252,5,127,52,0,0,78,52,52,0,95,43,51,52,1,52,252,5,3,52,43,52,127,51,0,0,102,51,51,1,107,52,1,51,1,51,252,5,3,51,43,51,127,52,0,0,102,52,52,2,107,51,2,52,1,52,252,5,3,52,43,52,127,51,0,0,102,51,51,3,107,52,3,51,127,51,0,0,59,52,1,0,89,51,52,0,1,52,252,5,3,52,43,52,127,51,0,0,78,51,51,0,107,52,4,51,1,51,252,5,3,51,43,51,25,51,51,4,127,52,0,0,102,52,52,1,107,51,1,52,1,52,252,5,3,52,43,52,25,52,52,4,127,51,0,0,102,51,51,2,107,52,2,51,1,51,252,5,3,51,43,51,25,51,51,4,127,52,0,0,102,52,52,3,107,51,3,52,127,52,0,0,59,51,1,0,89,52,51,0,1,51,252,5,3,51,43,51,127,52,0,0,78,52,52,0,107,51,8,52,1,52,252,5,3,52,43,52,25,52,52,8,127,51,0,0,102,51,51,1,107,52,1,51,1,51,252,5,3,51,43,51,25,51,51,8,127,52,0,0,102,52,52,2,107,51,2,52,1,52,252,5,3,52,43,52,25,52,52,8,127,51,0,0,102,51,51,3,107,52,3,51,1,51,240,5,3,41,43,51,1,51,252,5,3,44,43,51,25,45,41,12,78,51,44,0,83,41,51,0,25,41,41,1,25,44,44,1,54,51,41,45,92,227,1,0,1,51,156,4,1,52,172,0,94,52,0,52,97,43,51,52,1,52,156,4,3,52,43,52,1,51,172,0,3,51,0,51,106,51,51,4,109,52,4,51,1,51,156,4,3,51,43,51,1,52,172,0,3,52,0,52,106,52,52,8,109,51,8,52,1,52,168,4,1,51,240,5,94,51,43,51,97,43,52,51,1,51,168,4,3,51,43,51,1,52,240,5,3,52,43,52,106,52,52,4,109,51,4,52,1,52,168,4,3,52,43,52,1,51,240,5,3,51,43,51,106,51,51,8,109,52,8,51,1,52,8,6,3,52,43,52,1,54,156,4,3,54,43,54,1,53,168,4,3,53,43,53,134,51,0,0,244,23,4,0,52,54,53,0,1,51,180,4,1,53,8,6,94,53,43,53,97,43,51,53,1,53,180,4,3,53,43,53,1,51,8,6,3,51,43,51,106,51,51,4,109,53,4,51,1,51,180,4,3,51,43,51,1,53,8,6,3,53,43,53,106,53,53,8,109,51,8,53,1,53,192,4,1,51,140,0,94,51,0,51,97,43,53,51,1,51,192,4,3,51,43,51,1,53,140,0,3,53,0,53,106,53,53,4,109,51,4,53,1,53,192,4,3,53,43,53,1,51,140,0,3,51,0,51,106,51,51,8,109,53,8,51,1,53,20,6,3,53,43,53,1,54,180,4,3,54,43,54,1,52,192,4,3,52,43,52,134,51,0,0,36,30,4,0,53,54,52,0,1,51,208,4,3,41,43,51,1,51,220,0,3,44,0,51,25,45,41,64,82,51,44,0,85,41,51,0,25,41,41,4,25,44,44,4,54,51,41,45,208,228,1,0,1,51,16,5,1,52,20,6,94,52,43,52,97,43,51,52,1,52,16,5,3,52,43,52,1,51,20,6,3,51,43,51,106,51,51,4,109,52,4,51,1,51,16,5,3,51,43,51,1,52,20,6,3,52,43,52,106,52,52,8,109,51,8,52,1,51,176,5,3,51,43,51,1,54,208,4,3,54,43,54,1,53,16,5,3,53,43,53,134,52,0,0,244,93,2,0,51,54,53,0,1,52,220,0,3,41,0,52,1,52,176,5,3,44,43,52,25,45,41,64,78,52,44,0,83,41,52,0,25,41,41,1,25,44,44,1,54,52,41,45,96,229,1,0,1,52,56,1,94,10,0,52,82,11,10,0,33,52,11,0,121,52,56,0,1,52,32,5,3,41,43,52,3,44,43,50,25,45,41,64,82,52,44,0,85,41,52,0,25,41,41,4,25,44,44,4,54,52,41,45,156,229,1,0,1,52,96,5,1,53,140,0,94,53,0,53,97,43,52,53,1,53,96,5,3,53,43,53,1,52,140,0,3,52,0,52,106,52,52,4,109,53,4,52,1,52,96,5,3,52,43,52,1,53,140,0,3,53,0,53,106,53,53,8,109,52,8,53,1,52,112,5,3,52,43,52,1,54,32,5,3,54,43,54,1,51,96,5,3,51,43,51,134,53,0,0,224,150,2,0,52,54,51,0,3,41,43,50,1,53,112,5,3,44,43,53,25,45,41,64,78,53,44,0,83,41,53,0,25,41,41,1,25,44,44,1,54,53,41,45,40,230,1,0,1,53,56,1,94,12,0,53,106,13,12,12,82,14,13,0,1,51,0,0,3,54,43,50,1,52,64,0,134,53,0,0,20,213,4,0,14,51,54,52,25,53,0,32,106,15,53,4,0,40,15,0,0,16,40,0,25,53,0,32,53,53,16,53,136,230,1,0,119,0,13,0,0,17,40,0,26,53,17,24,1,52,1,0,107,53,100,52,26,53,17,24,134,52,0,0,180,204,1,0,53,0,0,0,0,18,40,0,106,19,18,4,0,40,19,0,119,0,240,255,25,52,0,40,106,20,52,4,0,40,20,0,0,21,40,0,25,52,0,40,53,52,21,52,216,230,1,0,119,0,13,0,0,22,40,0,26,52,22,24,1,53,1,0,107,52,100,53,26,52,22,24,134,53,0,0,180,204,1,0,52,0,0,0,0,23,40,0,106,24,23,4,0,40,24,0,119,0,240,255,1,52,0,0,107,0,100,52,137,43,0,0,139,0,0,0,140,2,68,0,0,0,0,0,2,62,0,0,152,0,0,0,2,63,0,0,38,30,0,0,1,60,0,0,136,64,0,0,0,61,64,0,136,64,0,0,1,65,32,2,3,64,64,65,137,64,0,0,130,64,0,0,136,65,0,0,49,64,64,65,96,231,1,0,135,64,0,0,1,58,255,255,25,64,0,32,134,33,0,0,168,52,6,0,64,0,0,0,33,64,33,0,120,64,8,0,25,64,0,32,106,38,64,4,26,64,38,4,78,39,64,0,1,64,255,0,19,64,39,64,0,58,64,0,1,64,8,1,94,40,0,64,102,41,40,3,41,64,41,24,42,64,64,24,33,64,64,0,120,64,47,0,0,42,58,0,1,65,1,0,1,67,2,0,138,42,65,67,208,231,1,0,32,232,1,0,119,0,40,0,112,46,1,4,25,67,40,20,112,47,67,4,64,67,46,47,135,48,2,0,67,0,0,0,59,67,10,0,74,67,48,67,120,67,2,0,119,0,30,0,1,64,16,0,1,66,255,255,1,65,123,0,134,67,0,0,116,153,4,0,0,63,64,66,65,0,0,0,1,65,1,0,107,40,3,65,119,0,20,0,88,43,1,0,112,44,40,20,64,64,43,44,135,45,2,0,64,0,0,0,59,64,10,0,74,64,45,64,120,64,2,0,119,0,11,0,1,65,16,0,1,66,255,255,1,67,123,0,134,64,0,0,116,153,4,0,0,63,65,66,67,0,0,0,1,67,1,0,107,40,3,67,119,0,1,0,102,49,40,3,41,65,49,24,42,65,65,24,33,65,65,0,120,65,3,0,137,61,0,0,139,0,0,0,59,59,0,0,0,50,58,0,1,65,1,0,1,66,2,0,138,50,65,66,168,232,1,0,136,239,1,0,119,0,147,3,112,16,1,4,25,65,40,20,112,17,65,4,64,65,16,17,135,18,2,0,65,0,0,0,61,65,0,0,0,0,0,63,71,65,18,65,121,65,3,0,137,61,0,0,139,0,0,0,112,19,1,4,25,65,40,20,112,20,65,4,25,65,40,4,64,67,19,20,59,66,60,0,65,67,67,66,113,65,4,67,112,21,1,4,25,67,40,20,112,22,67,4,25,67,40,12,64,65,21,22,68,65,65,0,59,66,100,0,65,65,65,66,113,67,4,65,59,67,0,0,113,40,4,67,59,65,0,0,113,40,12,65,1,65,160,0,3,65,0,65,112,23,65,4,25,65,0,56,112,24,65,4,64,59,23,24,3,65,0,62,112,25,65,4,59,65,0,0,73,65,25,65,121,65,45,0,1,65,152,1,106,67,40,4,97,61,65,67,1,67,152,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,25,67,61,120,1,66,152,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,106,64,61,120,109,40,4,64,25,64,40,4,25,65,61,120,106,65,65,4,109,64,4,65,1,65,160,1,106,64,40,12,97,61,65,64,1,64,160,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,25,64,61,112,1,66,160,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,106,67,61,112,109,40,12,67,25,67,40,12,25,65,61,112,106,65,65,4,109,67,4,65,3,65,0,62,112,26,65,4,59,65,50,0,73,65,26,65,121,65,45,0,1,65,168,1,106,67,40,4,97,61,65,67,1,67,168,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,25,67,61,104,1,66,168,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,106,64,61,104,109,40,4,64,25,64,40,4,25,65,61,104,106,65,65,4,109,64,4,65,1,65,176,1,106,64,40,12,97,61,65,64,1,64,176,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,25,64,61,96,1,66,176,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,106,67,61,96,109,40,12,67,25,67,40,12,25,65,61,96,106,65,65,4,109,67,4,65,3,65,0,62,112,27,65,4,59,65,100,0,73,65,27,65,121,65,45,0,1,65,184,1,106,67,40,4,97,61,65,67,1,67,184,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,25,67,61,88,1,66,184,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,106,64,61,88,109,40,4,64,25,64,40,4,25,65,61,88,106,65,65,4,109,64,4,65,1,65,192,1,106,64,40,12,97,61,65,64,1,64,192,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,25,64,61,80,1,66,192,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,106,67,61,80,109,40,12,67,25,67,40,12,25,65,61,80,106,65,65,4,109,67,4,65,3,65,0,62,112,28,65,4,59,65,150,0,73,65,28,65,121,65,45,0,1,65,200,1,106,67,40,4,97,61,65,67,1,67,200,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,25,67,61,72,1,66,200,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,106,64,61,72,109,40,4,64,25,64,40,4,25,65,61,72,106,65,65,4,109,64,4,65,1,65,208,1,106,64,40,12,97,61,65,64,1,64,208,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,25,64,61,64,1,66,208,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,106,67,61,64,109,40,12,67,25,67,40,12,25,65,61,64,106,65,65,4,109,67,4,65,3,65,0,62,112,29,65,4,58,30,59,0,68,65,30,0,71,65,29,65,121,65,45,0,1,65,216,1,106,67,40,4,97,61,65,67,1,67,216,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,25,67,61,56,1,66,216,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,106,64,61,56,109,40,4,64,25,64,40,4,25,65,61,56,106,65,65,4,109,64,4,65,1,65,224,1,106,64,40,12,97,61,65,64,1,64,224,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,25,64,61,48,1,66,224,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,106,67,61,48,109,40,12,67,25,67,40,12,25,65,61,48,106,65,65,4,109,67,4,65,3,65,0,62,112,31,65,4,58,32,59,0,68,65,32,0,59,67,100,0,64,65,65,67,71,65,31,65,121,65,45,0,1,65,232,1,106,67,40,4,97,61,65,67,1,67,232,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,25,67,61,40,1,66,232,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,106,64,61,40,109,40,4,64,25,64,40,4,25,65,61,40,106,65,65,4,109,64,4,65,1,65,240,1,106,64,40,12,97,61,65,64,1,64,240,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,25,64,61,32,1,66,240,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,106,67,61,32,109,40,12,67,25,67,40,12,25,65,61,32,106,65,65,4,109,67,4,65,3,65,0,62,112,34,65,4,58,35,59,0,68,65,35,0,59,67,200,0,64,65,65,67,71,65,34,65,121,65,45,0,1,65,248,1,106,67,40,4,97,61,65,67,1,67,248,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,25,67,61,24,1,66,248,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,106,64,61,24,109,40,4,64,25,64,40,4,25,65,61,24,106,65,65,4,109,64,4,65,1,65,0,2,106,64,40,12,97,61,65,64,1,64,0,2,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,25,64,61,16,1,66,0,2,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,106,67,61,16,109,40,12,67,25,67,40,12,25,65,61,16,106,65,65,4,109,67,4,65,3,65,0,62,112,36,65,4,58,37,59,0,68,65,37,0,59,67,44,1,64,65,65,67,71,65,36,65,121,65,6,2,1,65,8,2,106,67,40,4,97,61,65,67,1,67,8,2,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,25,67,61,8,1,66,8,2,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,106,64,61,8,109,40,4,64,25,64,40,4,25,65,61,8,106,65,65,4,109,64,4,65,1,65,16,2,106,64,40,12,97,61,65,64,1,64,16,2,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,1,64,16,2,3,64,61,64,61,66,0,0,115,48,27,56,134,65,0,0,24,234,5,0,61,64,66,0,82,66,61,0,109,40,12,66,25,66,40,12,106,65,61,4,109,66,4,65,119,0,219,1,88,51,1,0,112,52,40,20,64,65,51,52,135,53,2,0,65,0,0,0,61,65,0,0,0,0,0,63,71,65,53,65,121,65,3,0,137,61,0,0,139,0,0,0,88,54,1,0,112,55,40,20,64,67,54,55,59,66,60,0,65,67,67,66,113,40,4,67,88,56,1,0,112,57,40,20,64,65,56,57,68,65,65,0,59,66,100,0,65,65,65,66,113,40,12,65,25,65,40,4,59,67,0,0,113,65,4,67,25,67,40,12,59,65,0,0,113,67,4,65,1,65,160,0,100,2,0,65,112,3,0,56,64,59,2,3,100,4,0,62,59,65,0,0,73,65,4,65,121,65,51,0,1,65,24,1,106,67,40,4,97,61,65,67,1,67,24,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,1,67,248,0,3,67,61,67,1,66,24,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,1,64,248,0,94,64,61,64,109,40,4,64,25,64,40,4,1,65,248,0,3,65,61,65,106,65,65,4,109,64,4,65,1,65,32,1,106,64,40,12,97,61,65,64,1,64,32,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,1,64,240,0,3,64,61,64,1,66,32,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,1,67,240,0,94,67,61,67,109,40,12,67,25,67,40,12,1,65,240,0,3,65,61,65,106,65,65,4,109,67,4,65,100,5,0,62,59,65,50,0,73,65,5,65,121,65,51,0,1,65,40,1,106,67,40,4,97,61,65,67,1,67,40,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,1,67,232,0,3,67,61,67,1,66,40,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,1,64,232,0,94,64,61,64,109,40,4,64,25,64,40,4,1,65,232,0,3,65,61,65,106,65,65,4,109,64,4,65,1,65,48,1,106,64,40,12,97,61,65,64,1,64,48,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,1,64,224,0,3,64,61,64,1,66,48,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,1,67,224,0,94,67,61,67,109,40,12,67,25,67,40,12,1,65,224,0,3,65,61,65,106,65,65,4,109,67,4,65,100,6,0,62,59,65,100,0,73,65,6,65,121,65,51,0,1,65,56,1,106,67,40,4,97,61,65,67,1,67,56,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,1,67,216,0,3,67,61,67,1,66,56,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,1,64,216,0,94,64,61,64,109,40,4,64,25,64,40,4,1,65,216,0,3,65,61,65,106,65,65,4,109,64,4,65,1,65,64,1,106,64,40,12,97,61,65,64,1,64,64,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,1,64,208,0,3,64,61,64,1,66,64,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,1,67,208,0,94,67,61,67,109,40,12,67,25,67,40,12,1,65,208,0,3,65,61,65,106,65,65,4,109,67,4,65,100,7,0,62,59,65,150,0,73,65,7,65,121,65,51,0,1,65,72,1,106,67,40,4,97,61,65,67,1,67,72,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,1,67,200,0,3,67,61,67,1,66,72,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,1,64,200,0,94,64,61,64,109,40,4,64,25,64,40,4,1,65,200,0,3,65,61,65,106,65,65,4,109,64,4,65,1,65,80,1,106,64,40,12,97,61,65,64,1,64,80,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,1,64,192,0,3,64,61,64,1,66,80,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,1,67,192,0,94,67,61,67,109,40,12,67,25,67,40,12,1,65,192,0,3,65,61,65,106,65,65,4,109,67,4,65,100,8,0,62,58,9,59,0,68,65,9,0,71,65,8,65,121,65,51,0,1,65,88,1,106,67,40,4,97,61,65,67,1,67,88,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,1,67,184,0,3,67,61,67,1,66,88,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,1,64,184,0,94,64,61,64,109,40,4,64,25,64,40,4,1,65,184,0,3,65,61,65,106,65,65,4,109,64,4,65,1,65,96,1,106,64,40,12,97,61,65,64,1,64,96,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,1,64,176,0,3,64,61,64,1,66,96,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,1,67,176,0,94,67,61,67,109,40,12,67,25,67,40,12,1,65,176,0,3,65,61,65,106,65,65,4,109,67,4,65,100,10,0,62,58,11,59,0,68,65,11,0,59,67,100,0,64,65,65,67,71,65,10,65,121,65,51,0,1,65,104,1,106,67,40,4,97,61,65,67,1,67,104,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,1,67,168,0,3,67,61,67,1,66,104,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,1,64,168,0,94,64,61,64,109,40,4,64,25,64,40,4,1,65,168,0,3,65,61,65,106,65,65,4,109,64,4,65,1,65,112,1,106,64,40,12,97,61,65,64,1,64,112,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,1,64,160,0,3,64,61,64,1,66,112,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,1,67,160,0,94,67,61,67,109,40,12,67,25,67,40,12,1,65,160,0,3,65,61,65,106,65,65,4,109,67,4,65,100,12,0,62,58,13,59,0,68,65,13,0,59,67,200,0,64,65,65,67,71,65,12,65,121,65,48,0,1,65,120,1,106,67,40,4,97,61,65,67,1,67,120,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,3,67,61,62,1,66,120,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,94,64,61,62,109,40,4,64,25,64,40,4,3,65,61,62,106,65,65,4,109,64,4,65,1,65,128,1,106,64,40,12,97,61,65,64,1,64,128,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,1,64,144,0,3,64,61,64,1,66,128,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,1,67,144,0,94,67,61,67,109,40,12,67,25,67,40,12,1,65,144,0,3,65,61,65,106,65,65,4,109,67,4,65,100,14,0,62,58,15,59,0,68,65,15,0,59,67,44,1,64,65,65,67,71,65,14,65,121,65,52,0,1,65,136,1,106,67,40,4,97,61,65,67,1,67,136,1,3,67,61,67,25,65,40,4,106,65,65,4,109,67,4,65,1,67,136,0,3,67,61,67,1,66,136,1,3,66,61,66,61,64,0,0,122,139,183,62,134,65,0,0,24,234,5,0,67,66,64,0,1,64,136,0,94,64,61,64,109,40,4,64,25,64,40,4,1,65,136,0,3,65,61,65,106,65,65,4,109,64,4,65,1,65,144,1,106,64,40,12,97,61,65,64,1,64,144,1,3,64,61,64,25,65,40,12,106,65,65,4,109,64,4,65,1,64,128,0,3,64,61,64,1,66,144,1,3,66,61,66,61,67,0,0,115,48,27,56,134,65,0,0,24,234,5,0,64,66,67,0,1,67,128,0,94,67,61,67,109,40,12,67,25,67,40,12,1,65,128,0,3,65,61,65,106,65,65,4,109,67,4,65,119,0,1,0,1,65,1,0,83,40,65,0,1,66,0,0,107,40,1,66,1,65,0,0,107,40,2,65,82,66,1,0,109,40,20,66,25,66,40,20,106,65,1,4,109,66,4,65,137,61,0,0,139,0,0,0,140,1,147,0,0,0,0,0,2,141,0,0,255,0,0,0,2,142,0,0,144,0,0,0,1,139,0,0,136,143,0,0,0,140,143,0,136,143,0,0,25,143,143,112,137,143,0,0,130,143,0,0,136,144,0,0,49,143,143,144,104,247,1,0,135,143,0,0,25,143,0,4,134,72,0,0,220,50,6,0,143,0,0,0,33,143,72,0,121,143,3,0,137,140,0,0,139,0,0,0,25,143,0,4,106,124,143,4,26,138,124,32,1,144,0,0,109,140,48,144,25,144,140,48,1,143,0,0,109,144,4,143,25,143,138,56,112,10,143,4,58,137,10,0,59,135,0,0,1,133,0,0,1,134,0,0,25,144,140,24,109,140,24,144,25,144,140,24,25,143,140,24,109,144,4,143,25,143,138,16,134,24,0,0,220,50,6,0,143,0,0,0,33,143,24,0,120,143,75,1,25,143,138,16,106,45,143,4,0,136,45,0,1,143,0,0,53,143,45,143,8,248,1,0,119,0,68,1,0,51,136,0,134,143,0,0,128,62,6,0,51,0,0,0,0,55,136,0,25,144,140,24,134,143,0,0,160,42,6,0,55,144,0,0,0,60,136,0,26,131,60,8,106,73,131,40,102,82,73,8,19,143,82,141,1,144,1,0,1,145,4,0,138,143,144,145,96,248,1,0,92,248,1,0,92,248,1,0,124,248,1,0,119,0,9,0,112,91,138,56,106,103,131,40,113,103,12,91,106,114,131,40,112,115,114,12,113,131,56,115,119,0,2,0,119,0,249,255,106,116,131,40,102,117,116,9,19,143,117,141,1,144,1,0,1,145,4,0,138,143,144,145,172,248,1,0,168,248,1,0,124,250,1,0,76,252,1,0,119,0,24,1,25,144,138,56,112,118,144,4,25,144,131,56,113,144,4,118,106,119,131,40,127,144,0,0,25,145,119,36,114,144,145,0,127,145,0,0,25,144,119,36,102,144,144,1,107,145,1,144,127,144,0,0,25,145,119,36,102,145,145,2,107,144,2,145,127,145,0,0,25,144,119,36,102,144,144,3,107,145,3,144,127,144,0,0,88,120,144,0,106,121,131,40,127,144,0,0,25,145,121,36,25,145,145,8,114,144,145,0,127,145,0,0,25,144,121,36,25,144,144,8,102,144,144,1,107,145,1,144,127,144,0,0,25,145,121,36,25,145,145,8,102,145,145,2,107,144,2,145,127,145,0,0,25,144,121,36,25,144,144,8,102,144,144,3,107,145,3,144,127,144,0,0,88,122,144,0,25,144,131,56,112,123,144,4,25,144,131,56,63,145,120,122,64,145,123,145,113,144,4,145,106,144,131,56,109,140,72,144,25,144,140,72,25,145,131,56,106,145,145,4,109,144,4,145,25,144,140,72,134,145,0,0,68,187,5,0,131,144,0,0,106,125,131,44,38,145,125,2,33,145,145,0,121,145,4,0,134,145,0,0,24,152,4,0,131,0,0,0,25,145,131,56,112,126,145,4,58,127,137,0,64,137,127,126,106,128,131,40,127,145,0,0,25,144,128,20,114,145,144,0,127,144,0,0,25,145,128,20,102,145,145,1,107,144,1,145,127,145,0,0,25,144,128,20,102,144,144,2,107,145,2,144,127,144,0,0,25,145,128,20,102,145,145,3,107,144,3,145,127,145,0,0,88,129,145,0,58,130,137,0,64,137,130,129,106,1,131,40,127,145,0,0,25,144,1,20,25,144,144,8,114,145,144,0,127,144,0,0,25,145,1,20,25,145,145,8,102,145,145,1,107,144,1,145,127,145,0,0,25,144,1,20,25,144,144,8,102,144,144,2,107,145,2,144,127,144,0,0,25,145,1,20,25,145,145,8,102,145,145,3,107,144,3,145,127,145,0,0,88,2,145,0,58,3,137,0,64,137,3,2,119,0,164,0,106,4,131,40,112,5,4,16,25,145,131,56,113,145,4,5,106,6,131,40,127,145,0,0,25,144,6,36,114,145,144,0,127,144,0,0,25,145,6,36,102,145,145,1,107,144,1,145,127,145,0,0,25,144,6,36,102,144,144,2,107,145,2,144,127,144,0,0,25,145,6,36,102,145,145,3,107,144,3,145,127,145,0,0,88,7,145,0,106,8,131,40,127,145,0,0,25,144,8,36,25,144,144,8,114,145,144,0,127,144,0,0,25,145,8,36,25,145,145,8,102,145,145,1,107,144,1,145,127,145,0,0,25,144,8,36,25,144,144,8,102,144,144,2,107,145,2,144,127,144,0,0,25,145,8,36,25,145,145,8,102,145,145,3,107,144,3,145,127,145,0,0,88,9,145,0,25,145,131,56,112,11,145,4,25,145,131,56,63,144,7,9,64,144,11,144,113,145,4,144,106,145,131,56,109,140,80,145,25,145,140,80,25,144,131,56,106,144,144,4,109,145,4,144,25,145,140,80,134,144,0,0,68,187,5,0,131,145,0,0,106,12,131,44,38,144,12,2,33,144,144,0,121,144,4,0,134,144,0,0,24,152,4,0,131,0,0,0,25,144,131,56,112,13,144,4,58,14,137,0,64,137,14,13,106,15,131,40,127,144,0,0,25,145,15,20,114,144,145,0,127,145,0,0,25,144,15,20,102,144,144,1,107,145,1,144,127,144,0,0,25,145,15,20,102,145,145,2,107,144,2,145,127,145,0,0,25,144,15,20,102,144,144,3,107,145,3,144,127,144,0,0,88,16,144,0,58,17,137,0,64,137,17,16,106,18,131,40,127,144,0,0,25,145,18,20,25,145,145,8,114,144,145,0,127,145,0,0,25,144,18,20,25,144,144,8,102,144,144,1,107,145,1,144,127,144,0,0,25,145,18,20,25,145,145,8,102,145,145,2,107,144,2,145,127,145,0,0,25,144,18,20,25,144,144,8,102,144,144,3,107,145,3,144,127,144,0,0,88,19,144,0,58,20,137,0,64,137,20,19,119,0,48,0,0,21,134,0,25,134,21,1,106,22,131,40,127,144,0,0,25,145,22,20,114,144,145,0,127,145,0,0,25,144,22,20,102,144,144,1,107,145,1,144,127,144,0,0,25,145,22,20,102,145,145,2,107,144,2,145,127,145,0,0,25,144,22,20,102,144,144,3,107,145,3,144,127,144,0,0,88,23,144,0,58,25,137,0,64,137,25,23,106,26,131,40,127,144,0,0,25,145,26,20,25,145,145,8,114,144,145,0,127,145,0,0,25,144,26,20,25,144,144,8,102,144,144,1,107,145,1,144,127,144,0,0,25,145,26,20,25,145,145,8,102,145,145,2,107,144,2,145,127,145,0,0,25,144,26,20,25,144,144,8,102,144,144,3,107,145,3,144,127,144,0,0,88,27,144,0,58,28,137,0,64,137,28,27,119,0,1,0,0,29,133,0,25,133,29,1,119,0,177,254,25,143,140,24,134,30,0,0,220,50,6,0,143,0,0,0,33,143,30,0,120,143,18,0,25,143,140,24,106,31,143,4,0,136,31,0,1,143,0,0,53,143,31,143,72,253,1,0,119,0,11,0,0,32,136,0,134,143,0,0,128,62,6,0,32,0,0,0,0,33,136,0,25,144,138,16,134,143,0,0,160,42,6,0,33,144,0,0,119,0,234,255,0,34,134,0,58,35,137,0,33,143,34,0,59,144,0,0,73,144,35,144,19,143,143,144,121,143,5,0,58,36,137,0,0,37,134,0,76,143,37,0,66,135,36,143,25,144,140,8,109,140,8,144,25,144,140,8,25,143,140,8,109,144,4,143,25,143,138,16,134,38,0,0,220,50,6,0,143,0,0,0,33,143,38,0,120,143,111,1,25,143,138,16,106,39,143,4,0,136,39,0,1,143,0,0,53,143,39,143,228,253,1,0,119,0,104,1,0,40,136,0,134,143,0,0,128,62,6,0,40,0,0,0,0,41,136,0,25,144,140,8,134,143,0,0,160,42,6,0,41,144,0,0,0,42,136,0,26,132,42,8,106,43,132,40,102,44,43,9,19,143,44,141,1,145,1,0,1,144,4,0,138,143,145,144,60,254,1,0,56,254,1,0,64,254,1,0,128,0,2,0,119,0,222,255,119,0,1,0,112,46,138,56,112,47,132,56,100,48,132,142,59,145,2,0,66,145,46,145,61,146,0,0,0,0,0,63,64,146,48,146,65,146,47,146,63,145,145,146,113,140,48,145,25,145,132,56,112,49,145,4,3,145,132,142,112,50,145,4,25,145,140,48,112,52,145,4,25,145,140,48,65,144,49,50,63,144,52,144,113,145,4,144,106,53,132,40,127,144,0,0,25,145,53,20,25,145,145,12,114,144,145,0,127,145,0,0,25,144,53,20,25,144,144,12,102,144,144,1,107,145,1,144,127,144,0,0,25,145,53,20,25,145,145,12,102,145,145,2,107,144,2,145,127,145,0,0,25,144,53,20,25,144,144,12,102,144,144,3,107,145,3,144,127,144,0,0,88,54,144,0,112,56,140,48,63,145,56,54,113,140,48,145,106,57,132,40,127,145,0,0,25,144,57,20,25,144,144,4,114,145,144,0,127,144,0,0,25,145,57,20,25,145,145,4,102,145,145,1,107,144,1,145,127,145,0,0,25,144,57,20,25,144,144,4,102,144,144,2,107,145,2,144,127,144,0,0,25,145,57,20,25,145,145,4,102,145,145,3,107,144,3,145,127,145,0,0,88,58,145,0,112,59,140,48,64,144,59,58,113,140,48,144,106,61,132,40,127,144,0,0,25,145,61,20,114,144,145,0,127,145,0,0,25,144,61,20,102,144,144,1,107,145,1,144,127,144,0,0,25,145,61,20,102,145,145,2,107,144,2,145,127,145,0,0,25,144,61,20,102,144,144,3,107,145,3,144,127,144,0,0,88,62,144,0,25,144,140,48,112,63,144,4,25,144,140,48,63,145,63,62,113,144,4,145,106,144,140,48,109,140,88,144,25,144,140,88,25,145,140,48,106,145,145,4,109,144,4,145,25,144,140,88,134,145,0,0,196,181,5,0,132,144,0,0,25,145,132,56,112,64,145,4,3,145,132,142,112,65,145,4,25,145,140,48,112,66,145,4,25,145,140,48,59,144,1,0,64,144,144,65,65,144,64,144,63,144,66,144,113,145,4,144,106,67,132,40,127,144,0,0,25,145,67,20,25,145,145,8,114,144,145,0,127,145,0,0,25,144,67,20,25,144,144,8,102,144,144,1,107,145,1,144,127,144,0,0,25,145,67,20,25,145,145,8,102,145,145,2,107,144,2,145,127,145,0,0,25,144,67,20,25,144,144,8,102,144,144,3,107,145,3,144,127,144,0,0,88,68,144,0,25,144,140,48,112,69,144,4,25,144,140,48,63,145,69,68,113,144,4,145,119,0,77,255,119,0,1,0,58,70,135,0,25,143,132,56,113,143,4,70,82,71,132,0,32,143,71,1,121,143,24,0,106,74,132,40,102,75,74,8,19,143,75,141,32,143,143,2,121,143,22,0,106,76,132,40,112,77,76,16,59,143,0,0,70,143,77,143,121,143,11,0,106,78,132,40,112,79,78,12,106,80,132,40,112,81,80,16,25,143,132,56,112,83,143,4,66,145,79,81,65,145,145,83,113,132,56,145,119,0,7,0,59,143,0,0,113,132,56,143,119,0,4,0,58,84,135,0,106,85,132,40,113,85,16,84,106,145,132,56,109,140,96,145,25,145,140,96,25,143,132,56,106,143,143,4,109,145,4,143,25,145,140,96,134,143,0,0,68,187,5,0,132,145,0,0,106,86,132,44,38,143,86,2,33,143,143,0,121,143,4,0,134,143,0,0,24,152,4,0,132,0,0,0,112,87,138,56,112,88,132,56,100,89,132,142,59,145,2,0,66,145,87,145,61,144,0,0,0,0,0,63,64,144,89,144,65,144,88,144,63,145,145,144,113,140,48,145,58,90,135,0,3,145,132,142,112,92,145,4,25,145,140,48,112,93,145,4,25,145,140,48,65,143,90,92,63,143,93,143,113,145,4,143,106,94,132,40,127,143,0,0,25,145,94,20,25,145,145,12,114,143,145,0,127,145,0,0,25,143,94,20,25,143,143,12,102,143,143,1,107,145,1,143,127,143,0,0,25,145,94,20,25,145,145,12,102,145,145,2,107,143,2,145,127,145,0,0,25,143,94,20,25,143,143,12,102,143,143,3,107,145,3,143,127,143,0,0,88,95,143,0,112,96,140,48,63,145,96,95,113,140,48,145,106,97,132,40,127,145,0,0,25,143,97,20,25,143,143,4,114,145,143,0,127,143,0,0,25,145,97,20,25,145,145,4,102,145,145,1,107,143,1,145,127,145,0,0,25,143,97,20,25,143,143,4,102,143,143,2,107,145,2,143,127,143,0,0,25,145,97,20,25,145,145,4,102,145,145,3,107,143,3,145,127,145,0,0,88,98,145,0,112,99,140,48,64,143,99,98,113,140,48,143,106,100,132,40,127,143,0,0,25,145,100,20,114,143,145,0,127,145,0,0,25,143,100,20,102,143,143,1,107,145,1,143,127,143,0,0,25,145,100,20,102,145,145,2,107,143,2,145,127,145,0,0,25,143,100,20,102,143,143,3,107,145,3,143,127,143,0,0,88,101,143,0,25,143,140,48,112,102,143,4,25,143,140,48,63,145,102,101,113,143,4,145,106,143,140,48,109,140,104,143,25,143,140,104,25,145,140,48,106,145,145,4,109,143,4,145,25,143,140,104,134,145,0,0,196,181,5,0,132,143,0,0,58,104,135,0,3,145,132,142,112,105,145,4,25,145,140,48,112,106,145,4,25,145,140,48,59,143,1,0,64,143,143,105,65,143,104,143,63,143,106,143,113,145,4,143,106,107,132,40,127,143,0,0,25,145,107,20,25,145,145,8,114,143,145,0,127,145,0,0,25,143,107,20,25,143,143,8,102,143,143,1,107,145,1,143,127,143,0,0,25,145,107,20,25,145,145,8,102,145,145,2,107,143,2,145,127,145,0,0,25,143,107,20,25,143,143,8,102,143,143,3,107,145,3,143,127,143,0,0,88,108,143,0,25,143,140,48,112,109,143,4,25,143,140,48,63,145,109,108,113,143,4,145,119,0,141,254,25,145,140,8,134,110,0,0,220,50,6,0,145,0,0,0,33,145,110,0,120,145,18,0,25,145,140,8,106,111,145,4,0,136,111,0,1,145,0,0,53,145,111,145,180,3,2,0,119,0,11,0,0,112,136,0,134,145,0,0,128,62,6,0,112,0,0,0,0,113,136,0,25,143,138,16,134,145,0,0,160,42,6,0,113,143,0,0,119,0,234,255,1,143,0,0,109,138,44,143,137,140,0,0,139,0,0,0,140,1,143,0,0,0,0,0,2,137,0,0,144,0,0,0,2,138,0,0,255,0,0,0,1,135,0,0,136,139,0,0,0,136,139,0,136,139,0,0,25,139,139,112,137,139,0,0,130,139,0,0,136,140,0,0,49,139,139,140,48,4,2,0,135,139,0,0,25,139,0,4,134,75,0,0,56,51,6,0,139,0,0,0,33,139,75,0,121,139,3,0,137,136,0,0,139,0,0,0,25,139,0,4,106,120,139,4,26,134,120,32,1,140,0,0,109,136,48,140,25,140,136,48,1,139,0,0,109,140,4,139,112,8,134,56,58,133,8,0,59,131,0,0,1,129,0,0,1,130,0,0,25,140,136,24,109,136,24,140,25,140,136,24,25,139,136,24,109,140,4,139,25,139,134,16,134,21,0,0,56,51,6,0,139,0,0,0,33,139,21,0,120,139,136,1,25,139,134,16,106,42,139,4,0,132,42,0,1,139,0,0,53,139,42,139,204,4,2,0,119,0,129,1,0,50,132,0,134,139,0,0,224,62,6,0,50,0,0,0,0,54,132,0,25,140,136,24,134,139,0,0,0,43,6,0,54,140,0,0,0,57,132,0,26,127,57,8,106,71,127,40,102,81,71,9,19,139,81,138,1,140,1,0,1,141,4,0,138,139,140,141,36,5,2,0,32,5,2,0,32,5,2,0,72,5,2,0,119,0,11,0,25,140,134,56,112,95,140,4,106,106,127,40,113,106,16,95,106,110,127,40,112,111,110,16,25,140,127,56,113,140,4,111,119,0,2,0,119,0,247,255,106,112,127,40,102,113,112,8,19,139,113,138,1,140,1,0,1,141,4,0,138,139,140,141,120,5,2,0,116,5,2,0,84,7,2,0,52,9,2,0,119,0,83,1,112,114,134,56,113,127,56,114,106,115,127,40,127,140,0,0,25,141,115,36,25,141,141,12,114,140,141,0,127,141,0,0,25,140,115,36,25,140,140,12,102,140,140,1,107,141,1,140,127,140,0,0,25,141,115,36,25,141,141,12,102,141,141,2,107,140,2,141,127,141,0,0,25,140,115,36,25,140,140,12,102,140,140,3,107,141,3,140,127,140,0,0,88,116,140,0,106,117,127,40,127,140,0,0,25,141,117,36,25,141,141,4,114,140,141,0,127,141,0,0,25,140,117,36,25,140,140,4,102,140,140,1,107,141,1,140,127,140,0,0,25,141,117,36,25,141,141,4,102,141,141,2,107,140,2,141,127,141,0,0,25,140,117,36,25,140,140,4,102,140,140,3,107,141,3,140,127,140,0,0,88,118,140,0,112,119,127,56,63,141,116,118,64,141,119,141,113,127,56,141,106,140,127,56,109,136,72,140,25,140,136,72,25,141,127,56,106,141,141,4,109,140,4,141,25,140,136,72,134,141,0,0,68,187,5,0,127,140,0,0,106,121,127,44,38,141,121,2,33,141,141,0,121,141,4,0,134,141,0,0,24,152,4,0,127,0,0,0,112,122,127,56,58,123,133,0,64,133,123,122,106,124,127,40,127,141,0,0,25,140,124,20,25,140,140,12,114,141,140,0,127,140,0,0,25,141,124,20,25,141,141,12,102,141,141,1,107,140,1,141,127,141,0,0,25,140,124,20,25,140,140,12,102,140,140,2,107,141,2,140,127,140,0,0,25,141,124,20,25,141,141,12,102,141,141,3,107,140,3,141,127,141,0,0,88,125,141,0,58,126,133,0,64,133,126,125,106,1,127,40,127,141,0,0,25,140,1,20,25,140,140,4,114,141,140,0,127,140,0,0,25,141,1,20,25,141,141,4,102,141,141,1,107,140,1,141,127,141,0,0,25,140,1,20,25,140,140,4,102,140,140,2,107,141,2,140,127,140,0,0,25,141,1,20,25,141,141,4,102,141,141,3,107,140,3,141,127,141,0,0,88,2,141,0,58,3,133,0,64,133,3,2,119,0,220,0,106,4,127,40,112,5,4,12,113,127,56,5,106,6,127,40,127,141,0,0,25,140,6,36,25,140,140,12,114,141,140,0,127,140,0,0,25,141,6,36,25,141,141,12,102,141,141,1,107,140,1,141,127,141,0,0,25,140,6,36,25,140,140,12,102,140,140,2,107,141,2,140,127,140,0,0,25,141,6,36,25,141,141,12,102,141,141,3,107,140,3,141,127,141,0,0,88,7,141,0,106,9,127,40,127,141,0,0,25,140,9,36,25,140,140,4,114,141,140,0,127,140,0,0,25,141,9,36,25,141,141,4,102,141,141,1,107,140,1,141,127,141,0,0,25,140,9,36,25,140,140,4,102,140,140,2,107,141,2,140,127,140,0,0,25,141,9,36,25,141,141,4], eb + 122880);
  HEAPU8.set([102,141,141,3,107,140,3,141,127,141,0,0,88,10,141,0,112,11,127,56,63,140,7,10,64,140,11,140,113,127,56,140,106,141,127,56,109,136,80,141,25,141,136,80,25,140,127,56,106,140,140,4,109,141,4,140,25,141,136,80,134,140,0,0,68,187,5,0,127,141,0,0,106,12,127,44,38,140,12,2,33,140,140,0,121,140,4,0,134,140,0,0,24,152,4,0,127,0,0,0,112,13,127,56,58,14,133,0,64,133,14,13,106,15,127,40,127,140,0,0,25,141,15,20,25,141,141,12,114,140,141,0,127,141,0,0,25,140,15,20,25,140,140,12,102,140,140,1,107,141,1,140,127,140,0,0,25,141,15,20,25,141,141,12,102,141,141,2,107,140,2,141,127,141,0,0,25,140,15,20,25,140,140,12,102,140,140,3,107,141,3,140,127,140,0,0,88,16,140,0,58,17,133,0,64,133,17,16,106,18,127,40,127,140,0,0,25,141,18,20,25,141,141,4,114,140,141,0,127,141,0,0,25,140,18,20,25,140,140,4,102,140,140,1,107,141,1,140,127,140,0,0,25,141,18,20,25,141,141,4,102,141,141,2,107,140,2,141,127,141,0,0,25,140,18,20,25,140,140,4,102,140,140,3,107,141,3,140,127,140,0,0,88,19,140,0,58,20,133,0,64,133,20,19,119,0,100,0,0,22,130,0,25,130,22,1,106,23,127,40,127,140,0,0,25,141,23,20,25,141,141,12,114,140,141,0,127,141,0,0,25,140,23,20,25,140,140,12,102,140,140,1,107,141,1,140,127,140,0,0,25,141,23,20,25,141,141,12,102,141,141,2,107,140,2,141,127,141,0,0,25,140,23,20,25,140,140,12,102,140,140,3,107,141,3,140,127,140,0,0,88,24,140,0,58,25,133,0,64,133,25,24,106,26,127,40,127,140,0,0,25,141,26,20,25,141,141,4,114,140,141,0,127,141,0,0,25,140,26,20,25,140,140,4,102,140,140,1,107,141,1,140,127,140,0,0,25,141,26,20,25,141,141,4,102,141,141,2,107,140,2,141,127,141,0,0,25,140,26,20,25,140,140,4,102,140,140,3,107,141,3,140,127,140,0,0,88,27,140,0,58,28,133,0,64,133,28,27,106,29,127,40,127,140,0,0,25,141,29,36,25,141,141,12,114,140,141,0,127,141,0,0,25,140,29,36,25,140,140,12,102,140,140,1,107,141,1,140,127,140,0,0,25,141,29,36,25,141,141,12,102,141,141,2,107,140,2,141,127,141,0,0,25,140,29,36,25,140,140,12,102,140,140,3,107,141,3,140,127,140,0,0,88,30,140,0,58,31,133,0,63,133,31,30,106,32,127,40,127,140,0,0,25,141,32,36,25,141,141,4,114,140,141,0,127,141,0,0,25,140,32,36,25,140,140,4,102,140,140,1,107,141,1,140,127,140,0,0,25,141,32,36,25,141,141,4,102,141,141,2,107,140,2,141,127,141,0,0,25,140,32,36,25,140,140,4,102,140,140,3,107,141,3,140,127,140,0,0,88,33,140,0,58,34,133,0,63,133,34,33,119,0,1,0,0,35,129,0,25,129,35,1,119,0,116,254,25,139,136,24,134,36,0,0,56,51,6,0,139,0,0,0,33,139,36,0,120,139,18,0,25,139,136,24,106,37,139,4,0,132,37,0,1,139,0,0,53,139,37,139,0,11,2,0,119,0,11,0,0,38,132,0,134,139,0,0,224,62,6,0,38,0,0,0,0,39,132,0,25,140,134,16,134,139,0,0,0,43,6,0,39,140,0,0,119,0,234,255,0,40,130,0,58,41,133,0,33,139,40,0,59,140,0,0,73,140,41,140,19,139,139,140,121,139,5,0,58,43,133,0,0,44,130,0,76,139,44,0,66,131,43,139,25,140,136,8,109,136,8,140,25,140,136,8,25,139,136,8,109,140,4,139,25,139,134,16,134,45,0,0,56,51,6,0,139,0,0,0,33,139,45,0,120,139,78,1,25,139,134,16,106,46,139,4,0,132,46,0,1,139,0,0,53,139,46,139,156,11,2,0,119,0,71,1,0,47,132,0,134,139,0,0,224,62,6,0,47,0,0,0,0,48,132,0,25,140,136,8,134,139,0,0,0,43,6,0,48,140,0,0,0,49,132,0,26,128,49,8,106,51,128,40,102,52,51,8,19,139,52,138,1,141,1,0,1,140,4,0,138,139,141,140,244,11,2,0,240,11,2,0,248,11,2,0,40,14,2,0,119,0,222,255,119,0,1,0,25,140,134,56,112,53,140,4,25,140,128,56,112,55,140,4,3,140,128,137,112,56,140,4,25,140,136,48,59,141,2,0,66,141,53,141,61,142,0,0,0,0,0,63,64,142,56,142,65,142,55,142,63,141,141,142,113,140,4,141,112,58,128,56,100,59,128,137,112,60,136,48,65,140,58,59,63,140,60,140,113,136,48,140,106,61,128,40,127,140,0,0,25,141,61,20,25,141,141,12,114,140,141,0,127,141,0,0,25,140,61,20,25,140,140,12,102,140,140,1,107,141,1,140,127,140,0,0,25,141,61,20,25,141,141,12,102,141,141,2,107,140,2,141,127,141,0,0,25,140,61,20,25,140,140,12,102,140,140,3,107,141,3,140,127,140,0,0,88,62,140,0,112,63,136,48,63,141,63,62,113,136,48,141,106,64,128,40,127,141,0,0,25,140,64,20,114,141,140,0,127,140,0,0,25,141,64,20,102,141,141,1,107,140,1,141,127,141,0,0,25,140,64,20,102,140,140,2,107,141,2,140,127,140,0,0,25,141,64,20,102,141,141,3,107,140,3,141,127,141,0,0,88,65,141,0,25,141,136,48,112,66,141,4,25,141,136,48,63,140,66,65,113,141,4,140,106,67,128,40,127,140,0,0,25,141,67,20,25,141,141,8,114,140,141,0,127,141,0,0,25,140,67,20,25,140,140,8,102,140,140,1,107,141,1,140,127,140,0,0,25,141,67,20,25,141,141,8,102,141,141,2,107,140,2,141,127,141,0,0,25,140,67,20,25,140,140,8,102,140,140,3,107,141,3,140,127,140,0,0,88,68,140,0,25,140,136,48,112,69,140,4,25,140,136,48,64,141,69,68,113,140,4,141,106,140,136,48,109,136,88,140,25,140,136,88,25,141,136,48,106,141,141,4,109,140,4,141,25,140,136,88,134,141,0,0,196,181,5,0,128,140,0,0,112,70,128,56,100,72,128,137,112,73,136,48,59,140,1,0,64,140,140,72,65,140,70,140,63,140,73,140,113,136,48,140,106,74,128,40,127,140,0,0,25,141,74,20,25,141,141,4,114,140,141,0,127,141,0,0,25,140,74,20,25,140,140,4,102,140,140,1,107,141,1,140,127,140,0,0,25,141,74,20,25,141,141,4,102,141,141,2,107,140,2,141,127,141,0,0,25,140,74,20,25,140,140,4,102,140,140,3,107,141,3,140,127,140,0,0,88,76,140,0,112,77,136,48,63,141,77,76,113,136,48,141,119,0,81,255,119,0,1,0,58,78,131,0,106,79,128,40,113,79,12,78,58,80,131,0,113,128,56,80,106,141,128,56,109,136,96,141,25,141,136,96,25,139,128,56,106,139,139,4,109,141,4,139,25,141,136,96,134,139,0,0,68,187,5,0,128,141,0,0,106,82,128,44,38,139,82,2,33,139,139,0,121,139,4,0,134,139,0,0,24,152,4,0,128,0,0,0,25,139,134,56,112,83,139,4,25,139,128,56,112,84,139,4,3,139,128,137,112,85,139,4,25,139,136,48,59,141,2,0,66,141,83,141,61,140,0,0,0,0,0,63,64,140,85,140,65,140,84,140,63,141,141,140,113,139,4,141,58,86,131,0,100,87,128,137,112,88,136,48,65,139,86,87,63,139,88,139,113,136,48,139,106,89,128,40,127,139,0,0,25,141,89,20,25,141,141,12,114,139,141,0,127,141,0,0,25,139,89,20,25,139,139,12,102,139,139,1,107,141,1,139,127,139,0,0,25,141,89,20,25,141,141,12,102,141,141,2,107,139,2,141,127,141,0,0,25,139,89,20,25,139,139,12,102,139,139,3,107,141,3,139,127,139,0,0,88,90,139,0,112,91,136,48,63,141,91,90,113,136,48,141,106,92,128,40,127,141,0,0,25,139,92,20,114,141,139,0,127,139,0,0,25,141,92,20,102,141,141,1,107,139,1,141,127,141,0,0,25,139,92,20,102,139,139,2,107,141,2,139,127,139,0,0,25,141,92,20,102,141,141,3,107,139,3,141,127,141,0,0,88,93,141,0,25,141,136,48,112,94,141,4,25,141,136,48,63,139,94,93,113,141,4,139,106,96,128,40,127,139,0,0,25,141,96,20,25,141,141,8,114,139,141,0,127,141,0,0,25,139,96,20,25,139,139,8,102,139,139,1,107,141,1,139,127,139,0,0,25,141,96,20,25,141,141,8,102,141,141,2,107,139,2,141,127,141,0,0,25,139,96,20,25,139,139,8,102,139,139,3,107,141,3,139,127,139,0,0,88,97,139,0,25,139,136,48,112,98,139,4,25,139,136,48,64,141,98,97,113,139,4,141,106,139,136,48,109,136,104,139,25,139,136,104,25,141,136,48,106,141,141,4,109,139,4,141,25,139,136,104,134,141,0,0,196,181,5,0,128,139,0,0,58,99,131,0,100,100,128,137,112,101,136,48,59,139,1,0,64,139,139,100,65,139,99,139,63,139,101,139,113,136,48,139,106,102,128,40,127,139,0,0,25,141,102,20,25,141,141,4,114,139,141,0,127,141,0,0,25,139,102,20,25,139,139,4,102,139,139,1,107,141,1,139,127,139,0,0,25,141,102,20,25,141,141,4,102,141,141,2,107,139,2,141,127,141,0,0,25,139,102,20,25,139,139,4,102,139,139,3,107,141,3,139,127,139,0,0,88,103,139,0,112,104,136,48,63,141,104,103,113,136,48,141,119,0,174,254,25,141,136,8,134,105,0,0,56,51,6,0,141,0,0,0,33,141,105,0,120,141,18,0,25,141,136,8,106,107,141,4,0,132,107,0,1,141,0,0,53,141,107,141,232,16,2,0,119,0,11,0,0,108,132,0,134,141,0,0,224,62,6,0,108,0,0,0,0,109,132,0,25,139,134,16,134,141,0,0,0,43,6,0,109,139,0,0,119,0,234,255,1,139,0,0,109,134,44,139,137,136,0,0,139,0,0,0,140,1,135,0,0,0,0,0,2,130,0,0,255,0,0,0,2,131,0,0,144,0,0,0,1,128,0,0,136,132,0,0,0,129,132,0,136,132,0,0,25,132,132,64,137,132,0,0,130,132,0,0,136,133,0,0,49,132,132,133,100,17,2,0,135,132,0,0,25,132,0,4,134,56,0,0,148,51,6,0,132,0,0,0,33,132,56,0,121,132,3,0,137,129,0,0,139,0,0,0,25,132,0,4,106,117,132,4,26,127,117,32,25,133,129,24,109,129,24,133,25,133,129,24,25,132,129,24,109,133,4,132,25,132,127,16,134,11,0,0,148,51,6,0,132,0,0,0,33,132,11,0,120,132,36,2,25,132,127,16,106,23,132,4,0,126,23,0,1,132,0,0,53,132,23,132,216,17,2,0,119,0,29,2,0,29,126,0,134,132,0,0,64,63,6,0,29,0,0,0,0,32,126,0,25,133,129,24,134,132,0,0,96,43,6,0,32,133,0,0,0,35,126,0,26,125,35,8,106,45,125,40,112,51,45,12,113,129,8,51,106,60,125,40,112,65,60,16,25,132,129,8,113,132,4,65,106,74,125,40,102,81,74,8,19,132,81,130,32,132,132,1,121,132,3,0,112,92,127,56,113,129,8,92,106,104,125,40,102,107,104,9,19,132,107,130,32,132,132,1,121,132,5,0,25,132,127,56,112,108,132,4,25,132,129,8,113,132,4,108,106,109,125,40,127,132,0,0,25,133,109,36,25,133,133,12,114,132,133,0,127,133,0,0,25,132,109,36,25,132,132,12,102,132,132,1,107,133,1,132,127,132,0,0,25,133,109,36,25,133,133,12,102,133,133,2,107,132,2,133,127,133,0,0,25,132,109,36,25,132,132,12,102,132,132,3,107,133,3,132,127,132,0,0,88,110,132,0,106,111,125,40,127,132,0,0,25,133,111,36,25,133,133,4,114,132,133,0,127,133,0,0,25,132,111,36,25,132,132,4,102,132,132,1,107,133,1,132,127,132,0,0,25,133,111,36,25,133,133,4,102,133,133,2,107,132,2,133,127,133,0,0,25,132,111,36,25,132,132,4,102,132,132,3,107,133,3,132,127,132,0,0,88,112,132,0,112,113,129,8,63,133,110,112,64,133,113,133,113,129,8,133,106,114,125,40,127,133,0,0,25,132,114,36,114,133,132,0,127,132,0,0,25,133,114,36,102,133,133,1,107,132,1,133,127,133,0,0,25,132,114,36,102,132,132,2,107,133,2,132,127,132,0,0,25,133,114,36,102,133,133,3,107,132,3,133,127,133,0,0,88,115,133,0,106,116,125,40,127,133,0,0,25,132,116,36,25,132,132,8,114,133,132,0,127,132,0,0,25,133,116,36,25,133,133,8,102,133,133,1,107,132,1,133,127,133,0,0,25,132,116,36,25,132,132,8,102,132,132,2,107,133,2,132,127,132,0,0,25,133,116,36,25,133,133,8,102,133,133,3,107,132,3,133,127,133,0,0,88,118,133,0,25,133,129,8,112,119,133,4,25,133,129,8,63,132,115,118,64,132,119,132,113,133,4,132,82,120,125,0,32,132,120,1,121,132,48,0,106,121,125,40,102,122,121,8,19,132,122,130,32,132,132,2,121,132,19,0,106,123,125,40,112,124,123,16,59,132,0,0,70,132,124,132,121,132,11,0,106,1,125,40,112,2,1,12,106,3,125,40,112,4,3,16,25,132,129,8,112,5,132,4,66,133,2,4,65,133,133,5,113,129,8,133,119,0,4,0,59,132,0,0,113,129,8,132,119,0,1,0,106,6,125,40,102,7,6,9,19,132,7,130,32,132,132,2,121,132,20,0,106,8,125,40,112,9,8,12,59,132,0,0,70,132,9,132,121,132,11,0,106,10,125,40,112,12,10,16,106,13,125,40,112,14,13,12,112,15,129,8,25,132,129,8,66,133,12,14,65,133,133,15,113,132,4,133,119,0,5,0,25,133,129,8,59,132,0,0,113,133,4,132,119,0,1,0,106,133,129,8,109,129,48,133,25,133,129,48,25,132,129,8,106,132,132,4,109,133,4,132,25,133,129,48,134,132,0,0,68,187,5,0,125,133,0,0,106,16,125,44,38,132,16,2,33,132,132,0,121,132,10,0,134,132,0,0,24,152,4,0,125,0,0,0,106,133,125,56,109,129,8,133,25,133,129,8,25,132,125,56,106,132,132,4,109,133,4,132,134,132,0,0,176,109,6,0,125,0,0,0,106,133,125,56,109,129,8,133,25,133,129,8,25,132,125,56,106,132,132,4,109,133,4,132,59,133,0,0,113,129,4,133,59,133,0,0,89,129,133,0,106,17,125,40,82,18,17,0,106,19,17,4,1,133,0,1,19,133,18,133,33,133,133,0,1,132,0,0,33,132,132,0,20,133,133,132,121,133,26,0,112,20,127,56,112,21,129,8,100,22,125,131,59,133,2,0,66,133,20,133,61,132,0,0,0,0,0,63,64,132,22,132,65,132,21,132,63,133,133,132,89,129,133,0,25,133,127,56,112,24,133,4,25,133,129,8,112,25,133,4,3,133,125,131,112,26,133,4,59,132,2,0,66,132,24,132,61,134,0,0,0,0,0,63,64,134,26,134,65,134,25,134,63,132,132,134,113,129,4,132,106,27,125,40,82,28,27,0,106,30,27,4,38,132,28,1,33,132,132,0,1,133,0,0,33,133,133,0,20,132,132,133,121,132,15,0,25,132,125,56,112,31,132,4,25,132,129,8,112,33,132,4,3,132,125,131,112,34,132,4,59,133,2,0,66,133,31,133,61,134,0,0,0,0,0,63,64,134,34,134,65,134,33,134,63,133,133,134,113,129,4,133,106,36,125,40,82,37,36,0,106,38,36,4,38,133,37,16,33,133,133,0,1,132,0,0,33,132,132,0,20,133,133,132,121,133,16,0,25,133,125,56,112,39,133,4,25,133,129,8,112,40,133,4,3,133,125,131,112,41,133,4,68,132,39,0,59,134,2,0,66,132,132,134,61,134,0,0,0,0,0,63,64,134,41,134,65,134,40,134,63,132,132,134,113,129,4,132,106,42,125,40,82,43,42,0,106,44,42,4,38,132,43,8,33,132,132,0,1,133,0,0,33,133,133,0,20,132,132,133,121,132,12,0,112,46,125,56,112,47,129,8,100,48,125,131,59,132,2,0,66,132,46,132,61,133,0,0,0,0,0,63,64,133,48,133,65,133,47,133,63,132,132,133,89,129,132,0,106,49,125,40,82,50,49,0,106,52,49,4,1,132,128,0,19,132,50,132,33,132,132,0,1,133,0,0,33,133,133,0,20,132,132,133,121,132,13,0,112,53,125,56,112,54,129,8,100,55,125,131,68,132,53,0,59,133,2,0,66,132,132,133,61,133,0,0,0,0,0,63,64,133,55,133,65,133,54,133,63,132,132,133,89,129,132,0,106,57,125,40,82,58,57,0,106,59,57,4,38,132,58,4,33,132,132,0,1,133,0,0,33,133,133,0,20,132,132,133,121,132,18,0,25,132,127,56,112,61,132,4,25,132,125,56,112,62,132,4,25,132,129,8,112,63,132,4,3,132,125,131,112,64,132,4,59,133,2,0,66,133,62,133,64,133,61,133,61,134,0,0,0,0,0,63,64,134,64,134,65,134,63,134,63,133,133,134,113,129,4,133,106,66,125,40,82,67,66,0,106,68,66,4,38,133,67,64,33,133,133,0,1,132,0,0,33,132,132,0,20,133,133,132,121,133,18,0,25,133,127,56,112,69,133,4,25,133,125,56,112,70,133,4,25,133,129,8,112,71,133,4,3,133,125,131,112,72,133,4,59,132,2,0,66,132,70,132,63,132,69,132,61,134,0,0,0,0,0,63,64,134,72,134,65,134,71,134,63,132,132,134,113,129,4,132,106,73,125,40,82,75,73,0,106,76,73,4,38,132,75,2,33,132,132,0,1,133,0,0,33,133,133,0,20,132,132,133,121,132,14,0,112,77,127,56,112,78,125,56,112,79,129,8,100,80,125,131,59,132,2,0,66,132,78,132,64,132,77,132,61,133,0,0,0,0,0,63,64,133,80,133,65,133,79,133,63,132,132,133,89,129,132,0,106,82,125,40,82,83,82,0,106,84,82,4,38,132,83,32,33,132,132,0,1,133,0,0,33,133,133,0,20,132,132,133,121,132,14,0,112,85,127,56,112,86,125,56,112,87,129,8,100,88,125,131,59,132,2,0,66,132,86,132,63,132,85,132,61,133,0,0,0,0,0,63,64,133,88,133,65,133,87,133,63,132,132,133,89,129,132,0,106,89,125,40,127,132,0,0,25,133,89,20,25,133,133,12,114,132,133,0,127,133,0,0,25,132,89,20,25,132,132,12,102,132,132,1,107,133,1,132,127,132,0,0,25,133,89,20,25,133,133,12,102,133,133,2,107,132,2,133,127,133,0,0,25,132,89,20,25,132,132,12,102,132,132,3,107,133,3,132,127,132,0,0,88,90,132,0,88,91,129,0,63,132,91,90,89,129,132,0,106,93,125,40,127,132,0,0,25,133,93,20,25,133,133,4,114,132,133,0,127,133,0,0,25,132,93,20,25,132,132,4,102,132,132,1,107,133,1,132,127,132,0,0,25,133,93,20,25,133,133,4,102,133,133,2,107,132,2,133,127,133,0,0,25,132,93,20,25,132,132,4,102,132,132,3,107,133,3,132,127,132,0,0,88,94,132,0,88,95,129,0,64,132,95,94,89,129,132,0,106,96,125,40,127,132,0,0,25,133,96,20,114,132,133,0,127,133,0,0,25,132,96,20,102,132,132,1,107,133,1,132,127,132,0,0,25,133,96,20,102,133,133,2,107,132,2,133,127,133,0,0,25,132,96,20,102,132,132,3,107,133,3,132,127,132,0,0,88,97,132,0,112,98,129,4,63,133,98,97,113,129,4,133,106,99,125,40,127,133,0,0,25,132,99,20,25,132,132,8,114,133,132,0,127,132,0,0,25,133,99,20,25,133,133,8,102,133,133,1,107,132,1,133,127,133,0,0,25,132,99,20,25,132,132,8,102,132,132,2,107,133,2,132,127,132,0,0,25,133,99,20,25,133,133,8,102,133,133,3,107,132,3,133,127,133,0,0,88,100,133,0,112,101,129,4,64,132,101,100,113,129,4,132,82,133,129,0,109,129,56,133,25,133,129,56,106,132,129,4,109,133,4,132,25,133,129,56,134,132,0,0,196,181,5,0,125,133,0,0,119,0,216,253,25,132,129,24,134,102,0,0,148,51,6,0,132,0,0,0,33,132,102,0,120,132,18,0,25,132,129,24,106,103,132,4,0,126,103,0,1,132,0,0,53,132,103,132,124,26,2,0,119,0,11,0,0,105,126,0,134,132,0,0,64,63,6,0,105,0,0,0,0,106,126,0,25,133,127,16,134,132,0,0,96,43,6,0,106,133,0,0,119,0,234,255,1,133,0,0,109,127,44,133,137,129,0,0,139,0,0,0,140,5,15,1,0,0,0,0,2,200,0,0,255,0,0,0,2,201,0,0,242,43,0,0,2,202,0,0,199,113,28,7,1,203,0,0,143,203,13,1,136,204,0,0,0,203,204,0,143,203,14,1,1,203,36,0,48,203,203,1,16,27,2,0,134,158,0,0,80,88,6,0,1,203,22,0,85,158,203,0,1,136,0,0,1,137,0,0,119,0,2,3,106,163,0,4,106,170,0,100,48,203,163,170,56,27,2,0,25,204,163,1,109,0,4,204,78,21,163,0,19,204,21,200,0,36,204,0,119,0,5,0,134,31,0,0,196,92,4,0,0,0,0,0,0,36,31,0,134,44,0,0,160,107,6,0,36,0,0,0,32,204,44,0,121,204,238,255,0,10,36,0,119,0,1,0,1,203,43,0,1,204,3,0,138,10,203,204,140,27,2,0,124,27,2,0,144,27,2,0,0,187,10,0,1,203,0,0,143,203,7,1,119,0,27,0,119,0,1,0,106,71,0,4,106,77,0,100,48,204,71,77,204,27,2,0,25,203,71,1,109,0,4,203,78,96,71,0,19,203,96,200,0,187,203,0,32,204,10,45,41,204,204,31,42,204,204,31,0,203,204,0,143,203,7,1,119,0,11,0,134,108,0,0,196,92,4,0,0,0,0,0,0,187,108,0,32,204,10,45,41,204,204,31,42,204,204,31,0,203,204,0,143,203,7,1,119,0,1,0,32,130,187,48,38,203,1,239,32,203,203,0,19,203,203,130,121,203,84,0,106,140,0,4,106,147,0,100,48,203,140,147,48,28,2,0,25,204,140,1,109,0,4,204,78,148,140,0,19,204,148,200,0,151,204,0,119,0,5,0,134,149,0,0,196,92,4,0,0,0,0,0,0,151,149,0,39,204,151,32,0,150,204,0,32,204,150,120,120,204,13,0,32,204,1,0,121,204,6,0,1,7,8,0,0,189,151,0,1,204,46,0,143,204,13,1,119,0,91,0,0,5,1,0,0,188,151,0,1,204,32,0,143,204,13,1,119,0,86,0,106,152,0,4,106,153,0,100,48,204,152,153,168,28,2,0,25,203,152,1,109,0,4,203,78,154,152,0,19,203,154,200,0,156,203,0,119,0,5,0,134,155,0,0,196,92,4,0,0,0,0,0,0,156,155,0,25,20,156,1,90,157,201,20,1,203,15,0,19,204,157,200,47,203,203,204,64,29,2,0,106,159,0,100,1,203,0,0,52,203,159,203,236,28,2,0,106,160,0,4,26,204,160,1,109,0,4,204,32,204,2,0,121,204,8,0,1,203,0,0,134,204,0,0,132,184,5,0,0,203,0,0,1,136,0,0,1,137,0,0,119,0,130,2,1,204,0,0,45,204,159,204,40,29,2,0,1,136,0,0,1,137,0,0,119,0,124,2,106,161,0,4,26,203,161,1,109,0,4,203,1,136,0,0,1,137,0,0,119,0,118,2,1,7,16,0,0,189,156,0,1,203,46,0,143,203,13,1,119,0,33,0,32,203,1,0,1,204,10,0,125,8,203,204,1,0,0,0,25,11,187,1,90,162,201,11,19,204,162,200,48,204,204,8,140,29,2,0,0,5,8,0,0,188,187,0,1,204,32,0,143,204,13,1,119,0,19,0,106,164,0,100,1,204,0,0,52,204,164,204,168,29,2,0,106,165,0,4,26,203,165,1,109,0,4,203,1,204,0,0,134,203,0,0,132,184,5,0,0,204,0,0,134,166,0,0,80,88,6,0,1,203,22,0,85,166,203,0,1,136,0,0,1,137,0,0,119,0,81,2,141,203,13,1,32,203,203,32,121,203,153,0,32,167,5,10,121,167,147,0,26,168,188,48,35,203,168,10,121,203,38,0,0,172,168,0,1,203,0,0,143,203,10,1,141,203,10,1,27,169,203,10,3,171,169,172,106,173,0,4,106,174,0,100,48,203,173,174,52,30,2,0,25,204,173,1,109,0,4,204,78,175,173,0,19,204,175,200,0,190,204,0,119,0,5,0,134,176,0,0,196,92,4,0,0,0,0,0,0,190,176,0,26,177,190,48,35,204,177,10,2,203,0,0,153,153,153,25,16,203,171,203,19,204,204,203,121,204,5,0,0,172,177,0,0,204,171,0,143,204,10,1,119,0,229,255,0,191,190,0,119,0,1,0,0,138,171,0,1,139,0,0,0,192,191,0,119,0,4,0,1,138,0,0,1,139,0,0,0,192,188,0,26,178,192,48,35,204,178,10,121,204,95,0,0,179,138,0,0,180,139,0,0,183,178,0,0,195,192,0,1,204,10,0,1,203,0,0,134,181,0,0,128,235,5,0,179,180,204,203,128,203,0,0,0,182,203,0,34,184,183,0,40,203,183,255,0,185,203,0,41,203,184,31,42,203,203,31,40,203,203,255,16,203,203,182,41,204,184,31,42,204,204,31,40,204,204,255,13,204,182,204,16,205,185,181,19,204,204,205,20,203,203,204,121,203,6,0,0,9,183,0,0,141,179,0,0,142,180,0,0,194,195,0,119,0,47,0,41,203,184,31,42,203,203,31,134,186,0,0,36,111,6,0,181,182,183,203,128,203,0,0,0,22,203,0,106,23,0,4,106,24,0,100,48,203,23,24,96,31,2,0,25,204,23,1,109,0,4,204,78,25,23,0,19,204,25,200,0,193,204,0,119,0,5,0,134,26,0,0,196,92,4,0,0,0,0,0,0,193,26,0,26,27,193,48,35,204,27,10,2,203,0,0,153,153,153,25,16,203,22,203,2,205,0,0,153,153,153,25,13,205,22,205,2,206,0,0,154,153,153,153,16,206,186,206,19,205,205,206,20,203,203,205,19,204,204,203,121,204,6,0,0,179,186,0,0,180,22,0,0,183,27,0,0,195,193,0,119,0,189,255,0,9,27,0,0,141,186,0,0,142,22,0,0,194,193,0,119,0,1,0,1,204,9,0,16,28,204,9,121,28,7,0,0,117,142,0,0,119,141,0,141,203,7,1,0,204,203,0,143,204,9,1,119,0,19,0,1,6,10,0,0,143,141,0,0,144,142,0,0,204,194,0,143,204,5,1,1,204,72,0,143,204,13,1,119,0,11,0,0,117,139,0,0,119,138,0,141,203,7,1,0,204,203,0,143,204,9,1,119,0,5,0,0,7,5,0,0,189,188,0,1,204,46,0,143,204,13,1,141,204,13,1,32,204,204,46,121,204,54,1,26,29,7,1,19,204,29,7,0,30,204,0,32,204,30,0,121,204,138,0,27,34,7,23,1,204,243,44,43,203,34,5,38,203,203,7,90,35,204,203,25,13,189,1,90,37,201,13,19,204,37,200,16,38,204,7,121,38,47,0,19,204,37,200,0,41,204,0,1,204,0,0,143,204,11,1,141,204,11,1,41,203,35,24,42,203,203,24,22,204,204,203,0,39,204,0,20,204,41,39,0,40,204,0,106,42,0,4,106,43,0,100,48,204,42,43,220,32,2,0,25,203,42,1,109,0,4,203,78,45,42,0,19,203,45,200,0,196,203,0,119,0,5,0,134,46,0,0,196,92,4,0,0,0,0,0,0,196,46,0,25,12,196,1,90,47,201,12,19,203,47,200,16,48,203,7,2,203,0,0,0,0,0,8,16,203,40,203,19,203,203,48,121,203,6,0,19,203,47,200,0,41,203,0,0,203,40,0,143,203,11,1,119,0,222,255,0,197,196,0,119,0,1,0,0,52,47,0,1,54,0,0,0,56,40,0,0,198,197,0,119,0,5,0,0,52,37,0,1,54,0,0,1,56,0,0,0,198,189,0,1,203,255,255,1,204,255,255,41,205,35,24,42,205,205,24,135,49,3,0,203,204,205,0,128,205,0,0,0,50,205,0,19,205,52,200,0,51,205,0,18,53,7,51,16,55,50,54,16,57,49,56,13,58,54,50,19,205,58,57,20,205,55,205,20,205,53,205,121,205,9,0,0,6,7,0,0,143,56,0,0,144,54,0,0,205,198,0,143,205,5,1,1,205,72,0,143,205,13,1,119,0,219,0,0,59,56,0,0,60,54,0,0,64,52,0,41,205,35,24,42,205,205,24,135,61,1,0,59,60,205,0,128,205,0,0,0,62,205,0,19,205,64,200,0,63,205,0,106,65,0,4,106,66,0,100,48,205,65,66,12,34,2,0,25,204,65,1,109,0,4,204,78,67,65,0,19,204,67,200,0,199,204,0,119,0,5,0,134,68,0,0,196,92,4,0,0,0,0,0,0,199,68,0,25,14,199,1,90,69,201,14,19,204,69,200,18,70,7,204,16,204,50,62,13,205,62,50,20,203,63,61,16,203,49,203,19,205,205,203,20,204,204,205,20,204,70,204,121,204,10,0,0,6,7,0,20,204,63,61,0,143,204,0,0,144,62,0,0,204,199,0,143,204,5,1,1,204,72,0,143,204,13,1,119,0,173,0,20,204,63,61,0,59,204,0,0,60,62,0,0,64,69,0,119,0,209,255,25,18,189,1,90,32,201,18,19,204,32,200,16,33,204,7,121,33,48,0,19,204,32,200,0,74,204,0,1,204,0,0,143,204,12,1,141,204,12,1,5,72,204,7,3,73,74,72,106,75,0,4,106,76,0,100,48,204,75,76,224,34,2,0,25,205,75,1,109,0,4,205,78,78,75,0,19,204,78,200,0,205,204,0,143,205,0,1,119,0,6,0,134,79,0,0,196,92,4,0,0,0,0,0,0,205,79,0,143,205,0,1,141,205,0,1,25,17,205,1,90,80,201,17,19,205,80,200,16,81,205,7,16,205,73,202,19,205,205,81,121,205,6,0,19,205,80,200,0,74,205,0,0,205,73,0,143,205,12,1,119,0,225,255,141,204,0,1,0,205,204,0,143,205,1,1,119,0,1,0,0,83,80,0,0,145,73,0,1,146,0,0,141,204,1,1,0,205,204,0,143,205,2,1,119,0,6,0,0,83,32,0,1,145,0,0,1,146,0,0,0,205,189,0,143,205,2,1,19,205,83,200,0,82,205,0,16,84,82,7,121,84,99,0,1,205,255,255,1,204,255,255,1,203,0,0,134,85,0,0,4,111,6,0,205,204,7,203,128,203,0,0,0,86,203,0,0,87,146,0,0,89,145,0,0,95,83,0,141,204,2,1,0,203,204,0,143,203,4,1,16,88,86,87,16,90,85,89,13,91,87,86,19,203,91,90,20,203,88,203,121,203,10,0,0,6,7,0,0,143,89,0,0,144,87,0,141,204,4,1,0,203,204,0,143,203,5,1,1,203,72,0,143,203,13,1,119,0,78,0,1,203,0,0,134,92,0,0,128,235,5,0,89,87,7,203,128,203,0,0,0,93,203,0,19,203,95,200,0,94,203,0,1,203,255,255,16,203,203,93,32,204,93,255,40,205,94,255,16,205,205,92,19,204,204,205,20,203,203,204,121,203,10,0,0,6,7,0,0,143,89,0,0,144,87,0,141,204,4,1,0,203,204,0,143,203,5,1,1,203,72,0,143,203,13,1,119,0,53,0,1,203,0,0,134,97,0,0,36,111,6,0,94,203,92,93,128,203,0,0,0,98,203,0,106,99,0,4,106,100,0,100,48,203,99,100,148,36,2,0,25,204,99,1,109,0,4,204,78,101,99,0,19,203,101,200,0,204,203,0,143,204,3,1,119,0,6,0,134,102,0,0,196,92,4,0,0,0,0,0,0,204,102,0,143,204,3,1,141,204,3,1,25,19,204,1,90,103,201,19,19,204,103,200,16,104,204,7,121,104,8,0,0,87,98,0,0,89,97,0,0,95,103,0,141,203,3,1,0,204,203,0,143,204,4,1,119,0,182,255,0,6,7,0,0,143,97,0,0,144,98,0,141,203,3,1,0,204,203,0,143,204,5,1,1,204,72,0,143,204,13,1,119,0,9,0,0,6,7,0,0,143,145,0,0,144,146,0,141,203,2,1,0,204,203,0,143,204,5,1,1,204,72,0,143,204,13,1,141,204,13,1,32,204,204,72,121,204,55,0,141,204,5,1,25,15,204,1,90,105,201,15,19,204,105,200,16,106,204,6,121,106,44,0,106,107,0,4,106,109,0,100,48,204,107,109,112,37,2,0,25,203,107,1,109,0,4,203,78,110,107,0,19,204,110,200,0,203,204,0,143,203,6,1,119,0,6,0,134,111,0,0,196,92,4,0,0,0,0,0,0,203,111,0,143,203,6,1,141,203,6,1,25,16,203,1,90,112,201,16,19,203,112,200,16,113,203,6,120,113,235,255,119,0,1,0,134,114,0,0,80,88,6,0,1,203,34,0,85,114,203,0,38,204,3,1,32,204,204,0,1,205,0,0,32,205,205,0,19,204,204,205,141,205,7,1,1,206,0,0,125,203,204,205,206,0,0,0,143,203,8,1,0,117,4,0,0,119,3,0,141,206,8,1,0,203,206,0,143,203,9,1,119,0,6,0,0,117,144,0,0,119,143,0,141,206,7,1,0,203,206,0,143,203,9,1,106,115,0,100,1,203,0,0,52,203,115,203,32,38,2,0,106,116,0,4,26,206,116,1,109,0,4,206,16,118,117,4,16,120,119,3,13,121,117,4,19,206,121,120,20,206,118,206,120,206,37,0,141,206,9,1,33,122,206,0,38,206,3,1,33,206,206,0,1,203,0,0,33,203,203,0,20,206,206,203,20,206,206,122,120,206,15,0,134,123,0,0,80,88,6,0,1,206,34,0,85,123,206,0,1,206,255,255,1,203,255,255,134,124,0,0,36,111,6,0,3,4,206,203,128,203,0,0,0,125,203,0,0,136,125,0,0,137,124,0,119,0,33,0,16,126,4,117,16,127,3,119,13,128,117,4,19,203,128,127,20,203,126,203,121,203,8,0,134,129,0,0,80,88,6,0,1,203,34,0,85,129,203,0,0,136,4,0,0,137,3,0,119,0,20,0,141,203,9,1,34,131,203,0,141,203,9,1,21,203,119,203,0,132,203,0,41,203,131,31,42,203,203,31,21,203,117,203,0,133,203,0,141,203,9,1,41,206,131,31,42,206,206,31,134,134,0,0,112,110,6,0,132,133,203,206,128,206,0,0,0,135,206,0,0,136,135,0,0,137,134,0,129,136,0,0,139,137,0,0,140,1,109,0,0,0,0,0,1,102,0,0,136,106,0,0,0,103,106,0,136,106,0,0,1,107,192,1,3,106,106,107,137,106,0,0,130,106,0,0,136,107,0,0,49,106,106,107,84,39,2,0,135,106,0,0,1,106,136,0,3,4,103,106,25,3,103,124,25,12,103,112,25,11,103,100,25,10,103,88,25,9,103,76,25,8,103,64,25,7,103,52,25,6,103,40,25,5,103,28,25,2,103,16,25,1,103,4,1,106,168,1,3,14,103,106,1,106,156,1,3,25,103,106,1,106,144,1,3,36,103,106,1,106,132,1,3,47,103,106,1,106,120,1,3,58,103,106,1,106,108,1,3,69,103,106,1,106,96,1,3,80,103,106,1,106,84,1,3,91,103,106,1,106,72,1,3,100,103,106,1,106,60,1,3,15,103,106,1,106,48,1,3,16,103,106,1,106,36,1,3,17,103,106,1,106,24,1,3,18,103,106,1,106,12,1,3,19,103,106,1,106,0,1,3,20,103,106,1,106,244,0,3,21,103,106,1,106,232,0,3,22,103,106,1,106,220,0,3,23,103,106,1,106,208,0,3,24,103,106,1,106,196,0,3,26,103,106,1,106,184,0,3,27,103,106,1,106,172,0,3,28,103,106,1,106,160,0,3,29,103,106,1,106,148,0,3,30,103,106,0,13,0,0,1,106,3,0,1,107,0,0,1,108,0,0,134,31,0,0,0,104,5,0,106,107,108,0,0,32,13,0,25,33,32,28,85,33,31,0,0,34,13,0,25,35,34,28,82,37,35,0,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,14,107,0,127,108,0,0,102,108,108,1,107,14,1,108,127,107,0,0,102,107,107,2,107,14,2,107,127,108,0,0,102,108,108,3,107,14,3,108,25,38,14,4,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,38,107,0,127,108,0,0,102,108,108,1,107,38,1,108,127,107,0,0,102,107,107,2,107,38,2,107,127,108,0,0,102,108,108,3,107,38,3,108,25,39,14,8,127,108,0,0,59,107,255,255,89,108,107,0,127,107,0,0,114,39,107,0,127,108,0,0,102,108,108,1,107,39,1,108,127,107,0,0,102,107,107,2,107,39,2,107,127,108,0,0,102,108,108,3,107,39,3,108,0,101,25,0,0,104,14,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,56,41,2,0,82,108,25,0,85,1,108,0,106,107,25,4,109,1,4,107,106,108,25,8,109,1,8,108,1,107,0,0,134,108,0,0,72,38,6,0,37,107,1,0,0,40,13,0,25,41,40,28,82,42,41,0,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,36,107,0,127,108,0,0,102,108,108,1,107,36,1,108,127,107,0,0,102,107,107,2,107,36,2,107,127,108,0,0,102,108,108,3,107,36,3,108,25,43,36,4,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,43,107,0,127,108,0,0,102,108,108,1,107,43,1,108,127,107,0,0,102,107,107,2,107,43,2,107,127,108,0,0,102,108,108,3,107,43,3,108,25,44,36,8,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,44,107,0,127,108,0,0,102,108,108,1,107,44,1,108,127,107,0,0,102,107,107,2,107,44,2,107,127,108,0,0,102,108,108,3,107,44,3,108,0,101,47,0,0,104,36,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,64,42,2,0,82,108,47,0,85,2,108,0,106,107,47,4,109,2,4,107,106,108,47,8,109,2,8,108,1,107,0,0,134,108,0,0,4,41,6,0,42,107,2,0,0,45,13,0,25,46,45,28,82,48,46,0,127,108,0,0,59,107,1,0,89,108,107,0,127,107,0,0,114,58,107,0,127,108,0,0,102,108,108,1,107,58,1,108,127,107,0,0,102,107,107,2,107,58,2,107,127,108,0,0,102,108,108,3,107,58,3,108,25,49,58,4,127,108,0,0,59,107,1,0,89,108,107,0,127,107,0,0,114,49,107,0,127,108,0,0,102,108,108,1,107,49,1,108,127,107,0,0,102,107,107,2,107,49,2,107,127,108,0,0,102,108,108,3,107,49,3,108,25,50,58,8,127,108,0,0,59,107,1,0,89,108,107,0,127,107,0,0,114,50,107,0,127,108,0,0,102,108,108,1,107,50,1,108,127,107,0,0,102,107,107,2,107,50,2,107,127,108,0,0,102,108,108,3,107,50,3,108,0,101,69,0,0,104,58,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,72,43,2,0,82,108,69,0,85,5,108,0,106,107,69,4,109,5,4,107,106,108,69,8,109,5,8,108,1,107,0,0,134,108,0,0,160,40,6,0,48,107,5,0,0,51,13,0,25,52,51,28,82,53,52,0,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,80,107,0,127,108,0,0,102,108,108,1,107,80,1,108,127,107,0,0,102,107,107,2,107,80,2,107,127,108,0,0,102,108,108,3,107,80,3,108,25,54,80,4,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,54,107,0,127,108,0,0,102,108,108,1,107,54,1,108,127,107,0,0,102,107,107,2,107,54,2,107,127,108,0,0,102,108,108,3,107,54,3,108,25,55,80,8,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,55,107,0,127,108,0,0,102,108,108,1,107,55,1,108,127,107,0,0,102,107,107,2,107,55,2,107,127,108,0,0,102,108,108,3,107,55,3,108,0,101,91,0,0,104,80,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,80,44,2,0,82,108,91,0,85,6,108,0,106,107,91,4,109,6,4,107,106,108,91,8,109,6,8,108,1,107,0,0,134,108,0,0,28,39,6,0,53,107,6,0,0,56,13,0,25,57,56,28,82,59,57,0,127,108,0,0,59,107,1,0,89,108,107,0,127,107,0,0,114,100,107,0,127,108,0,0,102,108,108,1,107,100,1,108,127,107,0,0,102,107,107,2,107,100,2,107,127,108,0,0,102,108,108,3,107,100,3,108,25,60,100,4,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,60,107,0,127,108,0,0,102,108,108,1,107,60,1,108,127,107,0,0,102,107,107,2,107,60,2,107,127,108,0,0,102,108,108,3,107,60,3,108,25,61,100,8,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,61,107,0,127,108,0,0,102,108,108,1,107,61,1,108,127,107,0,0,102,107,107,2,107,61,2,107,127,108,0,0,102,108,108,3,107,61,3,108,0,101,15,0,0,104,100,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,88,45,2,0,82,108,15,0,85,7,108,0,106,107,15,4,109,7,4,107,106,108,15,8,109,7,8,108,1,107,1,0,134,108,0,0,72,38,6,0,59,107,7,0,0,62,13,0,25,63,62,28,82,64,63,0,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,16,107,0,127,108,0,0,102,108,108,1,107,16,1,108,127,107,0,0,102,107,107,2,107,16,2,107,127,108,0,0,102,108,108,3,107,16,3,108,25,65,16,4,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,65,107,0,127,108,0,0,102,108,108,1,107,65,1,108,127,107,0,0,102,107,107,2,107,65,2,107,127,108,0,0,102,108,108,3,107,65,3,108,25,66,16,8,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,66,107,0,127,108,0,0,102,108,108,1,107,66,1,108,127,107,0,0,102,107,107,2,107,66,2,107,127,108,0,0,102,108,108,3,107,66,3,108,0,101,17,0,0,104,16,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,96,46,2,0,82,108,17,0,85,8,108,0,106,107,17,4,109,8,4,107,106,108,17,8,109,8,8,108,1,107,1,0,134,108,0,0,4,41,6,0,64,107,8,0,0,67,13,0,25,68,67,28,82,70,68,0,127,108,0,0,61,107,0,0,0,0,0,63,89,108,107,0,127,107,0,0,114,18,107,0,127,108,0,0,102,108,108,1,107,18,1,108,127,107,0,0,102,107,107,2,107,18,2,107,127,108,0,0,102,108,108,3,107,18,3,108,25,71,18,4,127,108,0,0,61,107,0,0,0,0,0,63,89,108,107,0,127,107,0,0,114,71,107,0,127,108,0,0,102,108,108,1,107,71,1,108,127,107,0,0,102,107,107,2,107,71,2,107,127,108,0,0,102,108,108,3,107,71,3,108,25,72,18,8,127,108,0,0,61,107,0,0,0,0,0,63,89,108,107,0,127,107,0,0,114,72,107,0,127,108,0,0,102,108,108,1,107,72,1,108,127,107,0,0,102,107,107,2,107,72,2,107,127,108,0,0,102,108,108,3,107,72,3,108,0,101,19,0,0,104,18,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,116,47,2,0,82,108,19,0,85,9,108,0,106,107,19,4,109,9,4,107,106,108,19,8,109,9,8,108,1,107,1,0,134,108,0,0,160,40,6,0,70,107,9,0,0,73,13,0,25,74,73,28,82,75,74,0,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,20,107,0,127,108,0,0,102,108,108,1,107,20,1,108,127,107,0,0,102,107,107,2,107,20,2,107,127,108,0,0,102,108,108,3,107,20,3,108,25,76,20,4,127,108,0,0], eb + 133120);
  HEAPU8.set([59,107,0,0,89,108,107,0,127,107,0,0,114,76,107,0,127,108,0,0,102,108,108,1,107,76,1,108,127,107,0,0,102,107,107,2,107,76,2,107,127,108,0,0,102,108,108,3,107,76,3,108,25,77,20,8,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,77,107,0,127,108,0,0,102,108,108,1,107,77,1,108,127,107,0,0,102,107,107,2,107,77,2,107,127,108,0,0,102,108,108,3,107,77,3,108,0,101,21,0,0,104,20,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,124,48,2,0,82,108,21,0,85,10,108,0,106,107,21,4,109,10,4,107,106,108,21,8,109,10,8,108,1,107,1,0,134,108,0,0,28,39,6,0,75,107,10,0,0,78,13,0,25,79,78,28,82,81,79,0,127,108,0,0,59,107,255,255,89,108,107,0,127,107,0,0,114,22,107,0,127,108,0,0,102,108,108,1,107,22,1,108,127,107,0,0,102,107,107,2,107,22,2,107,127,108,0,0,102,108,108,3,107,22,3,108,25,82,22,4,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,82,107,0,127,108,0,0,102,108,108,1,107,82,1,108,127,107,0,0,102,107,107,2,107,82,2,107,127,108,0,0,102,108,108,3,107,82,3,108,25,83,22,8,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,83,107,0,127,108,0,0,102,108,108,1,107,83,1,108,127,107,0,0,102,107,107,2,107,83,2,107,127,108,0,0,102,108,108,3,107,83,3,108,0,101,23,0,0,104,22,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,132,49,2,0,82,108,23,0,85,11,108,0,106,107,23,4,109,11,4,107,106,108,23,8,109,11,8,108,1,107,2,0,134,108,0,0,72,38,6,0,81,107,11,0,0,84,13,0,25,85,84,28,82,86,85,0,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,24,107,0,127,108,0,0,102,108,108,1,107,24,1,108,127,107,0,0,102,107,107,2,107,24,2,107,127,108,0,0,102,108,108,3,107,24,3,108,25,87,24,4,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,87,107,0,127,108,0,0,102,108,108,1,107,87,1,108,127,107,0,0,102,107,107,2,107,87,2,107,127,108,0,0,102,108,108,3,107,87,3,108,25,88,24,8,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,88,107,0,127,108,0,0,102,108,108,1,107,88,1,108,127,107,0,0,102,107,107,2,107,88,2,107,127,108,0,0,102,108,108,3,107,88,3,108,0,101,26,0,0,104,24,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,140,50,2,0,82,108,26,0,85,12,108,0,106,107,26,4,109,12,4,107,106,108,26,8,109,12,8,108,1,107,2,0,134,108,0,0,4,41,6,0,86,107,12,0,0,89,13,0,25,90,89,28,82,92,90,0,127,108,0,0,61,107,0,0,0,0,0,63,89,108,107,0,127,107,0,0,114,27,107,0,127,108,0,0,102,108,108,1,107,27,1,108,127,107,0,0,102,107,107,2,107,27,2,107,127,108,0,0,102,108,108,3,107,27,3,108,25,93,27,4,127,108,0,0,61,107,0,0,0,0,0,63,89,108,107,0,127,107,0,0,114,93,107,0,127,108,0,0,102,108,108,1,107,93,1,108,127,107,0,0,102,107,107,2,107,93,2,107,127,108,0,0,102,108,108,3,107,93,3,108,25,94,27,8,127,108,0,0,61,107,0,0,0,0,0,63,89,108,107,0,127,107,0,0,114,94,107,0,127,108,0,0,102,108,108,1,107,94,1,108,127,107,0,0,102,107,107,2,107,94,2,107,127,108,0,0,102,108,108,3,107,94,3,108,0,101,28,0,0,104,27,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,160,51,2,0,82,108,28,0,85,3,108,0,106,107,28,4,109,3,4,107,106,108,28,8,109,3,8,108,1,107,2,0,134,108,0,0,160,40,6,0,92,107,3,0,0,95,13,0,25,96,95,28,82,97,96,0,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,29,107,0,127,108,0,0,102,108,108,1,107,29,1,108,127,107,0,0,102,107,107,2,107,29,2,107,127,108,0,0,102,108,108,3,107,29,3,108,25,98,29,4,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,98,107,0,127,108,0,0,102,108,108,1,107,98,1,108,127,107,0,0,102,107,107,2,107,98,2,107,127,108,0,0,102,108,108,3,107,98,3,108,25,99,29,8,127,108,0,0,59,107,0,0,89,108,107,0,127,107,0,0,114,99,107,0,127,108,0,0,102,108,108,1,107,99,1,108,127,107,0,0,102,107,107,2,107,99,2,107,127,108,0,0,102,108,108,3,107,99,3,108,0,101,30,0,0,104,29,0,25,105,101,12,78,108,104,0,83,101,108,0,25,101,101,1,25,104,104,1,54,108,101,105,168,52,2,0,82,108,30,0,85,4,108,0,106,107,30,4,109,4,4,107,106,108,30,8,109,4,8,108,1,107,2,0,134,108,0,0,28,39,6,0,97,107,4,0,137,103,0,0,139,0,0,0,140,3,165,0,0,0,0,0,2,161,0,0,255,0,0,0,2,162,0,0,255,255,0,0,1,159,0,0,136,163,0,0,0,160,163,0,136,163,0,0,25,163,163,48,137,163,0,0,130,163,0,0,136,164,0,0,49,163,163,164,52,53,2,0,135,163,0,0,1,163,24,0,1,164,60,0,134,86,0,0,168,171,5,0,163,164,0,0,27,164,0,48,27,163,1,60,3,164,164,163,27,163,2,80,3,152,164,163,1,163,15,0,134,17,0,0,168,171,5,0,152,163,0,0,109,86,4,17,27,163,0,24,27,164,1,42,3,163,163,164,27,164,2,60,3,163,163,164,1,164,15,0,134,61,0,0,168,171,5,0,163,164,0,0,85,86,61,0,1,164,4,0,1,163,0,0,134,69,0,0,224,168,5,0,164,163,0,0,109,86,8,69,82,87,86,0,0,155,87,0,1,154,0,0,33,163,0,0,121,163,115,0,0,99,155,0,0,156,99,0,1,153,0,0,0,103,153,0,54,163,103,0,224,53,2,0,119,0,108,0,0,116,156,0,1,163,255,255,83,116,163,0,0,121,156,0,1,164,2,0,107,121,1,164,0,128,154,0,0,129,156,0,19,163,128,161,107,129,2,163,25,163,129,2,42,164,128,8,107,163,1,164,0,130,156,0,1,163,0,0,107,130,4,163,0,131,154,0,41,163,131,16,42,163,163,16,25,163,163,12,19,163,163,162,0,154,163,0,0,132,156,0,1,164,255,255,107,132,6,164,0,133,156,0,25,164,133,6,1,163,2,0,107,164,1,163,0,134,154,0,0,135,156,0,25,163,135,6,19,164,134,161,107,163,2,164,25,164,135,6,25,164,164,2,42,163,134,8,107,164,1,163,0,136,156,0,25,163,136,6,1,164,0,0,107,163,4,164,0,137,154,0,41,164,137,16,42,164,164,16,25,164,164,12,19,164,164,162,0,154,164,0,0,138,156,0,1,163,255,255,107,138,12,163,0,139,156,0,25,163,139,12,1,164,2,0,107,163,1,164,0,140,154,0,0,141,156,0,25,164,141,12,19,163,140,161,107,164,2,163,25,163,141,12,25,163,163,2,42,164,140,8,107,163,1,164,0,142,156,0,25,164,142,12,1,163,0,0,107,164,4,163,0,143,154,0,41,163,143,16,42,163,163,16,25,163,163,12,19,163,163,162,0,154,163,0,0,144,156,0,1,164,255,255,107,144,18,164,0,145,156,0,25,164,145,18,1,163,2,0,107,164,1,163,0,146,154,0,0,147,156,0,25,163,147,18,19,164,146,161,107,163,2,164,25,164,147,18,25,164,164,2,42,163,146,8,107,164,1,163,0,148,156,0,25,163,148,18,1,164,0,0,107,163,4,164,0,149,154,0,41,164,149,16,42,164,164,16,25,164,164,12,19,164,164,162,0,154,164,0,0,150,156,0,25,156,150,24,0,151,156,0,0,155,151,0,0,3,153,0,25,153,3,1,119,0,146,255,33,164,1,0,121,164,193,0,0,4,155,0,0,157,4,0,1,153,0,0,0,5,153,0,54,164,5,1,176,55,2,0,119,0,186,0,0,6,157,0,1,164,255,255,83,6,164,0,0,7,157,0,1,163,2,0,107,7,1,163,0,8,154,0,0,9,157,0,19,164,8,161,107,9,2,164,25,164,9,2,42,163,8,8,107,164,1,163,0,10,157,0,1,164,0,0,107,10,4,164,0,11,154,0,41,164,11,16,42,164,164,16,25,164,164,12,19,164,164,162,0,154,164,0,0,12,157,0,1,163,255,255,107,12,6,163,0,13,157,0,25,163,13,6,1,164,0,0,107,163,1,164,0,14,154,0,0,15,157,0,25,164,15,6,19,163,14,161,107,164,2,163,25,163,15,6,25,163,163,2,42,164,14,8,107,163,1,164,0,16,157,0,25,164,16,6,1,163,0,0,107,164,4,163,0,18,154,0,41,163,18,16,42,163,163,16,25,163,163,4,19,163,163,162,0,154,163,0,0,19,157,0,1,164,255,255,107,19,12,164,0,20,157,0,25,164,20,12,1,163,0,0,107,164,1,163,0,21,154,0,0,22,157,0,25,163,22,12,19,164,21,161,107,163,2,164,25,164,22,12,25,164,164,2,42,163,21,8,107,164,1,163,0,23,157,0,25,163,23,12,1,164,0,0,107,163,4,164,0,24,154,0,41,164,24,16,42,164,164,16,25,164,164,4,19,164,164,162,0,154,164,0,0,25,157,0,1,163,255,255,107,25,18,163,0,26,157,0,25,163,26,18,1,164,0,0,107,163,1,164,0,27,154,0,0,28,157,0,25,164,28,18,19,163,27,161,107,164,2,163,25,163,28,18,25,163,163,2,42,164,27,8,107,163,1,164,0,29,157,0,25,164,29,18,1,163,0,0,107,164,4,163,0,30,154,0,41,163,30,16,42,163,163,16,25,163,163,4,19,163,163,162,0,154,163,0,0,31,157,0,1,164,255,255,107,31,24,164,0,32,157,0,25,164,32,24,1,163,2,0,107,164,1,163,0,33,154,0,0,34,157,0,25,163,34,24,19,164,33,161,107,163,2,164,25,164,34,24,25,164,164,2,42,163,33,8,107,164,1,163,0,35,157,0,25,163,35,24,1,164,0,0,107,163,4,164,0,36,154,0,41,164,36,16,42,164,164,16,25,164,164,12,19,164,164,162,0,154,164,0,0,37,157,0,1,163,255,255,107,37,30,163,0,38,157,0,25,163,38,30,1,164,2,0,107,163,1,164,0,39,154,0,0,40,157,0,25,164,40,30,19,163,39,161,107,164,2,163,25,163,40,30,25,163,163,2,42,164,39,8,107,163,1,164,0,41,157,0,25,164,41,30,1,163,0,0,107,164,4,163,0,42,154,0,41,163,42,16,42,163,163,16,25,163,163,12,19,163,163,162,0,154,163,0,0,43,157,0,1,164,255,255,107,43,36,164,0,44,157,0,25,164,44,36,1,163,2,0,107,164,1,163,0,45,154,0,0,46,157,0,25,163,46,36,19,164,45,161,107,163,2,164,25,164,46,36,25,164,164,2,42,163,45,8,107,164,1,163,0,47,157,0,25,163,47,36,1,164,0,0,107,163,4,164,0,48,154,0,41,164,48,16,42,164,164,16,25,164,164,12,19,164,164,162,0,154,164,0,0,49,157,0,25,157,49,42,0,50,157,0,0,155,50,0,0,51,153,0,25,153,51,1,119,0,68,255,33,164,2,0,120,164,9,0,0,125,86,0,0,126,152,0,134,164,0,0,192,36,6,0,125,126,0,0,0,127,86,0,137,160,0,0,139,127,0,0,0,52,155,0,0,158,52,0,1,153,0,0,0,53,153,0,54,164,53,2,216,58,2,0,119,0,8,1,0,54,158,0,1,164,255,255,83,54,164,0,0,55,158,0,1,163,2,0,107,55,1,163,0,56,154,0,0,57,158,0,19,164,56,161,107,57,2,164,25,164,57,2,42,163,56,8,107,164,1,163,0,58,158,0,1,164,0,0,107,58,4,164,0,59,154,0,41,164,59,16,42,164,164,16,25,164,164,12,19,164,164,162,0,154,164,0,0,60,158,0,1,163,255,255,107,60,6,163,0,62,158,0,25,163,62,6,1,164,2,0,107,163,1,164,0,63,154,0,0,64,158,0,25,164,64,6,19,163,63,161,107,164,2,163,25,163,64,6,25,163,163,2,42,164,63,8,107,163,1,164,0,65,158,0,25,164,65,6,1,163,0,0,107,164,4,163,0,66,154,0,41,163,66,16,42,163,163,16,25,163,163,12,19,163,163,162,0,154,163,0,0,67,158,0,1,164,255,255,107,67,12,164,0,68,158,0,25,164,68,12,1,163,0,0,107,164,1,163,0,70,154,0,0,71,158,0,25,163,71,12,19,164,70,161,107,163,2,164,25,164,71,12,25,164,164,2,42,163,70,8,107,164,1,163,0,72,158,0,25,163,72,12,1,164,0,0,107,163,4,164,0,73,154,0,41,164,73,16,42,164,164,16,25,164,164,4,19,164,164,162,0,154,164,0,0,74,158,0,1,163,255,255,107,74,18,163,0,75,158,0,25,163,75,18,1,164,0,0,107,163,1,164,0,76,154,0,0,77,158,0,25,164,77,18,19,163,76,161,107,164,2,163,25,163,77,18,25,163,163,2,42,164,76,8,107,163,1,164,0,78,158,0,25,164,78,18,1,163,0,0,107,164,4,163,0,79,154,0,41,163,79,16,42,163,163,16,25,163,163,4,19,163,163,162,0,154,163,0,0,80,158,0,1,164,255,255,107,80,24,164,0,81,158,0,25,164,81,24,1,163,0,0,107,164,1,163,0,82,154,0,0,83,158,0,25,163,83,24,19,164,82,161,107,163,2,164,25,164,83,24,25,164,164,2,42,163,82,8,107,164,1,163,0,84,158,0,25,163,84,24,1,164,0,0,107,163,4,164,0,85,154,0,41,164,85,16,42,164,164,16,25,164,164,4,19,164,164,162,0,154,164,0,0,88,158,0,1,163,255,255,107,88,30,163,0,89,158,0,25,163,89,30,1,164,0,0,107,163,1,164,0,90,154,0,0,91,158,0,25,164,91,30,19,163,90,161,107,164,2,163,25,163,91,30,25,163,163,2,42,164,90,8,107,163,1,164,0,92,158,0,25,164,92,30,1,163,0,0,107,164,4,163,0,93,154,0,41,163,93,16,42,163,163,16,25,163,163,4,19,163,163,162,0,154,163,0,0,94,158,0,1,164,255,255,107,94,36,164,0,95,158,0,25,164,95,36,1,163,0,0,107,164,1,163,0,96,154,0,0,97,158,0,25,163,97,36,19,164,96,161,107,163,2,164,25,164,97,36,25,164,164,2,42,163,96,8,107,164,1,163,0,98,158,0,25,163,98,36,1,164,0,0,107,163,4,164,0,100,154,0,41,164,100,16,42,164,164,16,25,164,164,4,19,164,164,162,0,154,164,0,0,101,158,0,1,163,255,255,107,101,42,163,0,102,158,0,25,163,102,42,1,164,2,0,107,163,1,164,0,104,154,0,0,105,158,0,25,164,105,42,19,163,104,161,107,164,2,163,25,163,105,42,25,163,163,2,42,164,104,8,107,163,1,164,0,106,158,0,25,164,106,42,1,163,0,0,107,164,4,163,0,107,154,0,41,163,107,16,42,163,163,16,25,163,163,12,19,163,163,162,0,154,163,0,0,108,158,0,1,164,255,255,107,108,48,164,0,109,158,0,25,164,109,48,1,163,2,0,107,164,1,163,0,110,154,0,0,111,158,0,25,163,111,48,19,164,110,161,107,163,2,164,25,164,111,48,25,164,164,2,42,163,110,8,107,164,1,163,0,112,158,0,25,163,112,48,1,164,0,0,107,163,4,164,0,113,154,0,41,164,113,16,42,164,164,16,25,164,164,12,19,164,164,162,0,154,164,0,0,114,158,0,1,163,255,255,107,114,54,163,0,115,158,0,25,163,115,54,1,164,2,0,107,163,1,164,0,117,154,0,0,118,158,0,25,164,118,54,19,163,117,161,107,164,2,163,25,163,118,54,25,163,163,2,42,164,117,8,107,163,1,164,0,119,158,0,25,164,119,54,1,163,0,0,107,164,4,163,0,120,154,0,41,163,120,16,42,163,163,16,25,163,163,12,19,163,163,162,0,154,163,0,0,122,158,0,25,158,122,60,0,123,158,0,0,155,123,0,0,124,153,0,25,153,124,1,119,0,246,254,0,125,86,0,0,126,152,0,134,163,0,0,192,36,6,0,125,126,0,0,0,127,86,0,137,160,0,0,139,127,0,0,140,10,101,0,0,0,0,0,1,97,0,0,136,99,0,0,0,98,99,0,136,99,0,0,1,100,144,1,3,99,99,100,137,99,0,0,130,99,0,0,136,100,0,0,49,99,99,100,76,63,2,0,135,99,0,0,1,99,240,0,3,83,98,99,1,99,228,0,3,12,98,99,1,99,216,0,3,89,98,99,1,99,204,0,3,85,98,99,1,99,192,0,3,15,98,99,1,99,180,0,3,96,98,99,1,99,168,0,3,84,98,99,1,99,156,0,3,14,98,99,1,99,144,0,3,92,98,99,1,99,132,0,3,91,98,99,25,88,98,120,25,13,98,108,25,87,98,96,25,94,98,84,25,11,98,72,25,10,98,60,25,82,98,48,25,80,98,36,1,99,128,1,3,81,98,99,1,99,116,1,3,79,98,99,1,99,104,1,3,93,98,99,1,99,92,1,3,86,98,99,1,99,80,1,3,78,98,99,1,99,68,1,3,18,98,99,1,99,56,1,3,90,98,99,1,99,44,1,3,19,98,99,1,99,32,1,3,95,98,99,1,99,20,1,3,20,98,99,1,99,8,1,3,21,98,99,1,99,252,0,3,22,98,99,58,16,1,0,58,17,2,0,58,28,3,0,58,39,4,0,58,50,5,0,58,61,6,0,58,72,7,0,58,76,8,0,58,77,9,0,58,23,16,0,127,99,0,0,89,99,23,0,127,99,0,0,114,81,99,0,127,100,0,0,102,100,100,1,107,81,1,100,127,99,0,0,102,99,99,2,107,81,2,99,127,100,0,0,102,100,100,3,107,81,3,100,25,24,81,4,58,25,17,0,127,100,0,0,89,100,25,0,127,100,0,0,114,24,100,0,127,99,0,0,102,99,99,1,107,24,1,99,127,100,0,0,102,100,100,2,107,24,2,100,127,99,0,0,102,99,99,3,107,24,3,99,25,26,81,8,58,27,28,0,127,99,0,0,89,99,27,0,127,99,0,0,114,26,99,0,127,100,0,0,102,100,100,1,107,26,1,100,127,99,0,0,102,99,99,2,107,26,2,99,127,100,0,0,102,100,100,3,107,26,3,100,58,29,39,0,127,100,0,0,89,100,29,0,127,100,0,0,114,79,100,0,127,99,0,0,102,99,99,1,107,79,1,99,127,100,0,0,102,100,100,2,107,79,2,100,127,99,0,0,102,99,99,3,107,79,3,99,25,30,79,4,58,31,50,0,127,99,0,0,89,99,31,0,127,99,0,0,114,30,99,0,127,100,0,0,102,100,100,1,107,30,1,100,127,99,0,0,102,99,99,2,107,30,2,99,127,100,0,0,102,100,100,3,107,30,3,100,25,32,79,8,58,33,61,0,127,100,0,0,89,100,33,0,127,100,0,0,114,32,100,0,127,99,0,0,102,99,99,1,107,32,1,99,127,100,0,0,102,100,100,2,107,32,2,100,127,99,0,0,102,99,99,3,107,32,3,99,58,34,72,0,127,99,0,0,89,99,34,0,127,99,0,0,114,93,99,0,127,100,0,0,102,100,100,1,107,93,1,100,127,99,0,0,102,99,99,2,107,93,2,99,127,100,0,0,102,100,100,3,107,93,3,100,25,35,93,4,58,36,76,0,127,100,0,0,89,100,36,0,127,100,0,0,114,35,100,0,127,99,0,0,102,99,99,1,107,35,1,99,127,100,0,0,102,100,100,2,107,35,2,100,127,99,0,0,102,99,99,3,107,35,3,99,25,37,93,8,58,38,77,0,127,99,0,0,89,99,38,0,127,99,0,0,114,37,99,0,127,100,0,0,102,100,100,1,107,37,1,100,127,99,0,0,102,99,99,2,107,37,2,99,127,100,0,0,102,100,100,3,107,37,3,100,82,100,79,0,85,80,100,0,106,99,79,4,109,80,4,99,106,100,79,8,109,80,8,100,134,100,0,0,76,167,4,0,18,80,0,0,82,100,81,0,85,82,100,0,106,99,81,4,109,82,4,99,106,100,81,8,109,82,8,100,82,100,18,0,85,10,100,0,106,99,18,4,109,10,4,99,106,100,18,8,109,10,8,100,134,100,0,0,4,26,4,0,78,82,10,0,82,100,78,0,85,11,100,0,106,99,78,4,109,11,4,99,106,100,78,8,109,11,8,100,134,100,0,0,32,162,5,0,86,11,0,0,82,100,93,0,85,94,100,0,106,99,93,4,109,94,4,99,106,100,93,8,109,94,8,100,82,100,86,0,85,87,100,0,106,99,86,4,109,87,4,99,106,100,86,8,109,87,8,100,134,100,0,0,64,166,3,0,19,94,87,0,82,100,19,0,85,13,100,0,106,99,19,4,109,13,4,99,106,100,19,8,109,13,8,100,134,100,0,0,32,162,5,0,90,13,0,0,82,100,86,0,85,88,100,0,106,99,86,4,109,88,4,99,106,100,86,8,109,88,8,100,82,100,90,0,85,91,100,0,106,99,90,4,109,91,4,99,106,100,90,8,109,91,8,100,134,100,0,0,64,166,3,0,95,88,91,0,127,100,0,0,114,100,90,0,127,100,0,0,102,99,90,1,107,100,1,99,127,99,0,0,102,100,90,2,107,99,2,100,127,100,0,0,102,99,90,3,107,100,3,99,127,99,0,0,88,40,99,0,127,99,0,0,89,99,40,0,127,99,0,0,114,0,99,0,127,100,0,0,102,100,100,1,107,0,1,100,127,99,0,0,102,99,99,2,107,0,2,99,127,100,0,0,102,100,100,3,107,0,3,100,25,41,0,4,127,100,0,0,114,100,95,0,127,100,0,0,102,99,95,1,107,100,1,99,127,99,0,0,102,100,95,2,107,99,2,100,127,100,0,0,102,99,95,3,107,100,3,99,127,99,0,0,88,42,99,0,127,99,0,0,89,99,42,0,127,99,0,0,114,41,99,0,127,100,0,0,102,100,100,1,107,41,1,100,127,99,0,0,102,99,99,2,107,41,2,99,127,100,0,0,102,100,100,3,107,41,3,100,25,43,0,8,127,100,0,0,114,100,86,0,127,100,0,0,102,99,86,1,107,100,1,99,127,99,0,0,102,100,86,2,107,99,2,100,127,100,0,0,102,99,86,3,107,100,3,99,127,99,0,0,88,44,99,0,127,99,0,0,89,99,44,0,127,99,0,0,114,43,99,0,127,100,0,0,102,100,100,1,107,43,1,100,127,99,0,0,102,99,99,2,107,43,2,99,127,100,0,0,102,100,100,3,107,43,3,100,25,45,0,12,127,100,0,0,59,99,0,0,89,100,99,0,127,99,0,0,114,45,99,0,127,100,0,0,102,100,100,1,107,45,1,100,127,99,0,0,102,99,99,2,107,45,2,99,127,100,0,0,102,100,100,3,107,45,3,100,25,46,0,16,25,47,90,4,127,100,0,0,114,100,47,0,127,100,0,0,102,99,47,1,107,100,1,99,127,99,0,0,102,100,47,2,107,99,2,100,127,100,0,0,102,99,47,3,107,100,3,99,127,99,0,0,88,48,99,0,127,99,0,0,89,99,48,0,127,99,0,0,114,46,99,0,127,100,0,0,102,100,100,1,107,46,1,100,127,99,0,0,102,99,99,2,107,46,2,99,127,100,0,0,102,100,100,3,107,46,3,100,25,49,0,20,25,51,95,4,127,100,0,0,114,100,51,0,127,100,0,0,102,99,51,1,107,100,1,99,127,99,0,0,102,100,51,2,107,99,2,100,127,100,0,0,102,99,51,3,107,100,3,99,127,99,0,0,88,52,99,0,127,99,0,0,89,99,52,0,127,99,0,0,114,49,99,0,127,100,0,0,102,100,100,1,107,49,1,100,127,99,0,0,102,99,99,2,107,49,2,99,127,100,0,0,102,100,100,3,107,49,3,100,25,53,0,24,25,54,86,4,127,100,0,0,114,100,54,0,127,100,0,0,102,99,54,1,107,100,1,99,127,99,0,0,102,100,54,2,107,99,2,100,127,100,0,0,102,99,54,3,107,100,3,99,127,99,0,0,88,55,99,0,127,99,0,0,89,99,55,0,127,99,0,0,114,53,99,0,127,100,0,0,102,100,100,1,107,53,1,100,127,99,0,0,102,99,99,2,107,53,2,99,127,100,0,0,102,100,100,3,107,53,3,100,25,56,0,28,127,100,0,0,59,99,0,0,89,100,99,0,127,99,0,0,114,56,99,0,127,100,0,0,102,100,100,1,107,56,1,100,127,99,0,0,102,99,99,2,107,56,2,99,127,100,0,0,102,100,100,3,107,56,3,100,25,57,0,32,25,58,90,8,127,100,0,0,114,100,58,0,127,100,0,0,102,99,58,1,107,100,1,99,127,99,0,0,102,100,58,2,107,99,2,100,127,100,0,0,102,99,58,3,107,100,3,99,127,99,0,0,88,59,99,0,127,99,0,0,89,99,59,0,127,99,0,0,114,57,99,0,127,100,0,0,102,100,100,1,107,57,1,100,127,99,0,0,102,99,99,2,107,57,2,99,127,100,0,0,102,100,100,3,107,57,3,100,25,60,0,36,25,62,95,8,127,100,0,0,114,100,62,0,127,100,0,0,102,99,62,1,107,100,1,99,127,99,0,0,102,100,62,2,107,99,2,100,127,100,0,0,102,99,62,3,107,100,3,99,127,99,0,0,88,63,99,0,127,99,0,0,89,99,63,0,127,99,0,0,114,60,99,0,127,100,0,0,102,100,100,1,107,60,1,100,127,99,0,0,102,99,99,2,107,60,2,99,127,100,0,0,102,100,100,3,107,60,3,100,25,64,0,40,25,65,86,8,127,100,0,0,114,100,65,0,127,100,0,0,102,99,65,1,107,100,1,99,127,99,0,0,102,100,65,2,107,99,2,100,127,100,0,0,102,99,65,3,107,100,3,99,127,99,0,0,88,66,99,0,127,99,0,0,89,99,66,0,127,99,0,0,114,64,99,0,127,100,0,0,102,100,100,1,107,64,1,100,127,99,0,0,102,99,99,2,107,64,2,99,127,100,0,0,102,100,100,3,107,64,3,100,25,67,0,44,127,100,0,0,59,99,0,0,89,100,99,0,127,99,0,0,114,67,99,0,127,100,0,0,102,100,100,1,107,67,1,100,127,99,0,0,102,99,99,2,107,67,2,99,127,100,0,0,102,100,100,3,107,67,3,100,25,68,0,48,82,100,90,0,85,92,100,0,106,99,90,4,109,92,4,99,106,100,90,8,109,92,8,100,134,100,0,0,76,167,4,0,20,92,0,0,82,100,20,0,85,14,100,0,106,99,20,4,109,14,4,99,106,100,20,8,109,14,8,100,82,100,81,0,85,84,100,0,106,99,81,4,109,84,4,99,106,100,81,8,109,84,8,100,134,69,0,0,156,162,4,0,14,84,0,0,127,100,0,0,89,100,69,0,127,100,0,0,114,68,100,0,127,99,0,0,102,99,99,1,107,68,1,99,127,100,0,0,102,100,100,2,107,68,2,100,127,99,0,0,102,99,99,3,107,68,3,99,25,70,0,52,82,99,95,0,85,96,99,0,106,100,95,4,109,96,4,100,106,99,95,8,109,96,8,99,134,99,0,0,76,167,4,0,21,96,0,0,82,99,21,0,85,15,99,0,106,100,21,4,109,15,4,100,106,99,21,8,109,15,8,99,82,99,81,0,85,85,99,0,106,100,81,4,109,85,4,100,106,99,81,8,109,85,8,99,134,71,0,0,156,162,4,0,15,85,0,0,127,99,0,0,89,99,71,0,127,99,0,0,114,70,99,0,127,100,0,0,102,100,100,1,107,70,1,100,127,99,0,0,102,99,99,2,107,70,2,99,127,100,0,0,102,100,100,3,107,70,3,100,25,73,0,56,82,100,86,0,85,89,100,0,106,99,86,4,109,89,4,99,106,100,86,8,109,89,8,100,134,100,0,0,76,167,4,0,22,89,0,0,82,100,22,0,85,12,100,0,106,99,22,4,109,12,4,99,106,100,22,8,109,12,8,100,82,100,81,0,85,83,100,0,106,99,81,4,109,83,4,99,106,100,81,8,109,83,8,100,134,74,0,0,156,162,4,0,12,83,0,0,127,100,0,0,89,100,74,0,127,100,0,0,114,73,100,0,127,99,0,0,102,99,99,1,107,73,1,99,127,100,0,0,102,100,100,2,107,73,2,100,127,99,0,0,102,99,99,3,107,73,3,99,25,75,0,60,127,99,0,0,59,100,1,0,89,99,100,0,127,100,0,0,114,75,100,0,127,99,0,0,102,99,99,1,107,75,1,99,127,100,0,0,102,100,100,2,107,75,2,100,127,99,0,0,102,99,99,3,107,75,3,99,137,98,0,0,139,0,0,0,140,10,101,0,0,0,0,0,1,97,0,0,136,99,0,0,0,98,99,0,136,99,0,0,1,100,144,1,3,99,99,100,137,99,0,0,130,99,0,0,136,100,0,0,49,99,99,100,72,74,2,0,135,99,0,0,1,99,240,0,3,83,98,99,1,99,228,0,3,12,98,99,1,99,216,0,3,89,98,99,1,99,204,0,3,85,98,99,1,99,192,0,3,15,98,99,1,99,180,0,3,96,98,99,1,99,168,0,3,84,98,99,1,99,156,0,3,14,98,99,1,99,144,0,3,92,98,99,1,99,132,0,3,91,98,99,25,88,98,120,25,13,98,108,25,87,98,96,25,94,98,84,25,11,98,72,25,10,98,60,25,82,98,48,25,80,98,36,1,99,128,1,3,81,98,99,1,99,116,1,3,79,98,99,1,99,104,1,3,93,98,99,1,99,92,1,3,86,98,99,1,99,80,1,3,78,98,99,1,99,68,1,3,18,98,99,1,99,56,1,3,90,98,99,1,99,44,1,3,19,98,99,1,99,32,1,3,95,98,99,1,99,20,1,3,20,98,99,1,99,8,1,3,21,98,99,1,99,252,0,3,22,98,99,58,16,1,0,58,17,2,0,58,28,3,0,58,39,4,0,58,50,5,0,58,61,6,0,58,72,7,0,58,76,8,0,58,77,9,0,58,23,16,0,127,99,0,0,89,99,23,0,127,99,0,0,114,81,99,0,127,100,0,0,102,100,100,1,107,81,1,100,127,99,0,0,102,99,99,2,107,81,2,99,127,100,0,0,102,100,100,3,107,81,3,100,25,24,81,4,58,25,17,0,127,100,0,0,89,100,25,0,127,100,0,0,114,24,100,0,127,99,0,0,102,99,99,1,107,24,1,99,127,100,0,0,102,100,100,2,107,24,2,100,127,99,0,0,102,99,99,3,107,24,3,99,25,26,81,8,58,27,28,0,127,99,0,0,89,99,27,0,127,99,0,0,114,26,99,0,127,100,0,0,102,100,100,1,107,26,1,100,127,99,0,0,102,99,99,2,107,26,2,99,127,100,0,0,102,100,100,3,107,26,3,100,58,29,39,0,127,100,0,0,89,100,29,0,127,100,0,0,114,79,100,0,127,99,0,0,102,99,99,1,107,79,1,99,127,100,0,0,102,100,100,2,107,79,2,100,127,99,0,0,102,99,99,3,107,79,3,99,25,30,79,4,58,31,50,0,127,99,0,0,89,99,31,0,127,99,0,0,114,30,99,0,127,100,0,0,102,100,100,1,107,30,1,100,127,99,0,0,102,99,99,2,107,30,2,99,127,100,0,0,102,100,100,3,107,30,3,100,25,32,79,8,58,33,61,0,127,100,0,0,89,100,33,0,127,100,0,0,114,32,100,0,127,99,0,0,102,99,99,1,107,32,1,99,127,100,0,0,102,100,100,2,107,32,2,100,127,99,0,0,102,99,99,3,107,32,3,99,58,34,72,0,127,99,0,0,89,99,34,0,127,99,0,0,114,93,99,0,127,100,0,0,102,100,100,1,107,93,1,100,127,99,0,0,102,99,99,2,107,93,2,99,127,100,0,0,102,100,100,3,107,93,3,100,25,35,93,4,58,36,76,0,127,100,0,0,89,100,36,0,127,100,0,0,114,35,100,0,127,99,0,0,102,99,99,1,107,35,1,99,127,100,0,0,102,100,100,2,107,35,2,100,127,99,0,0,102,99,99,3,107,35,3,99,25,37,93,8,58,38,77,0,127,99,0,0,89,99,38,0,127,99,0,0,114,37,99,0,127,100,0,0,102,100,100,1,107,37,1,100,127,99,0,0,102,99,99,2,107,37,2,99,127,100,0,0,102,100,100,3,107,37,3,100,82,100,79,0,85,80,100,0,106,99,79,4,109,80,4,99,106,100,79,8,109,80,8,100,134,100,0,0,184,168,4,0,18,80,0,0,82,100,81,0,85,82,100,0,106,99,81,4,109,82,4,99,106,100,81,8,109,82,8,100,82,100,18,0,85,10,100,0,106,99,18,4,109,10,4,99,106,100,18,8,109,10,8,100,134,100,0,0,52,32,4,0,78,82,10,0,82,100,78,0,85,11,100,0,106,99,78,4,109,11,4,99,106,100,78,8,109,11,8,100,134,100,0,0,180,162,5,0,86,11,0,0,82,100,93,0,85,94,100,0,106,99,93,4,109,94,4,99,106,100,93,8,109,94,8,100,82,100,86,0,85,87,100,0,106,99,86,4,109,87,4,99,106,100,86,8,109,87,8,100,134,100,0,0,176,169,3,0,19,94,87,0,82,100,19,0,85,13,100,0,106,99,19,4,109,13,4,99,106,100,19,8,109,13,8,100,134,100,0,0,180,162,5,0,90,13,0,0,82,100,86,0,85,88,100,0,106,99,86,4,109,88,4,99,106,100,86,8,109,88,8,100,82,100,90,0,85,91,100,0,106,99,90,4,109,91,4,99,106,100,90,8,109,91,8,100,134,100,0,0,176,169,3,0,95,88,91,0,127,100,0,0,114,100,90,0,127,100,0,0,102,99,90,1,107,100,1,99,127,99,0,0,102,100,90,2,107,99,2,100,127,100,0,0,102,99,90,3,107,100,3,99,127,99,0,0,88,40,99,0,127,99,0,0,89,99,40,0,127,99,0,0,114,0,99,0,127,100,0,0,102,100,100,1,107,0,1,100,127,99,0,0,102,99,99,2,107,0,2,99,127,100,0,0,102,100,100,3,107,0,3,100,25,41,0,4,127,100,0,0,114,100,95,0,127,100,0,0,102,99,95,1,107,100,1,99,127,99,0,0,102,100,95,2,107,99,2,100,127,100,0,0,102,99,95,3,107,100,3,99,127,99,0,0,88,42,99,0,127,99,0,0,89,99,42,0,127,99,0,0,114,41,99,0,127,100,0,0,102,100,100,1,107,41,1,100,127,99,0,0,102,99,99,2,107,41,2,99,127,100,0,0,102,100,100,3,107,41,3,100,25,43,0,8,127,100,0,0,114,100,86,0,127,100,0,0,102,99,86,1,107,100,1,99,127,99,0,0,102,100,86,2,107,99,2,100,127,100,0,0,102,99,86,3,107,100,3,99,127,99,0,0,88,44,99,0,127,99,0,0,89,99,44,0,127,99,0,0,114,43,99,0,127,100,0,0,102,100,100,1,107,43,1,100,127,99,0,0,102,99,99,2,107,43,2,99,127,100,0,0,102,100,100,3,107,43,3,100,25,45,0,12,127,100,0,0,59,99,0,0,89,100,99,0,127,99,0,0,114,45,99,0,127,100,0,0,102,100,100,1,107,45,1,100,127,99,0,0,102,99,99,2,107,45,2,99,127,100,0,0,102,100,100,3,107,45,3,100,25,46,0,16,25,47,90,4,127,100,0,0,114,100,47,0,127,100,0,0,102,99,47,1,107,100,1,99,127,99,0,0,102,100,47,2,107,99,2,100,127,100,0,0,102,99,47,3,107,100,3,99,127,99,0,0,88,48,99,0,127,99,0,0,89,99,48,0,127,99,0,0,114,46,99,0,127,100,0,0,102,100,100,1,107,46,1,100,127,99,0,0,102,99,99,2,107,46,2,99,127,100,0,0,102,100,100,3,107,46,3,100,25,49,0,20,25,51,95,4,127,100,0,0,114,100,51,0,127,100,0,0,102,99,51,1,107,100,1,99,127,99,0,0,102,100,51,2,107,99,2,100,127,100,0,0,102,99,51,3,107,100,3,99,127,99,0,0,88,52,99,0,127,99,0,0,89,99,52,0,127,99,0,0,114,49,99,0,127,100,0,0,102,100,100,1,107,49,1,100,127,99,0,0,102,99,99,2,107,49,2,99,127,100,0,0,102,100,100,3,107,49,3,100,25,53,0,24,25,54,86,4,127,100,0,0,114,100,54,0,127,100,0,0,102,99,54,1,107,100,1,99,127,99,0,0,102,100,54,2,107,99,2,100,127,100,0,0,102,99,54,3,107,100,3,99,127,99,0,0,88,55,99,0,127,99,0,0,89,99,55,0,127,99,0,0,114,53,99,0,127,100,0,0,102,100,100,1,107,53,1,100,127,99,0,0,102,99,99,2,107,53,2,99,127,100,0,0,102,100,100,3,107,53,3,100,25,56,0,28,127,100,0,0,59,99,0,0,89,100,99,0,127,99,0,0,114,56,99,0,127,100,0,0,102,100,100,1,107,56,1,100,127,99,0,0,102,99,99,2,107,56,2,99,127,100,0,0,102,100,100,3,107,56,3,100,25,57,0,32,25,58,90,8,127,100,0,0,114,100,58,0,127,100,0,0,102,99,58,1,107,100,1,99,127,99,0,0,102,100,58,2,107,99,2,100,127,100,0,0,102,99,58,3,107,100,3,99,127,99,0,0,88,59,99,0,127,99,0,0,89,99,59,0,127,99,0,0,114,57,99,0,127,100,0,0,102,100,100,1,107,57,1,100,127,99,0,0,102,99,99,2,107,57,2,99,127,100,0,0,102,100,100,3,107,57,3,100,25,60,0,36,25,62,95,8,127,100,0,0,114,100,62,0,127,100,0,0,102,99,62,1,107,100,1,99,127,99,0,0,102,100,62,2,107,99,2,100,127,100,0,0,102,99,62,3,107,100,3,99,127,99,0,0,88,63,99,0,127,99,0,0,89,99,63,0,127,99,0,0,114,60,99,0,127,100,0,0,102,100,100,1,107,60,1,100,127,99,0,0,102,99,99,2,107,60,2,99,127,100,0,0,102,100,100,3,107,60,3,100,25,64,0,40,25,65,86,8,127,100,0,0,114,100,65,0,127,100,0,0,102,99,65,1,107,100,1,99,127,99,0,0,102,100,65,2,107,99,2,100,127,100,0,0,102,99,65,3,107,100,3,99,127,99,0,0,88,66,99,0,127,99,0,0,89,99,66,0,127,99,0,0,114,64,99,0,127,100,0,0,102,100,100,1,107,64,1,100,127,99,0,0,102,99,99,2,107,64,2,99,127,100,0,0,102,100,100,3,107,64,3,100,25,67,0,44,127,100,0,0,59,99,0,0,89,100,99,0,127,99,0,0,114,67,99,0,127,100,0,0,102,100,100,1,107,67,1,100,127,99,0,0,102,99,99,2,107,67,2,99,127,100,0,0,102,100,100,3,107,67,3,100,25,68,0,48,82,100,90,0,85,92,100,0,106,99,90,4,109,92,4,99,106,100,90,8,109,92,8,100,134,100,0,0,184,168,4,0,20,92,0,0,82,100,20,0,85,14,100,0,106,99,20,4,109,14,4,99,106,100,20,8,109,14,8,100,82,100,81,0,85,84,100,0,106,99,81,4,109,84,4,99,106,100,81,8,109,84,8,100,134,69,0,0,216,165,4,0,14,84,0,0,127,100,0,0,89,100,69,0,127,100,0,0,114,68,100,0,127,99,0,0,102,99,99,1,107,68,1,99,127,100,0,0,102,100,100,2,107,68,2,100,127,99,0,0,102,99,99,3,107,68,3,99,25,70,0,52,82,99,95,0,85,96,99,0,106,100,95,4,109,96,4,100,106,99,95,8,109,96,8,99,134,99,0,0,184,168,4,0,21,96,0,0,82,99,21,0,85,15,99,0,106,100,21,4,109,15,4,100,106,99,21,8,109,15,8,99,82,99,81,0,85,85,99,0,106,100,81,4,109,85,4,100,106,99,81,8,109,85,8,99,134,71,0,0,216,165,4,0,15,85,0,0,127,99,0,0,89,99,71,0,127,99,0,0,114,70,99,0,127,100,0,0,102,100,100,1,107,70,1,100,127,99,0,0,102,99,99,2,107,70,2,99,127,100,0,0,102,100,100,3,107,70,3,100,25,73,0,56,82,100,86,0,85,89,100,0,106,99,86,4,109,89,4,99,106,100,86,8,109,89,8,100,134,100,0,0,184,168,4,0,22,89,0,0,82,100,22,0,85,12,100,0,106,99,22,4,109,12,4,99,106,100,22,8,109,12,8,100,82,100,81,0,85,83,100,0,106,99,81,4,109,83,4,99,106,100,81,8,109,83,8,100,134,74,0,0,216,165,4,0,12,83,0,0,127,100,0,0,89,100,74,0,127,100,0,0,114,73,100,0,127,99,0,0,102,99,99,1,107,73,1,99,127,100,0,0,102,100,100,2,107,73,2,100,127,99,0,0,102,99,99,3,107,73,3,99,25,75,0,60,127,99,0,0,59,100,1,0,89,99,100,0,127,100,0,0,114,75,100,0,127,99,0,0,102,99,99,1,107,75,1,99,127,100,0,0,102,100,100,2,107,75,2,100,127,99,0,0,102,99,99,3,107,75,3,99,137,98,0,0,139,0,0,0,140,1,137,0,0,0,0,0,2,130,0,0,199,31,0,0,2,131,0,0,185,31,0,0,2,132,0,0,190,31,0,0,1,128,0,0,136,133,0,0,0,129,133,0,136,133,0,0,25,133,133,112,137,133,0,0,130,133,0,0,136,134,0,0,49,133,133,134,88,85,2,0,135,133,0,0,78,89,0,0,1,133,255,0,19,133,89,133,1,135,0,0,1,134,21,0,138,133,135,134,216,85,2,0,0,86,2,0,60,86,2,0,160,86,2,0,164,86,2,0,168,86,2,0,172,86,2,0,232,86,2,0,28,87,2,0,80,87,2,0,236,87,2,0,16,88,2,0,52,88,2,0,16,89,2,0,20,90,2,0,24,90,2,0,28,90,2,0,32,90,2,0,252,90,2,0,212,91,2,0,172,92,2,0,1,1,0,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,6,2,1,134,207,31,1,135,4,0,134,15,0,0,240,9,6,0,134,135,0,0,0,1,15,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,252,1,1,135,0,0,134,21,0,0,148,94,6,0,135,0,0,0,106,48,0,8,25,135,0,8,106,62,135,4,134,135,0,0,40,151,5,0,21,48,62,0,0,1,21,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,237,1,1,135,0,0,134,92,0,0,148,94,6,0,135,0,0,0,102,93,0,8,41,135,93,24,42,135,135,24,33,135,135,0,121,135,7,0,1,134,212,31,1,136,4,0,134,135,0,0,128,39,6,0,92,134,136,0,119,0,6,0,1,136,217,31,1,134,5,0,134,135,0,0,128,39,6,0,92,136,134,0,0,1,92,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,212,1,119,0,216,255,119,0,215,255,119,0,214,255,1,135,0,0,134,71,0,0,148,94,6,0,135,0,0,0,106,90,0,8,25,135,0,8,106,91,135,4,134,135,0,0,148,149,5,0,71,90,91,0,0,1,71,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,194,1,1,135,0,0,134,96,0,0,148,94,6,0,135,0,0,0,110,97,0,8,134,135,0,0,208,241,5,0,96,97,0,0,0,1,96,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,181,1,1,135,0,0,134,94,0,0,148,94,6,0,135,0,0,0,112,95,0,8,134,135,0,0,196,236,5,0,94,95,0,0,0,1,94,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,168,1,1,135,0,0,134,98,0,0,148,94,6,0,135,0,0,0,1,134,1,0,134,135,0,0,128,39,6,0,98,131,134,0,1,135,0,0,134,99,0,0,148,94,6,0,135,0,0,0,106,100,0,8,134,135,0,0,40,14,6,0,99,100,0,0,1,134,182,31,134,135,0,0,96,157,5,0,99,131,134,0,1,134,187,31,134,135,0,0,96,157,5,0,99,132,134,0,134,135,0,0,40,14,6,0,98,99,0,0,134,135,0,0,148,105,6,0,99,0,0,0,1,134,1,0,134,135,0,0,128,39,6,0,98,131,134,0,0,1,98,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,129,1,106,102,0,8,134,107,0,0,36,87,4,0,102,0,0,0,0,1,107,0], eb + 143360);
  HEAPU8.set([0,83,1,0,137,129,0,0,139,83,0,0,119,0,120,1,106,5,0,8,134,11,0,0,232,208,4,0,5,0,0,0,0,1,11,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,111,1,1,135,0,0,134,101,0,0,148,94,6,0,135,0,0,0,1,134,203,31,1,136,1,0,134,135,0,0,128,39,6,0,101,134,136,0,1,122,0,0,106,103,0,8,106,104,103,12,0,116,104,0,0,105,116,0,1,135,0,0,46,135,105,135,140,88,2,0,0,106,116,0,106,108,0,8,106,109,108,8,16,84,106,109,119,0,2,0,1,84,0,0,120,84,2,0,119,0,21,0,0,110,116,0,82,111,110,0,106,112,110,4,134,135,0,0,40,151,5,0,101,111,112,0,0,113,122,0,25,122,113,1,0,114,122,0,106,115,0,8,82,2,115,0,46,135,114,2,220,88,2,0,1,136,1,0,134,135,0,0,128,39,6,0,101,130,136,0,0,3,116,0,25,116,3,8,119,0,225,255,1,136,205,31,1,134,1,0,134,135,0,0,128,39,6,0,101,136,134,0,0,1,101,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,56,1,1,135,0,0,134,23,0,0,148,94,6,0,135,0,0,0,1,134,203,31,1,136,1,0,134,135,0,0,128,39,6,0,23,134,136,0,1,123,0,0,106,24,0,8,106,25,24,12,0,117,25,0,0,26,117,0,1,135,0,0,53,135,26,135,88,89,2,0,119,0,38,0,0,27,117,0,106,28,0,8,106,29,28,8,55,135,27,29,112,89,2,0,119,0,32,0,0,30,117,0,78,31,30,0,41,135,31,24,42,135,135,24,33,135,135,0,121,135,7,0,1,136,212,31,1,134,4,0,134,135,0,0,128,39,6,0,23,136,134,0,119,0,6,0,1,134,217,31,1,136,5,0,134,135,0,0,128,39,6,0,23,134,136,0,0,32,123,0,25,123,32,1,0,33,123,0,106,34,0,8,82,35,34,0,46,135,33,35,224,89,2,0,1,136,1,0,134,135,0,0,128,39,6,0,23,130,136,0,0,36,117,0,25,117,36,8,119,0,215,255,1,136,205,31,1,134,1,0,134,135,0,0,128,39,6,0,23,136,134,0,0,1,23,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,247,0,119,0,136,255,119,0,135,255,119,0,134,255,1,135,0,0,134,4,0,0,148,94,6,0,135,0,0,0,1,134,203,31,1,136,1,0,134,135,0,0,128,39,6,0,4,134,136,0,1,127,0,0,106,6,0,8,106,7,6,12,0,121,7,0,0,8,121,0,1,135,0,0,46,135,8,135,120,90,2,0,0,9,121,0,106,10,0,8,106,12,10,8,16,85,9,12,119,0,2,0,1,85,0,0,120,85,2,0,119,0,21,0,0,13,121,0,82,14,13,0,106,16,13,4,134,135,0,0,148,149,5,0,4,14,16,0,0,17,127,0,25,127,17,1,0,18,127,0,106,19,0,8,82,20,19,0,46,135,18,20,200,90,2,0,1,136,1,0,134,135,0,0,128,39,6,0,4,130,136,0,0,22,121,0,25,121,22,8,119,0,225,255,1,136,205,31,1,134,1,0,134,135,0,0,128,39,6,0,4,136,134,0,0,1,4,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,189,0,1,135,0,0,134,52,0,0,148,94,6,0,135,0,0,0,1,134,203,31,1,136,1,0,134,135,0,0,128,39,6,0,52,134,136,0,1,125,0,0,106,53,0,8,106,54,53,12,0,119,54,0,0,55,119,0,1,135,0,0,46,135,55,135,84,91,2,0,0,56,119,0,106,57,0,8,106,58,57,8,16,87,56,58,119,0,2,0,1,87,0,0,120,87,2,0,119,0,20,0,0,59,119,0,86,60,59,0,134,135,0,0,208,241,5,0,52,60,0,0,0,61,125,0,25,125,61,1,0,63,125,0,106,64,0,8,82,65,64,0,46,135,63,65,160,91,2,0,1,136,1,0,134,135,0,0,128,39,6,0,52,130,136,0,0,66,119,0,25,119,66,8,119,0,226,255,1,136,205,31,1,134,1,0,134,135,0,0,128,39,6,0,52,136,134,0,0,1,52,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,135,0,1,135,0,0,134,37,0,0,148,94,6,0,135,0,0,0,1,134,203,31,1,136,1,0,134,135,0,0,128,39,6,0,37,134,136,0,1,124,0,0,106,38,0,8,106,39,38,12,0,118,39,0,0,40,118,0,1,135,0,0,46,135,40,135,44,92,2,0,0,41,118,0,106,42,0,8,106,43,42,8,16,86,41,43,119,0,2,0,1,86,0,0,120,86,2,0,119,0,20,0,0,44,118,0,88,45,44,0,134,135,0,0,196,236,5,0,37,45,0,0,0,46,124,0,25,124,46,1,0,47,124,0,106,49,0,8,82,50,49,0,46,135,47,50,120,92,2,0,1,136,1,0,134,135,0,0,128,39,6,0,37,130,136,0,0,51,118,0,25,118,51,8,119,0,226,255,1,136,205,31,1,134,1,0,134,135,0,0,128,39,6,0,37,136,134,0,0,1,37,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,81,0,1,135,0,0,134,67,0,0,148,94,6,0,135,0,0,0,1,134,203,31,1,136,1,0,134,135,0,0,128,39,6,0,67,134,136,0,1,126,0,0,106,68,0,8,106,69,68,12,0,120,69,0,0,70,120,0,1,135,0,0,46,135,70,135,4,93,2,0,0,72,120,0,106,73,0,8,106,74,73,8,16,88,72,74,119,0,2,0,1,88,0,0,120,88,2,0,119,0,46,0,1,136,1,0,134,135,0,0,128,39,6,0,67,131,136,0,1,135,0,0,134,75,0,0,148,94,6,0,135,0,0,0,0,76,120,0,82,77,76,0,134,135,0,0,40,14,6,0,75,77,0,0,1,136,182,31,134,135,0,0,96,157,5,0,75,131,136,0,1,136,187,31,134,135,0,0,96,157,5,0,75,132,136,0,134,135,0,0,40,14,6,0,67,75,0,0,134,135,0,0,148,105,6,0,75,0,0,0,1,136,1,0,134,135,0,0,128,39,6,0,67,131,136,0,0,78,126,0,25,126,78,1,0,79,126,0,106,80,0,8,82,81,80,0,46,135,79,81,184,93,2,0,1,136,1,0,134,135,0,0,128,39,6,0,67,130,136,0,0,82,120,0,25,120,82,4,119,0,200,255,1,136,205,31,1,134,1,0,134,135,0,0,128,39,6,0,67,136,134,0,0,1,67,0,0,83,1,0,137,129,0,0,139,83,0,0,119,0,1,0,1,133,0,0,139,133,0,0,140,3,103,0,0,0,0,0,1,99,0,0,136,101,0,0,0,100,101,0,127,101,0,0,114,101,1,0,127,101,0,0,102,102,1,1,107,101,1,102,127,102,0,0,102,101,1,2,107,102,2,101,127,101,0,0,102,102,1,3,107,101,3,102,127,102,0,0,88,3,102,0,127,102,0,0,89,102,3,0,127,102,0,0,114,0,102,0,127,101,0,0,102,101,101,1,107,0,1,101,127,102,0,0,102,102,102,2,107,0,2,102,127,101,0,0,102,101,101,3,107,0,3,101,25,4,0,4,25,15,1,4,127,101,0,0,114,101,15,0,127,101,0,0,102,102,15,1,107,101,1,102,127,102,0,0,102,101,15,2,107,102,2,101,127,101,0,0,102,102,15,3,107,101,3,102,127,102,0,0,88,26,102,0,127,102,0,0,89,102,26,0,127,102,0,0,114,4,102,0,127,101,0,0,102,101,101,1,107,4,1,101,127,102,0,0,102,102,102,2,107,4,2,102,127,101,0,0,102,101,101,3,107,4,3,101,25,37,0,8,25,48,1,8,127,101,0,0,114,101,48,0,127,101,0,0,102,102,48,1,107,101,1,102,127,102,0,0,102,101,48,2,107,102,2,101,127,101,0,0,102,102,48,3,107,101,3,102,127,102,0,0,88,59,102,0,127,102,0,0,89,102,59,0,127,102,0,0,114,37,102,0,127,101,0,0,102,101,101,1,107,37,1,101,127,102,0,0,102,102,102,2,107,37,2,102,127,101,0,0,102,101,101,3,107,37,3,101,25,70,0,12,25,81,1,12,127,101,0,0,114,101,81,0,127,101,0,0,102,102,81,1,107,101,1,102,127,102,0,0,102,101,81,2,107,102,2,101,127,101,0,0,102,102,81,3,107,101,3,102,127,102,0,0,88,92,102,0,127,102,0,0,89,102,92,0,127,102,0,0,114,70,102,0,127,101,0,0,102,101,101,1,107,70,1,101,127,102,0,0,102,102,102,2,107,70,2,102,127,101,0,0,102,101,101,3,107,70,3,101,25,5,0,16,25,6,1,16,127,101,0,0,114,101,6,0,127,101,0,0,102,102,6,1,107,101,1,102,127,102,0,0,102,101,6,2,107,102,2,101,127,101,0,0,102,102,6,3,107,101,3,102,127,102,0,0,88,7,102,0,127,102,0,0,89,102,7,0,127,102,0,0,114,5,102,0,127,101,0,0,102,101,101,1,107,5,1,101,127,102,0,0,102,102,102,2,107,5,2,102,127,101,0,0,102,101,101,3,107,5,3,101,25,8,0,20,25,9,1,20,127,101,0,0,114,101,9,0,127,101,0,0,102,102,9,1,107,101,1,102,127,102,0,0,102,101,9,2,107,102,2,101,127,101,0,0,102,102,9,3,107,101,3,102,127,102,0,0,88,10,102,0,127,102,0,0,89,102,10,0,127,102,0,0,114,8,102,0,127,101,0,0,102,101,101,1,107,8,1,101,127,102,0,0,102,102,102,2,107,8,2,102,127,101,0,0,102,101,101,3,107,8,3,101,25,11,0,24,25,12,1,24,127,101,0,0,114,101,12,0,127,101,0,0,102,102,12,1,107,101,1,102,127,102,0,0,102,101,12,2,107,102,2,101,127,101,0,0,102,102,12,3,107,101,3,102,127,102,0,0,88,13,102,0,127,102,0,0,89,102,13,0,127,102,0,0,114,11,102,0,127,101,0,0,102,101,101,1,107,11,1,101,127,102,0,0,102,102,102,2,107,11,2,102,127,101,0,0,102,101,101,3,107,11,3,101,25,14,0,28,25,16,1,28,127,101,0,0,114,101,16,0,127,101,0,0,102,102,16,1,107,101,1,102,127,102,0,0,102,101,16,2,107,102,2,101,127,101,0,0,102,102,16,3,107,101,3,102,127,102,0,0,88,17,102,0,127,102,0,0,89,102,17,0,127,102,0,0,114,14,102,0,127,101,0,0,102,101,101,1,107,14,1,101,127,102,0,0,102,102,102,2,107,14,2,102,127,101,0,0,102,101,101,3,107,14,3,101,25,18,0,32,25,19,1,32,127,101,0,0,114,101,19,0,127,101,0,0,102,102,19,1,107,101,1,102,127,102,0,0,102,101,19,2,107,102,2,101,127,101,0,0,102,102,19,3,107,101,3,102,127,102,0,0,88,20,102,0,127,102,0,0,89,102,20,0,127,102,0,0,114,18,102,0,127,101,0,0,102,101,101,1,107,18,1,101,127,102,0,0,102,102,102,2,107,18,2,102,127,101,0,0,102,101,101,3,107,18,3,101,25,21,0,36,25,22,1,36,127,101,0,0,114,101,22,0,127,101,0,0,102,102,22,1,107,101,1,102,127,102,0,0,102,101,22,2,107,102,2,101,127,101,0,0,102,102,22,3,107,101,3,102,127,102,0,0,88,23,102,0,127,102,0,0,89,102,23,0,127,102,0,0,114,21,102,0,127,101,0,0,102,101,101,1,107,21,1,101,127,102,0,0,102,102,102,2,107,21,2,102,127,101,0,0,102,101,101,3,107,21,3,101,25,24,0,40,25,25,1,40,127,101,0,0,114,101,25,0,127,101,0,0,102,102,25,1,107,101,1,102,127,102,0,0,102,101,25,2,107,102,2,101,127,101,0,0,102,102,25,3,107,101,3,102,127,102,0,0,88,27,102,0,127,102,0,0,89,102,27,0,127,102,0,0,114,24,102,0,127,101,0,0,102,101,101,1,107,24,1,101,127,102,0,0,102,102,102,2,107,24,2,102,127,101,0,0,102,101,101,3,107,24,3,101,25,28,0,44,25,29,1,44,127,101,0,0,114,101,29,0,127,101,0,0,102,102,29,1,107,101,1,102,127,102,0,0,102,101,29,2,107,102,2,101,127,101,0,0,102,102,29,3,107,101,3,102,127,102,0,0,88,30,102,0,127,102,0,0,89,102,30,0,127,102,0,0,114,28,102,0,127,101,0,0,102,101,101,1,107,28,1,101,127,102,0,0,102,102,102,2,107,28,2,102,127,101,0,0,102,101,101,3,107,28,3,101,25,31,0,48,127,101,0,0,114,101,1,0,127,101,0,0,102,102,1,1,107,101,1,102,127,102,0,0,102,101,1,2,107,102,2,101,127,101,0,0,102,102,1,3,107,101,3,102,127,102,0,0,88,32,102,0,127,102,0,0,114,102,2,0,127,102,0,0,102,101,2,1,107,102,1,101,127,101,0,0,102,102,2,2,107,101,2,102,127,102,0,0,102,101,2,3,107,102,3,101,127,101,0,0,88,33,101,0,65,34,32,33,25,35,1,16,127,101,0,0,114,101,35,0,127,101,0,0,102,102,35,1,107,101,1,102,127,102,0,0,102,101,35,2,107,102,2,101,127,101,0,0,102,102,35,3,107,101,3,102,127,102,0,0,88,36,102,0,25,38,2,4,127,102,0,0,114,102,38,0,127,102,0,0,102,101,38,1,107,102,1,101,127,101,0,0,102,102,38,2,107,101,2,102,127,102,0,0,102,101,38,3,107,102,3,101,127,101,0,0,88,39,101,0,65,40,36,39,63,41,34,40,25,42,1,32,127,101,0,0,114,101,42,0,127,101,0,0,102,102,42,1,107,101,1,102,127,102,0,0,102,101,42,2,107,102,2,101,127,101,0,0,102,102,42,3,107,101,3,102,127,102,0,0,88,43,102,0,25,44,2,8,127,102,0,0,114,102,44,0,127,102,0,0,102,101,44,1,107,102,1,101,127,101,0,0,102,102,44,2,107,101,2,102,127,102,0,0,102,101,44,3,107,102,3,101,127,101,0,0,88,45,101,0,65,46,43,45,63,47,41,46,25,49,1,48,127,101,0,0,114,101,49,0,127,101,0,0,102,102,49,1,107,101,1,102,127,102,0,0,102,101,49,2,107,102,2,101,127,101,0,0,102,102,49,3,107,101,3,102,127,102,0,0,88,50,102,0,63,51,47,50,127,102,0,0,89,102,51,0,127,102,0,0,114,31,102,0,127,101,0,0,102,101,101,1,107,31,1,101,127,102,0,0,102,102,102,2,107,31,2,102,127,101,0,0,102,101,101,3,107,31,3,101,25,52,0,52,25,53,1,4,127,101,0,0,114,101,53,0,127,101,0,0,102,102,53,1,107,101,1,102,127,102,0,0,102,101,53,2,107,102,2,101,127,101,0,0,102,102,53,3,107,101,3,102,127,102,0,0,88,54,102,0,127,102,0,0,114,102,2,0,127,102,0,0,102,101,2,1,107,102,1,101,127,101,0,0,102,102,2,2,107,101,2,102,127,102,0,0,102,101,2,3,107,102,3,101,127,101,0,0,88,55,101,0,65,56,54,55,25,57,1,20,127,101,0,0,114,101,57,0,127,101,0,0,102,102,57,1,107,101,1,102,127,102,0,0,102,101,57,2,107,102,2,101,127,101,0,0,102,102,57,3,107,101,3,102,127,102,0,0,88,58,102,0,25,60,2,4,127,102,0,0,114,102,60,0,127,102,0,0,102,101,60,1,107,102,1,101,127,101,0,0,102,102,60,2,107,101,2,102,127,102,0,0,102,101,60,3,107,102,3,101,127,101,0,0,88,61,101,0,65,62,58,61,63,63,56,62,25,64,1,36,127,101,0,0,114,101,64,0,127,101,0,0,102,102,64,1,107,101,1,102,127,102,0,0,102,101,64,2,107,102,2,101,127,101,0,0,102,102,64,3,107,101,3,102,127,102,0,0,88,65,102,0,25,66,2,8,127,102,0,0,114,102,66,0,127,102,0,0,102,101,66,1,107,102,1,101,127,101,0,0,102,102,66,2,107,101,2,102,127,102,0,0,102,101,66,3,107,102,3,101,127,101,0,0,88,67,101,0,65,68,65,67,63,69,63,68,25,71,1,52,127,101,0,0,114,101,71,0,127,101,0,0,102,102,71,1,107,101,1,102,127,102,0,0,102,101,71,2,107,102,2,101,127,101,0,0,102,102,71,3,107,101,3,102,127,102,0,0,88,72,102,0,63,73,69,72,127,102,0,0,89,102,73,0,127,102,0,0,114,52,102,0,127,101,0,0,102,101,101,1,107,52,1,101,127,102,0,0,102,102,102,2,107,52,2,102,127,101,0,0,102,101,101,3,107,52,3,101,25,74,0,56,25,75,1,8,127,101,0,0,114,101,75,0,127,101,0,0,102,102,75,1,107,101,1,102,127,102,0,0,102,101,75,2,107,102,2,101,127,101,0,0,102,102,75,3,107,101,3,102,127,102,0,0,88,76,102,0,127,102,0,0,114,102,2,0,127,102,0,0,102,101,2,1,107,102,1,101,127,101,0,0,102,102,2,2,107,101,2,102,127,102,0,0,102,101,2,3,107,102,3,101,127,101,0,0,88,77,101,0,65,78,76,77,25,79,1,24,127,101,0,0,114,101,79,0,127,101,0,0,102,102,79,1,107,101,1,102,127,102,0,0,102,101,79,2,107,102,2,101,127,101,0,0,102,102,79,3,107,101,3,102,127,102,0,0,88,80,102,0,25,82,2,4,127,102,0,0,114,102,82,0,127,102,0,0,102,101,82,1,107,102,1,101,127,101,0,0,102,102,82,2,107,101,2,102,127,102,0,0,102,101,82,3,107,102,3,101,127,101,0,0,88,83,101,0,65,84,80,83,63,85,78,84,25,86,1,40,127,101,0,0,114,101,86,0,127,101,0,0,102,102,86,1,107,101,1,102,127,102,0,0,102,101,86,2,107,102,2,101,127,101,0,0,102,102,86,3,107,101,3,102,127,102,0,0,88,87,102,0,25,88,2,8,127,102,0,0,114,102,88,0,127,102,0,0,102,101,88,1,107,102,1,101,127,101,0,0,102,102,88,2,107,101,2,102,127,102,0,0,102,101,88,3,107,102,3,101,127,101,0,0,88,89,101,0,65,90,87,89,63,91,85,90,25,93,1,56,127,101,0,0,114,101,93,0,127,101,0,0,102,102,93,1,107,101,1,102,127,102,0,0,102,101,93,2,107,102,2,101,127,101,0,0,102,102,93,3,107,101,3,102,127,102,0,0,88,94,102,0,63,95,91,94,127,102,0,0,89,102,95,0,127,102,0,0,114,74,102,0,127,101,0,0,102,101,101,1,107,74,1,101,127,102,0,0,102,102,102,2,107,74,2,102,127,101,0,0,102,101,101,3,107,74,3,101,25,96,0,60,25,97,1,60,127,101,0,0,114,101,97,0,127,101,0,0,102,102,97,1,107,101,1,102,127,102,0,0,102,101,97,2,107,102,2,101,127,101,0,0,102,102,97,3,107,101,3,102,127,102,0,0,88,98,102,0,127,102,0,0,89,102,98,0,127,102,0,0,114,96,102,0,127,101,0,0,102,101,101,1,107,96,1,101,127,102,0,0,102,102,102,2,107,96,2,102,127,101,0,0,102,101,101,3,107,96,3,101,139,0,0,0,140,1,97,0,0,0,0,0,2,91,0,0,255,0,0,0,2,92,0,0,144,0,0,0,2,93,0,0,152,0,0,0,1,89,0,0,136,94,0,0,0,90,94,0,136,94,0,0,25,94,94,96,137,94,0,0,130,94,0,0,136,95,0,0,49,94,94,95,120,105,2,0,135,94,0,0,25,94,0,4,134,69,0,0,240,51,6,0,94,0,0,0,33,94,69,0,121,94,3,0,137,90,0,0,139,0,0,0,25,94,0,4,106,1,94,4,26,88,1,32,1,95,0,0,109,90,40,95,25,95,90,40,1,94,0,0,109,95,4,94,59,95,0,0,113,90,32,95,25,95,90,32,59,94,0,0,113,95,4,94,1,94,160,0,106,95,90,32,97,88,94,95,1,95,160,0,3,95,88,95,25,94,90,32,106,94,94,4,109,95,4,94,25,95,90,24,109,90,24,95,25,95,90,24,25,94,90,24,109,95,4,94,25,94,88,16,134,26,0,0,240,51,6,0,94,0,0,0,33,94,26,0,120,94,138,1,25,94,88,16,106,38,94,4,0,87,38,0,1,94,0,0,53,94,38,94,52,106,2,0,119,0,131,1,0,44,87,0,134,94,0,0,160,63,6,0,44,0,0,0,0,49,87,0,25,95,90,24,134,94,0,0,192,43,6,0,49,95,0,0,0,53,87,0,26,86,53,8,106,62,86,40,112,63,62,12,113,90,8,63,106,64,86,40,112,65,64,16,25,94,90,8,113,94,4,65,106,66,86,40,102,67,66,8,19,94,67,91,32,94,94,1,121,94,3,0,112,68,88,56,113,90,8,68,106,70,86,40,102,71,70,9,19,94,71,91,32,94,94,1,121,94,5,0,25,94,88,56,112,72,94,4,25,94,90,8,113,94,4,72,106,73,86,40,127,94,0,0,25,95,73,36,25,95,95,12,114,94,95,0,127,95,0,0,25,94,73,36,25,94,94,12,102,94,94,1,107,95,1,94,127,94,0,0,25,95,73,36,25,95,95,12,102,95,95,2,107,94,2,95,127,95,0,0,25,94,73,36,25,94,94,12,102,94,94,3,107,95,3,94,127,94,0,0,88,74,94,0,106,75,86,40,127,94,0,0,25,95,75,36,25,95,95,4,114,94,95,0,127,95,0,0,25,94,75,36,25,94,94,4,102,94,94,1,107,95,1,94,127,94,0,0,25,95,75,36,25,95,95,4,102,95,95,2,107,94,2,95,127,95,0,0,25,94,75,36,25,94,94,4,102,94,94,3,107,95,3,94,127,94,0,0,88,76,94,0,112,77,90,8,63,95,74,76,64,95,77,95,113,90,8,95,106,78,86,40,127,95,0,0,25,94,78,36,114,95,94,0,127,94,0,0,25,95,78,36,102,95,95,1,107,94,1,95,127,95,0,0,25,94,78,36,102,94,94,2,107,95,2,94,127,94,0,0,25,95,78,36,102,95,95,3,107,94,3,95,127,95,0,0,88,79,95,0,106,80,86,40,127,95,0,0,25,94,80,36,25,94,94,8,114,95,94,0,127,94,0,0,25,95,80,36,25,95,95,8,102,95,95,1,107,94,1,95,127,95,0,0,25,94,80,36,25,94,94,8,102,94,94,2,107,95,2,94,127,94,0,0,25,95,80,36,25,95,95,8,102,95,95,3,107,94,3,95,127,95,0,0,88,81,95,0,25,95,90,8,112,82,95,4,25,95,90,8,63,94,79,81,64,94,82,94,113,95,4,94,82,83,86,0,32,94,83,1,121,94,48,0,106,84,86,40,102,85,84,8,19,94,85,91,32,94,94,2,121,94,19,0,106,2,86,40,112,3,2,16,59,94,0,0,70,94,3,94,121,94,11,0,106,4,86,40,112,5,4,12,106,6,86,40,112,7,6,16,25,94,90,8,112,8,94,4,66,95,5,7,65,95,95,8,113,90,8,95,119,0,4,0,59,94,0,0,113,90,8,94,119,0,1,0,106,9,86,40,102,10,9,9,19,94,10,91,32,94,94,2,121,94,20,0,106,11,86,40,112,12,11,12,59,94,0,0,70,94,12,94,121,94,11,0,106,13,86,40,112,14,13,16,106,15,86,40,112,16,15,12,112,17,90,8,25,94,90,8,66,95,14,16,65,95,95,17,113,94,4,95,119,0,5,0,25,95,90,8,59,94,0,0,113,95,4,94,119,0,1,0,106,95,90,8,109,90,64,95,25,95,90,64,25,94,90,8,106,94,94,4,109,95,4,94,25,95,90,64,134,94,0,0,68,187,5,0,86,95,0,0,106,18,86,44,38,94,18,2,33,94,94,0,121,94,10,0,134,94,0,0,24,152,4,0,86,0,0,0,106,95,86,56,109,90,8,95,25,95,90,8,25,94,86,56,106,94,94,4,109,95,4,94,112,19,90,8,100,20,86,92,112,21,90,40,65,95,19,20,63,95,21,95,113,90,40,95,106,22,86,40,82,23,22,0,106,24,22,4,1,95,0,1,19,95,23,95,33,95,95,0,1,94,0,0,33,94,94,0,20,95,95,94,121,95,16,0,25,95,88,56,112,25,95,4,25,95,90,8,112,27,95,4,3,95,86,92,112,28,95,4,25,95,90,40,59,94,2,0,66,94,25,94,61,96,0,0,0,0,0,63,64,96,28,96,65,96,27,96,63,94,94,96,113,95,4,94,106,29,86,40,82,30,29,0,106,31,29,4,38,94,30,1,33,94,94,0,1,95,0,0,33,95,95,0,20,94,94,95,121,94,8,0,25,94,86,56,112,32,94,4,3,94,86,92,112,33,94,4,25,94,90,40,65,95,32,33,113,94,4,95,106,34,86,40,82,35,34,0,106,36,34,4,38,95,35,4,33,95,95,0,1,94,0,0,33,94,94,0,20,95,95,94,121,95,19,0,25,95,88,56,112,37,95,4,25,95,90,8,112,39,95,4,25,95,90,8,112,40,95,4,3,95,86,92,112,41,95,4,25,95,90,40,59,94,2,0,66,94,39,94,64,94,37,94,61,96,0,0,0,0,0,63,64,96,41,96,65,96,40,96,63,94,94,96,113,95,4,94,106,42,86,40,127,94,0,0,25,95,42,20,25,95,95,12,114,94,95,0,127,95,0,0,25,94,42,20,25,94,94,12,102,94,94,1,107,95,1,94,127,94,0,0,25,95,42,20,25,95,95,12,102,95,95,2,107,94,2,95,127,95,0,0,25,94,42,20,25,94,94,12,102,94,94,3,107,95,3,94,127,94,0,0,88,43,94,0,112,45,90,40,63,95,45,43,113,90,40,95,106,46,86,40,127,95,0,0,25,94,46,20,114,95,94,0,127,94,0,0,25,95,46,20,102,95,95,1,107,94,1,95,127,95,0,0,25,94,46,20,102,94,94,2,107,95,2,94,127,94,0,0,25,95,46,20,102,95,95,3,107,94,3,95,127,95,0,0,88,47,95,0,25,95,90,40,112,48,95,4,25,95,90,40,63,94,48,47,113,95,4,94,94,95,88,93,109,90,72,95,25,95,90,72,3,94,88,93,106,94,94,4,109,95,4,94,106,95,90,40,109,90,80,95,25,95,90,80,25,94,90,40,106,94,94,4,109,95,4,94,25,95,90,72,25,96,90,80,134,94,0,0,156,247,5,0,90,95,96,0,82,96,90,0,109,90,88,96,25,96,90,88,106,94,90,4,109,96,4,94,25,96,90,88,134,94,0,0,196,181,5,0,86,96,0,0,106,50,86,40,127,94,0,0,25,96,50,20,25,96,96,4,114,94,96,0,127,96,0,0,25,94,50,20,25,94,94,4,102,94,94,1,107,96,1,94,127,94,0,0,25,96,50,20,25,96,96,4,102,96,96,2,107,94,2,96,127,96,0,0,25,94,50,20,25,94,94,4,102,94,94,3,107,96,3,94,127,94,0,0,88,51,94,0,112,52,90,40,63,96,52,51,113,90,40,96,112,54,90,8,100,55,86,92,112,56,90,40,59,94,1,0,64,94,94,55,65,94,54,94,63,94,56,94,113,90,40,94,112,57,90,40,1,94,160,0,101,88,94,57,119,0,114,254,25,94,90,24,134,58,0,0,240,51,6,0,94,0,0,0,33,94,58,0,120,94,18,0,25,94,90,24,106,59,94,4,0,87,59,0,1,94,0,0,53,94,59,94,112,112,2,0,119,0,11,0,0,60,87,0,134,94,0,0,160,63,6,0,60,0,0,0,0,61,87,0,25,96,88,16,134,94,0,0,192,43,6,0,61,96,0,0,119,0,234,255,1,96,0,0,109,88,44,96,137,90,0,0,139,0,0,0,140,1,97,0,0,0,0,0,2,91,0,0,255,0,0,0,2,92,0,0,144,0,0,0,2,93,0,0,152,0,0,0,1,89,0,0,136,94,0,0,0,90,94,0,136,94,0,0,25,94,94,96,137,94,0,0,130,94,0,0,136,95,0,0,49,94,94,95,244,112,2,0,135,94,0,0,25,94,0,4,134,69,0,0,128,50,6,0,94,0,0,0,33,94,69,0,121,94,3,0,137,90,0,0,139,0,0,0,25,94,0,4,106,1,94,4,26,88,1,32,1,95,0,0,109,90,40,95,25,95,90,40,1,94,0,0,109,95,4,94,59,95,0,0,113,90,32,95,25,95,90,32,59,94,0,0,113,95,4,94,1,94,160,0,106,95,90,32,97,88,94,95,1,95,160,0,3,95,88,95,25,94,90,32,106,94,94,4,109,95,4,94,25,95,90,24,109,90,24,95,25,95,90,24,25,94,90,24,109,95,4,94,25,94,88,16,134,25,0,0,128,50,6,0,94,0,0,0,33,94,25,0,120,94,138,1,25,94,88,16,106,40,94,4,0,87,40,0,1,94,0,0,53,94,40,94,176,113,2,0,119,0,131,1,0,48,87,0,134,94,0,0,32,62,6,0,48,0,0,0,0,51,87,0,25,95,90,24,134,94,0,0,64,42,6,0,51,95,0,0,0,55,87,0,26,86,55,8,106,62,86,40,112,63,62,12,113,90,8,63,106,64,86,40,112,65,64,16,25,94,90,8,113,94,4,65,106,66,86,40,102,67,66,8,19,94,67,91,32,94,94,1,121,94,3,0,112,68,88,56,113,90,8,68,106,70,86,40,102,71,70,9,19,94,71,91,32,94,94,1,121,94,5,0,25,94,88,56,112,72,94,4,25,94,90,8,113,94,4,72,106,73,86,40,127,94,0,0,25,95,73,36,25,95,95,12,114,94,95,0,127,95,0,0,25,94,73,36,25,94,94,12,102,94,94,1,107,95,1,94,127,94,0,0,25,95,73,36,25,95,95,12,102,95,95,2,107,94,2,95,127,95,0,0,25,94,73,36,25,94,94,12,102,94,94,3,107,95,3,94,127,94,0,0,88,74,94,0,106,75,86,40,127,94,0,0,25,95,75,36,25,95,95,4,114,94,95,0,127,95,0,0,25,94,75,36,25,94,94,4,102,94,94,1,107,95,1,94,127,94,0,0,25,95,75,36,25,95,95,4,102,95,95,2,107,94,2,95,127,95,0,0,25,94,75,36,25,94,94,4,102,94,94,3,107,95,3,94,127,94,0,0,88,76,94,0,112,77,90,8,63,95,74,76,64,95,77,95,113,90,8,95,106,78,86,40,127,95,0,0,25,94,78,36,114,95,94,0,127,94,0,0,25,95,78,36,102,95,95,1,107,94,1,95,127,95,0,0,25,94,78,36,102,94,94,2,107,95,2,94,127,94,0,0,25,95,78,36,102,95,95,3,107,94,3,95,127,95,0,0,88,79,95,0,106,80,86,40,127,95,0,0,25,94,80,36,25,94,94,8,114,95,94,0,127,94,0,0,25,95,80,36,25,95,95,8,102,95,95,1,107,94,1,95,127,95,0,0,25,94,80,36,25,94,94,8,102,94,94,2,107,95,2,94,127,94,0,0,25,95,80,36,25,95,95,8,102,95,95,3,107,94,3,95,127,95,0,0,88,81,95,0,25,95,90,8,112,82,95,4,25,95,90,8,63,94,79,81,64,94,82,94,113,95,4,94,82,83,86,0,32,94,83,1,121,94,48,0,106,84,86,40,102,85,84,8,19,94,85,91,32,94,94,2,121,94,19,0,106,2,86,40,112,3,2,16,59,94,0,0,70,94,3,94,121,94,11,0,106,4,86,40,112,5,4,12,106,6,86,40,112,7,6,16,25,94,90,8,112,8,94,4,66,95,5,7,65,95,95,8,113,90,8,95,119,0,4,0,59,94,0,0,113,90,8,94,119,0,1,0,106,9,86,40,102,10,9,9,19,94,10,91,32,94,94,2,121,94,20,0,106,11,86,40,112,12,11,12,59,94,0,0,70,94,12,94,121,94,11,0,106,13,86,40,112,14,13,16,106,15,86,40,112,16,15,12,112,17,90,8,25,94,90,8,66,95,14,16,65,95,95,17,113,94,4,95,119,0,5,0,25,95,90,8,59,94,0,0,113,95,4,94,119,0,1,0,106,95,90,8,109,90,64,95,25,95,90,64,25,94,90,8,106,94,94,4,109,95,4,94,25,95,90,64,134,94,0,0,68,187,5,0,86,95,0,0,106,18,86,44,38,94,18,2,33,94,94,0,121,94,10,0,134,94,0,0,24,152,4,0,86,0,0,0,106,95,86,56,109,90,8,95,25,95,90,8,25,94,86,56,106,94,94,4,109,95,4,94,25,94,90,8,112,19,94,4,3,94,86,92,112,20,94,4,25,94,90,40,112,21,94,4,25,94,90,40,65,95,19,20,63,95,21,95,113,94,4,95,106,22,86,40,82,23,22,0,106,24,22,4,1,95,0,1,19,95,23,95,33,95,95,0,1,94,0,0,33,94,94,0,20,95,95,94,121,95,12,0,112,26,88,56,112,27,90,8,100,28,86,92,59,94,2,0,66,94,26,94,61,96,0,0,0,0,0,63,64,96,28,96,65,96,27,96,63,94,94,96,113,90,40,94,106,29,86,40,82,30,29,0,106,31,29,4,38,94,30,8,33,94,94,0,1,95,0,0,33,95,95,0,20,94,94,95,121,94,5,0,112,32,86,56,100,33,86,92,65,95,32,33,113,90,40,95,106,34,86,40,82,35,34,0,106,36,34,4,38,95,35,2,33,95,95,0,1,94,0,0,33,94,94,0,20,95,95,94,121,95,14,0,112,37,88,56,112,38,90,8,112,39,90,8,100,41,86,92,59,94,2,0,66,94,38,94,64,94,37,94,61,96,0,0,0,0,0,63,64,96,41,96,65,96,39,96,63,94,94,96,113,90,40,94,106,42,86,40,127,94,0,0,25,95,42,20,114,94,95,0,127,95,0,0,25,94,42,20,102,94,94,1,107,95,1,94,127,94,0,0,25,95,42,20,102,95,95,2,107,94,2,95,127,95,0,0,25,94,42,20,102,94,94,3,107,95,3,94,127,94,0,0,88,43,94,0,25,94,90,40,112,44,94,4,25,94,90,40,63,95,44,43,113,94,4,95,106,45,86,40,127,95,0,0,25,94,45,20,25,94,94,12,114,95,94,0,127,94,0,0,25,95,45,20,25,95,95,12,102,95,95,1,107,94,1,95,127,95,0,0,25,94,45,20,25,94,94,12,102,94,94,2,107,95,2,94,127,94,0,0,25,95,45,20,25,95,95,12,102,95,95,3,107,94,3,95,127,95,0,0,88,46,95,0,112,47,90,40,63,94,47,46,113,90,40,94,94,95,88,93,109,90,72,95,25,95,90,72,3,94,88,93,106,94,94,4,109,95,4,94,106,95,90,40,109,90,80,95,25,95,90,80,25,94,90,40,106,94,94,4,109,95,4,94,25,95,90,72,25,96,90,80,134,94,0,0,88,247,5,0,90,95,96,0,82,96,90,0,109,90,88,96,25,96,90,88,106,94,90,4,109,96,4,94,25,96,90,88,134,94,0,0,196,181,5,0,86,96,0,0,106,49,86,40,127,94,0,0,25,96,49,20,25,96,96,8,114,94,96,0,127,96,0,0,25,94,49,20,25,94,94,8,102,94,94,1,107,96,1,94,127,94,0,0,25,96,49,20,25,96,96,8,102,96,96,2,107,94,2,96,127,96,0,0,25,94,49,20,25,94,94,8,102,94,94,3,107,96,3,94,127,94,0,0,88,50,94,0,25,94,90,40,112,52,94,4,25,94,90,40,63,96,52,50,113,94,4,96,25,96,90,8,112,53,96,4,3,96,86,92,112,54,96,4,25,96,90,40,112,56,96,4,25,96,90,40,59,94,1,0,64,94,94,54,65,94,53,94,63,94,56,94,113,96,4,94,25,94,90,40,112,57,94,4,1,94,160,0,3,94,88,94,113,94,4,57,119,0,114,254,25,94,90,24,134,58,0,0,128,50,6,0,94,0,0,0,33,94,58,0,120,94,18,0,25,94,90,24,106,59,94,4,0,87,59,0,1,94,0,0,53,94,59,94,236,119,2,0,119,0,11,0,0,60,87,0,134,94,0,0,32,62,6,0,60,0,0,0,0,61,87,0,25,96,88,16,134,94,0,0,64,42,6,0,61,96,0,0,119,0,234,255,1,96,0,0,109,88,44,96,137,90,0,0,139,0,0,0,140,4,126,0,0,0,0,0,2,121,0,0,126,30,0,0,2,122,0,0,146,30,0,0,2,123,0,0,137,30,0,0,1,119,0,0,136,124,0,0,0,120,124,0,136,124,0,0,25,124,124,32,137,124,0,0,130,124,0,0,136,125,0,0,49,124,124,125,112,120,2,0,135,124,0,0,1,124,4,0,1,125,1,0,134,90,0,0,224,168,5,0,124,125,0,0,106,103,1,12,1,124,55,30,134,125,0,0,56,9,4,0,103,124,90,0,106,10,90,12,0,118,10,0,0,14,118,0,1,125,0,0,53,125,14,125,180,120,2,0,119,0,239,0,0,24,118,0,106,41,90,8,55,125,24,41,200,120,2,0,119,0,234,0,0,50,118,0,82,57,50,0,106,65,57,4,1,125,57,30,134,72,0,0,208,147,5,0,65,125,0,0,32,125,72,0,121,125,3,0,1,119,6,0,119,0,211,0,0,79,118,0,82,85,79,0,106,86,85,4,1,125,61,30,134,87,0,0,208,147,5,0,86,125,0,0,32,125,87,0,121,125,3,0,1,119,6,0,119,0,200,0,0,92,118,0,82,93,92,0,106,94,93,4,1,125,72,31,134,95,0,0,208,147,5,0,94,125,0,0,32,125,95,0,120,125,185,0,0,96,118,0,82,97,96,0,106,98,97,4,1,125,66,31,134,99,0,0,208,147,5,0,98,125,0,0,32,125,99,0,120,125,176,0,0,104,118,0,82,105,104,0,106,106,105,4,1,125,65,30,134,107,0,0,208,147,5,0,106,125,0,0,32,125,107,0,120,125,160,0,0,108,118,0,82,109,108,0,106,110,109,4,1,125,72,30,134,111,0,0,208,147,5,0,110,125,0,0,32,125,111,0,120,125,151,0,0,115,118,0,82,116,115,0,106,4,116,4,1,125,61,31,134,5,0,0,208,147,5,0,4,125,0,0,32,125,5,0,120,125,135,0,0,6,118,0,82,7,6,0,106,8,7,4,1,125,56,31,134,9,0,0,208,147,5,0,8,125,0,0,32,125,9,0,120,125,126,0,0,15,118,0,82,16,15,0,106,17,16,4,1,125,85,31,134,18,0,0,208,147,5,0,17,125,0,0,32,125,18,0,120,125,109,0,0,19,118,0,82,20,19,0,106,21,20,4,1,125,78,31,134,22,0,0,208,147,5,0,21,125,0,0,32,125,22,0,120,125,100,0,0,27,118,0,82,28,27,0,106,29,28,4,1,125,79,30,134,30,0,0,208,147,5,0,29,125,0,0,32,125,30,0,120,125,84,0,0,31,118,0,82,32,31,0,106,33,32,4,1,125,87,30,134,34,0,0,208,147,5,0,33,125,0,0,32,125,34,0,120,125,75,0,0,38,118,0,82,39,38,0,106,40,39,4,1,125,95,30,134,42,0,0,208,147,5,0,40,125,0,0,32,125,42,0,120,125,59,0,0,43,118,0,82,44,43,0,106,45,44,4,1,125,105,30,134,46,0,0,208,147,5,0,45,125,0,0,32,125,46,0,120,125,50,0,0,51,118,0,82,52,51,0,106,53,52,4,1,125,115,30,134,54,0,0,208,147,5,0,53,125,0,0,32,125,54,0,120,125,34,0,0,55,118,0,82,56,55,0,106,58,56,4,134,59,0,0,208,147,5,0,58,121,0,0,32,125,59,0,120,125,26,0,0,63,118,0,82,64,63,0,106,66,64,4,134,67,0,0,208,147,5,0,66,123,0,0,32,125,67,0,120,125,10,0,0,68,118,0,82,69,68,0,106,70,69,4,134,71,0,0,208,147,5,0,70,122,0,0,32,125,71,0,120,125,2,0,119,0,58,0,106,73,0,40,82,74,73,0,106,75,73,4,1,125,128,0,20,125,74,125,85,73,125,0,109,73,4,75,119,0,50,0,106,60,0,40,82,61,60,0,106,62,60,4,39,125,61,64,85,60,125,0,109,60,4,62,119,0,43,0,106,47,0,40,82,48,47,0,106,49,47,4,39,125,48,32,85,47,125,0,109,47,4,49,119,0,36,0,106,35,0,40,82,36,35,0,106,37,35,4,39,125,36,16,85,35,125,0,109,35,4,37,119,0,29,0,106,23,0,40,82,25,23,0,106,26,23,4,1,125,0,1,20,125,25,125,85,23,125,0,109,23,4,26,119,0,21,0,106,11,0,40,82,12,11,0,106,13,11,4,39,125,12,8,85,11,125,0,109,11,4,13,119,0,14,0,106,112,0,40,82,113,112,0,106,114,112,4,39,125,113,4,85,112,125,0,109,112,4,114,119,0,7,0,106,100,0,40,82,101,100,0,106,102,100,4,39,125,101,2,85,100,125,0,109,100,4,102,32,125,119,6,121,125,8,0,1,119,0,0,106,88,0,40,82,89,88,0,106,91,88,4,39,125,89,1,85,88,125,0,109,88,4,91,0,76,118,0,25,118,76,4,119,0,14,255,106,77,90,12,0,117,77,0,0,78,117,0,1,125,0,0,53,125,78,125,140,124,2,0,1,119,36,0,119,0,15,0,0,80,117,0,106,81,90,8,55,125,80,81,164,124,2,0,1,119,36,0,119,0,9,0,0,82,117,0,82,83,82,0,134,125,0,0,148,105,6,0,83,0,0,0,0,84,117,0,25,117,84,4,119,0,237,255,32,125,119,36,121,125,6,0,134,125,0,0,180,1,6,0,90,0,0,0,137,120,0,0,139,0,0,0,139,0,0,0,140,2,138,0,0,0,0,0,2,133,0,0,255,0,0,0,1,131,0,0,136,134,0,0,0,132,134,0,136,134,0,0,25,134,134,64,137,134,0,0,130,134,0,0,136,135,0,0,49,134,134,135,32,125,2,0,135,134,0,0,134,93,0,0,228,42,5,0,0,1,0,0,1,129,0,0,1,125,0,0,1,126,0,0,1,124,1,0,1,130,0,0,134,97,0,0,224,175,5,0,0,123,97,0,1,122,0,0,1,127,1,0,1,128,0,0,0,105,128,0,82,116,93,0,55,134,105,116,108,125,2,0,119,0,158,1,0,7,128,0,106,23,93,4,90,35,23,7,107,132,52,35,25,134,132,52,134,42,0,0,20,73,4,0,134,0,0,0,0,127,42,0,0,47,130,0,19,134,47,133,1,135,0,0,1,136,9,0,138,134,135,136,204,125,2,0,164,126,2,0,164,127,2,0,68,128,2,0,236,128,2,0,132,129,2,0,16,130,2,0,136,130,2,0,64,131,2,0,119,0,130,1,102,98,132,52,41,135,98,24,42,135,135,24,32,135,135,60,121,135,125,1,0,99,128,0,106,100,93,4,25,135,99,1,90,101,100,135,41,135,101,24,42,135,135,24,32,135,135,33,121,135,3,0,1,130,8,0,119,0,115,1,0,102,128,0,106,103,93,4,25,135,102,1,90,104,103,135,41,135,104,24,42,135,135,24,32,135,135,47,121,135,8,0,0,106,128,0,25,128,106,1,0,107,123,0,106,108,107,32,0,123,108,0,1,130,0,0,119,0,100,1,0,109,123,0,134,110,0,0,224,175,5,0,1,135,0,0,46,135,109,135,116,126,2,0,0,111,123,0,134,135,0,0,36,239,5,0,111,110,0,0,0,123,110,0,119,0,6,0,0,123,110,0,0,112,123,0,134,135,0,0,36,239,5,0,97,112,0,0,0,113,128,0,25,129,113,1,0,114,128,0,0,125,114,0,1,130,1,0,1,126,0,0,119,0,76,1,102,115,132,52,41,135,115,24,42,135,135,24,134,117,0,0,160,107,6,0,135,0,0,0,33,135,117,0,121,135,4,0,1,126,1,0,1,130,2,0,119,0,22,0,102,118,132,52,41,135,118,24,42,135,135,24,32,135,135,62,121,135,5,0,1,126,1,0,1,130,7,0,1,124,1,0,119,0,13,0,102,119,132,52,41,135,119,24,42,135,135,24,32,135,135,47,121,135,4,0,1,126,1,0,1,130,0,0,119,0,5,0,0,120,127,0,0,121,125,0,3,125,121,120,119,0,1,0,0,2,126,0,41,135,2,24,42,135,135,24,33,135,135,0,121,135,39,1,0,3,125,0,0,4,129,0,50,135,4,3,120,127,2,0,0,5,123,0,82,6,5,0,106,8,93,4,0,9,129,0,0,10,125,0,0,11,129,0,3,136,8,9,4,137,10,11,25,137,137,1,134,135,0,0,128,39,6,0,6,136,137,0,1,126,0,0,1,129,0,0,1,125,0,0,0,12,130,0,19,135,12,133,32,135,135,0,121,135,16,1,0,13,123,0,106,14,13,32,0,123,14,0,119,0,12,1,102,15,132,52,41,135,15,24,42,135,135,24,32,135,135,62,121,135,6,0,1,130,7,0,1,125,0,0,1,129,0,0,1,124,1,0,119,0,2,1,102,16,132,52,41,135,16,24,42,135,135,24,32,135,135,47,120,135,21,0,102,17,132,52,41,135,17,24,42,135,135,24,32,135,135,63,120,135,16,0,102,20,132,52,41,135,20,24,42,135,135,24], eb + 153600);
  HEAPU8.set([134,21,0,0,160,107,6,0,135,0,0,0,33,135,21,0,120,135,240,0,1,130,3,0,0,22,128,0,0,129,22,0,0,24,128,0,0,125,24,0,1,126,0,0,119,0,233,0,0,18,123,0,106,19,18,32,0,123,19,0,1,130,0,0,119,0,228,0,102,25,132,52,41,135,25,24,42,135,135,24,134,26,0,0,160,107,6,0,135,0,0,0,33,135,26,0,120,135,10,0,102,27,132,52,41,135,27,24,42,135,135,24,32,135,135,61,120,135,5,0,0,38,127,0,0,39,125,0,3,125,39,38,119,0,211,0,134,28,0,0,208,242,5,0,0,122,28,0,0,29,122,0,106,30,29,8,106,31,93,4,0,32,129,0,0,33,125,0,0,34,129,0,3,137,31,32,4,136,33,34,25,136,136,1,134,135,0,0,128,39,6,0,30,137,136,0,0,36,123,0,0,37,122,0,134,135,0,0,0,49,6,0,36,37,0,0,1,125,0,0,1,129,0,0,1,126,0,0,1,130,4,0,119,0,186,0,102,40,132,52,41,135,40,24,42,135,135,24,32,135,135,62,121,135,6,0,1,130,7,0,1,125,0,0,1,129,0,0,1,124,1,0,119,0,176,0,102,41,132,52,41,135,41,24,42,135,135,24,32,135,135,63,121,135,6,0,0,43,123,0,106,44,43,32,0,123,44,0,1,130,0,0,119,0,166,0,102,45,132,52,41,135,45,24,42,135,135,24,32,135,135,34,120,135,7,0,102,46,132,52,41,135,46,24,42,135,135,24,32,135,135,39,120,135,2,0,119,0,155,0,1,130,5,0,0,48,128,0,25,129,48,1,0,49,128,0,0,125,49,0,1,126,0,0,119,0,148,0,102,50,132,52,41,135,50,24,42,135,135,24,32,135,135,34,120,135,10,0,102,51,132,52,41,135,51,24,42,135,135,24,32,135,135,39,120,135,5,0,0,61,127,0,0,62,125,0,3,125,62,61,119,0,134,0,0,52,125,0,0,53,129,0,50,135,53,52,252,129,2,0,0,54,122,0,106,55,54,12,106,56,93,4,0,57,129,0,0,59,125,0,0,60,129,0,3,136,56,57,4,137,59,60,25,137,137,1,134,135,0,0,128,39,6,0,55,136,137,0,1,125,0,0,1,129,0,0,1,126,0,0,1,130,2,0,119,0,113,0,102,63,132,52,41,135,63,24,42,135,135,24,32,135,135,47,121,135,6,0,0,64,123,0,106,65,64,32,0,123,65,0,1,130,0,0,119,0,103,0,102,66,132,52,41,135,66,24,42,135,135,24,32,135,135,33,121,135,3,0,1,130,8,0,119,0,96,0,0,67,128,0,0,125,67,0,0,129,67,0,1,126,0,0,1,130,1,0,134,68,0,0,224,175,5,0,0,69,123,0,134,135,0,0,36,239,5,0,69,68,0,0,0,123,68,0,119,0,83,0,102,70,132,52,41,135,70,24,42,135,135,24,32,135,135,60,121,135,25,0,0,71,128,0,26,125,71,1,0,72,124,0,41,135,72,24,42,135,135,24,33,135,135,0,120,135,13,0,0,73,123,0,106,75,73,4,106,76,93,4,0,77,129,0,0,78,125,0,0,79,129,0,3,137,76,77,4,136,78,79,25,136,136,1,134,135,0,0,128,39,6,0,75,137,136,0,1,130,6,0,1,125,0,0,1,129,0,0,1,126,0,0,119,0,54,0,0,80,129,0,32,135,80,0,121,135,3,0,0,81,128,0,0,129,81,0,0,82,128,0,0,125,82,0,102,83,132,52,41,135,83,24,42,135,135,24,134,84,0,0,160,107,6,0,135,0,0,0,33,135,84,0,120,135,39,0,1,124,0,0,119,0,37,0,102,58,132,52,41,135,58,24,42,135,135,24,32,135,135,45,121,135,32,0,0,74,128,0,82,87,93,0,25,135,74,1,48,135,135,87,204,131,2,0,0,88,128,0,82,89,93,0,25,135,88,2,48,135,135,89,204,131,2,0,0,90,128,0,106,91,93,4,25,135,90,1,90,92,91,135,41,135,92,24,42,135,135,24,32,135,135,45,121,135,14,0,0,94,128,0,106,95,93,4,25,135,94,2,90,96,95,135,41,135,96,24,42,135,135,24,32,135,135,62,121,135,6,0,1,125,0,0,1,129,0,0,1,126,0,0,1,130,0,0,119,0,1,0,0,85,127,0,0,86,128,0,3,128,86,85,119,0,95,254,134,134,0,0,148,105,6,0,93,0,0,0,137,132,0,0,139,97,0,0,140,3,171,0,0,0,0,0,1,164,0,0,136,168,0,0,0,165,168,0,136,168,0,0,1,169,240,0,3,168,168,169,137,168,0,0,130,168,0,0,136,169,0,0,49,168,168,169,44,132,2,0,135,168,0,0,25,7,165,108,25,6,165,96,25,5,165,84,25,4,165,72,25,3,165,56,25,156,165,24,25,158,165,16,25,157,165,8,0,155,165,0,1,168,216,0,3,66,165,168,25,77,165,32,1,168,204,0,3,88,165,168,1,168,192,0,3,99,165,168,1,168,180,0,3,110,165,168,1,168,168,0,3,121,165,168,1,168,156,0,3,132,165,168,1,168,144,0,3,143,165,168,1,168,132,0,3,10,165,168,25,21,165,120,0,8,0,0,0,9,2,0,0,32,8,0,25,43,32,33,78,54,43,0,1,168,255,0,19,168,54,168,0,61,168,0,1,169,0,0,1,168,2,0,138,61,169,168,216,132,2,0,104,133,2,0,137,165,0,0,139,0,0,0,119,0,30,2,0,62,9,0,1,168,255,0,19,168,62,168,0,63,168,0,32,64,63,0,120,64,3,0,137,165,0,0,139,0,0,0,1,168,36,0,82,65,168,0,25,67,65,52,25,68,67,8,134,69,0,0,84,57,6,0,68,0,0,0,33,70,69,0,120,70,3,0,137,165,0,0,139,0,0,0,0,71,8,0,25,72,71,36,59,168,0,0,89,72,168,0,0,73,8,0,25,74,73,33,1,168,1,0,83,74,168,0,0,75,8,0,25,76,75,40,82,168,1,0,85,76,168,0,106,169,1,4,109,76,4,169,137,165,0,0,139,0,0,0,119,0,250,1,0,78,9,0,1,169,255,0,19,169,78,169,0,79,169,0,32,80,79,1,121,80,92,0,25,81,1,4,88,82,81,0,0,83,8,0,25,84,83,40,25,85,84,4,88,86,85,0,64,87,82,86,58,154,87,0,58,89,154,0,59,169,10,0,66,90,89,169,0,91,8,0,25,92,91,36,88,93,92,0,64,94,93,90,89,92,94,0,0,95,8,0,25,96,95,36,88,97,96,0,59,169,90,0,71,98,169,97,121,98,3,0,59,104,90,0,119,0,5,0,0,100,8,0,25,101,100,36,88,102,101,0,58,104,102,0,59,169,166,255,73,103,169,104,121,103,3,0,59,115,166,255,119,0,13,0,0,105,8,0,25,106,105,36,88,107,106,0,59,169,90,0,71,108,169,107,121,108,3,0,59,115,90,0,119,0,5,0,0,109,8,0,25,111,109,36,88,112,111,0,58,115,112,0,0,113,8,0,25,114,113,36,89,114,115,0,0,116,8,0,25,117,116,40,82,169,1,0,85,117,169,0,106,168,1,4,109,117,4,168,1,168,36,0,82,118,168,0,0,119,8,0,25,120,119,36,88,122,120,0,58,123,122,0,62,168,0,0,24,45,68,84,251,33,9,64,65,124,123,168,59,168,180,0,66,125,124,168,58,126,125,0,59,168,1,0,89,77,168,0,25,127,77,4,59,168,0,0,89,127,168,0,25,128,127,4,59,168,0,0,89,128,168,0,134,168,0,0,104,132,4,0,66,126,77,0,82,168,66,0,85,3,168,0,106,169,66,4,109,3,4,169,106,168,66,8,109,3,8,168,106,169,66,12,109,3,12,169,134,169,0,0,36,227,5,0,118,3,0,0,137,165,0,0,139,0,0,0,0,129,9,0,1,169,255,0,19,169,129,169,0,130,169,0,32,131,130,3,120,131,9,0,0,133,9,0,1,169,255,0,19,169,133,169,0,134,169,0,32,135,134,2,120,135,3,0,137,165,0,0,139,0,0,0,0,136,8,0,25,137,136,36,88,138,137,0,59,169,166,255,73,139,138,169,120,139,3,0,137,165,0,0,139,0,0,0,0,140,8,0,25,141,140,36,88,142,141,0,59,169,90,0,71,144,142,169,120,144,3,0,137,165,0,0,139,0,0,0,0,145,8,0,25,146,145,36,88,147,146,0,59,169,0,0,71,148,147,169,0,149,8,0,25,150,149,36,88,151,150,0,121,148,180,0,59,169,246,255,73,152,151,169,1,169,36,0,82,153,169,0,1,169,36,0,82,11,169,0,0,12,8,0,25,13,12,36,88,14,13,0,121,152,86,0,59,169,0,0,64,15,169,14,58,16,15,0,62,169,0,0,24,45,68,84,251,33,9,64,65,17,16,169,59,169,180,0,66,18,17,169,58,19,18,0,127,169,0,0,59,168,1,0,89,169,168,0,127,168,0,0,114,88,168,0,127,169,0,0,102,169,169,1,107,88,1,169,127,168,0,0,102,168,168,2,107,88,2,168,127,169,0,0,102,169,169,3,107,88,3,169,25,20,88,4,127,169,0,0,59,168,0,0,89,169,168,0,127,168,0,0,114,20,168,0,127,169,0,0,102,169,169,1,107,20,1,169,127,168,0,0,102,168,168,2,107,20,2,168,127,169,0,0,102,169,169,3,107,20,3,169,25,22,88,8,127,169,0,0,59,168,0,0,89,169,168,0,127,168,0,0,114,22,168,0,127,169,0,0,102,169,169,1,107,22,1,169,127,168,0,0,102,168,168,2,107,22,2,168,127,169,0,0,102,169,169,3,107,22,3,169,0,163,99,0,0,166,88,0,25,167,163,12,78,169,166,0,83,163,169,0,25,163,163,1,25,166,166,1,54,169,163,167,148,136,2,0,82,169,99,0,85,4,169,0,106,168,99,4,109,4,4,168,106,169,99,8,109,4,8,169,61,169,0,0,0,0,128,62,1,168,2,0,1,170,0,0,134,23,0,0,144,159,3,0,11,19,4,169,168,170,0,0,85,155,23,0,25,159,155,4,1,170,0,0,85,159,170,0,134,170,0,0,104,149,4,0,153,155,0,0,119,0,8,1,59,170,166,255,64,24,170,14,58,25,24,0,62,170,0,0,24,45,68,84,251,33,9,64,65,26,25,170,59,170,180,0,66,27,26,170,58,28,27,0,127,170,0,0,59,168,1,0,89,170,168,0,127,168,0,0,114,110,168,0,127,170,0,0,102,170,170,1,107,110,1,170,127,168,0,0,102,168,168,2,107,110,2,168,127,170,0,0,102,170,170,3,107,110,3,170,25,29,110,4,127,170,0,0,59,168,0,0,89,170,168,0,127,168,0,0,114,29,168,0,127,170,0,0,102,170,170,1,107,29,1,170,127,168,0,0,102,168,168,2,107,29,2,168,127,170,0,0,102,170,170,3,107,29,3,170,25,30,110,8,127,170,0,0,59,168,0,0,89,170,168,0,127,168,0,0,114,30,168,0,127,170,0,0,102,170,170,1,107,30,1,170,127,168,0,0,102,168,168,2,107,30,2,168,127,170,0,0,102,170,170,3,107,30,3,170,0,163,121,0,0,166,110,0,25,167,163,12,78,170,166,0,83,163,170,0,25,163,163,1,25,166,166,1,54,170,163,167,232,137,2,0,82,170,121,0,85,5,170,0,106,168,121,4,109,5,4,168,106,170,121,8,109,5,8,170,59,170,1,0,1,168,2,0,1,169,0,0,134,31,0,0,144,159,3,0,11,28,5,170,168,169,0,0,85,157,31,0,25,161,157,4,1,169,0,0,85,161,169,0,134,169,0,0,104,149,4,0,153,157,0,0,119,0,180,0,59,169,10,0,71,33,151,169,1,169,36,0,82,34,169,0,1,169,36,0,82,35,169,0,0,36,8,0,25,37,36,36,88,38,37,0,121,33,86,0,59,169,0,0,64,39,169,38,58,40,39,0,62,169,0,0,24,45,68,84,251,33,9,64,65,41,40,169,59,169,180,0,66,42,41,169,58,44,42,0,127,169,0,0,59,168,1,0,89,169,168,0,127,168,0,0,114,132,168,0,127,169,0,0,102,169,169,1,107,132,1,169,127,168,0,0,102,168,168,2,107,132,2,168,127,169,0,0,102,169,169,3,107,132,3,169,25,45,132,4,127,169,0,0,59,168,0,0,89,169,168,0,127,168,0,0,114,45,168,0,127,169,0,0,102,169,169,1,107,45,1,169,127,168,0,0,102,168,168,2,107,45,2,168,127,169,0,0,102,169,169,3,107,45,3,169,25,46,132,8,127,169,0,0,59,168,0,0,89,169,168,0,127,168,0,0,114,46,168,0,127,169,0,0,102,169,169,1,107,46,1,169,127,168,0,0,102,168,168,2,107,46,2,168,127,169,0,0,102,169,169,3,107,46,3,169,0,163,143,0,0,166,132,0,25,167,163,12,78,169,166,0,83,163,169,0,25,163,163,1,25,166,166,1,54,169,163,167,96,139,2,0,82,169,143,0,85,6,169,0,106,168,143,4,109,6,4,168,106,169,143,8,109,6,8,169,61,169,0,0,0,0,128,62,1,168,2,0,1,170,0,0,134,47,0,0,144,159,3,0,35,44,6,169,168,170,0,0,85,158,47,0,25,162,158,4,1,170,0,0,85,162,170,0,134,170,0,0,104,149,4,0,34,158,0,0,119,0,85,0,59,170,90,0,64,48,170,38,58,49,48,0,62,170,0,0,24,45,68,84,251,33,9,64,65,50,49,170,59,170,180,0,66,51,50,170,58,52,51,0,127,170,0,0,59,168,1,0,89,170,168,0,127,168,0,0,114,10,168,0,127,170,0,0,102,170,170,1,107,10,1,170,127,168,0,0,102,168,168,2,107,10,2,168,127,170,0,0,102,170,170,3,107,10,3,170,25,53,10,4,127,170,0,0,59,168,0,0,89,170,168,0,127,168,0,0,114,53,168,0,127,170,0,0,102,170,170,1,107,53,1,170,127,168,0,0,102,168,168,2,107,53,2,168,127,170,0,0,102,170,170,3,107,53,3,170,25,55,10,8,127,170,0,0,59,168,0,0,89,170,168,0,127,168,0,0,114,55,168,0,127,170,0,0,102,170,170,1,107,55,1,170,127,168,0,0,102,168,168,2,107,55,2,168,127,170,0,0,102,170,170,3,107,55,3,170,0,163,21,0,0,166,10,0,25,167,163,12,78,170,166,0,83,163,170,0,25,163,163,1,25,166,166,1,54,170,163,167,180,140,2,0,82,170,21,0,85,7,170,0,106,168,21,4,109,7,4,168,106,170,21,8,109,7,8,170,59,170,1,0,1,168,2,0,1,169,0,0,134,56,0,0,144,159,3,0,35,52,7,170,168,169,0,0,85,156,56,0,25,160,156,4,1,169,0,0,85,160,169,0,134,169,0,0,104,149,4,0,34,156,0,0,119,0,1,0,0,57,8,0,25,58,57,36,59,169,0,0,89,58,169,0,0,59,8,0,25,60,59,33,1,169,0,0,83,60,169,0,137,165,0,0,139,0,0,0,119,0,1,0,139,0,0,0,140,3,65,0,0,0,0,0,2,54,0,0,200,0,0,0,2,55,0,0,216,0,0,0,2,56,0,0,184,0,0,0,2,57,0,0,136,0,0,0,2,58,0,0,152,0,0,0,2,59,0,0,168,0,0,0,1,50,0,0,136,60,0,0,0,51,60,0,136,60,0,0,1,61,32,1,3,60,60,61,137,60,0,0,130,60,0,0,136,61,0,0,49,60,60,61,184,141,2,0,135,60,0,0,106,7,0,44,1,60,255,0,19,60,2,60,26,60,60,1,35,60,60,3,120,60,3,0,137,51,0,0,139,0,0,0,102,19,7,32,41,60,19,24,42,60,60,24,33,60,60,0,120,60,129,0,1,60,255,0,19,60,2,60,32,60,60,1,121,60,112,0,1,60,224,0,100,24,1,60,100,25,1,55,64,60,24,25,135,26,2,0,60,0,0,0,59,60,10,0,74,60,26,60,121,60,103,0,1,60,224,0,3,60,1,60,112,27,60,4,3,60,1,55,112,28,60,4,64,60,27,28,135,29,2,0,60,0,0,0,59,60,10,0,72,60,29,60,121,60,92,0,134,30,0,0,16,217,5,0,0,0,0,0,134,31,0,0,60,191,5,0,30,0,0,0,1,60,51,13,1,61,11,0,134,32,0,0,76,48,5,0,31,60,61,0,1,61,63,13,1,60,11,0,134,33,0,0,76,48,5,0,31,61,60,0,1,60,75,13,1,61,11,0,134,34,0,0,76,48,5,0,31,60,61,0,1,61,87,13,1,60,11,0,134,35,0,0,76,48,5,0,31,61,60,0,1,48,0,0,102,36,7,33,1,60,255,0,19,60,36,60,1,61,0,0,1,62,4,0,138,60,61,62,232,142,2,0,240,142,2,0,248,142,2,0,0,143,2,0,0,48,32,0,119,0,9,0,0,48,32,0,119,0,7,0,0,48,33,0,119,0,5,0,0,48,34,0,119,0,3,0,0,48,35,0,119,0,1,0,0,37,48,0,1,60,0,0,46,60,37,60,184,143,2,0,1,61,224,0,94,61,1,61,109,51,64,61,25,61,51,64,1,60,224,0,3,60,1,60,106,60,60,4,109,61,4,60,25,61,51,64,134,60,0,0,48,120,3,0,1,61,0,0,0,38,48,0,1,60,48,1,97,1,60,38,0,39,48,0,0,40,48,0,94,61,1,55,109,51,72,61,25,61,51,72,3,60,1,55,106,60,60,4,109,61,4,60,25,61,51,16,25,62,51,72,134,60,0,0,8,217,4,0,61,1,62,40,106,62,51,16,109,51,80,62,25,62,51,80,25,60,51,16,106,60,60,4,109,62,4,60,25,62,51,80,134,60,0,0,244,154,4,0,39,62,0,0,137,51,0,0,139,0,0,0,1,60,224,0,3,60,1,60,112,41,60,4,3,60,1,55,112,42,60,4,64,60,41,42,135,43,2,0,60,0,0,0,59,60,10,0,73,60,43,60,121,60,3,0,1,62,1,0,107,7,32,62,102,44,7,32,41,62,44,24,42,62,62,24,33,62,62,0,120,62,3,0,137,51,0,0,139,0,0,0,1,62,240,0,3,62,1,62,112,45,62,4,88,46,7,0,59,62,10,0,66,62,45,62,64,62,46,62,89,7,62,0,88,3,7,0,59,62,104,1,73,62,3,62,121,62,5,0,88,4,7,0,59,62,104,1,64,62,4,62,89,7,62,0,88,5,7,0,59,62,0,0,71,62,5,62,121,62,5,0,88,6,7,0,59,62,104,1,63,62,6,62,89,7,62,0,25,60,51,8,134,62,0,0,116,201,2,0,60,0,0,0,1,62,255,0,19,62,2,62,32,62,62,2,120,62,7,0,1,62,255,0,19,62,2,62,32,62,62,3,120,62,3,0,137,51,0,0,139,0,0,0,1,60,0,0,107,7,32,60,1,47,0,0,112,8,51,8,59,60,10,0,71,60,8,60,121,60,14,0,1,60,232,0,3,60,1,60,112,9,60,4,3,60,1,55,112,10,60,4,64,60,9,10,59,62,0,0,71,60,60,62,121,60,3,0,1,50,28,0,119,0,4,0,1,50,25,0,119,0,2,0,1,50,25,0,32,60,50,25,121,60,179,0,112,11,51,8,59,60,60,0,73,60,11,60,121,60,16,0,112,12,51,8,59,60,80,0,71,60,12,60,121,60,12,0,1,60,232,0,3,60,1,60,112,13,60,4,3,60,1,55,112,14,60,4,64,60,13,14,59,62,0,0,73,60,60,62,121,60,3,0,1,50,28,0,119,0,160,0,25,60,51,8,106,18,60,4,25,62,18,1,1,61,255,0,19,62,62,61,107,7,33,62,25,62,51,8,106,20,62,4,127,62,0,0,25,60,20,1,27,60,60,90,76,60,60,0,89,62,60,0,127,62,0,0,78,62,62,0,95,51,54,62,3,62,51,54,127,60,0,0,102,60,60,1,107,62,1,60,3,60,51,54,127,62,0,0,102,62,62,2,107,60,2,62,3,62,51,54,127,60,0,0,102,60,60,3,107,62,3,60,127,60,0,0,59,62,0,0,89,60,62,0,3,62,51,54,127,60,0,0,78,60,60,0,107,62,4,60,3,60,51,54,25,60,60,4,127,62,0,0,102,62,62,1,107,60,1,62,3,62,51,54,25,62,62,4,127,60,0,0,102,60,60,2,107,62,2,60,3,60,51,54,25,60,60,4,127,62,0,0,102,62,62,3,107,60,3,62,127,62,0,0,59,60,0,0,89,62,60,0,3,60,51,54,127,62,0,0,78,62,62,0,107,60,8,62,3,62,51,54,25,62,62,8,127,60,0,0,102,60,60,1,107,62,1,60,3,60,51,54,25,60,60,8,127,62,0,0,102,62,62,2,107,60,2,62,3,62,51,54,25,62,62,8,127,60,0,0,102,60,60,3,107,62,3,60,127,60,0,0,59,62,0,0,89,60,62,0,3,62,51,54,127,60,0,0,78,60,60,0,107,62,12,60,3,60,51,54,25,60,60,12,127,62,0,0,102,62,62,1,107,60,1,62,3,62,51,54,25,62,62,12,127,60,0,0,102,60,60,2,107,62,2,60,3,60,51,54,25,60,60,12,127,62,0,0,102,62,62,3,107,60,3,62,3,49,51,56,3,52,51,54,25,53,49,16,78,62,52,0,83,49,62,0,25,49,49,1,25,52,52,1,54,62,49,53,204,146,2,0,94,60,51,56,97,51,57,60,3,60,51,57,3,62,51,56,106,62,62,4,109,60,4,62,3,62,51,57,3,60,51,56,106,60,60,8,109,62,8,60,3,60,51,57,3,62,51,56,106,62,62,12,109,60,12,62,82,60,7,0,97,51,58,60,3,60,51,58,106,62,7,4,109,60,4,62,3,62,51,58,106,60,7,8,109,62,8,60,3,60,51,58,106,62,7,12,109,60,12,62,3,60,51,55,3,61,51,57,3,63,51,58,134,62,0,0,196,213,3,0,60,61,63,0,94,63,51,55,97,51,59,63,3,63,51,59,3,62,51,55,106,62,62,4,109,63,4,62,3,62,51,59,3,63,51,55,106,63,63,8,109,62,8,63,3,63,51,59,3,62,51,55,106,62,62,12,109,63,12,62,3,62,51,59,61,63,0,0,154,153,25,62,1,61,5,0,1,60,0,0,1,64,35,0,134,21,0,0,184,242,3,0,7,62,63,61,60,64,0,0,0,47,21,0,32,64,50,28,121,64,185,0,25,64,51,8,106,15,64,4,1,60,255,0,19,60,15,60,107,7,33,60,25,60,51,8,106,16,60,4,127,60,0,0,27,64,16,90,76,64,64,0,89,60,64,0,1,64,248,0,127,60,0,0,78,60,60,0,95,51,64,60,1,60,248,0,3,60,51,60,127,64,0,0,102,64,64,1,107,60,1,64,1,64,248,0,3,64,51,64,127,60,0,0,102,60,60,2,107,64,2,60,1,60,248,0,3,60,51,60,127,64,0,0,102,64,64,3,107,60,3,64,127,64,0,0,59,60,0,0,89,64,60,0,1,60,248,0,3,60,51,60,127,64,0,0,78,64,64,0,107,60,4,64,1,64,248,0,3,64,51,64,25,64,64,4,127,60,0,0,102,60,60,1,107,64,1,60,1,60,248,0,3,60,51,60,25,60,60,4,127,64,0,0,102,64,64,2,107,60,2,64,1,64,248,0,3,64,51,64,25,64,64,4,127,60,0,0,102,60,60,3,107,64,3,60,127,60,0,0,59,64,0,0,89,60,64,0,1,64,248,0,3,64,51,64,127,60,0,0,78,60,60,0,107,64,8,60,1,60,248,0,3,60,51,60,25,60,60,8,127,64,0,0,102,64,64,1,107,60,1,64,1,64,248,0,3,64,51,64,25,64,64,8,127,60,0,0,102,60,60,2,107,64,2,60,1,60,248,0,3,60,51,60,25,60,60,8,127,64,0,0,102,64,64,3,107,60,3,64,127,64,0,0,59,60,0,0,89,64,60,0,1,60,248,0,3,60,51,60,127,64,0,0,78,64,64,0,107,60,12,64,1,64,248,0,3,64,51,64,25,64,64,12,127,60,0,0,102,60,60,1,107,64,1,60,1,60,248,0,3,60,51,60,25,60,60,12,127,64,0,0,102,64,64,2,107,60,2,64,1,64,248,0,3,64,51,64,25,64,64,12,127,60,0,0,102,60,60,3,107,64,3,60,1,60,232,0,3,49,51,60,1,60,248,0,3,52,51,60,25,53,49,16,78,60,52,0,83,49,60,0,25,49,49,1,25,52,52,1,54,60,49,53,144,149,2,0,1,64,232,0,94,64,51,64,109,51,88,64,25,64,51,88,1,60,232,0,3,60,51,60,106,60,60,4,109,64,4,60,25,60,51,88,1,64,232,0,3,64,51,64,106,64,64,8,109,60,8,64,25,64,51,88,1,60,232,0,3,60,51,60,106,60,60,12,109,64,12,60,82,64,7,0,109,51,104,64,25,64,51,104,106,60,7,4,109,64,4,60,25,60,51,104,106,64,7,8,109,60,8,64,25,64,51,104,106,60,7,12,109,64,12,60,1,64,8,1,3,64,51,64,25,61,51,88,25,63,51,104,134,60,0,0,196,213,3,0,64,61,63,0,1,63,8,1,94,63,51,63,109,51,120,63,25,63,51,120,1,60,8,1,3,60,51,60,106,60,60,4,109,63,4,60,25,60,51,120,1,63,8,1,3,63,51,63,106,63,63,8,109,60,8,63,25,63,51,120,1,60,8,1,3,60,51,60,106,60,60,12,109,63,12,60,25,60,51,120,61,63,0,0,154,153,25,62,1,61,5,0,1,64,0,0,1,62,35,0,134,17,0,0,184,242,3,0,7,60,63,61,64,62,0,0,0,47,17,0,0,22,47,0,25,64,7,16,134,62,0,0,96,12,6,0,64,22,0,0,134,23,0,0,228,111,6,0,25,64,7,16,134,62,0,0,104,41,6,0,23,64,0,0,137,51,0,0,139,0,0,0,140,3,85,0,0,0,0,0,1,81,0,0,136,83,0,0,0,82,83,0,127,83,0,0,114,83,1,0,127,83,0,0,102,84,1,1,107,83,1,84,127,84,0,0,102,83,1,2,107,84,2,83,127,83,0,0,102,84,1,3,107,83,3,84,127,84,0,0,88,3,84,0,127,84,0,0,114,84,2,0,127,84,0,0,102,83,2,1,107,84,1,83,127,83,0,0,102,84,2,2,107,83,2,84,127,84,0,0,102,83,2,3,107,84,3,83,127,83,0,0,88,4,83,0,65,15,3,4,127,83,0,0,89,83,15,0,127,83,0,0,114,0,83,0,127,84,0,0,102,84,84,1,107,0,1,84,127,83,0,0,102,83,83,2,107,0,2,83,127,84,0,0,102,84,84,3,107,0,3,84,25,26,0,4,25,37,1,4,127,84,0,0,114,84,37,0,127,84,0,0,102,83,37,1,107,84,1,83,127,83,0,0,102,84,37,2,107,83,2,84,127,84,0,0,102,83,37,3,107,84,3,83,127,83,0,0,88,48,83,0,127,83,0,0,114,83,2,0,127,83,0,0,102,84,2,1,107,83,1,84,127,84,0,0,102,83,2,2,107,84,2,83,127,83,0,0,102,84,2,3,107,83,3,84,127,84,0,0,88,59,84,0,65,70,48,59,127,84,0,0,89,84,70,0,127,84,0,0,114,26,84,0,127,83,0,0,102,83,83,1,107,26,1,83,127,84,0,0,102,84,84,2,107,26,2,84,127,83,0,0,102,83,83,3,107,26,3,83,25,79,0,8,25,80,1,8,127,83,0,0,114,83,80,0,127,83,0,0,102,84,80,1,107,83,1,84,127,84,0,0,102,83,80,2,107,84,2,83,127,83,0,0,102,84,80,3,107,83,3,84,127,84,0,0,88,5,84,0,127,84,0,0,114,84,2,0,127,84,0,0,102,83,2,1,107,84,1,83,127,83,0,0,102,84,2,2,107,83,2,84,127,84,0,0,102,83,2,3,107,84,3,83,127,83,0,0,88,6,83,0,65,7,5,6,127,83,0,0,89,83,7,0,127,83,0,0,114,79,83,0,127,84,0,0,102,84,84,1,107,79,1,84,127,83,0,0,102,83,83,2,107,79,2,83,127,84,0,0,102,84,84,3,107,79,3,84,25,8,0,12,25,9,1,12,127,84,0,0,114,84,9,0,127,84,0,0,102,83,9,1,107,84,1,83,127,83,0,0,102,84,9,2,107,83,2,84,127,84,0,0,102,83,9,3,107,84,3,83,127,83,0,0,88,10,83,0,127,83,0,0,114,83,2,0,127,83,0,0,102,84,2,1,107,83,1,84,127,84,0,0,102,83,2,2,107,84,2,83,127,83,0,0,102,84,2,3,107,83,3,84,127,84,0,0,88,11,84,0,65,12,10,11,127,84,0,0,89,84,12,0,127,84,0,0,114,8,84,0,127,83,0,0,102,83,83,1,107,8,1,83,127,84,0,0,102,84,84,2,107,8,2,84,127,83,0,0,102,83,83,3,107,8,3,83,25,13,0,16,25,14,1,16,127,83,0,0,114,83,14,0,127,83,0,0,102,84,14,1,107,83,1,84,127,84,0,0,102,83,14,2,107,84,2,83,127,83,0,0,102,84,14,3,107,83,3,84,127,84,0,0,88,16,84,0,25,17,2,4,127,84,0,0,114,84,17,0,127,84,0,0,102,83,17,1,107,84,1,83,127,83,0,0,102,84,17,2,107,83,2,84,127,84,0,0,102,83,17,3,107,84,3,83,127,83,0,0,88,18,83,0,65,19,16,18,127,83,0,0,89,83,19,0,127,83,0,0,114,13,83,0,127,84,0,0,102,84,84,1,107,13,1,84,127,83,0,0,102,83,83,2,107,13,2,83,127,84,0,0,102,84,84,3,107,13,3,84,25,20,0,20,25,21,1,20,127,84,0,0,114,84,21,0,127,84,0,0,102,83,21,1,107,84,1,83,127,83,0,0,102,84,21,2,107,83,2,84,127,84,0,0,102,83,21,3,107,84,3,83,127,83,0,0,88,22,83,0,25,23,2,4,127,83,0,0,114,83,23,0,127,83,0,0,102,84,23,1,107,83,1,84,127,84,0,0,102,83,23,2,107,84,2,83,127,83,0,0,102,84,23,3,107,83,3,84,127,84,0,0,88,24,84,0,65,25,22,24,127,84,0,0,89,84,25,0,127,84,0,0,114,20,84,0,127,83,0,0,102,83,83,1,107,20,1,83,127,84,0,0,102,84,84,2,107,20,2,84,127,83,0,0,102,83,83,3,107,20,3,83,25,27,0,24,25,28,1,24,127,83,0,0,114,83,28,0,127,83,0,0,102,84,28,1,107,83,1,84,127,84,0,0,102,83,28,2,107,84,2,83,127,83,0,0,102,84,28,3,107,83,3,84,127,84,0,0,88,29,84,0,25,30,2,4,127,84,0,0,114,84,30,0,127,84,0,0,102,83,30,1,107,84,1,83,127,83,0,0,102,84,30,2,107,83,2,84,127,84,0,0,102,83,30,3,107,84,3,83,127,83,0,0,88,31,83,0,65,32,29,31,127,83,0,0,89,83,32,0,127,83,0,0,114,27,83,0,127,84,0,0,102,84,84,1,107,27,1,84,127,83,0,0,102,83,83,2,107,27,2,83,127,84,0,0,102,84,84,3,107,27,3,84,25,33,0,28,25,34,1,28,127,84,0,0,114,84,34,0,127,84,0,0,102,83,34,1,107,84,1,83,127,83,0,0,102,84,34,2,107,83,2,84,127,84,0,0,102,83,34,3,107,84,3,83,127,83,0,0,88,35,83,0,25,36,2,4,127,83,0,0,114,83,36,0,127,83,0,0,102,84,36,1,107,83,1,84,127,84,0,0,102,83,36,2,107,84,2,83,127,83,0,0,102,84,36,3,107,83,3,84,127,84,0,0,88,38,84,0,65,39,35,38,127,84,0,0,89,84,39,0,127,84,0,0,114,33,84,0,127,83,0,0,102,83,83,1,107,33,1,83,127,84,0,0,102,84,84,2,107,33,2,84,127,83,0,0,102,83,83,3,107,33,3,83,25,40,0,32,25,41,1,32,127,83,0,0,114,83,41,0,127,83,0,0,102,84,41,1,107,83,1,84,127,84,0,0,102,83,41,2,107,84,2,83,127,83,0,0,102,84,41,3,107,83,3,84,127,84,0,0,88,42,84,0,25,43,2,8,127,84,0,0,114,84,43,0,127,84,0,0,102,83,43,1,107,84,1,83,127,83,0,0,102,84,43,2,107,83,2,84,127,84,0,0,102,83,43,3,107,84,3,83,127,83,0,0,88,44,83,0,65,45,42,44,127,83,0,0,89,83,45,0,127,83,0,0,114,40,83,0,127,84,0,0,102,84,84,1,107,40,1,84,127,83,0,0,102,83,83,2,107,40,2,83,127,84,0,0,102,84,84,3,107,40,3,84,25,46,0,36,25,47,1,36,127,84,0,0,114,84,47,0,127,84,0,0,102,83,47,1,107,84,1,83,127,83,0,0,102,84,47,2,107,83,2,84,127,84,0,0,102,83,47,3,107,84,3,83,127,83,0,0,88,49,83,0,25,50,2,8,127,83,0,0,114,83,50,0,127,83,0,0,102,84,50,1,107,83,1,84,127,84,0,0,102,83,50,2,107,84,2,83,127,83,0,0,102,84,50,3,107,83,3,84,127,84,0,0,88,51,84,0,65,52,49,51,127,84,0,0,89,84,52,0,127,84,0,0,114,46,84,0,127,83,0,0,102,83,83,1,107,46,1,83,127,84,0,0,102,84,84,2,107,46,2,84,127,83,0,0,102,83,83,3,107,46,3,83,25,53,0,40,25,54,1,40,127,83,0,0,114,83,54,0,127,83,0,0,102,84,54,1,107,83,1,84,127,84,0,0,102,83,54,2,107,84,2,83,127,83,0,0,102,84,54,3,107,83,3,84,127,84,0,0,88,55,84,0,25,56,2,8,127,84,0,0,114,84,56,0,127,84,0,0,102,83,56,1,107,84,1,83,127,83,0,0,102,84,56,2,107,83,2,84,127,84,0,0,102,83,56,3,107,84,3,83,127,83,0,0,88,57,83,0,65,58,55,57,127,83,0,0,89,83,58,0,127,83,0,0,114,53,83,0,127,84,0,0,102,84,84,1,107,53,1,84,127,83,0,0,102,83,83,2,107,53,2,83,127,84,0,0,102,84,84,3,107,53,3,84,25,60,0,44,25,61,1,44,127,84,0,0,114,84,61,0,127,84,0,0,102,83,61,1,107,84,1,83,127,83,0,0,102,84,61,2,107,83,2,84,127,84,0,0,102,83,61,3,107,84,3,83,127,83,0,0,88,62,83,0,25,63,2,8,127,83,0,0,114,83,63,0,127,83,0,0,102,84,63,1,107,83,1,84,127,84,0,0,102,83,63,2,107,84,2,83,127,83,0,0,102,84,63,3,107,83,3,84,127,84,0,0,88,64,84,0,65,65,62,64,127,84,0,0,89,84,65,0,127,84,0,0,114,60,84,0,127,83,0,0,102,83,83,1,107,60,1,83,127,84,0,0,102,84,84,2,107,60,2,84,127,83,0,0,102,83,83,3,107,60,3,83,25,66,0,48,25,67,1,48,127,83,0,0,114,83,67,0,127,83,0,0,102,84,67,1,107,83,1,84,127,84,0,0,102,83,67,2,107,84,2,83,127,83,0,0,102,84,67,3,107,83,3,84,127,84,0,0,88,68,84,0,127,84,0,0,89,84,68,0,127,84,0,0,114,66,84,0,127,83,0,0,102,83,83,1,107,66,1,83,127,84,0,0,102,84,84,2,107,66,2,84,127,83,0,0,102,83,83,3,107,66,3,83,25,69,0,52,25,71,1,52,127,83,0,0,114,83,71,0,127,83,0,0,102,84,71,1,107,83,1,84,127,84,0,0,102,83,71,2,107,84,2,83,127,83,0,0,102,84,71,3,107,83,3,84,127,84,0,0,88,72,84,0,127,84,0,0,89,84,72,0,127,84,0,0,114,69,84,0,127,83,0,0,102,83,83,1,107,69,1,83,127,84,0,0,102,84,84,2,107,69,2,84,127,83,0,0,102,83,83,3,107,69,3,83,25,73,0,56,25,74,1,56,127,83,0,0,114,83,74,0,127,83,0,0,102,84,74,1,107,83,1,84,127,84,0,0,102,83,74,2,107,84,2,83,127,83,0,0,102,84,74,3,107,83,3,84,127,84,0,0,88,75,84,0,127,84,0,0,89,84,75,0,127,84,0,0,114,73,84,0,127,83,0,0,102,83,83,1,107,73,1,83,127,84,0,0,102,84,84,2,107,73,2,84,127,83,0,0,102,83,83,3,107,73,3,83,25,76,0,60,25,77,1,60,127,83,0,0,114,83,77,0,127,83,0,0,102,84,77,1,107,83,1,84,127,84,0,0,102,83,77,2,107,84,2,83,127,83,0,0,102,84,77,3,107,83,3,84,127,84,0,0,88,78,84,0,127,84,0,0,89,84,78,0,127,84,0,0,114,76,84,0,127,83,0,0,102,83,83,1,107,76,1,83,127,84,0,0,102,84,84,2,107,76,2,84,127,83,0,0,102,83,83,3,107,76,3,83,139,0,0,0,140,3,156,0,0,0,0,0,2,151,0,0,252,5,0,0,2,152,0,0,255,0,0,0,2,153,0,0,128,0,0,0,1,149,0,0,136,154,0,0,0,150,154,0,136,154,0,0,1,155,144,0,3,154,154,155,137,154,0,0,130,154,0,0,136,155,0,0,49,154,154,155,0,161,2,0,135,154,0,0,109,0,24,2,134,138,0,0,248,178,5,0,1,0,0,0,135,20,4,0,1,0,0,0,134,26,0,0,240,9,6,0,1,20,0,0,19,155,138,152,134,154,0,0,112,243,5,0,26,155,0,0,1,154,244,5,82,48,154,0,106,67,26,4,82,81,26,0,134,90,0,0,140,117,4,0,48,67,81,0,33,154,90,0,120,154,14,0,19,154,138,152,134,104,0,0,228,124,2,0,1,154,0,0,109,150,68,104,1,154,244,5,82,105,154,0,106,106,26,4,82,107,26,0,25,155,150,68,134,154,0,0,216,19,4,0,105,106,107,155,1,154,244,5,82,108,154,0,106,109,26,4,82,110,26,0,134,111,0,0,68,71,4,0,108,109,110,0,82,112,111,0,134,154,0,0,148,105,6,0,26,0,0,0,1,145,0,0,25,147,112,24,1,148,0,0,0,113,147,0,1,154,0,0,53,154,113,154,216,161,2,0,119,0,61,1,1,148,0,0,0,114,147,0,26,146,114,24,106,115,0,28,33,154,115,0,120,154,196,0,1,154,248,5,82,116,154,0,0,117,146,0,82,118,117,0,106,119,118,4,0,120,146,0,82,121,120,0,82,122,121,0,134,123,0,0,68,71,4,0,116,119,122,0,82,124,123,0,1,154,0,0,46,154,124,154,68,162,2,0,82,125,123,0,0,126,146,0,19,154,125,152,135,127,5,0,154,126,0,2,0,148,127,0,0,128,148,0,1,154,0,0,46,154,128,154,168,162,2,0,0,129,145,0,1,154,0,0,46,154,129,154,124,162,2,0,0,130,145,0,0,131,148,0,134,154,0,0,224,123,3,0,130,131,0,0,119,0,12,0,0,132,148,0,0,145,132,0,106,133,0,20,1,154,0,0,46,154,133,154,168,162,2,0,106,134,0,20,0,135,148,0,134,154,0,0,16,44,5,0,134,135,0,0,0,136,148,0,1,154,0,0,46,154,136,154,60,163,2,0,0,137,146,0,25,154,137,8,106,139,154,4,0,144,139,0,0,140,144,0,0,141,146,0,25,154,141,8,53,154,140,154,224,162,2,0,119,0,24,0,0,142,144,0,82,143,151,0,106,3,142,8,106,4,3,4,106,5,142,8,82,6,5,0,134,7,0,0,68,71,4,0,143,4,6,0,82,8,7,0,1,154,0,0,46,154,8,154,44,163,2,0,82,9,7,0,0,10,148,0,38,155,9,127,135,154,6,0,155,10,142,0,2,0,0,0,0,11,144,0,106,12,11,4,0,144,12,0,119,0,228,255,0,13,148,0,1,154,0,0,46,154,13,154,252,164,2,0,0,14,148,0,0,15,148,0,1,155,144,0,94,155,15,155,109,150,96,155,25,155,150,96,1,154,144,0,3,154,15,154,106,154,154,4,109,155,4,154,25,155,150,96,134,154,0,0,244,184,5,0,14,155,0,0,0,16,148,0,0,17,148,0,106,155,17,72,109,150,104,155,25,155,150,104,25,154,17,72,106,154,154,4,109,155,4,154,25,155,150,104,134,154,0,0,196,181,5,0,16,155,0,0,0,18,148,0,0,19,148,0,106,21,19,40,112,22,21,12,113,150,24,22,0,23,148,0,106,24,23,40,112,25,24,16,25,154,150,24,113,154,4,25,106,155,150,24,109,150,16,155,25,155,150,16,25,154,150,24,106,154,154,4,109,155,4,154,106,155,150,16,109,150,112,155,25,155,150,112,25,154,150,16,106,154,154,4,109,155,4,154,25,155,150,112,134,154,0,0,68,187,5,0,18,155,0,0,0,27,148,0,0,28,148,0,106,155,28,88,109,150,120,155,25,155,150,120,25,154,28,88,106,154,154,4,109,155,4,154,25,155,150,120,134,154,0,0,192,186,5,0,27,155,0,0,0,29,148,0,0,30,148,0,94,155,30,153,97,150,153,155,3,155,150,153,3,154,30,153,106,154,154,4,109,155,4,154,3,154,150,153,3,155,30,153,106,155,155,8,109,154,8,155,3,154,150,153,134,155,0,0,172,207,4,0,29,154,0,0,0,31,148,0,0,32,148,0,1,155,168,0,90,33,32,155,134,155,0,0,20,112,5,0,31,33,0,0,0,34,148,0,0,35,148,0,112,36,35,112,134,155,0,0,168,239,5,0,34,36,0,0,0,37,148,0,0,38,148,0,106,39,38,104,0,40,148,0,106,41,40,108,134,155,0,0,220,115,3,0,37,39,41,0,0,42,148,0,0,43,148,0,1,155,192,0,90,44,43,155,134,155,0,0,128,234,5,0,42,44,0,0,1,147,0,0,0,45,146,0,25,155,45,16,134,46,0,0,116,54,6,0,155,0,0,0,33,155,46,0,120,155,13,0,0,47,146,0,25,155,47,16,106,49,155,4,0,147,49,0,0,50,148,0,1,155,0,0,53,155,50,155,64,165,2,0,119,0,34,255,0,51,148,0,0,145,51,0,119,0,31,255,0,52,146,0,106,53,52,32,1,155,0,0,53,155,53,155,100,165,2,0,119,0,25,255,0,54,146,0,25,155,54,24,106,55,155,4,0,56,146,0,106,57,56,32,25,155,57,16,53,155,55,155,100,166,2,0,1,155,248,5,82,72,155,0,0,73,146,0,82,74,73,0,106,75,74,4,0,76,146,0,82,77,76,0,82,78,77,0,134,79,0,0,68,71,4,0,72,75,78,0,1,155,0,6,82,80,155,0,0,82,146,0,82,83,82,0,106,84,83,4,0,85,146,0,82,86,85,0,82,87,86,0,134,88,0,0,68,71,4,0,80,84,87,0,82,89,88,0,1,155,0,0,46,155,89,155,0,166,2,0,82,91,88,0,0,92,146,0,19,154,91,152,135,155,5,0,154,92,0,2,0,93,145,0,1,155,0,0,14,155,79,155,1,154,0,0,14,154,93,154,19,155,155,154,121,155,12,0,0,94,145,0,106,95,94,24,1,155,0,0,46,155,95,155,72,166,2,0,106,96,0,28,33,155,96,0,120,155,4,0,0,97,145,0,106,98,97,24,0,145,98,0,0,99,146,0,106,100,99,32,0,146,100,0,0,101,146,0,52,155,101,112,196,161,2,0,119,0,187,255,1,155,0,6,82,58,155,0,0,59,146,0,82,60,59,0,106,61,60,4,0,62,146,0,82,63,62,0,82,64,63,0,134,65,0,0,68,71,4,0,58,61,64,0,82,66,65,0,1,155,0,0,46,155,66,155,180,166,2,0,82,68,65,0,0,69,146,0,19,154,68,152,135,155,5,0,154,69,0,2,0,70,146,0,25,155,70,24,106,71,155,4,0,147,71,0,119,0,192,254,0,102,145,0,1,155,0,0,53,155,102,155,224,166,2,0,137,150,0,0,139,0,0,0,0,103,145,0,1,154,248,0,3,154,103,154,134,155,0,0,96,46,6,0,154,0,0,0,137,150,0,0,139,0,0,0,140,0,111,0,0,0,0,0,1,103,0,0,136,107,0,0,0,104,107,0,136,107,0,0,1,108,16,1,3,107,107,108,137,107,0,0,130,107,0,0,136,108,0,0,49,107,107,108,56,167,2,0,135,107,0,0,25,6,104,92,25,5,104,80,25,4,104,68,25,3,104,56,25,2,104,44,25,1,104,32,25,0,104,20,1,107,4,1,3,7,104,107,1,107,248,0,3,8,104,107,1,107,236,0,3,19,104,107,1,107,224,0,3,30,104,107,1,107,212,0,3,41,104,107,1,107,200,0,3,52,104,107,1,107,188,0,3,63,104,107,1,107,176,0,3,74,104,107,1,107,164,0,3,85,104,107,1,107,152,0,3,96,104,107,1,107,140,0,3,9,104,107,1,107,128,0,3,10,104,107,25,11,104,116,25,12,104,104,1,107,48,0,1,108,36,0,134,13,0,0,168,171,5,0,107,108,0,0,0,100,13,0,0,14,100,0,134,108,0,0,72,230,5,0,14,0,0,0,0,15,100,0,25,16,15,32,1,108,0,0,83,16,108,0,0,17,100,0,25,18,17,33,1,108,0,0], eb + 163840);
  HEAPU8.set([83,18,108,0,0,20,100,0,25,21,20,36,59,108,0,0,89,21,108,0,0,22,100,0,82,23,22,0,134,24,0,0,104,233,2,0,23,0,0,0,1,108,36,0,85,108,24,0,1,108,36,0,82,25,108,0,127,108,0,0,61,107,0,0,0,0,0,63,89,108,107,0,127,107,0,0,114,7,107,0,127,108,0,0,102,108,108,1,107,7,1,108,127,107,0,0,102,107,107,2,107,7,2,107,127,108,0,0,102,108,108,3,107,7,3,108,25,26,7,4,127,108,0,0,61,107,0,0,0,0,0,63,89,108,107,0,127,107,0,0,114,26,107,0,127,108,0,0,102,108,108,1,107,26,1,108,127,107,0,0,102,107,107,2,107,26,2,107,127,108,0,0,102,108,108,3,107,26,3,108,25,27,7,8,127,108,0,0,61,107,0,0,0,0,0,63,89,108,107,0,127,107,0,0,114,27,107,0,127,108,0,0,102,108,108,1,107,27,1,108,127,107,0,0,102,107,107,2,107,27,2,107,127,108,0,0,102,108,108,3,107,27,3,108,0,102,8,0,0,105,7,0,25,106,102,12,78,108,105,0,83,102,108,0,25,102,102,1,25,105,105,1,54,108,102,106,0,169,2,0,82,108,8,0,85,0,108,0,106,107,8,4,109,0,4,107,106,108,8,8,109,0,8,108,134,108,0,0,152,233,5,0,25,0,0,0,1,108,36,0,82,28,108,0,1,108,140,4,82,29,108,0,28,108,29,2,38,108,108,255,0,31,108,0,76,108,31,0,58,32,108,0,127,108,0,0,89,108,32,0,127,108,0,0,114,19,108,0,127,107,0,0,102,107,107,1,107,19,1,107,127,108,0,0,102,108,108,2,107,19,2,108,127,107,0,0,102,107,107,3,107,19,3,107,25,33,19,4,1,107,144,4,82,34,107,0,28,107,34,2,38,107,107,255,0,35,107,0,76,107,35,0,58,36,107,0,127,107,0,0,89,107,36,0,127,107,0,0,114,33,107,0,127,108,0,0,102,108,108,1,107,33,1,108,127,107,0,0,102,107,107,2,107,33,2,107,127,108,0,0,102,108,108,3,107,33,3,108,25,37,19,8,1,108,144,4,82,38,108,0,1,108,0,0,4,39,108,38,28,108,39,2,38,108,108,255,0,40,108,0,76,108,40,0,58,42,108,0,127,108,0,0,89,108,42,0,127,108,0,0,114,37,108,0,127,107,0,0,102,107,107,1,107,37,1,107,127,108,0,0,102,108,108,2,107,37,2,108,127,107,0,0,102,107,107,3,107,37,3,107,0,102,30,0,0,105,19,0,25,106,102,12,78,107,105,0,83,102,107,0,25,102,102,1,25,105,105,1,54,107,102,106,80,170,2,0,82,107,30,0,85,1,107,0,106,108,30,4,109,1,4,108,106,107,30,8,109,1,8,107,134,107,0,0,204,229,5,0,28,1,0,0,0,43,100,0,82,44,43,0,134,45,0,0,104,233,2,0,44,0,0,0,0,99,45,0,1,107,36,0,82,46,107,0,0,47,99,0,134,107,0,0,204,235,5,0,46,47,0,0,0,48,99,0,127,107,0,0,61,108,0,0,0,0,0,63,89,107,108,0,127,108,0,0,114,41,108,0,127,107,0,0,102,107,107,1,107,41,1,107,127,108,0,0,102,108,108,2,107,41,2,108,127,107,0,0,102,107,107,3,107,41,3,107,25,49,41,4,127,107,0,0,61,108,0,0,0,0,0,63,89,107,108,0,127,108,0,0,114,49,108,0,127,107,0,0,102,107,107,1,107,49,1,107,127,108,0,0,102,108,108,2,107,49,2,108,127,107,0,0,102,107,107,3,107,49,3,107,25,50,41,8,127,107,0,0,61,108,0,0,0,0,0,63,89,107,108,0,127,108,0,0,114,50,108,0,127,107,0,0,102,107,107,1,107,50,1,107,127,108,0,0,102,108,108,2,107,50,2,108,127,107,0,0,102,107,107,3,107,50,3,107,0,102,52,0,0,105,41,0,25,106,102,12,78,107,105,0,83,102,107,0,25,102,102,1,25,105,105,1,54,107,102,106,136,171,2,0,82,107,52,0,85,2,107,0,106,108,52,4,109,2,4,108,106,107,52,8,109,2,8,107,134,107,0,0,152,233,5,0,48,2,0,0,0,51,99,0,127,107,0,0,59,108,0,0,89,107,108,0,127,108,0,0,114,63,108,0,127,107,0,0,102,107,107,1,107,63,1,107,127,108,0,0,102,108,108,2,107,63,2,108,127,107,0,0,102,107,107,3,107,63,3,107,25,53,63,4,127,107,0,0,59,108,0,0,89,107,108,0,127,108,0,0,114,53,108,0,127,107,0,0,102,107,107,1,107,53,1,107,127,108,0,0,102,108,108,2,107,53,2,108,127,107,0,0,102,107,107,3,107,53,3,107,25,54,63,8,127,107,0,0,59,108,0,0,89,107,108,0,127,108,0,0,114,54,108,0,127,107,0,0,102,107,107,1,107,54,1,107,127,108,0,0,102,108,108,2,107,54,2,108,127,107,0,0,102,107,107,3,107,54,3,107,0,102,74,0,0,105,63,0,25,106,102,12,78,107,105,0,83,102,107,0,25,102,102,1,25,105,105,1,54,107,102,106,132,172,2,0,82,107,74,0,85,3,107,0,106,108,74,4,109,3,4,108,106,107,74,8,109,3,8,107,134,107,0,0,204,229,5,0,51,3,0,0,0,55,100,0,82,56,55,0,134,57,0,0,104,233,2,0,56,0,0,0,0,97,57,0,1,107,108,13,1,108,0,0,134,58,0,0,136,23,5,0,107,108,0,0,134,59,0,0,152,100,5,0,58,0,0,0,0,98,59,0,0,60,97,0,0,61,98,0,1,107,1,0,1,109,1,0,1,110,1,0,134,108,0,0,240,102,3,0,60,107,61,109,110,0,0,0,1,108,140,4,82,62,108,0,28,108,62,2,38,108,108,255,0,64,108,0,76,108,64,0,58,65,108,0,58,101,65,0,0,66,97,0,58,67,101,0,127,108,0,0,89,108,67,0,127,108,0,0,114,85,108,0,127,110,0,0,102,110,110,1,107,85,1,110,127,108,0,0,102,108,108,2,107,85,2,108,127,110,0,0,102,110,110,3,107,85,3,110,25,68,85,4,0,69,97,0,1,110,156,0,3,70,69,110,25,71,70,4,127,110,0,0,114,110,71,0,127,110,0,0,102,108,71,1,107,110,1,108,127,108,0,0,102,110,71,2,107,108,2,110,127,110,0,0,102,108,71,3,107,110,3,108,127,108,0,0,88,72,108,0,0,73,97,0,1,108,156,0,3,75,73,108,127,108,0,0,114,108,75,0,127,108,0,0,102,110,75,1,107,108,1,110,127,110,0,0,102,108,75,2,107,110,2,108,127,108,0,0,102,110,75,3,107,108,3,110,127,110,0,0,88,76,110,0,66,77,72,76,58,78,101,0,65,79,77,78,127,110,0,0,89,110,79,0,127,110,0,0,114,68,110,0,127,108,0,0,102,108,108,1,107,68,1,108,127,110,0,0,102,110,110,2,107,68,2,110,127,108,0,0,102,108,108,3,107,68,3,108,25,80,85,8,127,108,0,0,59,110,1,0,89,108,110,0,127,110,0,0,114,80,110,0,127,108,0,0,102,108,108,1,107,80,1,108,127,110,0,0,102,110,110,2,107,80,2,110,127,108,0,0,102,108,108,3,107,80,3,108,0,102,96,0,0,105,85,0,25,106,102,12,78,108,105,0,83,102,108,0,25,102,102,1,25,105,105,1,54,108,102,106,140,174,2,0,82,108,96,0,85,4,108,0,106,110,96,4,109,4,4,110,106,108,96,8,109,4,8,108,134,108,0,0,0,235,5,0,66,4,0,0,0,81,97,0,127,108,0,0,59,110,0,0,89,108,110,0,127,110,0,0,114,9,110,0,127,108,0,0,102,108,108,1,107,9,1,108,127,110,0,0,102,110,110,2,107,9,2,110,127,108,0,0,102,108,108,3,107,9,3,108,25,82,9,4,127,108,0,0,59,110,0,0,89,108,110,0,127,110,0,0,114,82,110,0,127,108,0,0,102,108,108,1,107,82,1,108,127,110,0,0,102,110,110,2,107,82,2,110,127,108,0,0,102,108,108,3,107,82,3,108,25,83,9,8,1,108,144,4,82,84,108,0,28,108,84,2,38,108,108,255,0,86,108,0,76,108,86,0,58,87,108,0,127,108,0,0,89,108,87,0,127,108,0,0,114,83,108,0,127,110,0,0,102,110,110,1,107,83,1,110,127,108,0,0,102,108,108,2,107,83,2,108,127,110,0,0,102,110,110,3,107,83,3,110,0,102,10,0,0,105,9,0,25,106,102,12,78,110,105,0,83,102,110,0,25,102,102,1,25,105,105,1,54,110,102,106,160,175,2,0,82,110,10,0,85,5,110,0,106,108,10,4,109,5,4,108,106,110,10,8,109,5,8,110,134,110,0,0,204,229,5,0,81,5,0,0,0,88,97,0,127,110,0,0,61,108,0,0,0,0,0,63,89,110,108,0,127,108,0,0,114,11,108,0,127,110,0,0,102,110,110,1,107,11,1,110,127,108,0,0,102,108,108,2,107,11,2,108,127,110,0,0,102,110,110,3,107,11,3,110,25,89,11,4,127,110,0,0,61,108,0,0,0,0,0,63,89,110,108,0,127,108,0,0,114,89,108,0,127,110,0,0,102,110,110,1,107,89,1,110,127,108,0,0,102,108,108,2,107,89,2,108,127,110,0,0,102,110,110,3,107,89,3,110,25,90,11,8,127,110,0,0,61,108,0,0,0,0,0,63,89,110,108,0,127,108,0,0,114,90,108,0,127,110,0,0,102,110,110,1,107,90,1,110,127,108,0,0,102,108,108,2,107,90,2,108,127,110,0,0,102,110,110,3,107,90,3,110,0,102,12,0,0,105,11,0,25,106,102,12,78,110,105,0,83,102,110,0,25,102,102,1,25,105,105,1,54,110,102,106,168,176,2,0,82,110,12,0,85,6,110,0,106,108,12,4,109,6,4,108,106,110,12,8,109,6,8,110,134,110,0,0,152,233,5,0,88,6,0,0,0,91,99,0,0,92,97,0,134,110,0,0,204,235,5,0,91,92,0,0,0,93,97,0,61,108,0,0,0,0,160,63,134,110,0,0,192,173,5,0,93,108,0,0,0,94,98,0,134,110,0,0,112,193,5,0,94,0,0,0,0,95,100,0,137,104,0,0,139,95,0,0,140,3,97,0,0,0,0,0,1,93,0,0,136,95,0,0,0,94,95,0,127,95,0,0,114,95,1,0,127,95,0,0,102,96,1,1,107,95,1,96,127,96,0,0,102,95,1,2,107,96,2,95,127,95,0,0,102,96,1,3,107,95,3,96,127,96,0,0,88,3,96,0,127,96,0,0,114,96,2,0,127,96,0,0,102,95,2,1,107,96,1,95,127,95,0,0,102,96,2,2,107,95,2,96,127,96,0,0,102,95,2,3,107,96,3,95,127,95,0,0,88,4,95,0,65,15,3,4,25,26,1,16,127,95,0,0,114,95,26,0,127,95,0,0,102,96,26,1,107,95,1,96,127,96,0,0,102,95,26,2,107,96,2,95,127,95,0,0,102,96,26,3,107,95,3,96,127,96,0,0,88,37,96,0,25,48,2,4,127,96,0,0,114,96,48,0,127,96,0,0,102,95,48,1,107,96,1,95,127,95,0,0,102,96,48,2,107,95,2,96,127,96,0,0,102,95,48,3,107,96,3,95,127,95,0,0,88,59,95,0,65,70,37,59,63,81,15,70,25,92,1,32,127,95,0,0,114,95,92,0,127,95,0,0,102,96,92,1,107,95,1,96,127,96,0,0,102,95,92,2,107,96,2,95,127,95,0,0,102,96,92,3,107,95,3,96,127,96,0,0,88,5,96,0,25,6,2,8,127,96,0,0,114,96,6,0,127,96,0,0,102,95,6,1,107,96,1,95,127,95,0,0,102,96,6,2,107,95,2,96,127,96,0,0,102,95,6,3,107,96,3,95,127,95,0,0,88,7,95,0,65,8,5,7,63,9,81,8,25,10,1,48,127,95,0,0,114,95,10,0,127,95,0,0,102,96,10,1,107,95,1,96,127,96,0,0,102,95,10,2,107,96,2,95,127,95,0,0,102,96,10,3,107,95,3,96,127,96,0,0,88,11,96,0,25,12,2,12,127,96,0,0,114,96,12,0,127,96,0,0,102,95,12,1,107,96,1,95,127,95,0,0,102,96,12,2,107,95,2,96,127,96,0,0,102,95,12,3,107,96,3,95,127,95,0,0,88,13,95,0,65,14,11,13,63,16,9,14,127,95,0,0,89,95,16,0,127,95,0,0,114,0,95,0,127,96,0,0,102,96,96,1,107,0,1,96,127,95,0,0,102,95,95,2,107,0,2,95,127,96,0,0,102,96,96,3,107,0,3,96,25,17,0,4,25,18,1,4,127,96,0,0,114,96,18,0,127,96,0,0,102,95,18,1,107,96,1,95,127,95,0,0,102,96,18,2,107,95,2,96,127,96,0,0,102,95,18,3,107,96,3,95,127,95,0,0,88,19,95,0,127,95,0,0,114,95,2,0,127,95,0,0,102,96,2,1,107,95,1,96,127,96,0,0,102,95,2,2,107,96,2,95,127,95,0,0,102,96,2,3,107,95,3,96,127,96,0,0,88,20,96,0,65,21,19,20,25,22,1,20,127,96,0,0,114,96,22,0,127,96,0,0,102,95,22,1,107,96,1,95,127,95,0,0,102,96,22,2,107,95,2,96,127,96,0,0,102,95,22,3,107,96,3,95,127,95,0,0,88,23,95,0,25,24,2,4,127,95,0,0,114,95,24,0,127,95,0,0,102,96,24,1,107,95,1,96,127,96,0,0,102,95,24,2,107,96,2,95,127,95,0,0,102,96,24,3,107,95,3,96,127,96,0,0,88,25,96,0,65,27,23,25,63,28,21,27,25,29,1,36,127,96,0,0,114,96,29,0,127,96,0,0,102,95,29,1,107,96,1,95,127,95,0,0,102,96,29,2,107,95,2,96,127,96,0,0,102,95,29,3,107,96,3,95,127,95,0,0,88,30,95,0,25,31,2,8,127,95,0,0,114,95,31,0,127,95,0,0,102,96,31,1,107,95,1,96,127,96,0,0,102,95,31,2,107,96,2,95,127,95,0,0,102,96,31,3,107,95,3,96,127,96,0,0,88,32,96,0,65,33,30,32,63,34,28,33,25,35,1,52,127,96,0,0,114,96,35,0,127,96,0,0,102,95,35,1,107,96,1,95,127,95,0,0,102,96,35,2,107,95,2,96,127,96,0,0,102,95,35,3,107,96,3,95,127,95,0,0,88,36,95,0,25,38,2,12,127,95,0,0,114,95,38,0,127,95,0,0,102,96,38,1,107,95,1,96,127,96,0,0,102,95,38,2,107,96,2,95,127,95,0,0,102,96,38,3,107,95,3,96,127,96,0,0,88,39,96,0,65,40,36,39,63,41,34,40,127,96,0,0,89,96,41,0,127,96,0,0,114,17,96,0,127,95,0,0,102,95,95,1,107,17,1,95,127,96,0,0,102,96,96,2,107,17,2,96,127,95,0,0,102,95,95,3,107,17,3,95,25,42,0,8,25,43,1,8,127,95,0,0,114,95,43,0,127,95,0,0,102,96,43,1,107,95,1,96,127,96,0,0,102,95,43,2,107,96,2,95,127,95,0,0,102,96,43,3,107,95,3,96,127,96,0,0,88,44,96,0,127,96,0,0,114,96,2,0,127,96,0,0,102,95,2,1,107,96,1,95,127,95,0,0,102,96,2,2,107,95,2,96,127,96,0,0,102,95,2,3,107,96,3,95,127,95,0,0,88,45,95,0,65,46,44,45,25,47,1,24,127,95,0,0,114,95,47,0,127,95,0,0,102,96,47,1,107,95,1,96,127,96,0,0,102,95,47,2,107,96,2,95,127,95,0,0,102,96,47,3,107,95,3,96,127,96,0,0,88,49,96,0,25,50,2,4,127,96,0,0,114,96,50,0,127,96,0,0,102,95,50,1,107,96,1,95,127,95,0,0,102,96,50,2,107,95,2,96,127,96,0,0,102,95,50,3,107,96,3,95,127,95,0,0,88,51,95,0,65,52,49,51,63,53,46,52,25,54,1,40,127,95,0,0,114,95,54,0,127,95,0,0,102,96,54,1,107,95,1,96,127,96,0,0,102,95,54,2,107,96,2,95,127,95,0,0,102,96,54,3,107,95,3,96,127,96,0,0,88,55,96,0,25,56,2,8,127,96,0,0,114,96,56,0,127,96,0,0,102,95,56,1,107,96,1,95,127,95,0,0,102,96,56,2,107,95,2,96,127,96,0,0,102,95,56,3,107,96,3,95,127,95,0,0,88,57,95,0,65,58,55,57,63,60,53,58,25,61,1,56,127,95,0,0,114,95,61,0,127,95,0,0,102,96,61,1,107,95,1,96,127,96,0,0,102,95,61,2,107,96,2,95,127,95,0,0,102,96,61,3,107,95,3,96,127,96,0,0,88,62,96,0,25,63,2,12,127,96,0,0,114,96,63,0,127,96,0,0,102,95,63,1,107,96,1,95,127,95,0,0,102,96,63,2,107,95,2,96,127,96,0,0,102,95,63,3,107,96,3,95,127,95,0,0,88,64,95,0,65,65,62,64,63,66,60,65,127,95,0,0,89,95,66,0,127,95,0,0,114,42,95,0,127,96,0,0,102,96,96,1,107,42,1,96,127,95,0,0,102,95,95,2,107,42,2,95,127,96,0,0,102,96,96,3,107,42,3,96,25,67,0,12,25,68,1,12,127,96,0,0,114,96,68,0,127,96,0,0,102,95,68,1,107,96,1,95,127,95,0,0,102,96,68,2,107,95,2,96,127,96,0,0,102,95,68,3,107,96,3,95,127,95,0,0,88,69,95,0,127,95,0,0,114,95,2,0,127,95,0,0,102,96,2,1,107,95,1,96,127,96,0,0,102,95,2,2,107,96,2,95,127,95,0,0,102,96,2,3,107,95,3,96,127,96,0,0,88,71,96,0,65,72,69,71,25,73,1,28,127,96,0,0,114,96,73,0,127,96,0,0,102,95,73,1,107,96,1,95,127,95,0,0,102,96,73,2,107,95,2,96,127,96,0,0,102,95,73,3,107,96,3,95,127,95,0,0,88,74,95,0,25,75,2,4,127,95,0,0,114,95,75,0,127,95,0,0,102,96,75,1,107,95,1,96,127,96,0,0,102,95,75,2,107,96,2,95,127,95,0,0,102,96,75,3,107,95,3,96,127,96,0,0,88,76,96,0,65,77,74,76,63,78,72,77,25,79,1,44,127,96,0,0,114,96,79,0,127,96,0,0,102,95,79,1,107,96,1,95,127,95,0,0,102,96,79,2,107,95,2,96,127,96,0,0,102,95,79,3,107,96,3,95,127,95,0,0,88,80,95,0,25,82,2,8,127,95,0,0,114,95,82,0,127,95,0,0,102,96,82,1,107,95,1,96,127,96,0,0,102,95,82,2,107,96,2,95,127,95,0,0,102,96,82,3,107,95,3,96,127,96,0,0,88,83,96,0,65,84,80,83,63,85,78,84,25,86,1,60,127,96,0,0,114,96,86,0,127,96,0,0,102,95,86,1,107,96,1,95,127,95,0,0,102,96,86,2,107,95,2,96,127,96,0,0,102,95,86,3,107,96,3,95,127,95,0,0,88,87,95,0,25,88,2,12,127,95,0,0,114,95,88,0,127,95,0,0,102,96,88,1,107,95,1,96,127,96,0,0,102,95,88,2,107,96,2,95,127,95,0,0,102,96,88,3,107,95,3,96,127,96,0,0,88,89,96,0,65,90,87,89,63,91,85,90,127,96,0,0,89,96,91,0,127,96,0,0,114,67,96,0,127,95,0,0,102,95,95,1,107,67,1,95,127,96,0,0,102,96,96,2,107,67,2,96,127,95,0,0,102,95,95,3,107,67,3,95,139,0,0,0,140,2,97,0,0,0,0,0,1,91,0,0,136,95,0,0,0,92,95,0,136,95,0,0,1,96,144,3,3,95,95,96,137,95,0,0,130,95,0,0,136,96,0,0,49,95,95,96,180,185,2,0,135,95,0,0,1,95,0,2,3,3,92,95,1,95,240,1,3,85,92,95,1,95,228,1,3,7,92,95,1,95,216,1,3,68,92,95,1,95,204,1,3,77,92,95,1,95,192,1,3,86,92,95,1,95,180,1,3,76,92,95,1,95,168,1,3,67,92,95,1,95,156,1,3,6,92,95,1,95,144,1,3,84,92,95,1,95,132,1,3,70,92,95,1,95,120,1,3,5,92,95,1,95,56,1,3,74,92,95,1,95,40,1,3,4,92,95,1,95,232,0,3,73,92,95,1,95,168,0,3,72,92,95,25,2,92,104,25,79,92,40,1,95,80,3,3,78,92,95,1,95,16,3,3,71,92,95,1,95,208,2,3,20,92,95,1,95,144,2,3,31,92,95,1,95,128,2,3,83,92,95,1,95,116,2,3,42,92,95,1,95,104,2,3,53,92,95,1,95,92,2,3,69,92,95,1,95,80,2,3,62,92,95,1,95,68,2,3,63,92,95,1,95,56,2,3,66,92,95,1,95,44,2,3,64,92,95,1,95,32,2,3,75,92,95,1,95,20,2,3,82,92,95,1,95,8,2,3,65,92,95,0,10,92,0,0,8,0,0,0,9,1,0,0,11,8,0,25,12,11,8,82,13,12,0,134,95,0,0,220,191,5,0,78,13,0,0,0,14,8,0,25,15,14,8,82,16,15,0,134,95,0,0,156,197,5,0,20,16,0,0,0,90,79,0,0,93,78,0,25,94,90,64,82,95,93,0,85,90,95,0,25,90,90,4,25,93,93,4,54,95,90,94,252,186,2,0,0,90,2,0,0,93,20,0,25,94,90,64,82,95,93,0,85,90,95,0,25,90,90,4,25,93,93,4,54,95,90,94,32,187,2,0,134,95,0,0,200,98,1,0,71,79,2,0,0,90,72,0,0,93,71,0,25,94,90,64,82,95,93,0,85,90,95,0,25,90,90,4,25,93,93,4,54,95,90,94,80,187,2,0,134,95,0,0,48,94,0,0,31,72,0,0,0,90,71,0,0,93,31,0,25,94,90,64,78,95,93,0,83,90,95,0,25,90,90,1,25,93,93,1,54,95,90,94,128,187,2,0,0,17,9,0,25,18,17,4,82,19,18,0,76,95,19,0,58,21,95,0,59,95,2,0,65,22,95,21,1,95,140,4,82,23,95,0,76,95,23,0,58,24,95,0,66,25,22,24,59,95,1,0,64,26,25,95,58,88,26,0,0,27,9,0,25,28,27,4,25,29,28,4,82,30,29,0,76,95,30,0,58,32,95,0,59,95,2,0,65,33,95,32,1,95,144,4,82,34,95,0,76,95,34,0,58,35,95,0,66,36,33,35,59,95,1,0,64,37,95,36,58,89,37,0,58,38,88,0,127,95,0,0,89,95,38,0,127,95,0,0,114,42,95,0,127,96,0,0,102,96,96,1,107,42,1,96,127,95,0,0,102,95,95,2,107,42,2,95,127,96,0,0,102,96,96,3,107,42,3,96,25,39,42,4,58,40,89,0,127,96,0,0,89,96,40,0,127,96,0,0,114,39,96,0,127,95,0,0,102,95,95,1,107,39,1,95,127,96,0,0,102,96,96,2,107,39,2,96,127,95,0,0,102,95,95,3,107,39,3,95,25,41,42,8,127,95,0,0,59,96,255,255,89,95,96,0,127,96,0,0,114,41,96,0,127,95,0,0,102,95,95,1,107,41,1,95,127,96,0,0,102,96,96,2,107,41,2,96,127,95,0,0,102,95,95,3,107,41,3,95,0,90,53,0,0,93,42,0,25,94,90,12,78,95,93,0,83,90,95,0,25,90,90,1,25,93,93,1,54,95,90,94,208,188,2,0,0,90,73,0,0,93,71,0,25,94,90,64,82,95,93,0,85,90,95,0,25,90,90,4,25,93,93,4,54,95,90,94,244,188,2,0,82,95,53,0,85,4,95,0,106,96,53,4,109,4,4,96,106,95,53,8,109,4,8,95,134,95,0,0,132,134,3,0,83,73,4,0,58,43,88,0,127,95,0,0,89,95,43,0,127,95,0,0,114,62,95,0,127,96,0,0,102,96,96,1,107,62,1,96,127,95,0,0,102,95,95,2,107,62,2,95,127,96,0,0,102,96,96,3,107,62,3,96,25,44,62,4,58,45,89,0,127,96,0,0,89,96,45,0,127,96,0,0,114,44,96,0,127,95,0,0,102,95,95,1,107,44,1,95,127,96,0,0,102,96,96,2,107,44,2,96,127,95,0,0,102,95,95,3,107,44,3,95,25,46,62,8,127,95,0,0,59,96,253,255,89,95,96,0,127,96,0,0,114,46,96,0,127,95,0,0,102,95,95,1,107,46,1,95,127,96,0,0,102,96,96,2,107,46,2,96,127,95,0,0,102,95,95,3,107,46,3,95,0,90,63,0,0,93,62,0,25,94,90,12,78,95,93,0,83,90,95,0,25,90,90,1,25,93,93,1,54,95,90,94,236,189,2,0,0,90,74,0,0,93,71,0,25,94,90,64,82,95,93,0,85,90,95,0,25,90,90,4,25,93,93,4,54,95,90,94,16,190,2,0,82,95,63,0,85,5,95,0,106,96,63,4,109,5,4,96,106,95,63,8,109,5,8,95,134,95,0,0,132,134,3,0,69,74,5,0,82,95,69,0,85,70,95,0,106,96,69,4,109,70,4,96,106,95,69,8,109,70,8,95,82,95,83,0,85,84,95,0,106,96,83,4,109,84,4,96,106,95,83,8,109,84,8,95,134,95,0,0,20,28,4,0,64,70,84,0,82,95,64,0,85,6,95,0,106,96,64,4,109,6,4,96,106,95,64,8,109,6,8,95,134,95,0,0,180,162,5,0,66,6,0,0,0,90,75,0,1,93,141,13,25,94,90,12,78,95,93,0,83,90,95,0,25,90,90,1,25,93,93,1,54,95,90,94,184,190,2,0,82,95,66,0,85,67,95,0,106,96,66,4,109,67,4,96,106,95,66,8,109,67,8,95,82,95,75,0,85,76,95,0,106,96,75,4,109,76,4,96,106,95,75,8,109,76,8,95,134,47,0,0,216,165,4,0,67,76,0,0,58,80,47,0,82,95,83,0,85,86,95,0,106,96,83,4,109,86,4,96,106,95,83,8,109,86,8,95,82,95,75,0,85,77,95,0,106,96,75,4,109,77,4,96,106,95,75,8,109,77,8,95,134,48,0,0,216,165,4,0,86,77,0,0,58,81,48,0,59,87,0,0,58,49,80,0,59,95,0,0,70,50,49,95,120,50,56,0,58,56,87,0,82,95,66,0,85,68,95,0,106,96,66,4,109,68,4,96,106,95,66,8,109,68,8,95,134,95,0,0,236,125,4,0,65,68,56,0,82,95,65,0,85,7,95,0,106,96,65,4,109,7,4,96,106,95,65,8,109,7,8,95,82,95,83,0,85,85,95,0,106,96,83,4,109,85,4,96,106,95,83,8,109,85,8,95,134,95,0,0,52,32,4,0,82,7,85,0,0,57,8,0,78,95,82,0,83,10,95,0,102,96,82,1,107,10,1,96,102,95,82,2,107,10,2,95,102,96,82,3,107,10,3,96,102,95,82,4,107,10,4,95,102,96,82,5,107,10,5,96,102,95,82,6,107,10,6,95,102,96,82,7,107,10,7,96,0,58,9,0,25,59,58,4,25,60,59,8,78,61,60,0,82,96,10,0,85,3,96,0,106,95,10,4,109,3,4,95,134,95,0,0,244,131,2,0,57,3,61,0,137,92,0,0,139,0,0,0,58,51,81,0,68,52,51,0,58,54,80,0,66,55,52,54,58,87,55,0,58,56,87,0,82,95,66,0,85,68,95,0,106,96,66,4,109,68,4,96,106,95,66,8,109,68,8,95,134,95,0,0,236,125,4,0,65,68,56,0,82,95,65,0,85,7,95,0,106,96,65,4,109,7,4,96,106,95,65,8,109,7,8,95,82,95,83,0,85,85,95,0,106,96,83,4,109,85,4,96,106,95,83,8,109,85,8,95,134,95,0,0,52,32,4,0,82,7,85,0,0,57,8,0,78,95,82,0,83,10,95,0,102,96,82,1,107,10,1,96,102,95,82,2,107,10,2,95,102,96,82,3,107,10,3,96,102,95,82,4,107,10,4,95,102,96,82,5,107,10,5,96,102,95,82,6,107,10,6,95,102,96,82,7,107,10,7,96,0,58,9,0,25,59,58,4,25,60,59,8,78,61,60,0,82,96,10,0,85,3,96,0,106,95,10,4,109,3,4,95,134,95,0,0,244,131,2,0,57,3,61,0,137,92,0,0,139,0,0,0,140,3,94,0,0,0,0,0,1,90,0,0,136,92,0,0,0,91,92,0,25,3,1,12,127,92,0,0,114,92,3,0,127,92,0,0,102,93,3,1,107,92,1,93,127,93,0,0,102,92,3,2,107,93,2,92,127,92,0,0,102,93,3,3,107,92,3,93,127,93,0,0,88,4,93,0,127,93,0,0,114,93,2,0,127,93,0,0,102,92,2,1,107,93,1,92,127,92,0,0,102,93,2,2,107,92,2,93,127,93,0,0,102,92,2,3,107,93,3,92,127,92,0,0,88,15,92,0,65,26,4,15,127,92,0,0,114,92,1,0,127,92,0,0,102,93,1,1,107,92,1,93,127,93,0,0,102,92,1,2,107,93,2,92,127,92,0,0,102,93,1,3,107,92,3,93,127,93,0,0,88,37,93,0,25,48,2,12,127,93,0,0,114,93,48,0,127,93,0,0,102,92,48,1,107,93,1,92,127,92,0,0,102,93,48,2,107,92,2,93,127,93,0,0,102,92,48,3,107,93,3,92,127,92,0,0,88,59,92,0,65,70,37,59,63,81,26,70,25,89,1,4,127,92,0,0,114,92,89,0,127,92,0,0,102,93,89,1,107,92,1,93,127,93,0,0,102,92,89,2,107,93,2,92,127,92,0,0,102,93,89,3,107,92,3,93,127,93,0,0,88,5,93,0,25,6,2,8,127,93,0,0,114,93,6,0,127,93,0,0,102,92,6,1,107,93,1,92,127,92,0,0,102,93,6,2,107,92,2,93,127,93,0,0,102,92,6,3,107,93,3,92,127,92,0,0,88,7,92,0,65,8,5,7,63,9,81,8,25,10,1,8,127,92,0,0,114,92,10,0,127,92,0,0,102,93,10,1,107,92,1,93,127,93,0,0,102,92,10,2,107,93,2,92,127,92,0,0,102,93,10,3,107,92,3,93,127,93,0,0,88,11,93,0,25,12,2,4,127,93,0,0,114,93,12,0,127,93,0,0,102,92,12,1,107,93,1,92,127,92,0,0,102,93,12,2,107,92,2,93,127,93,0,0,102,92,12,3,107,93,3,92,127,92,0,0,88,13,92,0,65,14,11,13,64,16,9,14,127,92,0,0,89,92,16,0,127,92,0,0,114,0,92,0,127,93,0,0,102,93,93,1,107,0,1,93,127,92,0,0,102,92,92,2,107,0,2,92,127,93,0,0,102,93,93,3,107,0,3,93,25,17,0,4,25,18,1,12,127,93,0,0,114,93,18,0,127,93,0,0,102,92,18,1,107,93,1,92,127,92,0,0,102,93,18,2,107,92,2,93,127,93,0,0,102,92,18,3,107,93,3,92,127,92,0,0,88,19,92,0,25,20,2,4,127,92,0,0,114,92,20,0,127,92,0,0,102,93,20,1,107,92,1,93,127,93,0,0,102,92,20,2,107,93,2,92,127,92,0,0,102,93,20,3,107,92,3,93,127,93,0,0,88,21,93,0,65,22,19,21,25,23,1,4,127,93,0,0,114,93,23,0,127,93,0,0,102,92,23,1,107,93,1,92,127,92,0,0,102,93,23,2,107,92,2,93,127,93,0,0,102,92,23,3,107,93,3,92,127,92,0,0,88,24,92,0,25,25,2,12,127,92,0,0,114,92,25,0,127,92,0,0,102,93,25,1,107,92,1,93,127,93,0,0,102,92,25,2,107,93,2,92,127,92,0,0,102,93,25,3,107,92,3,93,127,93,0,0,88,27,93,0,65,28,24,27,63,29,22,28,25,30,1,8,127,93,0,0,114,93,30,0,127,93,0,0,102,92,30,1,107,93,1,92,127,92,0,0,102,93,30,2,107,92,2,93,127,93,0,0,102,92,30,3,107,93,3,92,127,92,0,0,88,31,92,0,127,92,0,0,114,92,2,0,127,92,0,0,102,93,2,1,107,92,1,93,127,93,0,0,102,92,2,2,107,93,2,92,127,92,0,0,102,93,2,3,107,92,3,93,127,93,0,0,88,32,93,0,65,33,31,32,63,34,29,33,127,93,0,0,114,93,1,0,127,93,0,0,102,92,1,1,107,93,1,92,127,92,0,0,102,93,1,2,107,92,2,93,127,93,0,0,102,92,1,3,107,93,3,92,127,92,0,0,88,35,92,0,25,36,2,8,127,92,0,0,114,92,36,0,127,92,0,0,102,93,36,1,107,92,1,93,127,93,0,0,102,92,36,2,107,93,2,92,127,92,0,0,102,93,36,3,107,92,3,93,127,93,0,0,88,38,93,0,65,39,35,38,64,40,34,39,127,93,0,0,89,93,40,0,127,93,0,0,114,17,93,0,127,92,0,0,102,92,92,1,107,17,1,92,127,93,0,0,102,93,93,2,107,17,2,93,127,92,0,0,102,92,92,3,107,17,3,92,25,41,0,8,25,42,1,12,127,92,0,0,114,92,42,0,127,92,0,0,102,93,42,1,107,92,1,93,127,93,0,0,102,92,42,2,107,93,2,92,127,92,0,0,102,93,42,3,107,92,3,93,127,93,0,0,88,43,93,0,25,44,2,8,127,93,0,0,114,93,44,0,127,93,0,0,102,92,44,1,107,93,1,92,127,92,0,0,102,93,44,2,107,92,2,93,127,93,0,0,102,92,44,3,107,93,3,92,127,92,0,0,88,45,92,0,65,46,43,45,25,47,1,8,127,92,0,0,114,92,47,0,127,92,0,0,102,93,47,1,107,92,1,93,127,93,0,0,102,92,47,2,107,93,2,92,127,92,0,0,102,93,47,3,107,92,3,93,127,93,0,0,88,49,93,0,25,50,2,12,127,93,0,0,114,93,50,0,127,93,0,0,102,92,50,1,107,93,1,92,127,92,0,0,102,93,50,2,107,92,2,93,127,93,0,0,102,92,50,3,107,93,3,92,127,92,0,0,88,51,92,0,65,52,49,51,63,53,46,52,127,92,0,0,114,92,1,0,127,92,0,0,102,93,1,1,107,92,1,93,127,93,0,0,102,92,1,2,107,93,2,92,127,92,0,0,102,93,1,3,107,92,3,93,127,93,0,0,88,54,93,0,25,55,2,4,127,93,0,0,114,93,55,0,127,93,0,0,102,92,55,1,107,93,1,92,127,92,0,0,102,93,55,2,107,92,2,93,127,93,0,0,102,92,55,3,107,93,3,92,127,92,0,0,88,56,92,0,65,57,54,56,63,58,53,57,25,60,1,4,127,92,0,0,114,92,60,0,127,92,0,0,102,93,60,1,107,92,1,93,127,93,0,0,102,92,60,2,107,93,2,92,127,92,0,0,102,93,60,3,107,92,3,93,127,93,0,0,88,61,93,0,127,93,0,0,114,93,2,0,127,93,0,0,102,92,2,1,107,93,1,92,127,92,0,0,102,93,2,2,107,92,2,93,127,93,0,0,102,92,2,3,107,93,3,92,127,92,0,0,88,62,92,0,65,63,61,62,64,64,58,63,127,92,0,0,89,92,64,0,127,92,0,0,114,41,92,0,127,93,0,0,102,93,93,1,107,41,1,93,127,92,0,0,102,92,92,2,107,41,2,92,127,93,0,0,102,93,93,3,107,41,3,93,25,65,0,12,25,66,1,12,127,93,0,0,114,93,66,0,127,93,0,0,102,92,66,1,107,93,1,92,127,92,0,0,102,93,66,2,107,92,2,93,127,93,0,0,102,92,66,3,107,93,3,92,127,92,0,0,88,67,92,0,25,68,2,12,127,92,0,0,114,92,68,0,127,92,0,0,102,93,68,1,107,92,1,93,127,93,0,0,102,92,68,2,107,93,2,92,127,92,0,0,102,93,68,3,107,92,3,93,127,93,0,0,88,69,93,0,65,71,67,69,127,93,0,0,114,93,1,0,127,93,0,0,102,92,1,1,107,93,1,92,127,92,0,0,102,93,1,2,107,92,2,93,127,93,0,0,102,92,1,3,107,93,3,92,127,92,0,0,88,72,92,0,127,92,0,0,114,92,2,0,127,92,0,0,102,93,2,1,107,92,1,93,127,93,0,0,102,92,2,2,107,93,2,92,127,92,0,0,102,93,2,3,107,92,3,93,127,93,0,0,88,73,93,0,65,74,72,73,64,75,71,74,25,76,1,4,127,93,0,0,114,93,76,0,127,93,0,0,102,92,76,1,107,93,1,92,127,92,0,0,102,93,76,2,107,92,2,93,127,93,0,0,102,92,76,3,107,93,3,92,127,92,0,0,88,77,92,0,25,78,2,4,127,92,0,0,114,92,78,0,127,92,0,0,102,93,78,1,107,92,1,93,127,93,0,0,102,92,78,2,107,93,2,92,127,92,0,0,102,93,78,3,107,92,3,93,127,93,0,0,88,79,93,0,65,80,77,79,64,82,75,80,25,83,1,8,127,93,0,0,114,93,83,0,127,93,0,0,102,92,83,1,107,93,1,92,127,92,0,0,102,93,83,2,107,92,2,93,127,93,0,0,102,92,83,3,107,93,3,92,127,92,0,0,88,84,92,0,25,85,2,8,127,92,0,0,114,92,85,0,127,92,0,0,102,93,85,1,107,92,1,93,127,93,0,0,102,92,85,2,107,93,2,92,127,92,0,0,102,93,85,3,107,92,3,93,127,93,0,0,88,86,93,0,65,87,84,86,64,88,82,87,127,93,0,0,89,93,88,0,127,93,0,0,114,65,93,0,127,92,0,0,102,92,92,1,107,65,1,92,127,93,0,0,102,93,93,2,107,65,2,93,127,92,0,0,102,92,92,3,107,65,3,92,139,0,0,0,140,2,137,0,0,0,0,0,1,131,0,0,136,135,0,0,0,132,135,0,136,135,0,0,1,136,16,1,3,135,135,136,137,135,0,0,130,135,0,0,136,136,0,0,49,135,135,136,172,201,2,0,135,135,0,0,1,135,140,0,3,7,132,135,1,135,128,0,3,6,132,135,25,5,132,112,25,4,132,96,25,3,132,88,25,2,132,80,25,127,132,32,25,9,132,24,25,32,132,16,25,43,132,8,0,54,132,0,1,135,248,0,3,65,132,135,1,135,232,0,3,76,132,135,1,135,216,0,3,87,132,135,1,135,200,0,3,98,132,135,1,135,188,0,3,109,132,135,1,135,176,0,3,10,132,135,1,135,164,0,3,21,132,135,1,135,152,0,3,24,132,135,0,8,1,0,0,25,8,0,25,26,25,44,82,27,26,0,0,124,27,0,0,28,8,0,134,29,0,0,16,217,5,0,28,0,0,0,0,129,29,0,0,30,129,0,134,31,0,0,60,191,5,0,30,0,0,0,0,126,31,0,0,33,126,0,1,135,23,13,1,136,6,0,134,34,0,0,76,48,5,0,33,135,136,0,0,120,34,0,0,35,126,0,1,136,30,13,1,135,6,0,134,36,0,0,76,48,5,0,35,136,135,0,0,121,36,0,0,37,126,0,1,135,37,13,1,136,6,0,134,38,0,0,76,48,5,0,37,135,136,0,0,122,38,0,0,39,126,0,1,136,44,13,1,135,6,0,134,40,0,0,76,48,5,0,39,136,135,0,0,123,40,0,0,41,124,0,88,42,41,0,59,135,90,0,72,44,42,135,121,44,32,0,0,45,120,0,1,136,1,0,134,135,0,0,128,234,5,0,45,136,0,0,0,46,121,0,1,136,1,0,134,135,0,0,128,234,5,0,46,136,0,0,0,47,122,0,1,136,0,0,134,135,0,0,128,234,5,0,47,136,0,0,0,48,123,0,1,136,0,0,134,135,0,0,128,234,5,0,48,136,0,0,0,49,120,0,0,128,49,0,0,50,121,0,0,125,50,0,0,51,124,0,88,52,51,0,89,127,52,0,25,53,127,4,1,135,0,0,85,53,135,0,119,0,109,0,0,55,124,0,88,56,55,0,59,135,180,0,72,57,56,135,121,57,34,0,0,58,120,0,1,136,0,0,134,135,0,0,128,234,5,0,58,136,0,0,0,59,121,0,1,136,1,0,134,135,0,0,128,234,5,0,59,136,0,0,0,60,122,0,1,136,1,0,134,135,0,0,128,234,5,0,60,136,0,0,0,61,123,0,1,136,0,0,134,135,0,0,128,234,5,0,61,136,0,0,0,62,121,0,0,128,62,0,0,63,122,0,0,125,63,0,0,64,124,0,88,66,64,0,59,135,90,0,64,67,66,135,89,127,67,0,25,68,127,4,1,135,1,0,85,68,135,0,119,0,71,0,0,69,124,0,88,70,69,0,59,135,14,1,72,71,70,135,0,72,120,0,121,71,33,0,1,136,0,0,134,135,0,0,128,234,5,0,72,136,0,0,0,73,121,0,1,136,0,0,134,135,0,0,128,234,5,0,73,136,0,0,0,74,122,0,1,136,1,0,134,135,0,0,128,234,5,0,74,136,0,0,0,75,123,0,1,136,1,0,134,135,0,0,128,234,5,0,75,136,0,0,0,77,122,0,0,128,77,0,0,78,123,0,0,125,78,0,0,79,124,0,88,80,79,0,59,135,180,0,64,81,80,135,89,127,81,0,25,82,127,4,1,135,2,0,85,82,135,0,119,0,33,0,1,136,1,0,134,135,0,0,128,234,5,0,72,136,0,0,0,83,121,0,1,136,0,0,134,135,0,0,128,234,5,0,83,136,0,0,0,84,122,0,1,136,0,0,134,135,0,0,128,234,5,0,84,136,0,0,0,85,123,0,1,136,1,0,134,135,0,0,128,234,5,0,85,136,0,0,0,86,123,0,0,128,86,0,0,88,120,0,0,125,88,0,0,89,124,0,88,90,89,0,59,135,14,1,64,91,90,135,89,127,91,0,25,92,127,4,1,135,3,0,85,92,135,0,119,0,1,0,0,93,128,0,61,135,0,0,0,0,0,63,89,9,135,0,25,94,9,4,59,135,1,0,89,94,135,0,82,135,9,0,85,32,135,0,106,136,9,4,109,32,4,136,82,136,32,0,85,2,136,0,106,135,32,4,109,2,4,135,134,135,0,0,244,184,5,0,93,2,0,0,0,95,125,0,61,135,0,0,0,0,0,63,89,43,135,0,25,96,43,4,59,135,0,0,89,96,135,0,82,135,43,0,85,54,135,0,106,136,43,4,109,54,4,136,82,136,54,0,85,3,136,0,106,135,54,4,109,3,4,135,134,135,0,0,244,184,5,0,95,3,0,0,0,97,128,0,0,99,129,0,25,100,99,56,25,101,100,4,88,102,101,0,68,103,102,0,88,104,127,0,65,105,103,104,59,135,90,0,66,106,105,135,127,135,0,0,89,135,106,0,127,135,0,0,114,65,135,0,127,136,0,0,102,136,136,1,107,65,1,136,127,135,0,0,102,135,135,2,107,65,2,135,127,136,0,0,102,136,136,3,107,65,3,136,25,107,65,4,127,136,0,0,59,135,0,0,89,136,135,0,127,135,0,0,114,107,135,0,127,136,0,0,102,136,136,1,107,107,1,136,127,135,0,0,102,135,135,2,107,107,2,135,127,136,0,0,102,136,136,3,107,107,3,136,25,108,65,8,127,136,0,0,59,135,0,0,89,136,135,0,127,135,0,0,114,108,135,0,127,136,0,0,102,136,136,1,107,108,1,136,127,135,0,0,102,135,135,2,107,108,2,135,127,136,0,0,102,136,136,3,107,108,3,136,25,110,65,12,127,136,0,0,59,135,0,0,89,136,135,0,127,135,0,0,114,110,135,0,127,136,0,0,102,136,136,1,107,110,1,136,127,135,0,0,102,135,135,2,107,110,2,135,127,136,0,0,102,136,136,3,107,110,3,136,0,130,76,0,0,133,65,0,25,134,130,16,78,136,133,0,83,130,136,0,25,130,130,1,25,133,133,1,54,136,130,134,184,206,2,0,82,136,76,0,85,4,136,0,106,135,76,4,109,4,4,135,106,136,76,8,109,4,8,136,106,135,76,12,109,4,12,135,134,135,0,0,168,213,5,0,97,4,0,0,0,111,125,0,0,112,129,0,25,113,112,56,25,114,113,4,88,115,114,0,88,116,127,0,59,135,90,0,64,117,135,116,65,118,115,117,59,135,90,0,66,119,118,135,127,135,0,0,89,135,119,0,127,135,0,0,114,87,135,0,127,136,0,0,102,136,136,1,107,87,1,136,127,135,0,0,102,135,135,2,107,87,2,135,127,136,0,0,102,136,136,3,107,87,3,136,25,11,87,4,127,136,0,0,59,135,0,0,89,136,135,0,127,135,0,0,114,11,135,0,127,136,0,0,102,136,136,1,107,11,1,136,127,135,0,0,102,135,135,2,107,11,2,135,127,136,0,0,102,136,136,3,107,11,3,136,25,12,87,8,127,136,0,0,59,135,0,0,89,136,135,0,127,135,0,0,114,12,135,0,127,136,0,0,102,136,136,1,107,12,1,136,127,135,0,0,102,135,135,2,107,12,2,135,127,136,0,0,102,136,136,3,107,12,3,136,25,13,87,12,127,136,0,0,59,135,0,0,89,136,135,0,127,135,0,0,114,13,135,0,127,136,0,0,102,136,136,1,107,13,1,136,127,135,0,0,102,135,135,2], eb + 174080);
  HEAPU8.set([107,13,2,135,127,136,0,0,102,136,136,3,107,13,3,136,0,130,98,0,0,133,87,0,25,134,130,16,78,136,133,0,83,130,136,0,25,130,130,1,25,133,133,1,54,136,130,134,28,208,2,0,82,136,98,0,85,5,136,0,106,135,98,4,109,5,4,135,106,136,98,8,109,5,8,136,106,135,98,12,109,5,12,135,134,135,0,0,168,213,5,0,111,5,0,0,0,14,128,0,88,15,127,0,127,135,0,0,89,135,15,0,127,135,0,0,114,109,135,0,127,136,0,0,102,136,136,1,107,109,1,136,127,135,0,0,102,135,135,2,107,109,2,135,127,136,0,0,102,136,136,3,107,109,3,136,25,16,109,4,127,136,0,0,59,135,0,0,89,136,135,0,127,135,0,0,114,16,135,0,127,136,0,0,102,136,136,1,107,16,1,136,127,135,0,0,102,135,135,2,107,16,2,135,127,136,0,0,102,136,136,3,107,16,3,136,25,17,109,8,127,136,0,0,59,135,0,0,89,136,135,0,127,135,0,0,114,17,135,0,127,136,0,0,102,136,136,1,107,17,1,136,127,135,0,0,102,135,135,2,107,17,2,135,127,136,0,0,102,136,136,3,107,17,3,136,0,130,10,0,0,133,109,0,25,134,130,12,78,136,133,0,83,130,136,0,25,130,130,1,25,133,133,1,54,136,130,134,32,209,2,0,82,136,10,0,85,6,136,0,106,135,10,4,109,6,4,135,106,136,10,8,109,6,8,136,134,136,0,0,192,190,5,0,14,6,0,0,0,18,125,0,88,19,127,0,59,136,90,0,64,20,19,136,127,136,0,0,89,136,20,0,127,136,0,0,114,21,136,0,127,135,0,0,102,135,135,1,107,21,1,135,127,136,0,0,102,136,136,2,107,21,2,136,127,135,0,0,102,135,135,3,107,21,3,135,25,22,21,4,127,135,0,0,59,136,0,0,89,135,136,0,127,136,0,0,114,22,136,0,127,135,0,0,102,135,135,1,107,22,1,135,127,136,0,0,102,136,136,2,107,22,2,136,127,135,0,0,102,135,135,3,107,22,3,135,25,23,21,8,127,135,0,0,59,136,0,0,89,135,136,0,127,136,0,0,114,23,136,0,127,135,0,0,102,135,135,1,107,23,1,135,127,136,0,0,102,136,136,2,107,23,2,136,127,135,0,0,102,135,135,3,107,23,3,135,0,130,24,0,0,133,21,0,25,134,130,12,78,135,133,0,83,130,135,0,25,130,130,1,25,133,133,1,54,135,130,134,36,210,2,0,82,135,24,0,85,7,135,0,106,136,24,4,109,7,4,136,106,135,24,8,109,7,8,135,134,135,0,0,192,190,5,0,18,7,0,0,82,135,127,0,85,0,135,0,106,136,127,4,109,0,4,136,137,132,0,0,139,0,0,0,140,2,131,0,0,0,0,0,1,125,0,0,136,129,0,0,0,126,129,0,136,129,0,0,1,130,176,1,3,129,129,130,137,129,0,0,130,129,0,0,136,130,0,0,49,129,129,130,176,210,2,0,135,129,0,0,1,129,240,0,3,3,126,129,1,129,224,0,3,118,126,129,1,129,208,0,3,116,126,129,1,129,192,0,3,6,126,129,1,129,176,0,3,123,126,129,1,129,160,0,3,112,126,129,1,129,144,0,3,5,126,129,1,129,128,0,3,122,126,129,25,115,126,112,25,4,126,96,25,121,126,80,25,114,126,64,25,2,126,48,25,120,126,32,25,111,126,16,1,129,160,1,3,110,126,129,1,129,144,1,3,119,126,129,1,129,128,1,3,113,126,129,1,129,112,1,3,21,126,129,1,129,96,1,3,32,126,129,1,129,80,1,3,43,126,129,1,129,64,1,3,54,126,129,1,129,48,1,3,65,126,129,1,129,32,1,3,117,126,129,1,129,16,1,3,76,126,129,1,129,0,1,3,87,126,129,0,7,0,0,58,8,1,0,0,98,7,0,25,9,98,32,25,12,9,12,82,13,12,0,82,14,13,0,32,15,14,0,0,16,7,0,121,15,6,0,25,17,16,80,1,129,1,0,83,17,129,0,137,126,0,0,139,0,0,0,25,18,16,32,25,19,18,16,80,20,19,0,41,129,20,16,42,129,129,16,0,22,129,0,0,23,7,0,25,24,23,32,25,25,24,12,82,26,25,0,25,27,26,12,82,28,27,0,41,129,22,4,3,29,28,129,0,124,110,0,0,127,29,0,25,128,124,16,78,129,127,0,83,124,129,0,25,124,124,1,25,127,127,1,54,129,124,128,228,211,2,0,0,30,7,0,25,31,30,28,82,33,31,0,0,124,119,0,0,127,33,0,25,128,124,16,78,129,127,0,83,124,129,0,25,124,124,1,25,127,127,1,54,129,124,128,20,212,2,0,1,129,16,0,134,34,0,0,180,228,4,0,110,119,129,0,32,35,34,0,120,35,239,0,82,129,110,0,85,111,129,0,106,130,110,4,109,111,4,130,106,129,110,8,109,111,8,129,106,130,110,12,109,111,12,130,82,130,119,0,85,120,130,0,106,129,119,4,109,120,4,129,106,130,119,8,109,120,8,130,106,129,119,12,109,120,12,129,134,129,0,0,144,205,3,0,21,111,120,0,82,129,21,0,85,2,129,0,106,130,21,4,109,2,4,130,106,129,21,8,109,2,8,129,106,130,21,12,109,2,12,130,134,130,0,0,16,132,5,0,113,2,0,0,0,36,7,0,25,37,36,32,88,38,37,0,58,39,8,0,65,40,38,39,82,130,113,0,85,114,130,0,106,129,113,4,109,114,4,129,106,130,113,8,109,114,8,130,106,129,113,12,109,114,12,129,134,129,0,0,68,34,4,0,32,114,40,0,82,129,119,0,85,121,129,0,106,130,119,4,109,121,4,130,106,129,119,8,109,121,8,129,106,130,119,12,109,121,12,130,82,130,32,0,85,4,130,0,106,129,32,4,109,4,4,129,106,130,32,8,109,4,8,130,106,129,32,12,109,4,12,129,134,129,0,0,8,211,3,0,43,121,4,0,0,124,119,0,0,127,43,0,25,128,124,16,78,129,127,0,83,124,129,0,25,124,124,1,25,127,127,1,54,129,124,128,84,213,2,0,0,41,7,0,25,42,41,32,25,44,42,8,88,45,44,0,58,46,8,0,65,47,45,46,58,48,8,0,65,49,47,48,61,129,0,0,0,0,0,63,65,50,49,129,82,129,113,0,85,115,129,0,106,130,113,4,109,115,4,130,106,129,113,8,109,115,8,129,106,130,113,12,109,115,12,130,134,130,0,0,68,34,4,0,54,115,50,0,82,130,119,0,85,122,130,0,106,129,119,4,109,122,4,129,106,130,119,8,109,122,8,130,106,129,119,12,109,122,12,129,82,129,54,0,85,5,129,0,106,130,54,4,109,5,4,130,106,129,54,8,109,5,8,129,106,130,54,12,109,5,12,130,134,130,0,0,8,211,3,0,65,122,5,0,0,124,119,0,0,127,65,0,25,128,124,16,78,130,127,0,83,124,130,0,25,124,124,1,25,127,127,1,54,130,124,128,28,214,2,0,0,51,7,0,25,52,51,28,82,53,52,0,0,124,53,0,0,127,119,0,25,128,124,16,78,130,127,0,83,124,130,0,25,124,124,1,25,127,127,1,54,130,124,128,76,214,2,0,0,55,7,0,25,56,55,32,88,57,56,0,0,58,7,0,25,59,58,32,25,60,59,8,88,61,60,0,58,62,8,0,65,63,61,62,63,64,57,63,0,66,7,0,25,67,66,32,89,67,64,0,0,68,7,0,25,69,68,32,88,70,69,0,0,71,7,0,25,72,71,32,25,73,72,4,88,74,73,0,73,75,70,74,121,75,8,0,0,77,7,0,25,78,77,32,25,79,78,4,88,80,79,0,0,81,7,0,25,82,81,32,89,82,80,0,1,130,16,0,134,83,0,0,180,228,4,0,110,119,130,0,32,84,83,0,120,84,68,0,82,130,110,0,85,112,130,0,106,129,110,4,109,112,4,129,106,130,110,8,109,112,8,130,106,129,110,12,109,112,12,129,82,129,119,0,85,123,129,0,106,130,119,4,109,123,4,130,106,129,119,8,109,123,8,129,106,130,119,12,109,123,12,130,134,130,0,0,144,205,3,0,76,112,123,0,82,130,76,0,85,6,130,0,106,129,76,4,109,6,4,129,106,130,76,8,109,6,8,130,106,129,76,12,109,6,12,129,134,129,0,0,16,132,5,0,117,6,0,0,82,129,113,0,85,116,129,0,106,130,113,4,109,116,4,130,106,129,113,8,109,116,8,129,106,130,113,12,109,116,12,130,82,130,117,0,85,118,130,0,106,129,117,4,109,118,4,129,106,130,117,8,109,118,8,130,106,129,117,12,109,118,12,129,134,129,0,0,8,211,3,0,87,116,118,0,82,129,87,0,85,3,129,0,106,130,87,4,109,3,4,130,106,129,87,8,109,3,8,129,106,130,87,12,109,3,12,130,134,85,0,0,64,61,4,0,3,0,0,0,58,109,85,0,58,86,109,0,59,130,1,0,73,88,86,130,121,88,3,0,137,126,0,0,139,0,0,0,0,89,7,0,25,90,89,32,25,91,90,16,80,92,91,0,25,130,92,1,41,130,130,16,42,130,130,16,0,93,130,0,84,91,93,0,0,94,7,0,25,95,94,32,25,96,95,16,80,97,96,0,41,130,97,16,42,130,130,16,0,99,130,0,0,100,7,0,25,101,100,32,25,102,101,12,82,103,102,0,82,104,103,0,13,105,99,104,120,105,3,0,137,126,0,0,139,0,0,0,0,106,7,0,25,107,106,28,82,108,107,0,0,124,108,0,0,127,110,0,25,128,124,16,78,130,127,0,83,124,130,0,25,124,124,1,25,127,127,1,54,130,124,128,120,216,2,0,0,10,7,0,25,11,10,80,1,130,1,0,83,11,130,0,137,126,0,0,139,0,0,0,140,2,131,0,0,0,0,0,1,125,0,0,136,129,0,0,0,126,129,0,136,129,0,0,1,130,176,1,3,129,129,130,137,129,0,0,130,129,0,0,136,130,0,0,49,129,129,130,224,216,2,0,135,129,0,0,1,129,240,0,3,3,126,129,1,129,224,0,3,118,126,129,1,129,208,0,3,116,126,129,1,129,192,0,3,6,126,129,1,129,176,0,3,123,126,129,1,129,160,0,3,112,126,129,1,129,144,0,3,5,126,129,1,129,128,0,3,122,126,129,25,115,126,112,25,4,126,96,25,121,126,80,25,114,126,64,25,2,126,48,25,120,126,32,25,111,126,16,1,129,160,1,3,110,126,129,1,129,144,1,3,119,126,129,1,129,128,1,3,113,126,129,1,129,112,1,3,21,126,129,1,129,96,1,3,32,126,129,1,129,80,1,3,43,126,129,1,129,64,1,3,54,126,129,1,129,48,1,3,65,126,129,1,129,32,1,3,117,126,129,1,129,16,1,3,76,126,129,1,129,0,1,3,87,126,129,0,7,0,0,58,8,1,0,0,98,7,0,25,9,98,32,25,12,9,12,82,13,12,0,82,14,13,0,32,15,14,0,0,16,7,0,121,15,6,0,25,17,16,80,1,129,1,0,83,17,129,0,137,126,0,0,139,0,0,0,25,18,16,32,25,19,18,16,80,20,19,0,41,129,20,16,42,129,129,16,0,22,129,0,0,23,7,0,25,24,23,32,25,25,24,12,82,26,25,0,25,27,26,12,82,28,27,0,41,129,22,4,3,29,28,129,0,124,110,0,0,127,29,0,25,128,124,16,78,129,127,0,83,124,129,0,25,124,124,1,25,127,127,1,54,129,124,128,20,218,2,0,0,30,7,0,25,31,30,28,82,33,31,0,0,124,119,0,0,127,33,0,25,128,124,16,78,129,127,0,83,124,129,0,25,124,124,1,25,127,127,1,54,129,124,128,68,218,2,0,1,129,16,0,134,34,0,0,180,228,4,0,110,119,129,0,32,35,34,0,120,35,239,0,82,129,110,0,85,111,129,0,106,130,110,4,109,111,4,130,106,129,110,8,109,111,8,129,106,130,110,12,109,111,12,130,82,130,119,0,85,120,130,0,106,129,119,4,109,120,4,129,106,130,119,8,109,120,8,130,106,129,119,12,109,120,12,129,134,129,0,0,76,208,3,0,21,111,120,0,82,129,21,0,85,2,129,0,106,130,21,4,109,2,4,130,106,129,21,8,109,2,8,129,106,130,21,12,109,2,12,130,134,130,0,0,180,132,5,0,113,2,0,0,0,36,7,0,25,37,36,32,88,38,37,0,58,39,8,0,65,40,38,39,82,130,113,0,85,114,130,0,106,129,113,4,109,114,4,129,106,130,113,8,109,114,8,130,106,129,113,12,109,114,12,129,134,129,0,0,92,36,4,0,32,114,40,0,82,129,119,0,85,121,129,0,106,130,119,4,109,121,4,130,106,129,119,8,109,121,8,129,106,130,119,12,109,121,12,130,82,130,32,0,85,4,130,0,106,129,32,4,109,4,4,129,106,130,32,8,109,4,8,130,106,129,32,12,109,4,12,129,134,129,0,0,128,216,3,0,43,121,4,0,0,124,119,0,0,127,43,0,25,128,124,16,78,129,127,0,83,124,129,0,25,124,124,1,25,127,127,1,54,129,124,128,132,219,2,0,0,41,7,0,25,42,41,32,25,44,42,8,88,45,44,0,58,46,8,0,65,47,45,46,58,48,8,0,65,49,47,48,61,129,0,0,0,0,0,63,65,50,49,129,82,129,113,0,85,115,129,0,106,130,113,4,109,115,4,130,106,129,113,8,109,115,8,129,106,130,113,12,109,115,12,130,134,130,0,0,92,36,4,0,54,115,50,0,82,130,119,0,85,122,130,0,106,129,119,4,109,122,4,129,106,130,119,8,109,122,8,130,106,129,119,12,109,122,12,129,82,129,54,0,85,5,129,0,106,130,54,4,109,5,4,130,106,129,54,8,109,5,8,129,106,130,54,12,109,5,12,130,134,130,0,0,128,216,3,0,65,122,5,0,0,124,119,0,0,127,65,0,25,128,124,16,78,130,127,0,83,124,130,0,25,124,124,1,25,127,127,1,54,130,124,128,76,220,2,0,0,51,7,0,25,52,51,28,82,53,52,0,0,124,53,0,0,127,119,0,25,128,124,16,78,130,127,0,83,124,130,0,25,124,124,1,25,127,127,1,54,130,124,128,124,220,2,0,0,55,7,0,25,56,55,32,88,57,56,0,0,58,7,0,25,59,58,32,25,60,59,8,88,61,60,0,58,62,8,0,65,63,61,62,63,64,57,63,0,66,7,0,25,67,66,32,89,67,64,0,0,68,7,0,25,69,68,32,88,70,69,0,0,71,7,0,25,72,71,32,25,73,72,4,88,74,73,0,73,75,70,74,121,75,8,0,0,77,7,0,25,78,77,32,25,79,78,4,88,80,79,0,0,81,7,0,25,82,81,32,89,82,80,0,1,130,16,0,134,83,0,0,180,228,4,0,110,119,130,0,32,84,83,0,120,84,68,0,82,130,110,0,85,112,130,0,106,129,110,4,109,112,4,129,106,130,110,8,109,112,8,130,106,129,110,12,109,112,12,129,82,129,119,0,85,123,129,0,106,130,119,4,109,123,4,130,106,129,119,8,109,123,8,129,106,130,119,12,109,123,12,130,134,130,0,0,76,208,3,0,76,112,123,0,82,130,76,0,85,6,130,0,106,129,76,4,109,6,4,129,106,130,76,8,109,6,8,130,106,129,76,12,109,6,12,129,134,129,0,0,180,132,5,0,117,6,0,0,82,129,113,0,85,116,129,0,106,130,113,4,109,116,4,130,106,129,113,8,109,116,8,129,106,130,113,12,109,116,12,130,82,130,117,0,85,118,130,0,106,129,117,4,109,118,4,129,106,130,117,8,109,118,8,130,106,129,117,12,109,118,12,129,134,129,0,0,128,216,3,0,87,116,118,0,82,129,87,0,85,3,129,0,106,130,87,4,109,3,4,130,106,129,87,8,109,3,8,129,106,130,87,12,109,3,12,130,134,85,0,0,60,63,4,0,3,0,0,0,58,109,85,0,58,86,109,0,59,130,1,0,73,88,86,130,121,88,3,0,137,126,0,0,139,0,0,0,0,89,7,0,25,90,89,32,25,91,90,16,80,92,91,0,25,130,92,1,41,130,130,16,42,130,130,16,0,93,130,0,84,91,93,0,0,94,7,0,25,95,94,32,25,96,95,16,80,97,96,0,41,130,97,16,42,130,130,16,0,99,130,0,0,100,7,0,25,101,100,32,25,102,101,12,82,103,102,0,82,104,103,0,13,105,99,104,120,105,3,0,137,126,0,0,139,0,0,0,0,106,7,0,25,107,106,28,82,108,107,0,0,124,108,0,0,127,110,0,25,128,124,16,78,130,127,0,83,124,130,0,25,124,124,1,25,127,127,1,54,130,124,128,168,222,2,0,0,10,7,0,25,11,10,80,1,130,1,0,83,11,130,0,137,126,0,0,139,0,0,0,140,1,72,0,0,0,0,0,2,66,0,0,88,1,0,0,2,67,0,0,8,6,0,0,2,68,0,0,60,1,0,0,2,69,0,0,40,1,0,0,1,64,0,0,136,70,0,0,0,65,70,0,136,70,0,0,25,70,70,64,137,70,0,0,130,70,0,0,136,71,0,0,49,70,70,71,44,223,2,0,135,70,0,0,25,71,65,40,109,65,40,71,25,71,65,40,25,70,65,40,109,71,4,70,135,70,7,0,67,0,0,0,3,70,0,66,134,44,0,0,188,53,6,0,70,0,0,0,33,70,44,0,120,70,27,0,3,70,0,66,106,60,70,4,0,63,60,0,1,70,0,0,53,70,60,70,124,223,2,0,119,0,20,0,0,3,63,0,134,70,0,0,128,65,6,0,3,0,0,0,0,6,63,0,25,71,65,40,134,70,0,0,160,45,6,0,6,71,0,0,135,70,8,0,67,0,0,0,0,10,63,0,26,71,10,8,134,70,0,0,208,78,6,0,71,0,0,0,135,70,7,0,67,0,0,0,119,0,225,255,25,70,65,40,134,18,0,0,188,53,6,0,70,0,0,0,33,70,18,0,120,70,18,0,25,70,65,40,106,29,70,4,0,63,29,0,1,70,0,0,53,70,29,70,252,223,2,0,119,0,11,0,0,35,63,0,134,70,0,0,128,65,6,0,35,0,0,0,0,39,63,0,3,71,0,66,134,70,0,0,160,45,6,0,39,71,0,0,119,0,234,255,135,70,8,0,67,0,0,0,25,70,0,16,134,40,0,0,188,53,6,0,70,0,0,0,33,70,40,0,120,70,14,0,25,70,0,16,106,41,70,4,0,63,41,0,1,70,0,0,53,70,41,70,96,224,2,0,119,0,7,0,0,42,63,0,26,71,42,8,134,70,0,0,228,94,6,0,71,0,0,0,119,0,238,255,1,70,188,0,94,43,0,70,82,45,43,0,33,70,45,0,121,70,21,0,106,46,0,24,1,70,0,0,46,70,46,70,220,224,2,0,106,47,0,24,106,48,47,28,1,70,0,0,46,70,48,70,220,224,2,0,106,49,0,24,106,50,49,28,1,70,188,0,94,51,0,70,106,52,51,4,1,70,188,0,94,53,0,70,82,54,53,0,134,70,0,0,200,79,4,0,50,52,54,0,25,71,0,8,134,70,0,0,128,65,6,0,71,0,0,0,1,71,0,0,109,0,24,71,1,71,188,0,94,55,0,71,134,71,0,0,148,105,6,0,55,0,0,0,106,56,0,28,1,71,0,0,46,71,56,71,40,225,2,0,106,57,0,28,134,71,0,0,52,67,4,0,57,0,0,0,1,70,0,1,3,70,0,70,134,71,0,0,84,18,6,0,70,0,0,0,1,71,248,0,3,71,0,71,134,58,0,0,188,53,6,0,71,0,0,0,33,71,58,0,120,71,12,0,1,71,248,0,3,71,0,71,106,59,71,4,1,70,248,0,3,70,0,70,134,71,0,0,84,18,6,0,70,0,0,0,134,71,0,0,92,11,4,0,59,0,0,0,1,70,248,0,3,70,0,70,134,71,0,0,84,18,6,0,70,0,0,0,25,71,0,32,134,61,0,0,188,53,6,0,71,0,0,0,33,71,61,0,120,71,7,0,25,71,0,32,106,1,71,4,26,70,1,4,134,71,0,0,20,91,6,0,70,0,0,0,106,2,0,40,134,71,0,0,116,106,6,0,2,0,0,0,25,71,0,48,134,4,0,0,188,53,6,0,71,0,0,0,33,71,4,0,120,71,10,0,25,71,0,48,106,5,71,4,25,70,0,48,134,71,0,0,84,18,6,0,70,0,0,0,134,71,0,0,120,189,3,0,5,0,0,0,1,71,8,1,94,7,0,71,1,71,0,0,46,71,7,71,116,226,2,0,1,71,12,1,94,8,0,71,1,71,0,0,46,71,8,71,116,226,2,0,1,71,12,1,94,9,0,71,1,71,8,1,94,11,0,71,1,70,255,0,19,70,9,70,135,71,9,0,70,11,0,0,1,71,8,1,1,70,0,0,97,0,71,70,1,70,12,1,1,71,0,0,97,0,70,71,1,71,16,1,94,12,0,71,1,71,0,0,46,71,12,71,212,226,2,0,1,71,20,1,94,13,0,71,1,71,0,0,46,71,13,71,212,226,2,0,1,71,20,1,94,14,0,71,1,71,16,1,94,15,0,71,1,70,255,0,19,70,14,70,135,71,9,0,70,15,0,0,1,71,16,1,1,70,0,0,97,0,71,70,1,70,20,1,1,71,0,0,97,0,70,71,1,71,4,0,1,70,1,0,134,16,0,0,224,168,5,0,71,70,0,0,1,70,24,1,94,17,0,70,134,70,0,0,36,105,4,0,17,16,0,0,106,19,16,12,0,62,19,0,0,20,62,0,1,70,0,0,53,70,20,70,24,227,2,0,119,0,14,0,0,21,62,0,106,22,16,8,55,70,21,22,44,227,2,0,119,0,9,0,0,23,62,0,82,24,23,0,134,70,0,0,128,226,5,0,24,0,0,0,0,25,62,0,25,62,25,4,119,0,239,255,134,70,0,0,180,1,6,0,16,0,0,0,1,70,24,1,94,26,0,70,134,70,0,0,52,67,4,0,26,0,0,0,106,27,0,104,1,70,0,0,46,70,27,70,148,227,2,0,106,28,0,104,134,70,0,0,216,166,5,0,28,0,0,0,1,71,0,0,109,0,104,71,106,30,0,108,1,71,0,0,46,71,30,71,188,227,2,0,106,31,0,108,134,71,0,0,216,166,5,0,31,0,0,0,1,70,0,0,109,0,108,70,3,70,0,69,134,32,0,0,188,53,6,0,70,0,0,0,33,70,32,0,120,70,14,0,3,70,0,69,106,33,70,4,0,63,33,0,1,70,0,0,53,70,33,70,240,227,2,0,119,0,7,0,0,34,63,0,26,71,34,8,134,70,0,0,68,79,6,0,71,0,0,0,119,0,238,255,3,70,0,68,134,36,0,0,188,53,6,0,70,0,0,0,33,70,36,0,121,70,3,0,1,64,44,0,119,0,15,0,3,70,0,68,106,37,70,4,0,63,37,0,1,70,0,0,53,70,37,70,72,228,2,0,1,64,44,0,119,0,7,0,0,38,63,0,26,71,38,8,134,70,0,0,68,79,6,0,71,0,0,0,119,0,235,255,32,70,64,44,121,70,14,0,1,70,48,1,1,71,0,0,97,0,70,71,1,71,68,1,1,70,0,0,97,0,71,70,1,71,72,1,3,71,0,71,134,70,0,0,144,160,5,0,71,0,0,0,137,65,0,0,139,0,0,0,139,0,0,0,140,3,195,0,0,0,0,0,2,191,0,0,255,255,0,0,2,192,0,0,255,0,0,0,1,189,0,0,136,193,0,0,0,190,193,0,1,193,20,0,16,5,193,1,120,5,38,1,1,193,9,0,1,194,10,0,138,1,193,194,8,229,2,0,92,229,2,0,212,229,2,0,64,230,2,0,188,230,2,0,72,231,2,0,188,231,2,0,72,232,2,0,188,232,2,0,16,233,2,0,119,0,24,1,82,119,2,0,0,6,119,0,1,193,0,0,25,31,193,4,0,140,31,0,26,139,140,1,3,42,6,139,1,193,0,0,25,53,193,4,0,143,53,0,26,142,143,1,40,193,142,255,0,141,193,0,19,193,42,141,0,64,193,0,0,75,64,0,82,86,75,0,25,129,75,4,85,2,129,0,85,0,86,0,119,0,3,1,82,123,2,0,0,97,123,0,1,193,0,0,25,108,193,4,0,145,108,0,26,144,145,1,3,7,97,144,1,193,0,0,25,18,193,4,0,148,18,0,26,147,148,1,40,193,147,255,0,146,193,0,19,193,7,146,0,23,193,0,0,24,23,0,82,25,24,0,25,136,24,4,85,2,136,0,34,26,25,0,41,193,26,31,42,193,193,31,0,27,193,0,0,28,0,0,0,29,28,0,85,29,25,0,25,30,28,4,0,32,30,0,85,32,27,0,119,0,229,0,82,127,2,0,0,33,127,0,1,193,0,0,25,34,193,4,0,150,34,0,26,149,150,1,3,35,33,149,1,193,0,0,25,36,193,4,0,153,36,0,26,152,153,1,40,193,152,255,0,151,193,0,19,193,35,151,0,37,193,0,0,38,37,0,82,39,38,0,25,137,38,4,85,2,137,0,0,40,0,0,0,41,40,0,85,41,39,0,25,43,40,4,0,44,43,0,1,193,0,0,85,44,193,0,119,0,202,0,82,128,2,0,0,45,128,0,1,193,0,0,25,46,193,8,0,155,46,0,26,154,155,1,3,47,45,154,1,193,0,0,25,48,193,8,0,158,48,0,26,157,158,1,40,193,157,255,0,156,193,0,19,193,47,156,0,49,193,0,0,50,49,0,0,51,50,0,0,52,51,0,82,54,52,0,25,55,51,4,0,56,55,0,82,57,56,0,25,138,50,8,85,2,138,0,0,58,0,0,0,59,58,0,85,59,54,0,25,60,58,4,0,61,60,0,85,61,57,0,119,0,171,0,82,120,2,0,0,62,120,0,1,193,0,0,25,63,193,4,0,160,63,0,26,159,160,1,3,65,62,159,1,193,0,0,25,66,193,4,0,163,66,0,26,162,163,1,40,193,162,255,0,161,193,0,19,193,65,161,0,67,193,0,0,68,67,0,82,69,68,0,25,130,68,4,85,2,130,0,19,193,69,191,0,70,193,0,41,193,70,16,42,193,193,16,0,71,193,0,34,72,71,0,41,193,72,31,42,193,193,31,0,73,193,0,0,74,0,0,0,76,74,0,85,76,71,0,25,77,74,4,0,78,77,0,85,78,73,0,119,0,136,0,82,121,2,0,0,79,121,0,1,193,0,0,25,80,193,4,0,165,80,0,26,164,165,1,3,81,79,164,1,193,0,0,25,82,193,4,0,168,82,0,26,167,168,1,40,193,167,255,0,166,193,0,19,193,81,166,0,83,193,0,0,84,83,0,82,85,84,0,25,131,84,4,85,2,131,0,19,193,85,191,0,4,193,0,0,87,0,0,0,88,87,0,85,88,4,0,25,89,87,4,0,90,89,0,1,193,0,0,85,90,193,0,119,0,107,0,82,122,2,0,0,91,122,0,1,193,0,0,25,92,193,4,0,170,92,0,26,169,170,1,3,93,91,169,1,193,0,0,25,94,193,4,0,173,94,0,26,172,173,1,40,193,172,255,0,171,193,0,19,193,93,171,0,95,193,0,0,96,95,0,82,98,96,0,25,132,96,4,85,2,132,0,19,193,98,192,0,99,193,0,41,193,99,24,42,193,193,24,0,100,193,0,34,101,100,0,41,193,101,31,42,193,193,31,0,102,193,0,0,103,0,0,0,104,103,0,85,104,100,0,25,105,103,4,0,106,105,0,85,106,102,0,119,0,72,0,82,124,2,0,0,107,124,0,1,193,0,0,25,109,193,4,0,175,109,0,26,174,175,1,3,110,107,174,1,193,0,0,25,111,193,4,0,178,111,0,26,177,178,1,40,193,177,255,0,176,193,0,19,193,110,176,0,112,193,0,0,113,112,0,82,114,113,0,25,133,113,4,85,2,133,0,19,193,114,192,0,3,193,0,0,115,0,0,0,116,115,0,85,116,3,0,25,117,115,4,0,118,117,0,1,193,0,0,85,118,193,0,119,0,43,0,82,125,2,0,0,8,125,0,1,193,0,0,25,9,193,8,0,180,9,0,26,179,180,1,3,10,8,179,1,193,0,0,25,11,193,8,0,183,11,0,26,182,183,1,40,193,182,255,0,181,193,0,19,193,10,181,0,12,193,0,0,13,12,0,86,14,13,0,25,134,13,8,85,2,134,0,87,0,14,0,119,0,22,0,82,126,2,0,0,15,126,0,1,193,0,0,25,16,193,8,0,185,16,0,26,184,185,1,3,17,15,184,1,193,0,0,25,19,193,8,0,188,19,0,26,187,188,1,40,193,187,255,0,186,193,0,19,193,17,186,0,20,193,0,0,21,20,0,86,22,21,0,25,135,21,8,85,2,135,0,87,0,22,0,119,0,1,0,139,0,0,0,140,1,108,0,0,0,0,0,1,102,0,0,136,106,0,0,0,103,106,0,136,106,0,0,25,106,106,96,137,106,0,0,130,106,0,0,136,107,0,0,49,106,106,107,156,233,2,0,135,106,0,0,25,2,103,80,25,13,103,64,25,24,103,48,25,35,103,32,25,46,103,16,0,1,0,0,1,106,108,1,1,107,51,0,134,57,0,0,168,171,5,0,106,107,0,0,0,100,57,0,0,68,100,0,134,107,0,0,164,75,6,0,68,0,0,0,0,79,100,0,25,90,79,8,134,107,0,0,164,75,6,0,90,0,0,0,0,3,100,0,25,4,3,24,134,107,0,0,164,75,6,0,4,0,0,0,0,5,100,0,25,6,5,32,134,107,0,0,164,75,6,0,6,0,0,0,0,7,100,0,25,8,7,40,134,107,0,0,164,75,6,0,8,0,0,0,0,9,100,0,25,10,9,76,134,107,0,0,164,75,6,0,10,0,0,0,0,11,100,0,25,12,11,84,134,107,0,0,164,75,6,0,12,0,0,0,0,14,100,0,25,15,14,92,134,107,0,0,164,75,6,0,15,0,0,0,0,16,100,0,25,17,16,68,134,107,0,0,164,75,6,0,17,0,0,0,0,18,100,0,25,19,18,16,134,107,0,0,164,75,6,0,19,0,0,0,0,20,100,0,25,21,20,52,134,107,0,0,232,86,6,0,21,0,0,0,0,22,100,0,25,23,22,48,1,107,0,0,85,23,107,0,0,25,100,0,25,26,25,104,1,107,255,255,85,26,107,0,0,27,100,0,1,107,60,1,3,28,27,107,1,107,255,255,85,28,107,0,0,29,100,0,25,30,29,108,127,107,0,0,59,106,0,0,89,107,106,0,127,106,0,0,114,2,106,0,127,107,0,0,102,107,107,1,107,2,1,107,127,106,0,0,102,106,106,2,107,2,2,106,127,107,0,0,102,107,107,3,107,2,3,107,25,31,2,4,127,107,0,0,59,106,0,0,89,107,106,0,127,106,0,0,114,31,106,0,127,107,0,0,102,107,107,1,107,31,1,107,127,106,0,0,102,106,106,2,107,31,2,106,127,107,0,0,102,107,107,3,107,31,3,107,25,32,2,8,127,107,0,0,59,106,0,0,89,107,106,0,127,106,0,0,114,32,106,0,127,107,0,0,102,107,107,1,107,32,1,107,127,106,0,0,102,106,106,2,107,32,2,106,127,107,0,0,102,107,107,3,107,32,3,107,25,33,2,12,127,107,0,0,59,106,0,0,89,107,106,0,127,106,0,0,114,33,106,0,127,107,0,0,102,107,107,1,107,33,1,107,127,106,0,0,102,106,106,2,107,33,2,106,127,107,0,0,102,107,107,3,107,33,3,107,0,101,30,0,0,104,2,0,25,105,101,16,78,107,104,0,83,101,107,0,25,101,101,1,25,104,104,1,54,107,101,105,216,235,2,0,0,34,100,0,25,36,34,124,127,107,0,0,59,106,1,0,89,107,106,0,127,106,0,0,114,13,106,0,127,107,0,0,102,107,107,1,107,13,1,107,127,106,0,0,102,106,106,2,107,13,2,106,127,107,0,0,102,107,107,3,107,13,3,107,25,37,13,4,127,107,0,0,59,106,1,0,89,107,106,0,127,106,0,0,114,37,106,0,127,107,0,0,102,107,107,1,107,37,1,107,127,106,0,0,102,106,106,2,107,37,2,106,127,107,0,0,102,107,107,3,107,37,3,107,25,38,13,8,127,107,0,0,59,106,1,0,89,107,106,0,127,106,0,0,114,38,106,0,127,107,0,0,102,107,107,1,107,38,1,107,127,106,0,0,102,106,106,2,107,38,2,106,127,107,0,0,102,107,107,3,107,38,3,107,25,39,13,12,127,107,0,0,59,106,0,0,89,107,106,0,127,106,0,0,114,39,106,0,127,107,0,0,102,107,107,1,107,39,1,107,127,106,0,0,102,106,106,2,107,39,2,106,127,107,0,0,102,107,107,3,107,39,3,107,0,101,36,0,0,104,13,0,25,105,101,16,78,107,104,0,83,101,107,0,25,101,101,1,25,104,104,1,54,107,101,105,240,236,2,0,0,40,100,0,1,107,140,0,3,41,40,107,127,107,0,0,59,106,1,0,89,107,106,0,127,106,0,0,114,24,106,0,127,107,0,0,102,107,107,1,107,24,1,107,127,106,0,0,102,106,106,2,107,24,2,106,127,107,0,0,102,107,107,3,107,24,3,107,25,42,24,4,127,107,0,0,59,106,1,0,89,107,106,0,127,106,0,0,114,42,106,0,127,107,0,0,102,107,107,1,107,42,1,107,127,106,0,0,102,106,106,2,107,42,2,106,127,107,0,0,102,107,107,3,107,42,3,107,25,43,24,8,127,107,0,0,59,106,1,0,89,107,106,0,127,106,0,0,114,43,106,0,127,107,0,0,102,107,107,1,107,43,1,107,127,106,0,0,102,106,106,2,107,43,2,106,127,107,0,0,102,107,107,3,107,43,3,107,25,44,24,12,127,107,0,0,59,106,0,0,89,107,106,0,127,106,0,0,114,44,106,0,127,107,0,0,102,107,107,1,107,44,1,107,127,106,0,0,102,106,106,2,107,44,2,106,127,107,0,0,102,107,107,3,107,44,3,107,0,101,41,0,0,104,24,0,25,105,101,16,78,107,104,0,83,101,107,0,25,101,101,1,25,104,104,1,54,107,101,105,12,238,2,0,0,45,100,0,1,107,172,0,3,47,45,107,127,107,0,0,59,106,0,0,89,107,106,0,127,106,0,0,114,35,106,0,127,107,0,0,102,107,107,1,107,35,1,107,127,106,0,0,102,106,106,2,107,35,2,106,127,107,0,0,102,107,107,3,107,35,3,107,25,48,35,4,127,107,0,0,59,106,0,0,89,107,106,0,127,106,0,0,114,48,106,0,127,107,0,0,102,107,107,1,107,48,1,107,127,106,0,0,102,106,106,2,107,48,2,106,127,107,0,0,102,107,107,3,107,48,3,107,25,49,35,8,127,107,0,0,59,106,0,0,89,107,106,0,127,106,0,0,114,49,106,0,127,107,0,0,102,107,107,1,107,49,1,107,127,106,0,0,102,106,106,2,107,49,2,106,127,107,0,0,102,107,107,3,107,49,3,107,25,50,35,12,127,107,0,0,59,106,0,0,89,107,106,0,127,106,0,0,114,50,106,0,127,107,0,0,102,107,107,1,107,50,1,107,127,106,0,0,102,106,106,2,107,50,2,106,127,107,0,0,102,107,107,3,107,50,3,107,0,101,47,0,0,104,35,0,25,105,101,16,78,107,104,0,83,101,107,0,25,101,101,1,25,104,104,1,54,107,101,105,40,239,2,0,0,51,100,0,1,107,156,0,3,52,51,107,127,107,0,0,59,106,1,0,89,107,106,0,127,106,0,0,114,46,106,0,127,107,0,0,102,107,107,1,107,46,1,107,127,106,0,0,102,106,106,2,107,46,2,106,127,107,0,0,102,107,107,3,107,46,3,107,25,53,46,4,127,107,0,0,59,106,1,0,89,107,106,0,127,106,0,0,114,53,106,0,127,107,0,0,102,107,107,1,107,53,1,107,127,106,0,0,102,106,106,2,107,53,2,106,127,107,0,0,102,107,107,3,107,53,3,107,25,54,46,8,127,107,0,0,59,106,1,0,89,107,106,0,127,106,0,0,114,54,106,0,127,107,0,0,102,107,107,1,107,54,1,107,127,106,0,0,102,106,106,2,107,54,2,106,127,107,0,0,102,107,107,3,107,54,3,107,25,55,46,12,127,107,0,0,59,106,0,0,89,107,106,0,127,106,0,0,114,55,106,0,127,107,0,0,102,107,107,1,107,55,1,107,127,106,0,0,102,106,106,2,107,55,2,106,127,107,0,0,102,107,107,3,107,55,3,107,0,101,52,0,0,104,46,0,25,105,101,16,78,107,104,0,83,101,107,0,25,101,101,1,25,104,104,1,54,107,101,105,68,240,2,0,0,56,100,0,1,107,188,0,3,58,56,107,0,101,58,0,1,104,196,14,25,105,101,16,78,107,104,0,83,101,107,0,25,101,101,1,25,104,104,1,54,107,101,105,116,240,2,0,0,59,100,0,1,107,204,0,3,60,59,107,0,101,60,0,1,104,196,14,25,105,101,16,78,107,104,0,83,101,107,0,25,101,101,1,25,104,104,1,54,107,101,105,164,240,2,0,0,61,100,0,1,107,28,1,3,62,61,107,1,107,0,0,85,62,107,0,0,63,100,0,1,107,32,1,3,64,63,107,1,107,0,0,85,64,107,0,0,65,1,0,0,66,100,0,1,107,36,1,3,67,66,107,85,67,65,0,0,69,100,0,25,70,69,100,1,107,0,0,83,70,107,0,0,71,100,0,25,72,71,101,1,107,1,0,83,72,107,0,0,73,100,0,1,107,68,1,3,74,73,107,1,107,255,255,85,74,107,0,0,75,100,0,1,107,72,1,3,76,75,107,1,107,255,255,85,76,107,0,1,99,0,0,0,77,99,0,34,78,77,3,120,78,2,0,119,0,13,0,0,80,99,0,0,81,100,0,1,107,40,1,3,82,81,107,41,107,80,2,3,83,82,107,1,107,0,0,85,83,107,0,0,84,99,0,25,85,84,1,0,99,85,0,119,0,241,255,1,107,4,0,1,106,1,0,134,86,0,0,224,168,5,0,107,106,0,0,0,87,100,0,1,106,52,1,3,88,87,106,85,88,86,0,1,106,4,0,1,107,1,0,134,89,0,0,224,168,5,0,106,107,0,0,0,91,100,0,1,107,56,1,3,92,91,107,85,92,89,0,0,93,100,0,1,107,64,1,3,94,93,107,1,107,0,0,85,94,107,0,0,95,100,0,0,96,1,0,25,97,96,24,134,107,0,0,64,48,6,0,95,97,0,0,0,98,100,0,137,103,0,0,139,98,0,0,140,2,97,0,0,0,0,0,2,87,0,0,64,1,0,0,2,88,0,0,255,0,0,0,2,89,0,0,52,1,0,0,2,90,0,0,40,1,0,0,2,91,0,0,56,1,0,0,1,85,0,0,136,92,0,0,0,86,92,0,136,92,0,0,25,92,92,64,137,92,0,0,130,92,0,0,136,93,0,0,49,92,92,93,96,242,2,0,135,92,0,0,1,92,80,4,82,46,92,0,1,92,0,0,53,92,46,92,124,242,2,0,137,86,0,0,139,0,0,0,102,66,0,101,41,92,66,24,42,92,92,24,33,92,92,0,120,92,3,0,137,86,0,0,139,0,0,0,25,92,0,40,134,2,0,0,156,56,6,0,92,0,0,0,33,92,2,0,120,92,69,0,1,92,84,4,82,12,92,0,32,92,12,0,121,92,4,0,1,93,144,11,135,92,10,0,93,0,0,0,1,92,84,4,82,19,92,0,1,92,84,4,25,93,19,1,85,92,93,0,1,92,7,2,1,94,1,0,135,93,11,0,92,94,88,0,1,94,0,30,1,92,0,30,1,95,1,30,135,93,12,0,94,92,95,0,135,93,13,0,88,0,0,0,1,95,0,0,135,93,14,0,95,0,0,0,1,95,0,4,135,93,15,0,95,0,0,0,1,95,0,0,1,92,0,0,1,94,0,0,1,96,0,0,135,93,16,0,95,92,94,96,25,93,0,40,106,42,93,4,0,80,42,0,0,47,80,0,25,93,0,40,53,93,47,93,92,243,2,0,119,0,10,0,0,51,80,0,26,96,51,24,134,93,0,0,4,242,2,0,96,1,0,0,0,52,80,0,106,53,52,4,0,80,53,0,119,0,243,255,1,96,255,255,1,94,255,255,1,92,255,255,1,95,255,255,135,93,16,0,96,94,92,95,1,95,2,2,1,92,1,0,135,93,11,0,95,92,88,0,1,92,0,0,135,93,13,0,92,0,0,0,1,92,1,0,135,93,14,0,92,0,0,0,106,54,0,104,32,93,54,255,120,93,146,0,1,93,60,1,94,55,0,93,32,93,55,255,120,93,142,0,94,56,0,87,134,93,0,0,148,4,6,0,56,0,0,0,1,82,0,0,1,83,0,0,0,57,83,0,94,58,0,89,82,59,58,0,55,93,57,59,12,244,2,0,119,0,38,0,0,60,82,0,94,61,0,87,106,62,61,4,106,63,62,12,41,93,60,2,94,64,63,93,0,65,83,0,94,67,0,89,106,68,67,12,41,93,65,2,94,69,68,93,106,70,69,16,94,71,0,87,46,93,70,71,80,244,2,0,1,85,16,0,119,0,6,0,102,72,69,12,19,93,72,88,32,93,93,1,121,93,2,0,1,85,16,0,32,93,85,16,121,93,9,0,1,85,0,0,94,73,0,87,109,69,16,73,134,93,0,0,248,202,3,0,69,64,0,0,1,92,0,0,107,69,12,92,0,74,82,0,25,82,74,1,0,75,83,0,25,83,75,1,119,0,214,255,1,83,0,0,0,76,83,0,94,77,0,91,82,78,77,0,55,92,76,78,188,244,2,0,119,0,24,0,0,79,82,0,94,3,0,87,106,4,3,4,106,5,4,12,41,92,79,2,94,6,5,92,0,7,83,0,94,8,0,91,106,9,8,12,41,92,7,2,94,10,9,92,94,11,0,87,109,10,16,11,134,92,0,0,248,202,3,0,10,6,0,0,1,93,0,0,107,10,12,93,0,13,82,0,25,82,13,1,0,14,83,0,25,83,14,1,119,0,228,255,1,82,0,0,0,15,82,0,3,93,0,90,19,92,1,88,41,92,92,2,94,16,93,92,106,17,16,4,54,93,15,17,64,245,2,0,119,0,53,0,0,18,82,0,3,93,0,90,19,92,1,88,41,92,92,2,94,20,93,92,82,21,20,0,106,22,21,12,41,93,18,2,94,23,22,93,106,24,23,12,106,25,24,12,0,84,25,0,1,83,0,0,0,26,84,0,1,93,0,0,53,93,26,93,136,245,2,0,119,0,18,0,0,27,84,0,106,28,23,12,106,29,28,8,55,93,27,29,160,245,2,0,119,0,12,0,0,30,84,0,82,31,30,0,0,32,83,0,134,93,0,0,224,229,4,0,31,32,0,0,0,33,84,0,25,84,33,4,0,34,83,0,25,83,34,1,119,0,235,255,102,35,23,4,134,93,0,0,80,117,5,0,35,0,0,0,82,36,23,0,94,37,0,87,134,93,0,0,184,245,5,0,36,37,0,0,106,38,23,8,1,92,4,0,1,95,0,0,135,93,17,0,92,95,38,0,0,39,82,0,25,82,39,1,119,0,196,255,25,93,0,32,106,40,93,4,0,81,40,0,0,41,81,0,25,93,0,32,53,93,41,93,48,246,2,0,119,0,10,0,0,43,81,0,26,95,43,24,134,93,0,0,4,242,2,0,95,1,0,0,0,44,81,0,106,45,44,4,0,81,45,0,119,0,243,255,25,93,0,40,134,48,0,0,156,56,6,0,93,0,0,0,33,93,48,0,121,93,3,0,137,86,0,0,139,0,0,0,1,93,84,4,82,49,93,0,1,93,84,4,26,95,49,1,85,93,95,0,1,95,84,4,82,50,95,0,32,95,50,0,120,95,3,0,137,86,0,0,139,0,0,0,1,93,144,11,135,95,18,0,93,0,0,0,137,86,0,0,139,0,0,0,140,2,177,0,0,0,0,0,2,174,0,0,255,0,0,0,1,172,0,0,136,175,0,0,0,173,175,0,136,175,0,0,25,175,175,32,137,175,0,0,130,175,0,0,136,176,0,0,49,175,175,176,240,246,2,0,135,175,0,0,0,2,0,0,58,3,1,0,1,168,1,0,0,76,2,0,25,87,76,80,78,98,87,0,0,171,98,0,0,109,2,0,25,120,109,80,78,131,120,0,41,175,131,24,42,175,175,24,33,142,175,0,120,142,34,1,0,153,2,0,25,4,153,24,78,15,4,0,19,175,15,174,0,26,175,0,1,175,0,0,1,176,27,0,138,26,175,176,200,247,2,0,224,247,2,0,248,247,2,0,16,248,2,0,40,248,2,0,64,248,2,0,88,248,2,0,112,248,2,0,136,248,2,0,160,248,2,0,184,248,2,0,208,248,2,0,232,248,2,0,0,249,2,0,24,249,2,0,48,249,2,0,72,249,2,0,96,249,2,0,120,249,2,0,144,249,2,0,168,249,2,0,192,249,2,0,216,249,2,0,240,249,2,0,216,250,2,0,128,251,2,0,148,251,2,0,0,29,2,0,25,30,29,80,1,175,1,0,83,30,175,0,119,0,250,0,0,37,2,0,58,48,3,0,134,175,0,0,36,54,5,0,37,48,0,0,119,0,244,0,0,59,2,0,58,70,3,0,134,175,0,0,48,40,5,0,59,70,0,0,119,0,238,0,0,73,2,0,58,74,3,0], eb + 184320);
  HEAPU8.set([134,175,0,0,4,31,5,0,73,74,0,0,119,0,232,0,0,75,2,0,58,77,3,0,134,175,0,0,60,193,4,0,75,77,0,0,119,0,226,0,0,78,2,0,58,79,3,0,134,175,0,0,164,24,5,0,78,79,0,0,119,0,220,0,0,80,2,0,58,81,3,0,134,175,0,0,24,254,4,0,80,81,0,0,119,0,214,0,0,82,2,0,58,83,3,0,134,175,0,0,196,174,4,0,82,83,0,0,119,0,208,0,0,84,2,0,58,85,3,0,134,175,0,0,100,9,5,0,84,85,0,0,119,0,202,0,0,86,2,0,58,88,3,0,134,175,0,0,104,233,4,0,86,88,0,0,119,0,196,0,0,89,2,0,58,90,3,0,134,175,0,0,224,157,4,0,89,90,0,0,119,0,190,0,0,91,2,0,58,92,3,0,134,175,0,0,240,249,4,0,91,92,0,0,119,0,184,0,0,93,2,0,58,94,3,0,134,175,0,0,84,225,4,0,93,94,0,0,119,0,178,0,0,95,2,0,58,96,3,0,134,175,0,0,240,133,4,0,95,96,0,0,119,0,172,0,0,97,2,0,58,99,3,0,134,175,0,0,184,246,4,0,97,99,0,0,119,0,166,0,0,100,2,0,58,101,3,0,134,175,0,0,80,8,5,0,100,101,0,0,119,0,160,0,0,102,2,0,58,103,3,0,134,175,0,0,40,255,4,0,102,103,0,0,119,0,154,0,0,104,2,0,58,105,3,0,134,175,0,0,120,12,5,0,104,105,0,0,119,0,148,0,0,106,2,0,58,107,3,0,134,175,0,0,112,2,5,0,106,107,0,0,119,0,142,0,0,108,2,0,58,110,3,0,134,175,0,0,36,170,4,0,108,110,0,0,119,0,136,0,0,111,2,0,58,112,3,0,134,175,0,0,164,245,4,0,111,112,0,0,119,0,130,0,0,113,2,0,58,114,3,0,134,175,0,0,116,243,4,0,113,114,0,0,119,0,124,0,0,115,2,0,58,116,3,0,134,175,0,0,188,138,4,0,115,116,0,0,119,0,118,0,0,117,2,0,58,118,3,0,134,175,0,0,120,210,2,0,117,118,0,0,119,0,112,0,0,119,2,0,25,121,119,80,1,175,1,0,83,121,175,0,0,122,2,0,25,123,122,16,25,124,123,4,82,125,124,0,0,169,125,0,0,126,169,0,0,127,2,0,25,128,127,16,14,129,126,128,120,129,2,0,119,0,97,0,0,130,169,0,26,132,130,8,0,164,132,0,0,133,164,0,25,134,133,80,78,135,134,0,41,175,135,24,42,175,175,24,33,136,175,0,120,136,2,0,119,0,6,0,0,154,169,0,25,155,154,4,82,156,155,0,0,169,156,0,119,0,235,255,0,137,164,0,58,138,3,0,134,139,0,0,180,246,2,0,137,138,0,0,0,166,139,0,0,140,166,0,19,175,140,174,0,141,175,0,33,143,141,0,121,143,12,0,0,144,169,0,0,145,2,0,25,146,145,16,82,147,146,0,13,148,144,147,121,148,6,0,0,149,2,0,25,150,149,80,1,175,1,0,83,150,175,0,119,0,59,0,0,151,2,0,25,152,151,80,1,175,0,0,83,152,175,0,119,0,54,0,0,157,2,0,25,158,157,80,1,175,1,0,83,158,175,0,0,159,2,0,25,160,159,16,25,161,160,4,82,162,161,0,0,170,162,0,0,163,170,0,0,5,2,0,25,6,5,16,14,7,163,6,120,7,2,0,119,0,39,0,0,8,170,0,26,9,8,8,0,165,9,0,0,10,165,0,58,11,3,0,134,12,0,0,180,246,2,0,10,11,0,0,0,167,12,0,0,13,167,0,19,175,13,174,0,14,175,0,0,16,2,0,25,17,16,80,78,18,17,0,19,175,18,174,0,19,175,0,19,175,19,14,0,20,175,0,19,175,20,174,0,21,175,0,83,17,21,0,0,22,170,0,25,23,22,4,82,24,23,0,0,170,24,0,119,0,224,255,0,25,2,0,134,175,0,0,160,212,5,0,25,0,0,0,119,0,7,0,0,27,2,0,58,28,3,0,134,175,0,0,228,192,5,0,27,28,0,0,119,0,1,0,0,31,2,0,25,32,31,80,78,33,32,0,19,175,33,174,0,34,175,0,0,35,168,0,19,175,35,174,0,36,175,0,19,175,36,34,0,38,175,0,19,175,38,174,0,39,175,0,0,168,39,0,0,40,171,0,41,175,40,24,42,175,175,24,33,41,175,0,120,41,16,0,0,42,2,0,25,43,42,72,82,44,43,0,1,175,0,0,14,45,44,175,121,45,10,0,0,46,2,0,25,47,46,72,82,49,47,0,0,50,2,0,25,51,50,76,82,52,51,0,19,176,49,174,135,175,9,0,176,52,0,0,0,53,168,0,41,175,53,24,42,175,175,24,33,54,175,0,120,54,4,0,0,72,168,0,137,173,0,0,139,72,0,0,0,55,2,0,25,56,55,82,80,57,56,0,41,175,57,16,42,175,175,16,0,58,175,0,32,60,58,255,0,61,2,0,121,60,8,0,134,175,0,0,196,48,4,0,61,0,0,0,1,168,0,0,0,72,168,0,137,173,0,0,139,72,0,0,25,62,61,82,80,63,62,0,41,175,63,16,42,175,175,16,0,64,175,0,1,175,0,0,15,65,175,64,120,65,4,0,0,72,168,0,137,173,0,0,139,72,0,0,0,66,2,0,25,67,66,82,80,68,67,0,26,175,68,1,41,175,175,16,42,175,175,16,0,69,175,0,84,67,69,0,0,71,2,0,134,175,0,0,196,48,4,0,71,0,0,0,1,168,0,0,0,72,168,0,137,173,0,0,139,72,0,0,140,2,166,0,0,0,0,0,2,162,0,0,216,0,0,0,1,160,0,0,136,163,0,0,0,161,163,0,136,163,0,0,1,164,240,0,3,163,163,164,137,163,0,0,130,163,0,0,136,164,0,0,49,163,163,164,60,253,2,0,135,163,0,0,1,163,232,0,3,8,161,163,1,163,224,0,3,7,161,163,3,157,161,162,1,163,208,0,3,6,161,163,1,163,200,0,3,5,161,163,1,163,192,0,3,156,161,163,1,163,184,0,3,155,161,163,1,163,176,0,3,154,161,163,1,163,168,0,3,4,161,163,1,163,160,0,3,16,161,163,1,163,152,0,3,15,161,163,1,163,144,0,3,14,161,163,1,163,136,0,3,13,161,163,1,163,128,0,3,12,161,163,25,11,161,120,25,10,161,112,25,9,161,104,25,3,161,96,25,2,161,88,25,153,161,80,25,18,161,64,25,64,161,56,25,75,161,48,25,86,161,40,25,97,161,32,25,108,161,16,0,119,161,0,0,17,0,0,0,130,17,0,1,163,240,0,3,141,130,163,0,19,17,0,1,163,224,0,3,30,19,163,82,163,1,0,85,153,163,0,106,164,1,4,109,153,4,164,82,164,30,0,85,2,164,0,106,163,30,4,109,2,4,163,134,163,0,0,220,249,5,0,18,153,2,0,82,163,18,0,85,141,163,0,106,164,18,4,109,141,4,164,0,41,17,0,1,164,224,0,3,52,41,164,82,164,1,0,85,52,164,0,106,163,1,4,109,52,4,163,0,58,17,0,1,163,68,1,3,59,58,163,82,60,59,0,1,163,0,0,14,61,60,163,0,62,17,0,121,61,45,0,1,163,68,1,3,63,62,163,82,65,63,0,0,66,17,0,1,163,68,1,3,67,66,163,82,68,67,0,3,69,68,162,0,70,17,0,1,163,224,0,3,71,70,163,0,72,17,0,3,73,72,162,82,163,71,0,85,3,163,0,106,164,71,4,109,3,4,164,82,164,73,0,85,9,164,0,106,163,73,4,109,9,4,163,134,163,0,0,220,249,5,0,75,3,9,0,82,163,69,0,85,10,163,0,106,164,69,4,109,10,4,164,82,164,75,0,85,11,164,0,106,163,75,4,109,11,4,163,134,163,0,0,32,250,5,0,64,10,11,0,82,163,64,0,85,12,163,0,106,164,64,4,109,12,4,164,134,164,0,0,252,252,2,0,65,12,0,0,137,161,0,0,139,0,0,0,1,164,48,1,3,74,62,164,82,76,74,0,1,164,0,0,14,77,76,164,0,78,17,0,121,77,45,0,1,164,48,1,3,79,78,164,82,80,79,0,0,81,17,0,1,164,48,1,3,82,81,164,82,83,82,0,3,84,83,162,0,85,17,0,1,164,224,0,3,87,85,164,0,88,17,0,3,89,88,162,82,164,87,0,85,13,164,0,106,163,87,4,109,13,4,163,82,163,89,0,85,14,163,0,106,164,89,4,109,14,4,164,134,164,0,0,220,249,5,0,97,13,14,0,82,164,84,0,85,15,164,0,106,163,84,4,109,15,4,163,82,163,97,0,85,16,163,0,106,164,97,4,109,16,4,164,134,164,0,0,32,250,5,0,86,15,16,0,82,164,86,0,85,4,164,0,106,163,86,4,109,4,4,163,134,163,0,0,252,252,2,0,80,4,0,0,137,161,0,0,139,0,0,0,82,90,78,0,32,152,90,5,121,152,9,0,0,91,17,0,82,163,1,0,85,154,163,0,106,164,1,4,109,154,4,164,134,164,0,0,24,231,1,0,91,154,0,0,0,92,17,0,1,164,200,0,3,93,92,164,82,94,93,0,1,164,0,0,14,95,94,164,121,95,14,0,0,96,17,0,1,164,200,0,3,98,96,164,82,99,98,0,0,100,17,0,82,164,1,0,85,155,164,0,106,163,1,4,109,155,4,163,38,164,99,63,1,165,0,0,135,163,19,0,164,100,165,155,0,101,17,0,1,163,28,1,3,102,101,163,82,103,102,0,1,163,0,0,14,104,103,163,121,104,10,0,0,105,17,0,1,163,28,1,3,106,105,163,82,107,106,0,0,109,17,0,1,164,1,0,134,163,0,0,72,232,4,0,107,109,164,0,0,110,17,0,1,163,52,1,3,111,110,163,134,112,0,0,188,53,6,0,111,0,0,0,33,113,112,0,121,113,11,0,0,114,17,0,1,163,32,1,3,115,114,163,134,116,0,0,188,53,6,0,115,0,0,0,33,117,116,0,121,117,3,0,137,161,0,0,139,0,0,0,0,118,17,0,1,163,224,0,3,120,118,163,88,121,120,0,0,122,17,0,3,123,122,162,88,124,123,0,64,125,121,124,135,126,2,0,125,0,0,0,59,163,10,0,72,127,126,163,121,127,61,0,0,128,17,0,1,163,224,0,3,129,128,163,25,131,129,4,88,132,131,0,0,133,17,0,3,134,133,162,25,135,134,4,88,136,135,0,64,137,132,136,135,138,2,0,137,0,0,0,59,163,10,0,74,139,138,163,121,139,46,0,0,140,17,0,134,142,0,0,108,21,5,0,140,0,0,0,0,158,142,0,0,143,158,0,1,163,0,0,14,144,143,163,120,144,3,0,137,161,0,0,139,0,0,0,0,145,17,0,82,163,1,0,85,156,163,0,106,164,1,4,109,156,4,164,134,164,0,0,48,120,3,0,145,156,0,0,0,146,158,0,0,147,17,0,1,164,68,1,3,148,147,164,85,148,146,0,0,149,158,0,0,150,17,0,0,151,17,0,3,20,151,162,0,21,158,0,82,164,20,0,85,5,164,0,106,163,20,4,109,5,4,163,134,163,0,0,8,217,4,0,108,150,5,21,82,163,108,0,85,6,163,0,106,164,108,4,109,6,4,164,134,164,0,0,244,154,4,0,149,6,0,0,137,161,0,0,139,0,0,0,0,22,17,0,1,164,224,0,3,23,22,164,88,24,23,0,0,25,17,0,3,26,25,162,88,27,26,0,64,28,24,27,135,29,2,0,28,0,0,0,59,164,10,0,74,31,29,164,120,31,3,0,137,161,0,0,139,0,0,0,0,32,17,0,1,164,224,0,3,33,32,164,25,34,33,4,88,35,34,0,0,36,17,0,3,37,36,162,25,38,37,4,88,39,38,0,64,40,35,39,135,42,2,0,40,0,0,0,59,164,10,0,72,43,42,164,120,43,3,0,137,161,0,0,139,0,0,0,0,44,17,0,134,45,0,0,96,19,5,0,44,0,0,0,0,159,45,0,0,46,159,0,1,164,0,0,14,47,46,164,120,47,3,0,137,161,0,0,139,0,0,0,0,48,17,0,82,164,1,0,85,157,164,0,106,163,1,4,109,157,4,163,134,163,0,0,48,120,3,0,48,157,0,0,0,49,159,0,0,50,17,0,1,163,48,1,3,51,50,163,85,51,49,0,0,53,159,0,0,54,17,0,0,55,17,0,3,56,55,162,0,57,159,0,82,163,56,0,85,7,163,0,106,164,56,4,109,7,4,164,134,164,0,0,8,217,4,0,119,54,7,57,82,164,119,0,85,8,164,0,106,163,119,4,109,8,4,163,134,163,0,0,244,154,4,0,53,8,0,0,137,161,0,0,139,0,0,0,140,2,177,0,0,0,0,0,2,174,0,0,255,0,0,0,1,172,0,0,136,175,0,0,0,173,175,0,136,175,0,0,25,175,175,32,137,175,0,0,130,175,0,0,136,176,0,0,49,175,175,176,132,3,3,0,135,175,0,0,0,2,0,0,58,3,1,0,1,168,1,0,0,76,2,0,25,87,76,80,78,98,87,0,0,171,98,0,0,109,2,0,25,120,109,80,78,131,120,0,41,175,131,24,42,175,175,24,33,142,175,0,120,142,34,1,0,153,2,0,25,4,153,24,78,15,4,0,19,175,15,174,0,26,175,0,1,175,0,0,1,176,27,0,138,26,175,176,92,4,3,0,116,4,3,0,140,4,3,0,164,4,3,0,188,4,3,0,212,4,3,0,236,4,3,0,4,5,3,0,28,5,3,0,52,5,3,0,76,5,3,0,100,5,3,0,124,5,3,0,148,5,3,0,172,5,3,0,196,5,3,0,220,5,3,0,244,5,3,0,12,6,3,0,36,6,3,0,60,6,3,0,84,6,3,0,108,6,3,0,132,6,3,0,108,7,3,0,20,8,3,0,40,8,3,0,0,29,2,0,25,30,29,80,1,175,1,0,83,30,175,0,119,0,250,0,0,37,2,0,58,48,3,0,134,175,0,0,216,56,5,0,37,48,0,0,119,0,244,0,0,59,2,0,58,70,3,0,134,175,0,0,244,41,5,0,59,70,0,0,119,0,238,0,0,73,2,0,58,74,3,0,134,175,0,0,252,31,5,0,73,74,0,0,119,0,232,0,0,75,2,0,58,77,3,0,134,175,0,0,148,194,4,0,75,77,0,0,119,0,226,0,0,78,2,0,58,79,3,0,134,175,0,0,156,25,5,0,78,79,0,0,119,0,220,0,0,80,2,0,58,81,3,0,134,175,0,0,68,0,5,0,80,81,0,0,119,0,214,0,0,82,2,0,58,83,3,0,134,175,0,0,180,177,4,0,82,83,0,0,119,0,208,0,0,84,2,0,58,85,3,0,134,175,0,0,120,11,5,0,84,85,0,0,119,0,202,0,0,86,2,0,58,88,3,0,134,175,0,0,200,235,4,0,86,88,0,0,119,0,196,0,0,89,2,0,58,90,3,0,134,175,0,0,80,159,4,0,89,90,0,0,119,0,190,0,0,91,2,0,58,92,3,0,134,175,0,0,16,253,4,0,91,92,0,0,119,0,184,0,0,93,2,0,58,94,3,0,134,175,0,0,148,227,4,0,93,94,0,0,119,0,178,0,0,95,2,0,58,96,3,0,134,175,0,0,60,137,4,0,95,96,0,0,119,0,172,0,0,97,2,0,58,99,3,0,134,175,0,0,248,250,4,0,97,99,0,0,119,0,166,0,0,100,2,0,58,101,3,0,134,175,0,0,100,10,5,0,100,101,0,0,119,0,160,0,0,102,2,0,58,103,3,0,134,175,0,0,84,1,5,0,102,103,0,0,119,0,154,0,0,104,2,0,58,105,3,0,134,175,0,0,204,14,5,0,104,105,0,0,119,0,148,0,0,106,2,0,58,107,3,0,134,175,0,0,80,6,5,0,106,107,0,0,119,0,142,0,0,108,2,0,58,110,3,0,134,175,0,0,72,173,4,0,108,110,0,0,119,0,136,0,0,111,2,0,58,112,3,0,134,175,0,0,216,247,4,0,111,112,0,0,119,0,130,0,0,113,2,0,58,114,3,0,134,175,0,0,140,244,4,0,113,114,0,0,119,0,124,0,0,115,2,0,58,116,3,0,134,175,0,0,68,140,4,0,115,116,0,0,119,0,118,0,0,117,2,0,58,118,3,0,134,175,0,0,168,216,2,0,117,118,0,0,119,0,112,0,0,119,2,0,25,121,119,80,1,175,1,0,83,121,175,0,0,122,2,0,25,123,122,16,25,124,123,4,82,125,124,0,0,169,125,0,0,126,169,0,0,127,2,0,25,128,127,16,14,129,126,128,120,129,2,0,119,0,97,0,0,130,169,0,26,132,130,8,0,164,132,0,0,133,164,0,25,134,133,80,78,135,134,0,41,175,135,24,42,175,175,24,33,136,175,0,120,136,2,0,119,0,6,0,0,154,169,0,25,155,154,4,82,156,155,0,0,169,156,0,119,0,235,255,0,137,164,0,58,138,3,0,134,139,0,0,72,3,3,0,137,138,0,0,0,166,139,0,0,140,166,0,19,175,140,174,0,141,175,0,33,143,141,0,121,143,12,0,0,144,169,0,0,145,2,0,25,146,145,16,82,147,146,0,13,148,144,147,121,148,6,0,0,149,2,0,25,150,149,80,1,175,1,0,83,150,175,0,119,0,59,0,0,151,2,0,25,152,151,80,1,175,0,0,83,152,175,0,119,0,54,0,0,157,2,0,25,158,157,80,1,175,1,0,83,158,175,0,0,159,2,0,25,160,159,16,25,161,160,4,82,162,161,0,0,170,162,0,0,163,170,0,0,5,2,0,25,6,5,16,14,7,163,6,120,7,2,0,119,0,39,0,0,8,170,0,26,9,8,8,0,165,9,0,0,10,165,0,58,11,3,0,134,12,0,0,72,3,3,0,10,11,0,0,0,167,12,0,0,13,167,0,19,175,13,174,0,14,175,0,0,16,2,0,25,17,16,80,78,18,17,0,19,175,18,174,0,19,175,0,19,175,19,14,0,20,175,0,19,175,20,174,0,21,175,0,83,17,21,0,0,22,170,0,25,23,22,4,82,24,23,0,0,170,24,0,119,0,224,255,0,25,2,0,134,175,0,0,64,215,5,0,25,0,0,0,119,0,7,0,0,27,2,0,58,28,3,0,134,175,0,0,8,194,5,0,27,28,0,0,119,0,1,0,0,31,2,0,25,32,31,80,78,33,32,0,19,175,33,174,0,34,175,0,0,35,168,0,19,175,35,174,0,36,175,0,19,175,36,34,0,38,175,0,19,175,38,174,0,39,175,0,0,168,39,0,0,40,171,0,41,175,40,24,42,175,175,24,33,41,175,0,120,41,16,0,0,42,2,0,25,43,42,72,82,44,43,0,1,175,0,0,14,45,44,175,121,45,10,0,0,46,2,0,25,47,46,72,82,49,47,0,0,50,2,0,25,51,50,76,82,52,51,0,19,176,49,174,135,175,9,0,176,52,0,0,0,53,168,0,41,175,53,24,42,175,175,24,33,54,175,0,120,54,4,0,0,72,168,0,137,173,0,0,139,72,0,0,0,55,2,0,25,56,55,82,80,57,56,0,41,175,57,16,42,175,175,16,0,58,175,0,32,60,58,255,0,61,2,0,121,60,8,0,134,175,0,0,216,50,4,0,61,0,0,0,1,168,0,0,0,72,168,0,137,173,0,0,139,72,0,0,25,62,61,82,80,63,62,0,41,175,63,16,42,175,175,16,0,64,175,0,1,175,0,0,15,65,175,64,120,65,4,0,0,72,168,0,137,173,0,0,139,72,0,0,0,66,2,0,25,67,66,82,80,68,67,0,26,175,68,1,41,175,175,16,42,175,175,16,0,69,175,0,84,67,69,0,0,71,2,0,134,175,0,0,216,50,4,0,71,0,0,0,1,168,0,0,0,72,168,0,137,173,0,0,139,72,0,0,140,1,172,0,0,0,0,0,1,168,0,0,136,170,0,0,0,169,170,0,136,170,0,0,25,170,170,48,137,170,0,0,130,170,0,0,136,171,0,0,49,170,170,171,196,9,3,0,135,170,0,0,25,164,169,32,25,163,169,8,0,1,0,0,0,2,1,0,25,71,2,4,134,82,0,0,4,53,6,0,71,0,0,0,33,93,82,0,121,93,3,0,137,169,0,0,139,0,0,0,0,104,1,0,25,115,104,4,25,126,115,4,82,137,126,0,26,148,137,32,0,167,148,0,1,162,0,0,0,3,167,0,25,14,3,56,82,170,14,0,85,163,170,0,106,171,14,4,109,163,4,171,0,25,167,0,25,36,25,40,82,47,36,0,25,58,47,8,78,67,58,0,1,171,255,0,19,171,67,171,0,68,171,0,32,160,68,2,121,160,117,0,59,171,0,0,89,163,171,0,0,69,167,0,25,70,69,16,25,72,70,4,82,73,72,0,0,159,73,0,0,74,159,0,0,75,167,0,25,76,75,16,14,77,74,76,120,77,2,0,119,0,57,0,0,78,159,0,26,79,78,8,0,165,79,0,0,80,165,0,25,81,80,56,88,83,81,0,88,84,163,0,63,85,84,83,89,163,85,0,0,86,165,0,25,87,86,40,82,88,87,0,25,89,88,20,25,90,89,12,127,171,0,0,114,171,90,0,127,171,0,0,102,170,90,1,107,171,1,170,127,170,0,0,102,171,90,2,107,170,2,171,127,171,0,0,102,170,90,3,107,171,3,170,127,170,0,0,88,91,170,0,88,92,163,0,63,94,92,91,89,163,94,0,0,95,165,0,25,96,95,40,82,97,96,0,25,98,97,20,25,99,98,4,127,170,0,0,114,170,99,0,127,170,0,0,102,171,99,1,107,170,1,171,127,171,0,0,102,170,99,2,107,171,2,170,127,170,0,0,102,171,99,3,107,170,3,171,127,171,0,0,88,100,171,0,88,101,163,0,63,102,101,100,89,163,102,0,0,103,159,0,25,105,103,4,82,106,105,0,0,159,106,0,119,0,195,255,0,107,167,0,25,108,107,40,82,109,108,0,25,110,109,36,25,111,110,12,127,171,0,0,114,171,111,0,127,171,0,0,102,170,111,1,107,171,1,170,127,170,0,0,102,171,111,2,107,170,2,171,127,171,0,0,102,170,111,3,107,171,3,170,127,170,0,0,88,112,170,0,0,113,167,0,25,114,113,40,82,116,114,0,25,117,116,36,25,118,117,4,127,170,0,0,114,170,118,0,127,170,0,0,102,171,118,1,107,170,1,171,127,171,0,0,102,170,118,2,107,171,2,170,127,170,0,0,102,171,118,3,107,170,3,171,127,171,0,0,88,119,171,0,63,120,112,119,88,121,163,0,64,122,121,120,89,163,122,0,88,123,163,0,0,124,167,0,25,125,124,40,82,127,125,0,25,128,127,12,89,128,123,0,1,162,1,0,0,129,167,0,25,130,129,40,82,131,130,0,25,132,131,9,78,133,132,0,1,171,255,0,19,171,133,171,0,134,171,0,32,161,134,2,121,161,164,0,25,135,163,4,59,171,0,0,89,135,171,0,0,136,167,0,25,138,136,16,25,139,138,4,82,140,139,0,0,159,140,0,0,141,159,0,0,142,167,0,25,143,142,16,14,144,141,143,120,144,2,0,119,0,102,0,0,145,159,0,26,146,145,8,0,166,146,0,25,147,163,4,88,149,147,0,0,150,166,0,25,151,150,56,25,152,151,4,88,153,152,0,0,154,166,0,25,155,154,40,82,156,155,0,25,157,156,20,127,171,0,0,114,171,157,0,127,171,0,0,102,170,157,1,107,171,1,170,127,170,0,0,102,171,157,2,107,170,2,171,127,171,0,0,102,170,157,3,107,171,3,170,127,170,0,0,88,158,170,0,63,4,153,158,0,5,166,0,25,6,5,40,82,7,6,0,25,8,7,20,25,9,8,8,127,170,0,0,114,170,9,0,127,170,0,0,102,171,9,1,107,170,1,171,127,171,0,0,102,170,9,2,107,171,2,170,127,170,0,0,102,171,9,3,107,170,3,171,127,171,0,0,88,10,171,0,63,11,4,10,73,12,149,11,121,12,5,0,25,13,163,4,88,15,13,0,58,35,15,0,119,0,43,0,0,16,166,0,25,17,16,56,25,18,17,4,88,19,18,0,0,20,166,0,25,21,20,40,82,22,21,0,25,23,22,20,127,171,0,0,114,171,23,0,127,171,0,0,102,170,23,1,107,171,1,170,127,170,0,0,102,171,23,2,107,170,2,171,127,171,0,0,102,170,23,3,107,171,3,170,127,170,0,0,88,24,170,0,63,26,19,24,0,27,166,0,25,28,27,40,82,29,28,0,25,30,29,20,25,31,30,8,127,170,0,0,114,170,31,0,127,170,0,0,102,171,31,1,107,170,1,171,127,171,0,0,102,170,31,2,107,171,2,170,127,170,0,0,102,171,31,3,107,170,3,171,127,171,0,0,88,32,171,0,63,33,26,32,58,35,33,0,25,34,163,4,89,34,35,0,0,37,159,0,25,38,37,4,82,39,38,0,0,159,39,0,119,0,150,255,0,40,167,0,25,41,40,40,82,42,41,0,25,43,42,36,127,171,0,0,114,171,43,0,127,171,0,0,102,170,43,1,107,171,1,170,127,170,0,0,102,171,43,2,107,170,2,171,127,171,0,0,102,170,43,3,107,171,3,170,127,170,0,0,88,44,170,0,0,45,167,0,25,46,45,40,82,48,46,0,25,49,48,36,25,50,49,8,127,170,0,0,114,170,50,0,127,170,0,0,102,171,50,1,107,170,1,171,127,171,0,0,102,170,50,2,107,171,2,170,127,170,0,0,102,171,50,3,107,170,3,171,127,171,0,0,88,51,171,0,63,52,44,51,25,53,163,4,88,54,53,0,64,55,54,52,89,53,55,0,25,56,163,4,88,57,56,0,0,59,167,0,25,60,59,40,82,61,60,0,25,62,61,16,89,62,57,0,1,162,1,0,0,63,162,0,41,171,63,24,42,171,171,24,33,64,171,0,120,64,3,0,137,169,0,0,139,0,0,0,0,65,167,0,82,171,163,0,85,164,171,0,106,170,163,4,109,164,4,170,134,170,0,0,68,187,5,0,65,164,0,0,0,66,1,0,134,170,0,0,44,105,2,0,66,0,0,0,137,169,0,0,139,0,0,0,140,1,172,0,0,0,0,0,1,168,0,0,136,170,0,0,0,169,170,0,136,170,0,0,25,170,170,48,137,170,0,0,130,170,0,0,136,171,0,0,49,170,170,171,92,15,3,0,135,170,0,0,25,164,169,32,25,163,169,8,0,1,0,0,0,2,1,0,25,71,2,4,134,82,0,0,4,53,6,0,71,0,0,0,33,93,82,0,121,93,3,0,137,169,0,0,139,0,0,0,0,104,1,0,25,115,104,4,25,126,115,4,82,137,126,0,26,148,137,32,0,167,148,0,1,162,0,0,0,3,167,0,25,14,3,56,82,170,14,0,85,163,170,0,106,171,14,4,109,163,4,171,0,25,167,0,25,36,25,40,82,47,36,0,25,58,47,9,78,67,58,0,1,171,255,0,19,171,67,171,0,68,171,0,32,160,68,2,121,160,122,0,25,69,163,4,59,171,0,0,89,69,171,0,0,70,167,0,25,72,70,16,25,73,72,4,82,74,73,0,0,159,74,0,0,75,159,0,0,76,167,0,25,77,76,16,14,78,75,77,120,78,2,0,119,0,60,0,0,79,159,0,26,80,79,8,0,165,80,0,0,81,165,0,25,83,81,56,25,84,83,4,88,85,84,0,25,86,163,4,88,87,86,0,63,88,87,85,89,86,88,0,0,89,165,0,25,90,89,40,82,91,90,0,25,92,91,20,127,171,0,0,114,171,92,0,127,171,0,0,102,170,92,1,107,171,1,170,127,170,0,0,102,171,92,2,107,170,2,171,127,171,0,0,102,170,92,3,107,171,3,170,127,170,0,0,88,94,170,0,25,95,163,4,88,96,95,0,63,97,96,94,89,95,97,0,0,98,165,0,25,99,98,40,82,100,99,0,25,101,100,20,25,102,101,8,127,170,0,0,114,170,102,0,127,170,0,0,102,171,102,1,107,170,1,171,127,171,0,0,102,170,102,2,107,171,2,170,127,170,0,0,102,171,102,3,107,170,3,171,127,171,0,0,88,103,171,0,25,105,163,4,88,106,105,0,63,107,106,103,89,105,107,0,0,108,159,0,25,109,108,4,82,110,109,0,0,159,110,0,119,0,192,255,0,111,167,0,25,112,111,40,82,113,112,0,25,114,113,36,127,171,0,0,114,171,114,0,127,171,0,0,102,170,114,1,107,171,1,170,127,170,0,0,102,171,114,2,107,170,2,171,127,171,0,0,102,170,114,3,107,171,3,170,127,170,0,0,88,116,170,0,0,117,167,0,25,118,117,40,82,119,118,0,25,120,119,36,25,121,120,8,127,170,0,0,114,170,121,0,127,170,0,0,102,171,121,1,107,170,1,171,127,171,0,0,102,170,121,2,107,171,2,170,127,170,0,0,102,171,121,3,107,170,3,171,127,171,0,0,88,122,171,0,63,123,116,122,25,124,163,4,88,125,124,0,64,127,125,123,89,124,127,0,25,128,163,4,88,129,128,0,0,130,167,0,25,131,130,40,82,132,131,0,25,133,132,16,89,133,129,0,1,162,1,0,0,134,167,0,25,135,134,40,82,136,135,0,25,138,136,8,78,139,138,0,1,171,255,0,19,171,139,171,0,140,171,0,32,161,140,2,121,161,159,0,59,171,0,0,89,163,171,0,0,141,167,0,25,142,141,16,25,143,142,4,82,144,143,0,0,159,144,0,0,145,159,0,0,146,167,0,25,147,146,16,14,149,145,147,120,149,2,0,119,0,99,0,0,150,159,0,26,151,150,8,0,166,151,0,88,152,163,0,0,153,166,0,25,154,153,56,88,155,154,0,0,156,166,0,25,157,156,40,82,158,157,0,25,4,158,20,25,5,4,12,127,171,0,0,114,171,5,0,127,171,0,0,102,170,5,1,107,171,1,170,127,170,0,0,102,171,5,2,107,170,2,171,127,171,0,0,102,170,5,3,107,171,3,170,127,170,0,0,88,6,170,0,63,7,155,6,0,8,166,0,25,9,8,40,82,10,9,0,25,11,10,20,25,12,11,4,127,170,0,0,114,170,12,0,127,170,0,0,102,171,12,1,107,170,1,171,127,171,0,0,102,170,12,2,107,171,2,170,127,170,0,0,102,171,12,3,107,170,3,171,127,171,0,0,88,13,171,0,63,15,7,13,73,16,152,15,121,16,4,0,88,17,163,0,58,37,17,0,119,0,43,0,0,18,166,0,25,19,18,56,88,20,19,0,0,21,166,0,25,22,21,40,82,23,22,0,25,24,23,20,25,26,24,12,127,171,0,0,114,171,26,0,127,171,0,0,102,170,26,1,107,171,1,170,127,170,0,0,102,171,26,2,107,170,2,171,127,171,0,0,102,170,26,3,107,171,3,170,127,170,0,0,88,27,170,0,63,28,20,27,0,29,166,0,25,30,29,40,82,31,30,0,25,32,31,20,25,33,32,4,127,170,0,0,114,170,33,0,127,170,0,0,102,171,33,1,107,170,1,171,127,171,0,0,102,170,33,2,107,171,2,170,127,170,0,0,102,171,33,3,107,170,3,171,127,171,0,0,88,34,171,0,63,35,28,34,58,37,35,0,89,163,37,0,0,38,159,0,25,39,38,4,82,40,39,0,0,159,40,0,119,0,153,255,0,41,167,0,25,42,41,40,82,43,42,0,25,44,43,36,25,45,44,12,127,171,0,0,114,171,45,0,127,171,0,0,102,170,45,1,107,171,1,170,127,170,0,0,102,171,45,2,107,170,2,171,127,171,0,0,102,170,45,3,107,171,3,170,127,170,0,0,88,46,170,0,0,48,167,0,25,49,48,40,82,50,49,0,25,51,50,36,25,52,51,4,127,170,0,0,114,170,52,0,127,170,0,0,102,171,52,1,107,170,1,171,127,171,0,0,102,170,52,2,107,171,2,170,127,170,0,0,102,171,52,3,107,170,3,171,127,171,0,0,88,53,171,0,63,54,46,53,88,55,163,0,64,56,55,54,89,163,56,0,88,57,163,0,0,59,167,0,25,60,59,40,82,61,60,0,25,62,61,12,89,62,57,0,1,162,1,0,0,63,162,0,41,171,63,24,42,171,171,24,33,64,171,0,120,64,3,0,137,169,0,0,139,0,0,0,0,65,167,0,82,171,163,0,85,164,171,0,106,170,163,4,109,164,4,170,134,170,0,0,68,187,5,0,65,164,0,0,0,66,1,0,134,170,0,0,168,112,2,0,66,0,0,0,137,169,0,0,139,0,0,0,140,5,75,0,0,0,0,0,0,5,0,0,0,6,1,0,0,7,6,0,0,8,2,0,0,9,3,0,0,10,9,0,32,69,7,0,121,69,27,0,33,11,4,0,32,69,10,0,121,69,11,0,121,11,5,0,9,69,5,8,85,4,69,0,1,70,0,0,109,4,4,70,1,68,0,0,7,67,5,8,129,68,0,0,139,67,0,0,119,0,14,0,120,11,5,0,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,38,70,0,255,85,4,70,0,38,69,1,0,109,4,4,69,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,32,12,10,0,32,69,8,0,121,69,83,0,121,12,11,0,33,69,4,0,121,69,5,0,9,69,7,8,85,4,69,0,1,70,0,0,109,4,4,70,1,68,0,0,7,67,7,8,129,68,0,0,139,67,0,0,32,70,5,0,121,70,11,0,33,70,4,0,121,70,5,0,1,70,0,0,85,4,70,0,9,69,7,10,109,4,4,69,1,68,0,0,7,67,7,10,129,68,0,0,139,67,0,0,26,13,10,1,19,69,13,10,32,69,69,0,121,69,18,0,33,69,4,0,121,69,8,0,38,69,0,255,39,69,69,0,85,4,69,0,19,70,13,7,38,71,1,0,20,70,70,71,109,4,4,70,1,68,0,0,134,70,0,0,132,77,6,0,10,0,0,0,24,70,7,70,0,67,70,0,129,68,0,0,139,67,0,0,135,14,20,0,10,0,0,0,135,70,20,0,7,0,0,0,4,15,14,70,37,70,15,30,121,70,15,0,25,16,15,1,1,70,31,0,4,17,70,15,0,36,16,0,22,70,7,17,24,69,5,16,20,70,70,69,0,35,70,0,24,70,7,16,0,34,70,0,1,33,0,0,22,70,5,17,0,32,70,0,119,0,139,0,32,70,4,0,121,70,5,0,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,38,70,0,255,39,70,70,0,85,4,70,0,38,69,1,0,20,69,6,69,109,4,4,69,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,119,0,122,0,120,12,43,0,135,27,20,0,10,0,0,0,135,69,20,0,7,0,0,0,4,28,27,69,37,69,28,31,121,69,20,0,25,29,28,1,1,69,31,0,4,30,69,28,26,69,28,31,42,69,69,31,0,31,69,0,0,36,29,0,24,69,5,29,19,69,69,31,22,70,7,30,20,69,69,70,0,35,69,0,24,69,7,29,19,69,69,31,0,34,69,0,1,33,0,0,22,69,5,30,0,32,69,0,119,0,95,0,32,69,4,0,121,69,5,0,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,38,69,0,255,39,69,69,0,85,4,69,0,38,70,1,0,20,70,6,70,109,4,4,70,1,68,0,0,1,67,0,0,129,68,0,0,139,67,0,0,26,18,8,1,19,70,18,8,33,70,70,0,121,70,44,0,135,70,20,0,8,0,0,0,25,20,70,33,135,70,20,0,7,0,0,0,4,21,20,70,1,70,64,0,4,22,70,21,1,70,32,0,4,23,70,21,42,70,23,31,0,24,70,0,26,25,21,32,42,70,25,31,0,26,70,0,0,36,21,0,26,70,23,1,42,70,70,31,24,69,7,25,19,70,70,69,22,69,7,23,24,71,5,21,20,69,69,71,19,69,69,26,20,70,70,69,0,35,70,0,24,70,7,21,19,70,26,70,0,34,70,0,22,70,5,22,19,70,70,24,0,33,70,0,22,70,7,22,24,69,5,25,20,70,70,69,19,70,70,24,22,69,5,23,26,71,21,33,42,71,71,31,19,69,69,71,20,70,70,69,0,32,70,0,119,0,32,0,33,70,4,0,121,70,5,0,19,70,18,5,85,4,70,0,1,69,0,0,109,4,4,69,32,69,8,1,121,69,10,0,38,69,1,0,20,69,6,69,0,68,69,0,38,69,0,255,39,69,69,0,0,67,69,0,129,68,0,0,139,67,0,0,119,0,15,0,134,19,0,0,132,77,6,0,8,0,0,0,24,69,7,19,39,69,69,0,0,68,69,0,1,69,32,0,4,69,69,19,22,69,7,69,24,70,5,19,20,69,69,70,0,67,69,0,129,68,0,0,139,67,0,0,32,69,36,0,121,69,8,0,0,63,32,0,0,62,33,0,0,61,34,0,0,60,35,0,1,59,0,0,1,58,0,0,119,0,89,0,38,69,2,255,39,69,69,0,0,37,69,0,38,69,3,0,20,69,9,69,0,38,69,0,1,69,255,255,1,70,255,255,134,39,0,0,36,111,6,0,37,38,69,70,128,70,0,0,0,40,70,0,0,46,32,0,0,45,33,0,0,44,34,0,0,43,35,0,0,42,36,0,1,41,0,0,43,70,45,31,41,69,46,1,20,70,70,69,0,47,70,0,41,70,45,1,20,70,41,70,0,48,70,0,41,70,43,1,43,69,46,31,20,70,70,69,39,70,70,0,0,49,70,0,43,70,43,31,41,69,44,1,20,70,70,69,0,50,70,0,134,70,0,0,112,110,6,0,39,40,49,50,128,70,0,0,0,51,70,0,42,70,51,31,34,71,51,0,1,72,255,255,1,73,0,0,125,69,71,72,73,0,0,0,41,69,69,1,20,70,70,69,0,52,70,0,38,70,52,1,0,53,70,0,19,70,52,37,34,73,51,0,1,72,255,255,1,71,0,0,125,69,73,72,71,0,0,0,42,69,69,31,34,72,51,0,1,73,255,255,1,74,0,0,125,71,72,73,74,0,0,0,41,71,71,1,20,69,69,71,19,69,69,38,134,54,0,0,112,110,6,0,49,50,70,69,0,55,54,0,128,69,0,0,0,56,69,0,26,57,42,1,32,69,57,0,120,69,8,0,0,46,47,0,0,45,48,0,0,44,56,0,0,43,55,0,0,42,57,0,0,41,53,0,119,0,194,255,0,63,47,0,0,62,48,0,0,61,56,0,0,60,55,0,1,59,0,0,0,58,53,0,0,64,62,0,1,65,0,0,20,69,63,65,0,66,69,0,33,69,4,0,121,69,4,0,39,69,60,0,85,4,69,0,109,4,4,61,39,69,64,0,43,69,69,31,41,70,66,1,20,69,69,70,41,70,65,1,43,71,64,31,20,70,70,71,38,70,70,0,20,69,69,70,20,69,69,59,0,68,69,0,41,69,64,1,1,70,0,0,43,70,70,31,20,69,69,70,38,69,69,254,20,69,69,58,0,67,69,0,129,68,0,0,139,67,0,0,140,4,195,0,0,0,0,0,1,191,0,0,136,193,0,0,0,192,193,0,136,193,0,0,25,193,193,96,137,193,0,0,130,193,0,0,136,194,0,0,49,193,193,194,180,26,3,0,135,193,0,0,25,185,192,88,25,116,192,72,25,186,192,64,25,127,192,48,0,4,0,0,0,5,1,0,0,94,2,0,0,105,3,0,0,138,5,0,25,149,138,12,82,160,149,0,82,171,160,0,33,6,171,0,120,6,3,0,137,192,0,0,139,0,0,0,0,17,5,0,25,28,17,12,82,39,28,0,25,50,39,4,82,61,50,0,78,72,61,0,41,193,72,24,42,193,193,24,0,83,193,0,32,92,83,35,120,92,3,0,137,192,0,0,139,0,0,0,0,93,5,0,25,95,93,12,82,96,95,0,82,97,96,0,32,98,97,7,121,98,153,0,25,99,185,2,1,193,0,0,83,99,193,0,0,100,5,0,25,101,100,12,82,102,101,0,25,103,102,4,82,104,103,0,25,106,104,1,78,107,106,0,83,185,107,0,0,108,5,0,25,109,108,12,82,110,109,0,25,111,110,4,82,112,111,0,25,113,112,2,78,114,113,0,25,115,185,1,83,115,114,0,1,193,0,0,1,194,16,0,134,117,0,0,212,107,6,0,185,193,194,0,0,189,117,0,0,118,5,0,25,119,118,12,82,120,119,0,25,121,120,4,82,122,121,0,25,123,122,3,78,124,123,0,83,185,124,0,0,125,5,0,25,126,125,12,82,128,126,0,25,129,128,4,82,130,129,0,25,131,130,4,78,132,131,0,25,133,185,1,83,133,132,0,1,194,0,0,1,193,16,0,134,134,0,0,212,107,6,0,185,194,193,0,0,187,134,0,0,135,5,0,25,136,135,12,82,137,136,0,25,139,137,4,82,140,139,0,25,141,140,5,78,142,141,0,83,185,142,0,0,143,5,0,25,144,143,12,82,145,144,0,25,146,145,4,82,147,146,0,25,148,147,6,78,150,148,0,25,151,185,1,83,151,150,0,1,193,0,0,1,194,16,0,134,152,0,0,212,107,6,0,185,193,194,0,0,183,152,0,0,153,4,0,0,154,4,0,25,155,154,104,82,156,155,0,0,157,189,0,76,194,157,0,58,158,194,0,59,194,255,0,66,159,158,194,127,194,0,0,89,194,159,0,127,194,0,0,114,116,194,0,127,193,0,0,102,193,193,1,107,116,1,193,127,194,0,0,102,194,194,2,107,116,2,194,127,193,0,0,102,193,193,3,107,116,3,193,25,161,116,4,0,162,187,0,76,193,162,0,58,163,193,0,59,193,255,0,66,164,163,193,127,193,0,0,89,193,164,0,127,193,0,0,114,161,193,0,127,194,0,0,102,194,194,1,107,161,1,194,127,193,0,0,102,193,193,2,107,161,2,193,127,194,0,0,102,194,194,3,107,161,3,194,25,165,116,8,0,166,183,0,76,194,166,0,58,167,194,0,59,194,255,0,66,168,167,194,127,194,0,0,89,194,168,0,127,194,0,0,114,165,194,0,127,193,0,0,102,193,193,1,107,165,1,193,127,194,0,0,102,194,194,2,107,165,2,194,127,193,0,0,102,193,193,3,107,165,3,193,25,169,116,12,127,193,0,0,59,194,1,0,89,193,194,0,127,194,0,0,114,169,194,0,127,193,0,0,102,193,193,1,107,169,1,193,127,194,0,0,102,194,194,2,107,169,2,194,127,193,0,0,102,193,193,3,107,169,3,193,134,193,0,0,220,115,3,0,153,156,116,0,137,192,0,0,139,0,0,0,0,170,5,0,25,172,170,12,82,173,172,0,82,174,173,0,32,175,174,9,120,175,3,0,137,192,0,0,139,0,0,0,25,176,186,2,1,193,0,0,83,176,193,0,0,177,5,0,25,178,177,12,82,179,178,0,25,180,179,4,82,181,180,0,25,7,181,1,78,8,7,0,83,186,8,0,0,9,5,0,25,10,9,12,82,11,10,0,25,12,11,4,82,13,12,0,25,14,13,2,78,15,14,0,25,16,186,1,83,16,15,0,1,193,0,0,1,194,16,0,134,18,0,0,212,107,6,0,186,193,194,0,0,190,18,0,0,19,5,0,25,20,19,12,82,21,20,0,25,22,21,4,82,23,22,0,25,24,23,3,78,25,24,0,83,186,25,0,0,26,5,0,25,27,26,12,82,29,27,0,25,30,29,4,82,31,30,0,25,32,31,4,78,33,32,0,25,34,186,1,83,34,33,0,1,194,0,0,1,193,16,0,134,35,0,0,212,107,6,0,186,194,193,0,0,188,35,0,0,36,5,0,25,37,36,12,82,38,37,0,25,40,38,4,82,41,40,0,25,42,41,5,78,43,42,0,83,186,43,0,0,44,5,0,25,45,44,12,82,46,45,0,25,47,46,4,82,48,47,0,25,49,48,6,78,51,49,0,25,52,186,1,83,52,51,0,1,193,0,0,1,194,16,0,134,53,0,0,212,107,6,0,186,193,194,0,0,184,53,0,0,54,5,0,25,55,54,12,82,56,55,0,25,57,56,4,82,58,57,0,25,59,58,7,78,60,59,0,83,186,60,0,0,62,5,0,25,63,62,12,82,64,63,0,25,65,64,4,82,66,65,0,25,67,66,8,78,68,67,0,25,69,186,1,83,69,68,0,1,194,0,0,1,193,16,0,134,70,0,0,212,107,6,0,186,194,193,0,0,182,70,0,0,71,4,0,0,73,4,0,25,74,73,104,82,75,74,0,0,76,190,0,76,193,76,0,58,77,193,0,59,193,255,0,66,78,77,193,127,193,0,0,89,193,78,0,127,193,0,0,114,127,193,0,127,194,0,0,102,194,194,1,107,127,1,194,127,193,0,0,102,193,193,2,107,127,2,193,127,194,0,0,102,194,194,3,107,127,3,194,25,79,127,4,0,80,188,0,76,194,80,0,58,81,194,0,59,194,255,0,66,82,81,194,127,194,0,0,89,194,82,0,127,194,0,0,114,79,194,0,127,193,0,0,102,193,193,1,107,79,1,193,127,194,0,0,102,194,194,2,107,79,2,194,127,193,0,0,102,193,193,3,107,79,3,193,25,84,127,8,0,85,184,0,76,193,85,0,58,86,193,0,59,193,255,0,66,87,86,193,127,193,0,0,89,193,87,0], eb + 194560);
  HEAPU8.set([127,193,0,0,114,84,193,0,127,194,0,0,102,194,194,1,107,84,1,194,127,193,0,0,102,193,193,2,107,84,2,193,127,194,0,0,102,194,194,3,107,84,3,194,25,88,127,12,0,89,182,0,76,194,89,0,58,90,194,0,59,194,255,0,66,91,90,194,127,194,0,0,89,194,91,0,127,194,0,0,114,88,194,0,127,193,0,0,102,193,193,1,107,88,1,193,127,194,0,0,102,194,194,2,107,88,2,194,127,193,0,0,102,193,193,3,107,88,3,193,134,193,0,0,220,115,3,0,71,75,127,0,137,192,0,0,139,0,0,0,140,4,195,0,0,0,0,0,1,191,0,0,136,193,0,0,0,192,193,0,136,193,0,0,25,193,193,96,137,193,0,0,130,193,0,0,136,194,0,0,49,193,193,194,192,32,3,0,135,193,0,0,25,185,192,88,25,116,192,72,25,186,192,64,25,127,192,48,0,4,0,0,0,5,1,0,0,94,2,0,0,105,3,0,0,138,5,0,25,149,138,12,82,160,149,0,82,171,160,0,33,6,171,0,120,6,3,0,137,192,0,0,139,0,0,0,0,17,5,0,25,28,17,12,82,39,28,0,25,50,39,4,82,61,50,0,78,72,61,0,41,193,72,24,42,193,193,24,0,83,193,0,32,92,83,35,120,92,3,0,137,192,0,0,139,0,0,0,0,93,5,0,25,95,93,12,82,96,95,0,82,97,96,0,32,98,97,7,121,98,153,0,25,99,185,2,1,193,0,0,83,99,193,0,0,100,5,0,25,101,100,12,82,102,101,0,25,103,102,4,82,104,103,0,25,106,104,1,78,107,106,0,83,185,107,0,0,108,5,0,25,109,108,12,82,110,109,0,25,111,110,4,82,112,111,0,25,113,112,2,78,114,113,0,25,115,185,1,83,115,114,0,1,193,0,0,1,194,16,0,134,117,0,0,212,107,6,0,185,193,194,0,0,189,117,0,0,118,5,0,25,119,118,12,82,120,119,0,25,121,120,4,82,122,121,0,25,123,122,3,78,124,123,0,83,185,124,0,0,125,5,0,25,126,125,12,82,128,126,0,25,129,128,4,82,130,129,0,25,131,130,4,78,132,131,0,25,133,185,1,83,133,132,0,1,194,0,0,1,193,16,0,134,134,0,0,212,107,6,0,185,194,193,0,0,187,134,0,0,135,5,0,25,136,135,12,82,137,136,0,25,139,137,4,82,140,139,0,25,141,140,5,78,142,141,0,83,185,142,0,0,143,5,0,25,144,143,12,82,145,144,0,25,146,145,4,82,147,146,0,25,148,147,6,78,150,148,0,25,151,185,1,83,151,150,0,1,193,0,0,1,194,16,0,134,152,0,0,212,107,6,0,185,193,194,0,0,183,152,0,0,153,4,0,0,154,189,0,76,194,154,0,58,155,194,0,59,194,255,0,66,156,155,194,127,194,0,0,89,194,156,0,127,194,0,0,114,116,194,0,127,193,0,0,102,193,193,1,107,116,1,193,127,194,0,0,102,194,194,2,107,116,2,194,127,193,0,0,102,193,193,3,107,116,3,193,25,157,116,4,0,158,187,0,76,193,158,0,58,159,193,0,59,193,255,0,66,161,159,193,127,193,0,0,89,193,161,0,127,193,0,0,114,157,193,0,127,194,0,0,102,194,194,1,107,157,1,194,127,193,0,0,102,193,193,2,107,157,2,193,127,194,0,0,102,194,194,3,107,157,3,194,25,162,116,8,0,163,183,0,76,194,163,0,58,164,194,0,59,194,255,0,66,165,164,194,127,194,0,0,89,194,165,0,127,194,0,0,114,162,194,0,127,193,0,0,102,193,193,1,107,162,1,193,127,194,0,0,102,194,194,2,107,162,2,194,127,193,0,0,102,193,193,3,107,162,3,193,25,166,116,12,127,193,0,0,59,194,1,0,89,193,194,0,127,194,0,0,114,166,194,0,127,193,0,0,102,193,193,1,107,166,1,193,127,194,0,0,102,194,194,2,107,166,2,194,127,193,0,0,102,193,193,3,107,166,3,193,0,167,4,0,25,168,167,108,82,169,168,0,134,193,0,0,220,115,3,0,153,116,169,0,137,192,0,0,139,0,0,0,0,170,5,0,25,172,170,12,82,173,172,0,82,174,173,0,32,175,174,9,120,175,3,0,137,192,0,0,139,0,0,0,25,176,186,2,1,193,0,0,83,176,193,0,0,177,5,0,25,178,177,12,82,179,178,0,25,180,179,4,82,181,180,0,25,7,181,1,78,8,7,0,83,186,8,0,0,9,5,0,25,10,9,12,82,11,10,0,25,12,11,4,82,13,12,0,25,14,13,2,78,15,14,0,25,16,186,1,83,16,15,0,1,193,0,0,1,194,16,0,134,18,0,0,212,107,6,0,186,193,194,0,0,190,18,0,0,19,5,0,25,20,19,12,82,21,20,0,25,22,21,4,82,23,22,0,25,24,23,3,78,25,24,0,83,186,25,0,0,26,5,0,25,27,26,12,82,29,27,0,25,30,29,4,82,31,30,0,25,32,31,4,78,33,32,0,25,34,186,1,83,34,33,0,1,194,0,0,1,193,16,0,134,35,0,0,212,107,6,0,186,194,193,0,0,188,35,0,0,36,5,0,25,37,36,12,82,38,37,0,25,40,38,4,82,41,40,0,25,42,41,5,78,43,42,0,83,186,43,0,0,44,5,0,25,45,44,12,82,46,45,0,25,47,46,4,82,48,47,0,25,49,48,6,78,51,49,0,25,52,186,1,83,52,51,0,1,193,0,0,1,194,16,0,134,53,0,0,212,107,6,0,186,193,194,0,0,184,53,0,0,54,5,0,25,55,54,12,82,56,55,0,25,57,56,4,82,58,57,0,25,59,58,7,78,60,59,0,83,186,60,0,0,62,5,0,25,63,62,12,82,64,63,0,25,65,64,4,82,66,65,0,25,67,66,8,78,68,67,0,25,69,186,1,83,69,68,0,1,194,0,0,1,193,16,0,134,70,0,0,212,107,6,0,186,194,193,0,0,182,70,0,0,71,4,0,0,73,190,0,76,193,73,0,58,74,193,0,59,193,255,0,66,75,74,193,127,193,0,0,89,193,75,0,127,193,0,0,114,127,193,0,127,194,0,0,102,194,194,1,107,127,1,194,127,193,0,0,102,193,193,2,107,127,2,193,127,194,0,0,102,194,194,3,107,127,3,194,25,76,127,4,0,77,188,0,76,194,77,0,58,78,194,0,59,194,255,0,66,79,78,194,127,194,0,0,89,194,79,0,127,194,0,0,114,76,194,0,127,193,0,0,102,193,193,1,107,76,1,193,127,194,0,0,102,194,194,2,107,76,2,194,127,193,0,0,102,193,193,3,107,76,3,193,25,80,127,8,0,81,184,0,76,193,81,0,58,82,193,0,59,193,255,0,66,84,82,193,127,193,0,0,89,193,84,0,127,193,0,0,114,80,193,0,127,194,0,0,102,194,194,1,107,80,1,194,127,193,0,0,102,193,193,2,107,80,2,193,127,194,0,0,102,194,194,3,107,80,3,194,25,85,127,12,0,86,182,0,76,194,86,0,58,87,194,0,59,194,255,0,66,88,87,194,127,194,0,0,89,194,88,0,127,194,0,0,114,85,194,0,127,193,0,0,102,193,193,1,107,85,1,193,127,194,0,0,102,194,194,2,107,85,2,194,127,193,0,0,102,193,193,3,107,85,3,193,0,89,4,0,25,90,89,108,82,91,90,0,134,193,0,0,220,115,3,0,71,127,91,0,137,192,0,0,139,0,0,0,140,2,150,0,0,0,0,0,1,144,0,0,136,148,0,0,0,145,148,0,136,148,0,0,25,148,148,96,137,148,0,0,130,148,0,0,136,149,0,0,49,148,148,149,204,38,3,0,135,148,0,0,25,142,145,80,25,136,145,72,25,3,145,56,25,137,145,48,25,45,145,32,0,2,1,0,0,143,142,0,1,146,125,31,25,147,143,16,78,148,146,0,83,143,148,0,25,143,143,1,25,146,146,1,54,148,143,147,240,38,3,0,0,56,2,0,82,67,56,0,33,78,67,0,120,78,12,0,0,143,0,0,0,146,142,0,25,147,143,16,78,148,146,0,83,143,148,0,25,143,143,1,25,146,146,1,54,148,143,147,36,39,3,0,137,145,0,0,139,0,0,0,0,89,2,0,25,100,89,4,82,111,100,0,78,122,111,0,41,148,122,24,42,148,148,24,0,4,148,0,32,15,4,35,120,15,12,0,0,143,0,0,0,146,142,0,25,147,143,16,78,148,146,0,83,143,148,0,25,143,143,1,25,146,146,1,54,148,143,147,116,39,3,0,137,145,0,0,139,0,0,0,0,26,2,0,82,37,26,0,32,39,37,7,121,39,152,0,25,40,136,2,1,148,0,0,83,40,148,0,0,41,2,0,25,42,41,4,82,43,42,0,25,44,43,1,78,46,44,0,83,136,46,0,0,47,2,0,25,48,47,4,82,49,48,0,25,50,49,2,78,51,50,0,25,52,136,1,83,52,51,0,1,148,0,0,1,149,16,0,134,53,0,0,212,107,6,0,136,148,149,0,0,140,53,0,0,54,2,0,25,55,54,4,82,57,55,0,25,58,57,3,78,59,58,0,83,136,59,0,0,60,2,0,25,61,60,4,82,62,61,0,25,63,62,4,78,64,63,0,25,65,136,1,83,65,64,0,1,149,0,0,1,148,16,0,134,66,0,0,212,107,6,0,136,149,148,0,0,138,66,0,0,68,2,0,25,69,68,4,82,70,69,0,25,71,70,5,78,72,71,0,83,136,72,0,0,73,2,0,25,74,73,4,82,75,74,0,25,76,75,6,78,77,76,0,25,79,136,1,83,79,77,0,1,148,0,0,1,149,16,0,134,80,0,0,212,107,6,0,136,148,149,0,0,134,80,0,0,81,140,0,76,149,81,0,58,82,149,0,59,149,255,0,66,83,82,149,127,149,0,0,89,149,83,0,127,149,0,0,114,3,149,0,127,148,0,0,102,148,148,1,107,3,1,148,127,149,0,0,102,149,149,2,107,3,2,149,127,148,0,0,102,148,148,3,107,3,3,148,25,84,3,4,0,85,138,0,76,148,85,0,58,86,148,0,59,148,255,0,66,87,86,148,127,148,0,0,89,148,87,0,127,148,0,0,114,84,148,0,127,149,0,0,102,149,149,1,107,84,1,149,127,148,0,0,102,148,148,2,107,84,2,148,127,149,0,0,102,149,149,3,107,84,3,149,25,88,3,8,0,90,134,0,76,149,90,0,58,91,149,0,59,149,255,0,66,92,91,149,127,149,0,0,89,149,92,0,127,149,0,0,114,88,149,0,127,148,0,0,102,148,148,1,107,88,1,148,127,149,0,0,102,149,149,2,107,88,2,149,127,148,0,0,102,148,148,3,107,88,3,148,25,93,3,12,127,148,0,0,59,149,1,0,89,148,149,0,127,149,0,0,114,93,149,0,127,148,0,0,102,148,148,1,107,93,1,148,127,149,0,0,102,149,149,2,107,93,2,149,127,148,0,0,102,148,148,3,107,93,3,148,0,143,142,0,0,146,3,0,25,147,143,16,78,148,146,0,83,143,148,0,25,143,143,1,25,146,146,1,54,148,143,147,188,41,3,0,0,143,0,0,0,146,142,0,25,147,143,16,78,148,146,0,83,143,148,0,25,143,143,1,25,146,146,1,54,148,143,147,224,41,3,0,137,145,0,0,139,0,0,0,0,94,2,0,82,95,94,0,32,96,95,9,120,96,12,0,0,143,0,0,0,146,142,0,25,147,143,16,78,148,146,0,83,143,148,0,25,143,143,1,25,146,146,1,54,148,143,147,28,42,3,0,137,145,0,0,139,0,0,0,25,97,137,2,1,148,0,0,83,97,148,0,0,98,2,0,25,99,98,4,82,101,99,0,25,102,101,1,78,103,102,0,83,137,103,0,0,104,2,0,25,105,104,4,82,106,105,0,25,107,106,2,78,108,107,0,25,109,137,1,83,109,108,0,1,148,0,0,1,149,16,0,134,110,0,0,212,107,6,0,137,148,149,0,0,141,110,0,0,112,2,0,25,113,112,4,82,114,113,0,25,115,114,3,78,116,115,0,83,137,116,0,0,117,2,0,25,118,117,4,82,119,118,0,25,120,119,4,78,121,120,0,25,123,137,1,83,123,121,0,1,149,0,0,1,148,16,0,134,124,0,0,212,107,6,0,137,149,148,0,0,139,124,0,0,125,2,0,25,126,125,4,82,127,126,0,25,128,127,5,78,129,128,0,83,137,129,0,0,130,2,0,25,131,130,4,82,132,131,0,25,5,132,6,78,6,5,0,25,7,137,1,83,7,6,0,1,148,0,0,1,149,16,0,134,8,0,0,212,107,6,0,137,148,149,0,0,135,8,0,0,9,2,0,25,10,9,4,82,11,10,0,25,12,11,7,78,13,12,0,83,137,13,0,0,14,2,0,25,16,14,4,82,17,16,0,25,18,17,8,78,19,18,0,25,20,137,1,83,20,19,0,1,149,0,0,1,148,16,0,134,21,0,0,212,107,6,0,137,149,148,0,0,133,21,0,0,22,141,0,76,148,22,0,58,23,148,0,59,148,255,0,66,24,23,148,127,148,0,0,89,148,24,0,127,148,0,0,114,45,148,0,127,149,0,0,102,149,149,1,107,45,1,149,127,148,0,0,102,148,148,2,107,45,2,148,127,149,0,0,102,149,149,3,107,45,3,149,25,25,45,4,0,27,139,0,76,149,27,0,58,28,149,0,59,149,255,0,66,29,28,149,127,149,0,0,89,149,29,0,127,149,0,0,114,25,149,0,127,148,0,0,102,148,148,1,107,25,1,148,127,149,0,0,102,149,149,2,107,25,2,149,127,148,0,0,102,148,148,3,107,25,3,148,25,30,45,8,0,31,135,0,76,148,31,0,58,32,148,0,59,148,255,0,66,33,32,148,127,148,0,0,89,148,33,0,127,148,0,0,114,30,148,0,127,149,0,0,102,149,149,1,107,30,1,149,127,148,0,0,102,148,148,2,107,30,2,148,127,149,0,0,102,149,149,3,107,30,3,149,25,34,45,12,0,35,133,0,76,149,35,0,58,36,149,0,59,149,255,0,66,38,36,149,127,149,0,0,89,149,38,0,127,149,0,0,114,34,149,0,127,148,0,0,102,148,148,1,107,34,1,148,127,149,0,0,102,149,149,2,107,34,2,149,127,148,0,0,102,148,148,3,107,34,3,148,0,143,142,0,0,146,45,0,25,147,143,16,78,148,146,0,83,143,148,0,25,143,143,1,25,146,146,1,54,148,143,147,176,44,3,0,0,143,0,0,0,146,142,0,25,147,143,16,78,148,146,0,83,143,148,0,25,143,143,1,25,146,146,1,54,148,143,147,212,44,3,0,137,145,0,0,139,0,0,0,140,2,180,0,0,0,0,0,2,175,0,0,255,255,255,255,2,176,0,0,0,0,16,0,2,177,0,0,0,0,240,127,1,173,0,0,136,178,0,0,0,174,178,0,127,178,0,0,87,178,0,0,127,178,0,0,82,5,178,0,127,178,0,0,106,6,178,4,127,178,0,0,87,178,1,0,127,178,0,0,82,74,178,0,127,178,0,0,106,85,178,4,1,178,52,0,135,96,3,0,5,6,178,0,128,178,0,0,0,107,178,0,1,178,255,7,19,178,96,178,0,118,178,0,1,178,52,0,135,129,3,0,74,85,178,0,128,178,0,0,0,140,178,0,1,178,255,7,19,178,129,178,0,151,178,0,2,178,0,0,0,0,0,128,19,178,6,178,0,7,178,0,1,178,1,0,135,18,1,0,74,85,178,0,128,178,0,0,0,29,178,0,32,40,18,0,32,51,29,0,19,178,40,51,0,62,178,0,121,62,3,0,1,173,3,0,119,0,75,1,2,178,0,0,255,255,255,127,19,178,85,178,0,70,178,0,16,71,177,70,1,178,0,0,16,72,178,74,13,73,70,177,19,178,73,72,0,75,178,0,20,178,71,75,0,76,178,0,1,178,255,7,13,77,118,178,20,178,76,77,0,172,178,0,121,172,3,0,1,173,3,0,119,0,56,1,1,178,1,0,135,80,1,0,5,6,178,0,128,178,0,0,0,81,178,0,16,82,29,81,16,83,18,80,13,84,81,29,19,178,84,83,0,86,178,0,20,178,82,86,0,87,178,0,120,87,10,0,13,88,80,18,13,89,81,29,19,178,88,89,0,90,178,0,59,178,0,0,65,91,0,178,126,4,90,91,0,0,0,0,139,4,0,0,32,92,118,0,121,92,50,0,1,178,12,0,135,93,1,0,5,6,178,0,128,178,0,0,0,94,178,0,1,178,255,255,15,95,178,94,16,97,175,93,32,98,94,255,19,178,98,97,0,99,178,0,20,178,95,99,0,100,178,0,121,100,25,0,0,102,93,0,0,103,94,0,1,163,0,0,26,101,163,1,1,178,1,0,135,104,1,0,102,103,178,0,128,178,0,0,0,105,178,0,1,178,255,255,15,106,178,105,16,108,175,104,32,109,105,255,19,178,109,108,0,110,178,0,20,178,106,110,0,111,178,0,121,111,5,0,0,102,104,0,0,103,105,0,0,163,101,0,119,0,238,255,0,162,101,0,119,0,2,0,1,162,0,0,1,178,1,0,4,112,178,162,135,113,1,0,5,6,112,0,128,178,0,0,0,114,178,0,0,144,113,0,0,145,114,0,0,164,162,0,119,0,10,0,2,178,0,0,255,255,15,0,19,178,6,178,0,115,178,0,20,178,115,176,0,116,178,0,0,144,5,0,0,145,116,0,0,164,118,0,32,117,151,0,121,117,50,0,1,178,12,0,135,119,1,0,74,85,178,0,128,178,0,0,0,120,178,0,1,178,255,255,15,121,178,120,16,122,175,119,32,123,120,255,19,178,123,122,0,124,178,0,20,178,121,124,0,125,178,0,121,125,25,0,0,127,119,0,0,128,120,0,1,170,0,0,26,126,170,1,1,178,1,0,135,130,1,0,127,128,178,0,128,178,0,0,0,131,178,0,1,178,255,255,15,132,178,131,16,133,175,130,32,134,131,255,19,178,134,133,0,135,178,0,20,178,132,135,0,136,178,0,121,136,5,0,0,127,130,0,0,128,131,0,0,170,126,0,119,0,238,255,0,169,126,0,119,0,2,0,1,169,0,0,1,178,1,0,4,137,178,169,135,138,1,0,74,85,137,0,128,178,0,0,0,139,178,0,0,146,138,0,0,147,139,0,0,171,169,0,119,0,10,0,2,178,0,0,255,255,15,0,19,178,85,178,0,141,178,0,20,178,141,176,0,142,178,0,0,146,74,0,0,147,142,0,0,171,151,0,15,143,171,164,134,148,0,0,112,110,6,0,144,145,146,147,128,178,0,0,0,149,178,0,1,178,255,255,15,150,178,149,16,152,175,148,32,153,149,255,19,178,153,152,0,154,178,0,20,178,150,154,0,155,178,0,121,143,57,0,0,65,155,0,0,66,148,0,0,67,149,0,0,156,144,0,0,158,145,0,0,166,164,0,121,65,9,0,13,157,156,146,13,159,158,147,19,178,157,159,0,160,178,0,120,160,41,0,0,8,66,0,0,9,67,0,119,0,3,0,0,8,156,0,0,9,158,0,1,178,1,0,135,10,1,0,8,9,178,0,128,178,0,0,0,11,178,0,26,12,166,1,15,13,171,12,134,14,0,0,112,110,6,0,10,11,146,147,128,178,0,0,0,15,178,0,1,178,255,255,15,16,178,15,16,17,175,14,32,19,15,255,19,178,19,17,0,20,178,0,20,178,16,20,0,21,178,0,121,13,8,0,0,65,21,0,0,66,14,0,0,67,15,0,0,156,10,0,0,158,11,0,0,166,12,0,119,0,218,255,0,3,21,0,0,22,10,0,0,24,11,0,0,68,14,0,0,69,15,0,0,165,12,0,119,0,11,0,59,178,0,0,65,161,0,178,58,2,161,0,119,0,99,0,0,3,155,0,0,22,144,0,0,24,145,0,0,68,148,0,0,69,149,0,0,165,164,0,121,3,13,0,13,23,22,146,13,25,24,147,19,178,23,25,0,26,178,0,121,26,5,0,59,178,0,0,65,35,0,178,58,2,35,0,119,0,83,0,0,27,69,0,0,30,68,0,119,0,3,0,0,27,24,0,0,30,22,0,16,28,27,176,35,31,30,0,13,32,27,176,19,178,32,31,0,33,178,0,20,178,28,33,0,34,178,0,121,34,26,0,0,36,30,0,0,37,27,0,0,168,165,0,1,178,1,0,135,38,1,0,36,37,178,0,128,178,0,0,0,39,178,0,26,41,168,1,16,42,39,176,35,43,38,0,13,44,39,176,19,178,44,43,0,45,178,0,20,178,42,45,0,46,178,0,121,46,5,0,0,36,38,0,0,37,39,0,0,168,41,0,119,0,239,255,0,48,38,0,0,49,39,0,0,167,41,0,119,0,4,0,0,48,30,0,0,49,27,0,0,167,165,0,1,178,0,0,15,47,178,167,121,47,22,0,1,178,0,0,2,179,0,0,0,0,240,255,134,50,0,0,36,111,6,0,48,49,178,179,128,179,0,0,0,52,179,0,1,179,0,0,1,178,52,0,135,53,1,0,167,179,178,0,128,178,0,0,0,54,178,0,20,178,50,53,0,55,178,0,20,178,52,54,0,56,178,0,0,61,56,0,0,64,55,0,119,0,9,0,1,178,1,0,4,57,178,167,135,58,3,0,48,49,57,0,128,178,0,0,0,59,178,0,0,61,59,0,0,64,58,0,20,178,61,7,0,60,178,0,127,178,0,0,85,178,64,0,127,178,0,0,109,178,4,60,127,178,0,0,86,63,178,0,58,2,63,0,32,178,173,3,121,178,4,0,65,78,0,1,66,79,78,78,58,2,79,0,139,2,0,0,140,2,119,0,0,0,0,0,1,113,0,0,136,117,0,0,0,114,117,0,136,117,0,0,25,117,117,64,137,117,0,0,130,117,0,0,136,118,0,0,49,117,117,118,68,51,3,0,135,117,0,0,25,107,114,32,25,2,114,48,82,117,1,0,85,107,117,0,106,118,1,4,109,107,4,118,106,117,1,8,109,107,8,117,106,118,1,12,109,107,12,118,134,118,0,0,88,133,5,0,2,107,0,0,0,112,1,0,0,115,2,0,25,116,112,16,78,118,115,0,83,112,118,0,25,112,112,1,25,115,115,1,54,118,112,116,132,51,3,0,127,118,0,0,114,118,1,0,127,118,0,0,102,117,1,1,107,118,1,117,127,117,0,0,102,118,1,2,107,117,2,118,127,118,0,0,102,117,1,3,107,118,3,117,127,117,0,0,88,3,117,0,58,109,3,0,25,15,1,4,127,117,0,0,114,117,15,0,127,117,0,0,102,118,15,1,107,117,1,118,127,118,0,0,102,117,15,2,107,118,2,117,127,117,0,0,102,118,15,3,107,117,3,118,127,118,0,0,88,26,118,0,58,110,26,0,25,37,1,8,127,118,0,0,114,118,37,0,127,118,0,0,102,117,37,1,107,118,1,117,127,117,0,0,102,118,37,2,107,117,2,118,127,118,0,0,102,117,37,3,107,118,3,117,127,117,0,0,88,48,117,0,58,111,48,0,25,59,1,12,127,117,0,0,114,117,59,0,127,117,0,0,102,118,59,1,107,117,1,118,127,118,0,0,102,117,59,2,107,118,2,117,127,117,0,0,102,118,59,3,107,117,3,118,127,118,0,0,88,70,118,0,58,108,70,0,58,81,109,0,58,92,109,0,63,4,81,92,58,104,4,0,58,6,110,0,58,7,110,0,63,8,6,7,58,105,8,0,58,9,111,0,58,10,111,0,63,11,9,10,58,106,11,0,58,12,108,0,58,13,108,0,63,14,12,13,58,103,14,0,58,16,105,0,58,17,110,0,65,18,16,17,59,118,1,0,64,19,118,18,58,20,106,0,58,21,111,0,65,22,20,21,64,23,19,22,127,118,0,0,89,118,23,0,127,118,0,0,114,0,118,0,127,117,0,0,102,117,117,1,107,0,1,117,127,118,0,0,102,118,118,2,107,0,2,118,127,117,0,0,102,117,117,3,107,0,3,117,25,24,0,4,58,25,104,0,58,27,110,0,65,28,25,27,58,29,103,0,58,30,111,0,65,31,29,30,63,32,28,31,127,117,0,0,89,117,32,0,127,117,0,0,114,24,117,0,127,118,0,0,102,118,118,1,107,24,1,118,127,117,0,0,102,117,117,2,107,24,2,117,127,118,0,0,102,118,118,3,107,24,3,118,25,33,0,8,58,34,104,0,58,35,111,0,65,36,34,35,58,38,103,0,58,39,110,0,65,40,38,39,64,41,36,40,127,118,0,0,89,118,41,0,127,118,0,0,114,33,118,0,127,117,0,0,102,117,117,1,107,33,1,117,127,118,0,0,102,118,118,2,107,33,2,118,127,117,0,0,102,117,117,3,107,33,3,117,25,42,0,12,127,117,0,0,59,118,0,0,89,117,118,0,127,118,0,0,114,42,118,0,127,117,0,0,102,117,117,1,107,42,1,117,127,118,0,0,102,118,118,2,107,42,2,118,127,117,0,0,102,117,117,3,107,42,3,117,25,43,0,16,58,44,104,0,58,45,110,0,65,46,44,45,58,47,103,0,58,49,111,0,65,50,47,49,64,51,46,50,127,117,0,0,89,117,51,0,127,117,0,0,114,43,117,0,127,118,0,0,102,118,118,1,107,43,1,118,127,117,0,0,102,117,117,2,107,43,2,117,127,118,0,0,102,118,118,3,107,43,3,118,25,52,0,20,58,53,104,0,58,54,109,0,65,55,53,54,59,118,1,0,64,56,118,55,58,57,106,0,58,58,111,0,65,60,57,58,64,61,56,60,127,118,0,0,89,118,61,0,127,118,0,0,114,52,118,0,127,117,0,0,102,117,117,1,107,52,1,117,127,118,0,0,102,118,118,2,107,52,2,118,127,117,0,0,102,117,117,3,107,52,3,117,25,62,0,24,58,63,105,0,58,64,111,0,65,65,63,64,58,66,103,0,58,67,109,0,65,68,66,67,63,69,65,68,127,117,0,0,89,117,69,0,127,117,0,0,114,62,117,0,127,118,0,0,102,118,118,1,107,62,1,118,127,117,0,0,102,117,117,2,107,62,2,117,127,118,0,0,102,118,118,3,107,62,3,118,25,71,0,28,127,118,0,0,59,117,0,0,89,118,117,0,127,117,0,0,114,71,117,0,127,118,0,0,102,118,118,1,107,71,1,118,127,117,0,0,102,117,117,2,107,71,2,117,127,118,0,0,102,118,118,3,107,71,3,118,25,72,0,32,58,73,104,0,58,74,111,0,65,75,73,74,58,76,103,0,58,77,110,0,65,78,76,77,63,79,75,78,127,118,0,0,89,118,79,0,127,118,0,0,114,72,118,0,127,117,0,0,102,117,117,1,107,72,1,117,127,118,0,0,102,118,118,2,107,72,2,118,127,117,0,0,102,117,117,3,107,72,3,117,25,80,0,36,58,82,105,0,58,83,111,0,65,84,82,83,58,85,103,0,58,86,109,0,65,87,85,86,64,88,84,87,127,117,0,0,89,117,88,0,127,117,0,0,114,80,117,0,127,118,0,0,102,118,118,1,107,80,1,118,127,117,0,0,102,117,117,2,107,80,2,117,127,118,0,0,102,118,118,3,107,80,3,118,25,89,0,40,58,90,104,0,58,91,109,0,65,93,90,91,59,118,1,0,64,94,118,93,58,95,105,0,58,96,110,0,65,97,95,96,64,98,94,97,127,118,0,0,89,118,98,0,127,118,0,0,114,89,118,0,127,117,0,0,102,117,117,1,107,89,1,117,127,118,0,0,102,118,118,2,107,89,2,118,127,117,0,0,102,117,117,3,107,89,3,117,25,99,0,44,127,117,0,0,59,118,0,0,89,117,118,0,127,118,0,0,114,99,118,0,127,117,0,0,102,117,117,1,107,99,1,117,127,118,0,0,102,118,118,2,107,99,2,118,127,117,0,0,102,117,117,3,107,99,3,117,25,100,0,48,127,117,0,0,59,118,0,0,89,117,118,0,127,118,0,0,114,100,118,0,127,117,0,0,102,117,117,1,107,100,1,117,127,118,0,0,102,118,118,2,107,100,2,118,127,117,0,0,102,117,117,3,107,100,3,117,25,101,0,52,127,117,0,0,59,118,0,0,89,117,118,0,127,118,0,0,114,101,118,0,127,117,0,0,102,117,117,1,107,101,1,117,127,118,0,0,102,118,118,2,107,101,2,118,127,117,0,0,102,117,117,3,107,101,3,117,25,102,0,56,127,117,0,0,59,118,0,0,89,117,118,0,127,118,0,0,114,102,118,0,127,117,0,0,102,117,117,1,107,102,1,117,127,118,0,0,102,118,118,2,107,102,2,118,127,117,0,0,102,117,117,3,107,102,3,117,25,5,0,60,127,117,0,0,59,118,1,0,89,117,118,0,127,118,0,0,114,5,118,0,127,117,0,0,102,117,117,1,107,5,1,117,127,118,0,0,102,118,118,2,107,5,2,118,127,117,0,0,102,117,117,3,107,5,3,117,137,114,0,0,139,0,0,0,140,1,136,0,0,0,0,0,1,130,0,0,136,134,0,0,0,131,134,0,136,134,0,0,1,135,128,0,3,134,134,135,137,134,0,0,130,134,0,0,136,135,0,0,49,134,134,135,180,57,3,0,135,134,0,0,25,2,131,72,25,41,131,64,25,52,131,56,25,63,131,104,25,74,131,48,25,85,131,40,25,96,131,32,25,107,131,88,25,118,131,24,25,3,131,16,25,14,131,8,0,25,131,0,0,1,0,0,0,34,1,0,25,35,34,8,134,134,0,0,196,72,6,0,35,0,0,0,0,36,1,0,25,37,36,16,134,134,0,0,196,72,6,0,37,0,0,0,0,38,1,0,25,39,38,24,1,134,0,0,85,39,134,0,0,40,1,0,25,42,40,28,1,134,0,0,85,42,134,0,0,43,1,0,25,44,43,32,134,134,0,0,196,72,6,0,44,0,0,0,134,45,0,0,64,232,3,0,0,46,1,0,25,47,46,40,85,47,45,0,0,48,1,0,25,49,48,44,1,134,3,0,85,49,134,0,0,50,1,0,25,51,50,48,134,134,0,0,196,72,6,0,51,0,0,0,0,53,1,0,1,134,193,0,3,54,53,134,1,134,0,0,83,54,134,0,0,55,1,0,1,134,196,0,3,56,55,134,1,134,0,0,85,56,134,0,0,57,1,0,1,134,204,0,3,58,57,134,1,134,0,0,85,58,134,0,0,59,1,0,1,134,200,0,3,60,59,134,1,134,0,0,85,60,134,0,0,61,1,0,1,134,208,0,3,62,61,134,1,134,0,0,85,62,134,0,0,64,1,0,1,134,212,0,3,65,64,134,1,134,0,0,85,65,134,0,0,66,1,0,25,67,66,72,59,134,0,0,89,2,134,0,25,68,2,4,59,134,0,0,89,68,134,0,82,134,2,0,85,67,134,0,106,135,2,4,109,67,4,135,0,69,1,0,25,70,69,56,59,135,0,0,89,41,135,0,25,71,41,4,59,135,0,0,89,71,135,0,82,135,41,0,85,70,135,0,106,134,41,4,109,70,4,134,0,72,1,0,25,73,72,88,59,134,1,0,89,52,134,0,25,75,52,4,59,134,1,0,89,75,134,0,82,134,52,0,85,73,134,0,106,135,52,4,109,73,4,135,0,76,1,0,25,77,76,104,1,135,0,0,85,77,135,0,0,78,1,0,25,79,78,108,1,135,0,0,85,79,135,0,0,80,1,0,1,135,128,0,3,81,80,135,127,135,0,0,59,134,0,0,89,135,134,0,127,134,0,0,114,63,134,0,127,135,0,0,102,135,135,1,107,63,1,135,127,134,0,0,102,134,134,2,107,63,2,134,127,135,0,0,102,135,135,3,107,63,3,135,25,82,63,4,127,135,0,0,59,134,0,0,89,135,134,0,127,134,0,0,114,82,134,0,127,135,0,0,102,135,135,1,107,82,1,135,127,134,0,0,102,134,134,2,107,82,2,134,127,135,0,0,102,135,135,3,107,82,3,135,25,83,63,8,127,135,0,0,59,134,0,0,89,135,134,0,127,134,0,0,114,83,134,0,127,135,0,0,102,135,135,1,107,83,1,135,127,134,0,0,102,134,134,2,107,83,2,134,127,135,0,0,102,135,135,3,107,83,3,135,0,129,81,0,0,132,63,0,25,133,129,12,78,135,132,0,83,129,135,0,25,129,129,1,25,132,132,1,54,135,129,133,96,60,3,0,0,84,1,0,1,135,144,0,3,86,84,135,61,135,0,0,0,0,0,63,89,74,135,0,25,87,74,4,61,135,0,0,0,0,0,63,89,87,135,0,82,135,74,0,85,86,135,0,106,134,74,4,109,86,4,134,1,134,0,0,134,88,0,0,148,94,6,0,134,0,0,0,0,89,1,0,1,134,188,0,3,90,89,134,85,90,88,0,0,91,1,0,1,134,152,0,3,92,91,134,59,134,0,0,89,85,134,0,25,93,85,4,59,134,0,0,89,93,134,0,82,134,85,0,85,92,134,0,106,135,85,4,109,92,4,135,0,94,1,0,1,135,160,0,3,95,94,135,59,135,0,0,89,96,135,0,25,97,96,4,59,135,0,0,89,97,135,0,82,135,96,0,85,95,135,0,106,134,96,4,109,95,4,134,0,98,1,0,1,134,168,0,3,99,98,134,1,134,0,0,83,99,134,0,0,100,1,0,1,134,169,0,3,101,100,134,127,134,0,0,59,135,0,0,89,134,135,0,127,135,0,0,114,107,135,0,127,134,0,0,102,134,134,1,107,107,1,134,127,135,0,0,102,135,135,2,107,107,2,135,127,134,0,0,102,134,134,3,107,107,3,134,25,102,107,4,127,134,0,0,59,135,0,0,89,134,135,0,127,135,0,0,114,102,135,0,127,134,0,0,102,134,134,1,107,102,1,134,127,135,0,0,102,135,135,2,107,102,2,135,127,134,0,0,102,134,134,3,107,102,3,134,25,103,107,8,127,134,0,0,59,135,0,0,89,134,135,0,127,135,0,0,114,103,135,0,127,134,0,0,102,134,134,1,107,103,1,134,127,135,0,0,102,135,135,2,107,103,2,135,127,134,0,0,102,134,134,3,107,103,3,134,25,104,107,12,127,134,0,0,59,135,0,0,89,134,135,0,127,135,0,0,114,104,135,0,127,134,0,0,102,134,134,1,107,104,1,134,127,135,0,0,102,135,135,2,107,104,2,135,127,134,0,0,102,134,134,3,107,104,3,134,0,129,101,0,0,132,107,0,25,133,129,16,78,134,132,0,83,129,134,0,25,129,129,1,25,132,132,1,54,134,129,133,72,62,3,0,0,105,1,0,25,106,105,112,59,134,1,0,89,106,134,0,0,108,1,0,1,134,192,0,3,109,108,134,1,134,1,0,83,109,134,0,0,110,1,0,1,134,216,0,3,111,110,134,59,134,0,0,89,118,134,0,25,112,118,4,59,134,0,0,89,112,134,0,82,134,118,0,85,111,134,0,106,135,118,4,109,111,4,135,0,113,1,0,1,135,224,0,3,114,113,135,59,135,0,0,89,3,135,0,25,115,3,4,59,135,0,0,89,115,135,0,82,135,3,0,85,114,135,0,106,134,3,4,109,114,4,134,0,116,1,0,1,134,232,0,3,117,116,134,59,134,0,0,89,14,134,0,25,119,14,4,59,134,0,0,89,119,134,0,82,134,14,0,85,117,134,0,106,135,14,4,109,117,4,135,0,120,1,0,1,135,240,0,3,121,120,135,59,135,0,0,89,25,135,0,25,122,25,4,59,135,0,0,89,122,135,0,82,135,25,0,85,121,135,0,106,134,25,4,109,121,4,134,0,123,1,0,1,134,248,0,3,124,123,134,134,134,0,0,196,72,6,0,124,0,0,0,0,125,1,0,1,134,0,1,3,126,125,134,134,134,0,0,196,72,6,0,126,0,0,0,0,127,1,0,1,134,255,255,85,127,134,0,0,128,1,0,1,134,8,1,3,4,128,134,1,134,0,0,85,4,134,0,0,5,1,0,1,134,12,1,3,6,5,134,1,134,0,0,85,6,134,0,0,7,1,0,1,134,16,1,3,8,7,134,1,134,0,0,85,8,134,0,0,9,1,0,1,134,20,1,3,10,9,134,1,134,0,0,85,10,134,0,1,134,4,0,134,11,0,0,236,195,4,0,134,0,0,0,0,12,1,0,1,134,24,1,3,13,12,134,85,13,11,0,0,15,1,0,1,134,28,1,3,16,15,134,1,134,0,0,85,16,134,0,0,17,1,0,1,134,32,1,3,18,17,134,134,134,0,0,196,72,6,0,18,0,0,0,0,19,1,0,1,134,40,1,3,20,19,134,134,134,0,0,196,72,6,0,20,0,0,0,0,21,1,0,1,134,52,1,3,22,21,134,134,134,0,0,196,72,6,0,22,0,0,0,0,23,1,0,1,134,60,1,3,24,23,134,134,134,0,0,196,72,6,0,24,0,0,0,0,26,1,0,1,134,68,1,3,27,26,134,1,134,0,0,85,27,134,0,0,28,1,0,1,134,48,1,3,29,28,134,1,134,0,0,85,29,134,0,0,30,1,0,1,134,72,1,3,31,30,134,134,134,0,0,44,86,6,0,31,0,0,0,0,32,1,0,1,134,88,1,3,33,32,134,134,134,0,0,196,72,6,0,33,0,0,0,137,131,0,0,139,0,0,0,140,3,177,0,0,0,0,0,1,173,0,0,136,175,0,0,0,174,175,0,136,175,0,0,25,175,175,80,137,175,0,0,130,175,0,0,136,176,0,0,49,175,175,176,248,64,3,0,135,175,0,0,25,3,174,40,25,88,174,56,0,4,0,0,0,5,1,0,0,77,2,0,134,99,0,0,36,25,6,0,0,169,99,0,0,110,169,0,134,175,0,0,160,42,4,0,110,0,0,0,0,121,169,0,0,132,4,0,25,143,132,4,82,154,143,0,25,6,154,4,82,17,6,0,0,28,4,0,25,39,28,4,82,50,39,0,82,61,50,0,134,175,0,0,216,91,6,0,121,17,61,0,0,72,4,0,1,175,9,31,134,74,0,0,0,76,6,0,72,175,0,0,0,165,74,0,0,75,4,0,1,175,14,31,134,76,0,0,0,76,6,0,75,175,0,0,0,166,76,0,0,78,4,0,1,175,24,31,134,79,0,0,0,76,6,0,78,175,0,0,0,171,79,0,0,80,4,0,1,175,35,31,134,81,0,0,0,76,6,0,80,175,0,0,0,167,81,0,0,82,4,0,1,175,45,31,134,83,0,0,0,76,6,0,82,175,0,0,0,172,83,0,0,84,165,0,1,175,0,0,14,85,84,175,0,86,166,0,1,175,0,0,14,87,86,175,19,175,85,87,0,168,175,0,121,168,27,0,0,89,166,0,25,90,89,12,82,91,90,0,25,92,91,4,82,93,92,0,134,94,0,0,76,100,6,0,93,0,0,0,58,95,94,0,58,170,95,0,0,96,169,0,0,97,165,0,25,98,97,12,82,100,98,0,25,101,100,4,82,102,101,0,0,103,165,0,25,104,103,12,82,105,104,0,82,106,105,0,58,107,170,0,75,108,107,0,134,175,0,0,240,69,6,0,96,102,106,108,119,0,19,0,0,109,165,0,1,175,0,0,14,111,109,175,121,111,15,0,0,112,169,0,0,113,165,0,25,114,113,12,82,115,114,0,25,116,115,4,82,117,116,0,0,118,165,0,25,119,118,12,82,120,119,0,82,122,120,0,1,176,14,0,134,175,0,0,240,69,6,0,112,117,122,176,0,123,171,0,1,175,0,0,14,124,123,175,121,124,113,0,0,125,171,0,25,126,125,12,82,127,126,0,25,128,127,4,82,129,128,0,1,175,56,31,134,130,0,0,208,147,5,0,129,175,0,0,32,131,130,0,120,131,97,0,0,133,171,0,25,134,133,12,82,135,134,0,25,136,135,4,82,137,136,0,1,175,61,31,134,138,0,0,208,147,5,0,137,175,0,0,32,139,138,0,120,139,86,0,0,141,171,0,25,142,141,12,82,144,142,0,25,145,144,4,82,146,145,0,1,175,66,31,134,147,0,0,208,147,5,0,146,175,0,0,32,148,147,0,120,148,69,0,0,149,171,0,25,150,149,12,82,151,150,0,25,152,151,4,82,153,152,0,1,175,72,31,134,155,0,0,208,147,5,0,153,175,0,0,32,156,155,0,120,156,58,0,0,158,171,0,25,159,158,12,82,160,159,0,25,161,160,4,82,162,161,0,1,175,78,31,134,163,0,0,208,147,5,0,162,175,0,0,32,164,163,0,120,164,41,0,0,7,171,0,25,8,7,12,82,9,8,0,25,10,9,4,82,11,10,0,1,175,85,31,134,12,0,0,208,147,5,0,11,175,0,0,32,13,12,0,120,13,30,0,0,15,171,0,25,16,15,12,82,18,16,0,25,19,18,4,82,20,19,0,1,175,92,31,134,21,0,0,208,147,5,0,20,175,0,0,32,22,21,0,120,22,13,0,0,23,171,0,25,24,23,12,82,25,24,0,25,26,25,4,82,27,26,0,1,175,102,31,134,29,0,0,208,147,5,0,27,175,0,0,32,30,29,0,120,30,2,0,119,0,24,0,0,31,169,0,1,176,3,0,134,175,0,0,88,93,6,0,31,176,0,0,119,0,18,0,0,14,169,0,1,176,2,0,134,175,0,0,88,93,6,0,14,176,0,0,119,0,12,0,0,157,169,0,1,176,1,0,134,175,0,0,88,93,6,0,157,176,0,0,119,0,6,0,0,140,169,0,1,176,0,0,134,175,0,0,88,93,6,0,140,176,0,0,0,32,167,0,1,175,0,0,14,33,32,175,121,33,51,0,0,34,167,0,25,35,34,12,82,36,35,0,25,37,36,4,82,38,37,0,1,175,212,31,134,40,0,0,208,147,5,0,38,175,0,0,32,41,40,0,120,41,35,0,0,42,167,0,25,43,42,12,82,44,43,0,25,45,44,4,82,46,45,0,1,175,112,31,134,47,0,0,208,147,5,0,46,175,0,0,32,48,47,0,120,48,24,0,0,49,167,0,25,51,49,12,82,52,51,0,25,53,52,4,82,54,53,0,1,175,117,31,134,55,0,0,208,147,5,0,54,175,0,0,32,56,55,0,120,56,13,0,0,57,167,0,25,58,57,12,82,59,58,0,25,60,59,4,82,62,60,0,1,175,121,31,134,63,0,0,208,147,5,0,62,175,0,0,32,64,63,0,120,64,2,0,119,0,6,0,0,65,169,0,1,176,1,0,134,175,0,0,20,93,6,0,65,176,0,0,0,66,172,0,1,175,0,0,14,67,66,175,120,67,4,0,0,73,169,0,137,174,0,0,139,73,0,0,0,68,169,0,0,69,172,0,25,70,69,12,82,71,70,0,134,175,0,0,152,38,3,0,88,71,0,0,82,175,88,0,85,3,175,0,106,176,88,4,109,3,4,176,106,175,88,8,109,3,8,175,106,176,88,12,109,3,12,176,134,176,0,0,228,105,6,0,68,3,0,0,0,73,169,0,137,174,0,0,139,73,0,0,140,4,167,0,0,0,0,0,2,159,0,0,255,255,0,0,2,160,0,0,40,1,0,0,1,157,0,0,136,161,0,0,0,158,161,0,136,161,0,0,25,161,161,96,137,161,0,0,130,161,0,0,136,162,0,0,49,161,161,162,4,70,3,0,135,161,0,0,25,156,158,16,0,4,0,0,0,5,1,0,0,62,2,0,0,73,3,0,1,151,0,0,0,84,151,0,34,95,84,3,120,95,2,0,119,0,10,1,0,106,151,0,0,117,4,0,3,128,117,160,41,161,106,2,3,139,128,161,82,6,139,0,1,162,1,0,134,161,0,0,200,187,5,0,6,162,0,0,0,17,151,0,0,28,4,0,3,39,28,160,41,161,17,2,3,50,39,161,82,57,50,0,25,58,57,4,1,161,1,0,85,58,161,0,0,59,151,0,0,60,4,0,3,61,60,160,41,161,59,2,3,63,61,161,82,64,63,0,82,65,64,0,25,66,65,12,82,67,66,0,82,68,67,0,0,150,68,0,0,69,150,0,25,70,69,8,1,161,6,0,85,70,161,0,0,71,150,0,25,72,71,4,1,161,1,0,83,72,161,0,0,74,150,0,0,75,5,0,25,76,75,12,82,77,76,0,134,161,0,0,24,233,5,0,74,77,0,0,0,78,150,0,82,79,78,0,134,161,0,0,132,255,5,0,79,0,0,0,0,80,4,0,0,81,150,0,82,82,81,0,1,162,12,0,1,163,0,0,1,164,84,5,1,165,72,0,1,166,1,0,134,161,0,0,72,121,5,0,80,82,162,163,164,165,166,0,0,83,4,0,0,85,150,0,82,86,85,0,1,166,12,0,1,165,0,0,1,164,156,5,1,163,72,0,1,162,2,0,134,161,0,0,72,121,5,0,83,86,166,165,164,163,162,0,1,162,196,4,1,163,48,0,134,161,0,0,160,232,5,0,156,162,163,0,1,152,0,0,0,87,152,0,34,88,87,12,120,88,2,0,119,0,77,0,0,89,152,0,41,161,89,2,3,90,156,161,88,91,90,0,0,92,5,0,25,93,92,4,80,94,93,0,41,161,94,16,42,161,161,16,0,96,161,0,76,161,96,0,58,97,161,0,65,98,91,97,0,99,5,0,80,100,99,0,41,161,100,16,42,161,161,16,0,101,161,0,76,161,101,0,58,102,161,0,63,103,98,102,0,104,5,0,25,105,104,12,82,107,105,0,80,108,107,0,19,161,108,159,0,109,161,0,76,161,109,0,58,110,161,0,66,111,103,110,0,112,152,0,41,161,112,2,3,113,156,161], eb + 204800);
  HEAPU8.set([89,113,111,0,0,114,152,0,25,115,114,1,41,161,115,2,3,116,156,161,88,118,116,0,0,119,5,0,25,120,119,6,80,121,120,0,41,161,121,16,42,161,161,16,0,122,161,0,76,161,122,0,58,123,161,0,65,124,118,123,0,125,5,0,25,126,125,2,80,127,126,0,41,161,127,16,42,161,161,16,0,129,161,0,76,161,129,0,58,130,161,0,63,131,124,130,0,132,5,0,25,133,132,12,82,134,133,0,25,135,134,2,80,136,135,0,19,161,136,159,0,137,161,0,76,161,137,0,58,138,161,0,66,140,131,138,0,141,152,0,25,142,141,1,41,161,142,2,3,143,156,161,89,143,140,0,0,144,152,0,25,145,144,2,0,152,145,0,119,0,177,255,0,146,73,0,38,161,146,2,0,147,161,0,33,148,147,0,121,148,22,0,1,153,0,0,0,149,153,0,34,7,149,12,120,7,2,0,119,0,17,0,0,8,153,0,25,9,8,1,41,161,9,2,3,10,156,161,88,11,10,0,59,161,1,0,64,12,161,11,0,13,153,0,25,14,13,1,41,161,14,2,3,15,156,161,89,15,12,0,0,16,153,0,25,18,16,2,0,153,18,0,119,0,237,255,0,19,73,0,38,161,19,4,0,20,161,0,33,21,20,0,121,21,22,0,1,154,0,0,0,22,154,0,34,23,22,12,120,23,2,0,119,0,17,0,0,24,154,0,25,25,24,1,41,161,25,2,3,26,156,161,88,27,26,0,59,161,1,0,64,29,161,27,0,30,154,0,25,31,30,1,41,161,31,2,3,32,156,161,89,32,29,0,0,33,154,0,25,34,33,2,0,154,34,0,119,0,237,255,0,35,62,0,1,161,1,0,15,36,161,35,121,36,19,0,1,155,0,0,0,37,155,0,34,38,37,12,120,38,2,0,119,0,14,0,0,40,62,0,76,161,40,0,58,41,161,0,0,42,155,0,41,161,42,2,3,43,156,161,88,44,43,0,65,45,44,41,89,43,45,0,0,46,155,0,25,47,46,1,0,155,47,0,119,0,240,255,0,48,4,0,0,49,150,0,82,51,49,0,1,163,8,0,1,162,0,0,1,164,48,0,1,165,3,0,134,161,0,0,72,121,5,0,48,51,163,162,156,164,165,0,0,52,4,0,0,53,150,0,82,54,53,0,1,165,16,0,1,164,0,0,1,162,244,4,1,163,96,0,1,166,4,0,134,161,0,0,72,121,5,0,52,54,165,164,162,163,166,0,1,166,0,0,134,161,0,0,132,255,5,0,166,0,0,0,0,55,151,0,25,56,55,1,0,151,56,0,119,0,244,254,137,158,0,0,139,0,0,0,140,4,164,0,0,0,0,0,2,156,0,0,255,255,0,0,2,157,0,0,40,1,0,0,1,154,0,0,136,158,0,0,0,155,158,0,136,158,0,0,25,158,158,96,137,158,0,0,130,158,0,0,136,159,0,0,49,158,158,159,156,74,3,0,135,158,0,0,25,153,155,16,0,4,0,0,0,5,1,0,0,59,2,0,0,70,3,0,1,148,0,0,0,81,148,0,34,92,81,3,120,92,2,0,119,0,254,0,0,103,148,0,0,114,4,0,3,125,114,157,41,158,103,2,3,136,125,158,82,6,136,0,1,159,1,0,134,158,0,0,200,187,5,0,6,159,0,0,0,17,148,0,0,28,4,0,3,39,28,157,41,158,17,2,3,50,39,158,82,54,50,0,25,55,54,4,1,158,1,0,85,55,158,0,0,56,148,0,0,57,4,0,3,58,57,157,41,158,56,2,3,60,58,158,82,61,60,0,82,62,61,0,25,63,62,12,82,64,63,0,82,65,64,0,0,147,65,0,0,66,147,0,25,67,66,8,1,158,6,0,85,67,158,0,0,68,147,0,25,69,68,4,1,158,1,0,83,69,158,0,0,71,147,0,0,72,5,0,25,73,72,12,82,74,73,0,134,158,0,0,24,233,5,0,71,74,0,0,0,75,147,0,82,76,75,0,134,158,0,0,132,255,5,0,76,0,0,0,0,77,4,0,0,78,147,0,82,79,78,0,1,159,8,0,1,160,0,0,1,161,148,4,1,162,48,0,1,163,0,0,134,158,0,0,72,121,5,0,77,79,159,160,161,162,163,0,1,163,196,4,1,162,48,0,134,158,0,0,160,232,5,0,153,163,162,0,1,149,0,0,0,80,149,0,34,82,80,12,120,82,2,0,119,0,77,0,0,83,149,0,41,158,83,2,3,84,153,158,88,85,84,0,0,86,5,0,25,87,86,4,80,88,87,0,41,158,88,16,42,158,158,16,0,89,158,0,76,158,89,0,58,90,158,0,65,91,85,90,0,93,5,0,80,94,93,0,41,158,94,16,42,158,158,16,0,95,158,0,76,158,95,0,58,96,158,0,63,97,91,96,0,98,5,0,25,99,98,12,82,100,99,0,80,101,100,0,19,158,101,156,0,102,158,0,76,158,102,0,58,104,158,0,66,105,97,104,0,106,149,0,41,158,106,2,3,107,153,158,89,107,105,0,0,108,149,0,25,109,108,1,41,158,109,2,3,110,153,158,88,111,110,0,0,112,5,0,25,113,112,6,80,115,113,0,41,158,115,16,42,158,158,16,0,116,158,0,76,158,116,0,58,117,158,0,65,118,111,117,0,119,5,0,25,120,119,2,80,121,120,0,41,158,121,16,42,158,158,16,0,122,158,0,76,158,122,0,58,123,158,0,63,124,118,123,0,126,5,0,25,127,126,12,82,128,127,0,25,129,128,2,80,130,129,0,19,158,130,156,0,131,158,0,76,158,131,0,58,132,158,0,66,133,124,132,0,134,149,0,25,135,134,1,41,158,135,2,3,137,153,158,89,137,133,0,0,138,149,0,25,139,138,2,0,149,139,0,119,0,177,255,0,140,59,0,1,158,1,0,15,141,158,140,121,141,19,0,1,150,0,0,0,142,150,0,34,143,142,12,120,143,2,0,119,0,14,0,0,144,59,0,76,158,144,0,58,145,158,0,0,146,150,0,41,158,146,2,3,7,153,158,88,8,7,0,65,9,8,145,89,7,9,0,0,10,150,0,25,11,10,1,0,150,11,0,119,0,240,255,0,12,70,0,38,158,12,2,0,13,158,0,33,14,13,0,121,14,22,0,1,151,0,0,0,15,151,0,34,16,15,12,120,16,2,0,119,0,17,0,0,18,151,0,25,19,18,1,41,158,19,2,3,20,153,158,88,21,20,0,59,158,1,0,64,22,158,21,0,23,151,0,25,24,23,1,41,158,24,2,3,25,153,158,89,25,22,0,0,26,151,0,25,27,26,2,0,151,27,0,119,0,237,255,0,29,70,0,38,158,29,4,0,30,158,0,33,31,30,0,121,31,22,0,1,152,0,0,0,32,152,0,34,33,32,12,120,33,2,0,119,0,17,0,0,34,152,0,25,35,34,1,41,158,35,2,3,36,153,158,88,37,36,0,59,158,1,0,64,38,158,37,0,40,152,0,25,41,40,1,41,158,41,2,3,42,153,158,89,42,38,0,0,43,152,0,25,44,43,2,0,152,44,0,119,0,237,255,0,45,4,0,0,46,147,0,82,47,46,0,1,162,8,0,1,163,0,0,1,161,48,0,1,160,3,0,134,158,0,0,72,121,5,0,45,47,162,163,153,161,160,0,0,48,4,0,0,49,147,0,82,51,49,0,1,160,16,0,1,161,0,0,1,163,244,4,1,162,96,0,1,159,4,0,134,158,0,0,72,121,5,0,48,51,160,161,163,162,159,0,1,159,0,0,134,158,0,0,132,255,5,0,159,0,0,0,0,52,148,0,25,53,52,1,0,148,53,0,119,0,0,255,137,155,0,0,139,0,0,0,140,7,74,0,0,0,0,0,1,70,0,0,136,72,0,0,0,71,72,0,136,72,0,0,25,72,72,48,137,72,0,0,130,72,0,0,136,73,0,0,49,72,72,73,244,78,3,0,135,72,0,0,58,7,1,0,58,8,2,0,58,19,3,0,58,30,4,0,58,41,5,0,58,52,6,0,58,60,8,0,58,61,7,0,63,62,60,61,58,66,62,0,58,63,8,0,58,9,7,0,64,10,63,9,58,67,10,0,58,11,30,0,58,12,19,0,63,13,11,12,58,68,13,0,58,14,30,0,58,15,19,0,64,16,14,15,58,69,16,0,58,17,52,0,58,18,41,0,63,20,17,18,58,64,20,0,58,21,52,0,58,22,41,0,64,23,21,22,58,65,23,0,58,24,67,0,59,72,2,0,66,25,72,24,127,72,0,0,89,72,25,0,127,72,0,0,114,0,72,0,127,73,0,0,102,73,73,1,107,0,1,73,127,72,0,0,102,72,72,2,107,0,2,72,127,73,0,0,102,73,73,3,107,0,3,73,25,26,0,4,127,73,0,0,59,72,0,0,89,73,72,0,127,72,0,0,114,26,72,0,127,73,0,0,102,73,73,1,107,26,1,73,127,72,0,0,102,72,72,2,107,26,2,72,127,73,0,0,102,73,73,3,107,26,3,73,25,27,0,8,127,73,0,0,59,72,0,0,89,73,72,0,127,72,0,0,114,27,72,0,127,73,0,0,102,73,73,1,107,27,1,73,127,72,0,0,102,72,72,2,107,27,2,72,127,73,0,0,102,73,73,3,107,27,3,73,25,28,0,12,127,73,0,0,59,72,0,0,89,73,72,0,127,72,0,0,114,28,72,0,127,73,0,0,102,73,73,1,107,28,1,73,127,72,0,0,102,72,72,2,107,28,2,72,127,73,0,0,102,73,73,3,107,28,3,73,25,29,0,16,127,73,0,0,59,72,0,0,89,73,72,0,127,72,0,0,114,29,72,0,127,73,0,0,102,73,73,1,107,29,1,73,127,72,0,0,102,72,72,2,107,29,2,72,127,73,0,0,102,73,73,3,107,29,3,73,25,31,0,20,58,32,69,0,59,73,2,0,66,33,73,32,127,73,0,0,89,73,33,0,127,73,0,0,114,31,73,0,127,72,0,0,102,72,72,1,107,31,1,72,127,73,0,0,102,73,73,2,107,31,2,73,127,72,0,0,102,72,72,3,107,31,3,72,25,34,0,24,127,72,0,0,59,73,0,0,89,72,73,0,127,73,0,0,114,34,73,0,127,72,0,0,102,72,72,1,107,34,1,72,127,73,0,0,102,73,73,2,107,34,2,73,127,72,0,0,102,72,72,3,107,34,3,72,25,35,0,28,127,72,0,0,59,73,0,0,89,72,73,0,127,73,0,0,114,35,73,0,127,72,0,0,102,72,72,1,107,35,1,72,127,73,0,0,102,73,73,2,107,35,2,73,127,72,0,0,102,72,72,3,107,35,3,72,25,36,0,32,127,72,0,0,59,73,0,0,89,72,73,0,127,73,0,0,114,36,73,0,127,72,0,0,102,72,72,1,107,36,1,72,127,73,0,0,102,73,73,2,107,36,2,73,127,72,0,0,102,72,72,3,107,36,3,72,25,37,0,36,127,72,0,0,59,73,0,0,89,72,73,0,127,73,0,0,114,37,73,0,127,72,0,0,102,72,72,1,107,37,1,72,127,73,0,0,102,73,73,2,107,37,2,73,127,72,0,0,102,72,72,3,107,37,3,72,25,38,0,40,58,39,65,0,59,72,254,255,66,40,72,39,127,72,0,0,89,72,40,0,127,72,0,0,114,38,72,0,127,73,0,0,102,73,73,1,107,38,1,73,127,72,0,0,102,72,72,2,107,38,2,72,127,73,0,0,102,73,73,3,107,38,3,73,25,42,0,44,127,73,0,0,59,72,0,0,89,73,72,0,127,72,0,0,114,42,72,0,127,73,0,0,102,73,73,1,107,42,1,73,127,72,0,0,102,72,72,2,107,42,2,72,127,73,0,0,102,73,73,3,107,42,3,73,25,43,0,48,58,44,66,0,68,45,44,0,58,46,67,0,66,47,45,46,127,73,0,0,89,73,47,0,127,73,0,0,114,43,73,0,127,72,0,0,102,72,72,1,107,43,1,72,127,73,0,0,102,73,73,2,107,43,2,73,127,72,0,0,102,72,72,3,107,43,3,72,25,48,0,52,58,49,68,0,68,50,49,0,58,51,69,0,66,53,50,51,127,72,0,0,89,72,53,0,127,72,0,0,114,48,72,0,127,73,0,0,102,73,73,1,107,48,1,73,127,72,0,0,102,72,72,2,107,48,2,72,127,73,0,0,102,73,73,3,107,48,3,73,25,54,0,56,58,55,64,0,68,56,55,0,58,57,65,0,66,58,56,57,127,73,0,0,89,73,58,0,127,73,0,0,114,54,73,0,127,72,0,0,102,72,72,1,107,54,1,72,127,73,0,0,102,73,73,2,107,54,2,73,127,72,0,0,102,72,72,3,107,54,3,72,25,59,0,60,127,72,0,0,59,73,1,0,89,72,73,0,127,73,0,0,114,59,73,0,127,72,0,0,102,72,72,1,107,59,1,72,127,73,0,0,102,73,73,2,107,59,2,73,127,72,0,0,102,72,72,3,107,59,3,72,137,71,0,0,139,0,0,0,140,7,74,0,0,0,0,0,1,70,0,0,136,72,0,0,0,71,72,0,136,72,0,0,25,72,72,48,137,72,0,0,130,72,0,0,136,73,0,0,49,72,72,73,160,83,3,0,135,72,0,0,58,7,1,0,58,8,2,0,58,19,3,0,58,30,4,0,58,41,5,0,58,52,6,0,58,60,8,0,58,61,7,0,63,62,60,61,58,66,62,0,58,63,8,0,58,9,7,0,64,10,63,9,58,67,10,0,58,11,30,0,58,12,19,0,63,13,11,12,58,68,13,0,58,14,30,0,58,15,19,0,64,16,14,15,58,69,16,0,58,17,52,0,58,18,41,0,63,20,17,18,58,64,20,0,58,21,52,0,58,22,41,0,64,23,21,22,58,65,23,0,58,24,67,0,59,72,2,0,66,25,72,24,127,72,0,0,89,72,25,0,127,72,0,0,114,0,72,0,127,73,0,0,102,73,73,1,107,0,1,73,127,72,0,0,102,72,72,2,107,0,2,72,127,73,0,0,102,73,73,3,107,0,3,73,25,26,0,4,127,73,0,0,59,72,0,0,89,73,72,0,127,72,0,0,114,26,72,0,127,73,0,0,102,73,73,1,107,26,1,73,127,72,0,0,102,72,72,2,107,26,2,72,127,73,0,0,102,73,73,3,107,26,3,73,25,27,0,8,127,73,0,0,59,72,0,0,89,73,72,0,127,72,0,0,114,27,72,0,127,73,0,0,102,73,73,1,107,27,1,73,127,72,0,0,102,72,72,2,107,27,2,72,127,73,0,0,102,73,73,3,107,27,3,73,25,28,0,12,127,73,0,0,59,72,0,0,89,73,72,0,127,72,0,0,114,28,72,0,127,73,0,0,102,73,73,1,107,28,1,73,127,72,0,0,102,72,72,2,107,28,2,72,127,73,0,0,102,73,73,3,107,28,3,73,25,29,0,16,127,73,0,0,59,72,0,0,89,73,72,0,127,72,0,0,114,29,72,0,127,73,0,0,102,73,73,1,107,29,1,73,127,72,0,0,102,72,72,2,107,29,2,72,127,73,0,0,102,73,73,3,107,29,3,73,25,31,0,20,58,32,69,0,59,73,2,0,66,33,73,32,127,73,0,0,89,73,33,0,127,73,0,0,114,31,73,0,127,72,0,0,102,72,72,1,107,31,1,72,127,73,0,0,102,73,73,2,107,31,2,73,127,72,0,0,102,72,72,3,107,31,3,72,25,34,0,24,127,72,0,0,59,73,0,0,89,72,73,0,127,73,0,0,114,34,73,0,127,72,0,0,102,72,72,1,107,34,1,72,127,73,0,0,102,73,73,2,107,34,2,73,127,72,0,0,102,72,72,3,107,34,3,72,25,35,0,28,127,72,0,0,59,73,0,0,89,72,73,0,127,73,0,0,114,35,73,0,127,72,0,0,102,72,72,1,107,35,1,72,127,73,0,0,102,73,73,2,107,35,2,73,127,72,0,0,102,72,72,3,107,35,3,72,25,36,0,32,127,72,0,0,59,73,0,0,89,72,73,0,127,73,0,0,114,36,73,0,127,72,0,0,102,72,72,1,107,36,1,72,127,73,0,0,102,73,73,2,107,36,2,73,127,72,0,0,102,72,72,3,107,36,3,72,25,37,0,36,127,72,0,0,59,73,0,0,89,72,73,0,127,73,0,0,114,37,73,0,127,72,0,0,102,72,72,1,107,37,1,72,127,73,0,0,102,73,73,2,107,37,2,73,127,72,0,0,102,72,72,3,107,37,3,72,25,38,0,40,58,39,65,0,59,72,254,255,66,40,72,39,127,72,0,0,89,72,40,0,127,72,0,0,114,38,72,0,127,73,0,0,102,73,73,1,107,38,1,73,127,72,0,0,102,72,72,2,107,38,2,72,127,73,0,0,102,73,73,3,107,38,3,73,25,42,0,44,127,73,0,0,59,72,0,0,89,73,72,0,127,72,0,0,114,42,72,0,127,73,0,0,102,73,73,1,107,42,1,73,127,72,0,0,102,72,72,2,107,42,2,72,127,73,0,0,102,73,73,3,107,42,3,73,25,43,0,48,58,44,66,0,68,45,44,0,58,46,67,0,66,47,45,46,127,73,0,0,89,73,47,0,127,73,0,0,114,43,73,0,127,72,0,0,102,72,72,1,107,43,1,72,127,73,0,0,102,73,73,2,107,43,2,73,127,72,0,0,102,72,72,3,107,43,3,72,25,48,0,52,58,49,68,0,68,50,49,0,58,51,69,0,66,53,50,51,127,72,0,0,89,72,53,0,127,72,0,0,114,48,72,0,127,73,0,0,102,73,73,1,107,48,1,73,127,72,0,0,102,72,72,2,107,48,2,72,127,73,0,0,102,73,73,3,107,48,3,73,25,54,0,56,58,55,64,0,68,56,55,0,58,57,65,0,66,58,56,57,127,73,0,0,89,73,58,0,127,73,0,0,114,54,73,0,127,72,0,0,102,72,72,1,107,54,1,72,127,73,0,0,102,73,73,2,107,54,2,73,127,72,0,0,102,72,72,3,107,54,3,72,25,59,0,60,127,72,0,0,59,73,1,0,89,72,73,0,127,73,0,0,114,59,73,0,127,72,0,0,102,72,72,1,107,59,1,72,127,73,0,0,102,73,73,2,107,59,2,73,127,72,0,0,102,72,72,3,107,59,3,72,137,71,0,0,139,0,0,0,140,4,135,0,0,0,0,0,2,131,0,0,192,1,0,0,2,132,0,0,73,15,0,0,1,128,0,0,136,133,0,0,0,129,133,0,136,133,0,0,1,134,144,0,3,133,133,134,137,133,0,0,130,133,0,0,136,134,0,0,49,133,133,134,96,88,3,0,135,133,0,0,25,125,129,8,0,124,129,0,25,121,129,112,25,122,129,32,25,113,129,24,25,117,129,20,25,114,129,16,0,4,0,0,0,5,1,0,0,25,2,0,0,36,3,0,0,47,36,0,0,123,47,0,0,58,123,0,1,133,119,0,134,69,0,0,64,94,6,0,58,133,0,0,0,119,69,0,0,80,119,0,1,133,0,0,13,91,80,133,121,91,9,0,0,102,36,0,0,123,102,0,0,6,123,0,1,133,97,0,134,16,0,0,64,94,6,0,6,133,0,0,0,119,16,0,1,133,4,0,1,134,1,0,134,17,0,0,224,168,5,0,133,134,0,0,0,116,17,0,0,18,119,0,1,134,0,0,14,19,18,134,121,19,127,0,1,134,0,0,134,20,0,0,148,94,6,0,134,0,0,0,85,121,20,0,0,21,5,0,82,22,21,0,0,115,22,0,0,23,115,0,26,24,23,1,0,115,24,0,0,26,115,0,33,27,26,0,120,27,2,0,119,0,18,0,0,28,115,0,0,29,5,0,25,30,29,4,82,31,30,0,3,32,31,28,78,33,32,0,41,134,33,24,42,134,134,24,0,34,134,0,32,35,34,47,121,35,3,0,1,128,8,0,119,0,5,0,0,42,115,0,26,43,42,1,0,115,43,0,119,0,236,255,32,134,128,8,121,134,10,0,1,128,0,0,82,37,121,0,0,38,5,0,25,39,38,4,82,40,39,0,0,41,115,0,134,134,0,0,128,39,6,0,37,40,41,0,82,44,121,0,82,45,44,0,33,46,45,0,120,46,2,0,119,0,28,0,0,127,122,0,25,130,127,76,1,134,0,0,85,127,134,0,25,127,127,4,54,134,127,130,204,89,3,0,82,48,121,0,25,49,48,4,82,50,49,0,134,51,0,0,100,250,5,0,50,122,0,0,32,52,51,255,120,52,3,0,1,128,13,0,119,0,11,0,0,53,116,0,134,134,0,0,88,242,4,0,53,121,0,0,1,134,0,0,134,54,0,0,148,94,6,0,134,0,0,0,85,121,54,0,119,0,190,255,32,134,128,13,121,134,13,0,82,55,121,0,25,56,55,4,82,57,56,0,85,124,57,0,1,133,74,15,134,134,0,0,44,77,6,0,133,124,0,0,82,59,121,0,134,134,0,0,148,105,6,0,59,0,0,0,0,60,116,0,82,61,60,0,33,62,61,0,120,62,2,0,119,0,33,0,0,63,116,0,82,64,63,0,26,65,64,1,0,66,116,0,25,67,66,12,82,68,67,0,41,134,65,2,3,70,68,134,82,71,70,0,0,120,71,0,0,72,116,0,0,73,116,0,82,74,73,0,26,75,74,1,134,134,0,0,160,240,3,0,72,75,0,0,0,76,120,0,82,77,76,0,33,78,77,0,121,78,7,0,0,79,120,0,25,81,79,4,82,82,81,0,134,134,0,0,224,247,5,0,82,131,0,0,0,83,120,0,134,134,0,0,148,105,6,0,83,0,0,0,119,0,220,255,0,84,116,0,134,134,0,0,180,1,6,0,84,0,0,0,0,85,5,0,25,86,85,4,82,87,86,0,0,88,36,0,134,89,0,0,68,18,5,0,87,88,0,0,0,90,4,0,25,92,90,4,85,92,89,0,0,93,36,0,0,123,93,0,0,94,123,0,1,134,114,0,134,95,0,0,64,94,6,0,94,134,0,0,0,119,95,0,0,96,4,0,25,97,96,4,82,98,97,0,1,134,0,0,13,99,98,134,0,100,119,0,1,134,0,0,14,101,100,134,19,134,99,101,0,118,134,0,120,118,2,0,119,0,51,0,0,103,25,0,25,104,103,4,82,105,104,0,135,134,21,0,105,113,117,114,82,106,114,0,33,107,106,0,120,107,249,255,119,0,1,0,0,108,25,0,25,109,108,4,82,110,109,0,85,125,110,0,1,133,91,15,134,134,0,0,44,77,6,0,133,125,0,0,0,111,5,0,25,112,111,4,82,7,112,0,1,134,104,15,1,133,1,0,134,8,0,0,24,138,5,0,7,134,133,0,0,126,8,0,0,9,126,0,82,10,113,0,82,11,117,0,134,133,0,0,56,9,6,0,9,10,11,0,0,12,126,0,134,133,0,0,212,0,6,0,12,0,0,0,82,13,113,0,135,133,22,0,13,0,0,0,78,14,132,0,41,133,14,24,42,133,133,24,33,15,133,0,120,15,183,255,1,133,1,0,83,132,133,0,1,134,2,0,135,133,23,0,134,0,0,0,119,0,177,255,137,129,0,0,139,0,0,0,140,0,99,0,0,0,0,0,2,94,0,0,252,5,0,0,2,95,0,0,248,5,0,0,1,92,0,0,136,96,0,0,0,93,96,0,136,96,0,0,1,97,176,0,3,96,96,97,137,96,0,0,130,96,0,0,136,97,0,0,49,96,96,97,156,92,3,0,135,96,0,0,1,96,168,0,3,0,93,96,1,96,164,0,3,1,93,96,1,96,160,0,3,12,93,96,1,96,156,0,3,23,93,96,1,96,152,0,3,34,93,96,1,96,148,0,3,45,93,96,1,96,144,0,3,56,93,96,1,96,140,0,3,67,93,96,1,96,136,0,3,78,93,96,1,96,132,0,3,89,93,96,1,96,128,0,3,2,93,96,25,3,93,124,25,4,93,120,25,5,93,116,25,6,93,112,25,7,93,108,25,8,93,104,25,9,93,100,25,10,93,96,25,11,93,92,25,13,93,88,25,14,93,84,25,15,93,80,25,16,93,76,25,17,93,72,25,18,93,68,25,19,93,64,25,20,93,60,25,21,93,56,25,22,93,52,25,24,93,48,25,25,93,44,25,26,93,40,25,27,93,36,25,28,93,32,25,29,93,28,25,30,93,24,25,31,93,20,25,32,93,16,25,33,93,12,25,35,93,8,25,36,93,4,0,37,93,0,82,38,95,0,1,96,0,0,14,39,38,96,121,39,3,0,137,93,0,0,139,0,0,0,1,97,70,0,134,96,0,0,68,216,5,0,97,0,0,0,1,96,4,0,134,40,0,0,236,195,4,0,96,0,0,0,85,95,40,0,1,96,4,0,134,41,0,0,236,195,4,0,96,0,0,0,1,96,0,6,85,96,41,0,1,96,4,0,134,42,0,0,236,195,4,0,96,0,0,0,85,94,42,0,1,96,4,0,134,43,0,0,236,195,4,0,96,0,0,0,1,96,244,5,85,96,43,0,82,44,95,0,1,96,71,0,85,0,96,0,1,97,153,20,1,98,4,0,134,96,0,0,216,19,4,0,44,97,98,0,82,46,95,0,1,96,72,0,85,1,96,0,1,98,158,20,1,97,5,0,134,96,0,0,216,19,4,0,46,98,97,1,82,47,95,0,1,96,73,0,85,12,96,0,1,97,164,20,1,98,9,0,134,96,0,0,216,19,4,0,47,97,98,12,82,48,95,0,1,96,74,0,85,23,96,0,1,98,174,20,1,97,8,0,134,96,0,0,216,19,4,0,48,98,97,23,82,49,95,0,1,96,75,0,85,34,96,0,1,97,183,20,1,98,8,0,134,96,0,0,216,19,4,0,49,97,98,34,82,50,95,0,1,96,76,0,85,45,96,0,1,98,192,20,1,97,8,0,134,96,0,0,216,19,4,0,50,98,97,45,82,51,95,0,1,96,77,0,85,56,96,0,1,97,201,20,1,98,5,0,134,96,0,0,216,19,4,0,51,97,98,56,82,52,95,0,1,96,78,0,85,67,96,0,1,98,207,20,1,97,4,0,134,96,0,0,216,19,4,0,52,98,97,67,82,53,95,0,1,96,79,0,85,78,96,0,1,97,212,20,1,98,5,0,134,96,0,0,216,19,4,0,53,97,98,78,82,54,95,0,1,96,80,0,85,89,96,0,1,98,218,20,1,97,10,0,134,96,0,0,216,19,4,0,54,98,97,89,82,55,95,0,1,96,81,0,85,2,96,0,1,97,229,20,1,98,8,0,134,96,0,0,216,19,4,0,55,97,98,2,1,96,0,6,82,57,96,0,1,96,82,0,85,3,96,0,1,98,229,20,1,97,8,0,134,96,0,0,216,19,4,0,57,98,97,3,82,58,94,0,1,96,83,0,85,4,96,0,1,97,238,20,1,98,5,0,134,96,0,0,216,19,4,0,58,97,98,4,82,59,94,0,1,96,84,0,85,5,96,0,1,98,244,20,1,97,6,0,134,96,0,0,216,19,4,0,59,98,97,5,82,60,94,0,1,96,85,0,85,6,96,0,1,97,251,20,1,98,1,0,134,96,0,0,216,19,4,0,60,97,98,6,82,61,94,0,1,96,86,0,85,7,96,0,1,98,253,20,1,97,1,0,134,96,0,0,216,19,4,0,61,98,97,7,82,62,94,0,1,96,87,0,85,8,96,0,1,97,255,20,1,98,5,0,134,96,0,0,216,19,4,0,62,97,98,8,82,63,94,0,1,96,88,0,85,9,96,0,1,98,5,21,1,97,10,0,134,96,0,0,216,19,4,0,63,98,97,9,82,64,94,0,1,96,89,0,85,10,96,0,1,97,16,21,1,98,10,0,134,96,0,0,216,19,4,0,64,97,98,10,82,65,94,0,1,96,90,0,85,11,96,0,1,98,27,21,1,97,10,0,134,96,0,0,216,19,4,0,65,98,97,11,82,66,94,0,1,96,91,0,85,13,96,0,1,97,113,35,1,98,4,0,134,96,0,0,216,19,4,0,66,97,98,13,82,68,94,0,1,96,92,0,85,14,96,0,1,98,38,21,1,97,5,0,134,96,0,0,216,19,4,0,68,98,97,14,82,69,94,0,1,96,93,0,85,15,96,0,1,97,212,20,1,98,5,0,134,96,0,0,216,19,4,0,69,97,98,15,82,70,94,0,1,96,94,0,85,16,96,0,1,98,44,21,1,97,5,0,134,96,0,0,216,19,4,0,70,98,97,16,82,71,94,0,1,96,95,0,85,17,96,0,1,97,50,21,1,98,6,0,134,96,0,0,216,19,4,0,71,97,98,17,82,72,94,0,1,96,96,0,85,18,96,0,1,98,57,21,1,97,5,0,134,96,0,0,216,19,4,0,72,98,97,18,82,73,94,0,1,96,97,0,85,19,96,0,1,97,63,21,1,98,7,0,134,96,0,0,216,19,4,0,73,97,98,19,82,74,94,0,1,96,98,0,85,20,96,0,1,98,71,21,1,97,4,0,134,96,0,0,216,19,4,0,74,98,97,20,82,75,94,0,1,96,99,0,85,21,96,0,1,97,76,21,1,98,5,0,134,96,0,0,216,19,4,0,75,97,98,21,82,76,94,0,1,96,100,0,85,22,96,0,1,98,82,21,1,97,10,0,134,96,0,0,216,19,4,0,76,98,97,22,82,77,94,0,1,96,101,0,85,24,96,0,1,97,93,21,1,98,11,0,134,96,0,0,216,19,4,0,77,97,98,24,82,79,94,0,1,96,102,0,85,25,96,0,1,98,105,21,1,97,13,0,134,96,0,0,216,19,4,0,79,98,97,25,82,80,94,0,1,96,103,0,85,26,96,0,1,97,119,21,1,98,12,0,134,96,0,0,216,19,4,0,80,97,98,26,82,81,94,0,1,96,104,0,85,27,96,0,1,98,132,21,1,97,11,0,134,96,0,0,216,19,4,0,81,98,97,27,82,82,94,0,1,96,105,0,85,28,96,0,1,97,144,21,1,98,12,0,134,96,0,0,216,19,4,0,82,97,98,28,82,83,94,0,1,96,106,0,85,29,96,0,1,98,157,21,1,97,14,0,134,96,0,0,216,19,4,0,83,98,97,29,82,84,94,0,1,96,107,0,85,30,96,0,1,97,172,21,1,98,13,0,134,96,0,0,216,19,4,0,84,97,98,30,82,85,94,0,1,96,108,0,85,31,96,0,1,98,186,21,1,97,4,0,134,96,0,0,216,19,4,0,85,98,97,31,82,86,94,0,1,96,109,0,85,32,96,0,1,97,191,21,1,98,14,0,134,96,0,0,216,19,4,0,86,97,98,32,82,87,94,0,1,96,110,0,85,33,96,0,1,98,206,21,1,97,18,0,134,96,0,0,216,19,4,0,87,98,97,33,82,88,94,0,1,96,111,0,85,35,96,0,1,97,225,21,1,98,20,0,134,96,0,0,216,19,4,0,88,97,98,35,82,90,94,0,1,96,112,0,85,36,96,0,1,98,246,21,1,97,8,0,134,96,0,0,216,19,4,0,90,98,97,36,82,91,94,0,1,96,113,0,85,37,96,0,1,97,255,21,1,98,8,0,134,96,0,0,216,19,4,0,91,97,98,37,137,93,0,0,139,0,0,0,140,3,146,0,0,0,0,0,1,142,0,0,136,144,0,0,0,143,144,0,136,144,0,0,25,144,144,48,137,144,0,0,130,144,0,0,136,145,0,0,49,144,144,145,148,99,3,0,135,144,0,0,0,136,143,0,0,3,0,0,0,4,1,0,0,47,2,0,0,58,3,0,0,141,58,0,134,69,0,0,104,85,6,0,0,140,69,0,0,80,47,0,82,91,80,0,25,102,91,1,85,80,102,0,1,144,0,0,134,113,0,0,148,94,6,0,144,0,0,0,0,137,113,0,1,139,0,0,1,138,0,0,0,124,137,0,1,144,0,0,85,124,144,0,0,5,47,0,82,16,5,0,0,27,141,0,3,38,27,16,78,41,38,0,41,144,41,24,42,144,144,24,0,42,144,0,32,43,42,125,0,44,47,0,82,45,44,0,121,43,3,0,1,142,4,0,119,0,168,0,0,48,141,0,3,49,48,45,78,50,49,0,41,144,50,24,42,144,144,24,0,51,144,0,33,52,51,34,0,53,47,0,82,54,53,0,25,55,54,1,85,53,55,0,0,56,47,0,82,57,56,0,0,59,4,0,18,60,59,57,120,52,2,0,119,0,3,0,121,60,225,255,119,0,149,0,120,60,148,0,0,61,47,0,82,62,61,0,0,139,62,0,0,63,47,0,82,64,63,0,0,65,141,0,3,66,65,64,78,67,66,0,41,144,67,24,42,144,144,24,0,68,144,0,33,70,68,34,0,71,47,0,82,72,71,0,120,70,2,0,119,0,9,0,25,73,72,1,85,71,73,0,0,74,47,0,82,75,74,0,0,76,4,0,18,77,76,75,121,77,237,255,119,0,124,0,26,78,72,1,0,138,78,0,0,79,47,0,82,81,79,0,25,82,81,1,85,79,82,0,0,83,47,0,82,84,83,0,0,85,4,0,18,86,85,84,120,86,113,0,0,87,137,0,0,88,141,0,0,89,139,0,3,90,88,89,0,92,138,0,0,93,139,0,4,94,92,93,25,95,94,1,134,144,0,0,128,39,6,0,87,90,95,0,0,96,47,0,82,97,96,0,0,98,141,0,3,99,98,97,78,100,99,0,41,144,100,24,42,144,144,24,0,101,144,0,33,103,101,58,0,104,47,0,82,105,104,0,25,106,105,1,85,104,106,0,120,103,2,0,119,0,7,0,0,107,47,0,82,108,107,0,0,109,4,0,18,110,109,108,121,110,237,255,119,0,81,0,0,111,47,0,82,112,111,0,0,114,141,0,3,115,114,112,78,116,115,0,41,144,116,24,42,144,144,24,0,117,144,0,134,118,0,0,160,107,6,0,117,0,0,0,33,119,118,0,120,119,2,0,119,0,11,0,0,120,47,0,82,121,120,0,25,122,121,1,85,120,122,0,0,123,47,0,82,125,123,0,0,126,4,0,18,127,126,125,121,127,234,255,119,0,57,0,0,128,3,0,0,129,4,0,0,130,47,0,134,131,0,0,152,138,1,0,128,129,130,0,85,136,131,0,0,132,140,0,82,133,132,0,0,134,137,0,25,6,134,4,82,7,6,0,0,8,137,0,82,9,8,0,134,144,0,0,216,19,4,0,133,7,9,136,0,10,47,0,82,11,10,0,0,12,141,0,3,13,12,11,78,14,13,0,41,144,14,24,42,144,144,24,0,15,144,0,32,17,15,44,0,18,47,0,82,19,18,0,121,17,9,0,25,20,19,1,85,18,20,0,0,21,47,0,82,22,21,0,0,23,4,0,18,24,23,22,121,24,93,255,119,0,20,0,0,25,141,0,3,26,25,19,78,28,26,0,41,144,28,24,42,144,144,24,0,29,144,0,32,30,29,125,0,31,47,0,82,32,31,0,25,33,32,1,85,31,33,0,0,34,47,0,82,35,34,0,0,36,4,0,18,37,36,35,20,144,30,37,0,135,144,0,121,135,74,255,119,0,1,0,32,144,142,4,121,144,3,0,25,46,45,1,85,44,46,0,0,39,137,0,134,144,0,0,148,105,6,0,39,0,0,0,0,40,140,0,137,143,0,0,139,40,0,0,140,5,130,0,0,0,0,0,2,126,0,0,40,1,0,0,2,127,0,0,156,0,0,0,1,124,0,0,136,128,0,0,0,125,128,0,136,128,0,0,25,128,128,32,137,128,0,0,130,128,0,0,136,129,0,0,49,128,128,129,52,103,3,0,135,128,0,0,25,6,125,20,0,5,0,0,85,6,1,0,0,34,2,0,0,45,3,0,0,56,4,0,0,67,5,0,25,78,67,104,1,128,0,0,85,78,128,0,82,89,6,0,0,100,5,0,1,128,60,1,3,111,100,128,85,111,89,0,0,7,5,0,1,128,36,1,3,18,7,128,82,26,18,0,25,27,26,4,82,28,27,0,1,128,4,0,134,29,0,0,68,71,4,0,28,6,128,0,82,30,29,0,0,31,5,0,1,128,64,1,3,32,31,128,85,32,30,0,0,33,5,0,1,128,64,1,3,35,33,128,82,36,35,0,1,128,0,0,14,37,36,128,121,37,119,0,1,123,0,0,0,88,123,0,34,90,88,3,120,90,2,0,119,0,32,0,0,91,123,0,0,92,5,0,3,93,92,126,41,128,91,2,3,94,93,128,82,95,94,0,1,128,0,0,14,96,95,128,121,96,11,0,0,97,123,0,0,98,5,0,3,99,98,126,41,128,97,2,3,101,99,128,82,102,101,0,134,128,0,0,240,55,5,0,102,0,0,0,119,0,9,0,134,103,0,0,240,33,6,0,0,104,123,0,0,105,5,0,3,106,105,126,41,128,104,2,3,107,106,128,85,107,103,0,0,108,123,0,25,109,108,1,0,123,109,0,119,0,222,255,82,110,6,0,1,128,0,0,1,129,2,0,138,110,128,129,116,104,3,0,148,104,3,0,119,0,76,0,0,112,5,0,0,113,34,0,0,114,45,0,0,115,56,0,134,128,0,0,88,74,3,0,112,113,114,115,119,0,9,0,0,116,5,0,0,117,34,0,0,118,45,0,0,119,56,0,134,128,0,0,192,69,3,0,116,117,118,119,119,0,1,0,0,120,5,0,134,121,0,0,216,15,5,0,120,0,0,0,33,8,121,0,121,8,54,0,0,9,5,0,134,10,0,0,20,190,4,0,9,0,0,0,33,11,10,0,121,11,48,0,0,12,34,0,25,13,12,4,80,14,13,0,41,128,14,16,42,128,128,16,76,128,128,0,58,15,128,0,0,16,5,0,3,17,16,127,127,128,0,0,89,128,15,0,127,128,0,0,114,17,128,0,127,129,0,0,102,129,129,1,107,17,1,129,127,128,0,0,102,128,128,2,107,17,2,128,127,129,0,0,102,129,129,3,107,17,3,129,0,19,34,0,25,20,19,6,80,21,20,0,41,129,21,16,42,129,129,16,76,129,129,0,58,22,129,0,0,23,5,0,3,24,23,127,25,25,24,4,127,129,0,0,89,129,22,0,127,129,0,0,114,25,129,0,127,128,0,0,102,128,128,1,107,25,1,128,127,129,0,0,102,129,129,2,107,25,2,129,127,128,0,0,102,128,128,3,107,25,3,128,137,125,0,0,139,0,0,0,0,38,5,0,25,39,38,104,1,128,255,255,85,39,128,0,0,40,5,0,1,128,60,1,3,41,40,128,1,128,255,255,85,41,128,0,0,42,5,0,1,128,64,1,3,43,42,128,1,128,0,0,85,43,128,0,1,123,0,0,0,44,123,0,34,46,44,3,120,46,2,0,119,0,23,0,0,47,123,0,0,48,5,0,3,49,48,126,41,128,47,2,3,50,49,128,82,51,50,0,1,128,0,0,14,52,51,128,121,52,10,0,0,53,123,0,0,54,5,0,3,55,54,126,41,128,53,2,3,57,55,128,82,58,57,0,134,128,0,0,240,55,5,0,58,0,0,0,0,59,123,0,25,60,59,1,0,123,60,0,119,0,231,255,0,61,5,0,1,128,52,1,3,62,61,128,82,63,62,0,1,129,0,0,134,128,0,0,180,61,5,0,63,129,0,0,0,64,5,0,1,128,56,1,3,65,64,128,82,66,65,0,25,68,66,12,82,69,68,0,0,122,69,0,0,70,122,0,1,128,0,0,14,71,70,128,120,71,2,0,119,0,21,0,0,72,122,0,0,73,72,0,0,74,5,0,1,128,56,1,3,75,74,128,82,76,75,0,25,77,76,8,82,79,77,0,16,80,73,79,120,80,2,0,119,0,10,0,0,81,122,0,82,82,81,0,134,128,0,0,124,164,5,0,82,0,0,0,0,83,122,0,25,84,83,4,0,122,84,0,119,0,232,255,0,85,5,0,1,128,56,1,3,86,85,128,82,87,86,0,1,129,0,0,134,128,0,0,180,61,5,0,87,129,0,0,137,125,0,0,139,0,0,0,140,5,52,0,0,0,0,0,1,48,0,0,136,50,0,0,0,49,50,0,136,50,0,0,25,50,50,32,137,50,0,0,130,50,0,0,136,51,0,0,49,50,50,51,64,107,3,0,135,50,0,0,58,5,1,0,58,6,2,0,58,17,3,0,58,28,4,0,58,39,5,0,59,50,2,0,66,42,39,50,135,43,24,0,42,0,0,0,59,50,1,0,66,44,50,43,58,47,44,0,58,45,47,0,58,46,6,0,66,7,45,46,127,50,0,0,89,50,7,0,127,50,0,0,114,0,50,0,127,51,0,0,102,51,51,1,107,0,1,51,127,50,0,0,102,50,50,2,107,0,2,50,127,51,0,0,102,51,51,3,107,0,3,51,25,8,0,4,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,8,50,0,127,51,0,0,102,51,51,1,107,8,1,51,127,50,0,0,102,50,50,2,107,8,2,50,127,51,0,0,102,51,51,3,107,8,3,51,25,9,0,8,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,9,50,0,127,51,0,0,102,51,51,1,107,9,1,51,127,50,0,0,102,50,50,2,107,9,2,50,127,51,0,0,102,51,51,3,107,9,3,51,25,10,0,12,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,10,50,0,127,51,0,0,102,51,51,1,107,10,1,51,127,50,0,0,102,50,50,2,107,10,2,50,127,51,0,0,102,51,51,3,107,10,3,51,25,11,0,16,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,11,50,0,127,51,0,0,102,51,51,1,107,11,1,51,127,50,0,0,102,50,50,2,107,11,2,50,127,51,0,0,102,51,51,3,107,11,3,51,25,12,0,20,58,13,47,0,127,51,0,0,89,51,13,0,127,51,0,0,114,12,51,0,127,50,0,0,102,50,50,1,107,12,1,50,127,51,0,0,102,51,51,2,107,12,2,51,127,50,0,0,102,50,50,3,107,12,3,50,25,14,0,24,127,50,0,0,59,51,0,0,89,50,51,0,127,51,0,0,114,14,51,0,127,50,0,0,102,50,50,1,107,14,1,50,127,51,0,0,102,51,51,2,107,14,2,51,127,50,0,0,102,50,50,3,107,14,3,50,25,15,0,28,127,50,0,0,59,51,0,0,89,50,51,0,127,51,0,0,114,15,51,0,127,50,0,0,102,50,50,1,107,15,1,50,127,51,0,0,102,51,51,2,107,15,2,51,127,50,0,0,102,50,50,3,107,15,3,50,25,16,0,32,127,50,0,0,59,51,0,0,89,50,51,0,127,51,0,0,114,16,51,0,127,50,0,0,102,50,50,1,107,16,1,50,127,51,0,0,102,51,51,2,107,16,2,51,127,50,0,0,102,50,50,3,107,16,3,50,25,18,0,36,127,50,0,0,59,51,0,0,89,50,51,0,127,51,0,0,114,18,51,0,127,50,0,0,102,50,50,1,107,18,1,50,127,51,0,0,102,51,51,2,107,18,2,51,127,50,0,0,102,50,50,3,107,18,3,50,25,19,0,40,58,20,28,0,58,21,17,0,63,22,20,21,58,23,17,0,58,24,28,0,64,25,23,24,66,26,22,25,127,50,0,0,89,50,26,0,127,50,0,0,114,19,50,0,127,51,0,0,102,51,51,1,107,19,1,51,127,50,0,0,102,50,50,2,107,19,2,50,127,51,0,0,102,51,51,3,107,19,3,51,25,27,0,44,127,51,0,0,59,50,255,255,89,51,50,0,127,50,0,0,114,27,50,0,127,51,0,0,102,51,51,1,107,27,1,51,127,50,0,0,102,50,50,2,107,27,2,50,127,51,0,0,102,51,51,3,107,27,3,51,25,29,0,48,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,29,50,0,127,51,0,0,102,51,51,1,107,29,1,51,127,50,0,0,102,50,50,2,107,29,2,50,127,51,0,0,102,51,51,3,107,29,3,51,25,30,0,52,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,30,50,0,127,51,0,0,102,51,51,1,107,30,1,51,127,50,0,0,102,50,50,2,107,30,2,50,127,51,0,0,102,51,51,3,107,30,3,51,25,31,0,56,58,32,28,0,59,51,2,0,65,33,51,32,58,34,17,0,65,35,33,34,58,36,17,0,58,37,28,0,64,38,36,37,66,40,35,38,127,51,0,0,89,51,40,0,127,51,0,0,114,31,51,0,127,50,0,0,102,50,50,1,107,31,1,50,127,51,0,0,102,51,51,2,107,31,2,51,127,50,0,0,102,50,50,3,107,31,3,50,25,41,0,60,127,50,0,0,59,51,0,0,89,50,51,0,127,51,0,0,114,41,51,0,127,50,0,0,102,50,50,1,107,41,1,50,127,51,0,0,102,51,51,2,107,41,2,51,127,50,0,0,102,50,50,3,107,41,3,50,137,49,0,0,139,0,0,0,140,5,52,0,0,0,0,0,1,48,0,0,136,50,0,0,0,49,50,0,136,50,0,0,25,50,50,32,137,50,0,0,130,50,0,0,136,51,0,0,49,50,50,51,168,111,3,0,135,50,0,0,58,5,1,0,58,6,2,0,58,17,3,0,58,28,4,0,58,39,5,0,59,50,2,0,66,42,39,50,135,43,24,0,42,0,0,0,59,50,1,0,66,44,50,43,58,47,44,0,58,45,47,0,58,46,6,0,66,7,45,46,127,50,0,0,89,50,7,0,127,50,0,0,114,0,50,0,127,51,0,0,102,51,51,1,107,0,1,51], eb + 215040);
  HEAPU8.set([127,50,0,0,102,50,50,2,107,0,2,50,127,51,0,0,102,51,51,3,107,0,3,51,25,8,0,4,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,8,50,0,127,51,0,0,102,51,51,1,107,8,1,51,127,50,0,0,102,50,50,2,107,8,2,50,127,51,0,0,102,51,51,3,107,8,3,51,25,9,0,8,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,9,50,0,127,51,0,0,102,51,51,1,107,9,1,51,127,50,0,0,102,50,50,2,107,9,2,50,127,51,0,0,102,51,51,3,107,9,3,51,25,10,0,12,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,10,50,0,127,51,0,0,102,51,51,1,107,10,1,51,127,50,0,0,102,50,50,2,107,10,2,50,127,51,0,0,102,51,51,3,107,10,3,51,25,11,0,16,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,11,50,0,127,51,0,0,102,51,51,1,107,11,1,51,127,50,0,0,102,50,50,2,107,11,2,50,127,51,0,0,102,51,51,3,107,11,3,51,25,12,0,20,58,13,47,0,127,51,0,0,89,51,13,0,127,51,0,0,114,12,51,0,127,50,0,0,102,50,50,1,107,12,1,50,127,51,0,0,102,51,51,2,107,12,2,51,127,50,0,0,102,50,50,3,107,12,3,50,25,14,0,24,127,50,0,0,59,51,0,0,89,50,51,0,127,51,0,0,114,14,51,0,127,50,0,0,102,50,50,1,107,14,1,50,127,51,0,0,102,51,51,2,107,14,2,51,127,50,0,0,102,50,50,3,107,14,3,50,25,15,0,28,127,50,0,0,59,51,0,0,89,50,51,0,127,51,0,0,114,15,51,0,127,50,0,0,102,50,50,1,107,15,1,50,127,51,0,0,102,51,51,2,107,15,2,51,127,50,0,0,102,50,50,3,107,15,3,50,25,16,0,32,127,50,0,0,59,51,0,0,89,50,51,0,127,51,0,0,114,16,51,0,127,50,0,0,102,50,50,1,107,16,1,50,127,51,0,0,102,51,51,2,107,16,2,51,127,50,0,0,102,50,50,3,107,16,3,50,25,18,0,36,127,50,0,0,59,51,0,0,89,50,51,0,127,51,0,0,114,18,51,0,127,50,0,0,102,50,50,1,107,18,1,50,127,51,0,0,102,51,51,2,107,18,2,51,127,50,0,0,102,50,50,3,107,18,3,50,25,19,0,40,58,20,28,0,58,21,17,0,63,22,20,21,58,23,17,0,58,24,28,0,64,25,23,24,66,26,22,25,127,50,0,0,89,50,26,0,127,50,0,0,114,19,50,0,127,51,0,0,102,51,51,1,107,19,1,51,127,50,0,0,102,50,50,2,107,19,2,50,127,51,0,0,102,51,51,3,107,19,3,51,25,27,0,44,127,51,0,0,59,50,255,255,89,51,50,0,127,50,0,0,114,27,50,0,127,51,0,0,102,51,51,1,107,27,1,51,127,50,0,0,102,50,50,2,107,27,2,50,127,51,0,0,102,51,51,3,107,27,3,51,25,29,0,48,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,29,50,0,127,51,0,0,102,51,51,1,107,29,1,51,127,50,0,0,102,50,50,2,107,29,2,50,127,51,0,0,102,51,51,3,107,29,3,51,25,30,0,52,127,51,0,0,59,50,0,0,89,51,50,0,127,50,0,0,114,30,50,0,127,51,0,0,102,51,51,1,107,30,1,51,127,50,0,0,102,50,50,2,107,30,2,50,127,51,0,0,102,51,51,3,107,30,3,51,25,31,0,56,58,32,28,0,59,51,2,0,65,33,51,32,58,34,17,0,65,35,33,34,58,36,17,0,58,37,28,0,64,38,36,37,66,40,35,38,127,51,0,0,89,51,40,0,127,51,0,0,114,31,51,0,127,50,0,0,102,50,50,1,107,31,1,50,127,51,0,0,102,51,51,2,107,31,2,51,127,50,0,0,102,50,50,3,107,31,3,50,25,41,0,60,127,50,0,0,59,51,0,0,89,50,51,0,127,51,0,0,114,41,51,0,127,50,0,0,102,50,50,1,107,41,1,50,127,51,0,0,102,51,51,2,107,41,2,51,127,50,0,0,102,50,50,3,107,41,3,50,137,49,0,0,139,0,0,0,140,3,100,0,0,0,0,0,1,91,0,0,136,95,0,0,0,92,95,0,136,95,0,0,25,95,95,16,137,95,0,0,130,95,0,0,136,96,0,0,49,95,95,96,16,116,3,0,135,95,0,0,0,3,0,0,0,4,1,0,0,15,2,0,0,26,4,0,1,95,0,0,14,37,26,95,0,48,3,0,25,59,48,104,82,70,59,0,1,95,0,0,14,81,70,95,121,37,24,0,120,81,9,0,1,95,16,0,1,96,15,0,134,89,0,0,168,171,5,0,95,96,0,0,0,5,3,0,25,6,5,104,85,6,89,0,0,7,3,0,25,8,7,104,82,9,8,0,0,10,4,0,0,90,9,0,0,93,10,0,25,94,90,16,78,96,93,0,83,90,96,0,25,90,90,1,25,93,93,1,54,96,90,94,128,116,3,0,119,0,12,0,121,81,11,0,0,11,3,0,25,12,11,104,82,13,12,0,134,96,0,0,216,166,5,0,13,0,0,0,0,14,3,0,25,16,14,104,1,96,0,0,85,16,96,0,0,17,15,0,1,96,0,0,14,18,17,96,0,19,3,0,25,20,19,108,82,21,20,0,1,96,0,0,14,22,21,96,121,18,24,0,120,22,9,0,1,96,16,0,1,95,15,0,134,23,0,0,168,171,5,0,96,95,0,0,0,24,3,0,25,25,24,108,85,25,23,0,0,27,3,0,25,28,27,108,82,29,28,0,0,30,15,0,0,90,29,0,0,93,30,0,25,94,90,16,78,95,93,0,83,90,95,0,25,90,90,1,25,93,93,1,54,95,90,94,44,117,3,0,119,0,12,0,121,22,11,0,0,31,3,0,25,32,31,108,82,33,32,0,134,95,0,0,216,166,5,0,33,0,0,0,0,34,3,0,25,35,34,108,1,95,0,0,85,35,95,0,0,36,3,0,25,38,36,104,82,39,38,0,1,95,0,0,14,40,39,95,0,41,3,0,25,42,41,4,82,43,42,0,121,40,69,0,0,44,4,0,127,95,0,0,114,95,44,0,127,95,0,0,102,96,44,1,107,95,1,96,127,96,0,0,102,95,44,2,107,96,2,95,127,95,0,0,102,96,44,3,107,95,3,96,127,96,0,0,88,45,96,0,58,46,45,0,0,47,4,0,25,49,47,4,127,96,0,0,114,96,49,0,127,96,0,0,102,95,49,1,107,96,1,95,127,95,0,0,102,96,49,2,107,95,2,96,127,96,0,0,102,95,49,3,107,96,3,95,127,95,0,0,88,50,95,0,58,51,50,0,0,52,4,0,25,53,52,8,127,95,0,0,114,95,53,0,127,95,0,0,102,96,53,1,107,95,1,96,127,96,0,0,102,95,53,2,107,96,2,95,127,95,0,0,102,96,53,3,107,95,3,96,127,96,0,0,88,54,96,0,58,55,54,0,0,56,4,0,25,57,56,12,127,96,0,0,114,96,57,0,127,96,0,0,102,95,57,1,107,96,1,95,127,95,0,0,102,96,57,2,107,95,2,96,127,96,0,0,102,95,57,3,107,96,3,95,127,95,0,0,88,58,95,0,58,60,58,0,1,95,15,0,135,61,25,0,95,43,46,51,55,60,0,0,119,0,9,0,1,95,15,0,59,96,255,255,59,97,255,255,59,98,255,255,59,99,255,255,135,62,25,0,95,43,96,97,98,99,0,0,0,63,3,0,25,64,63,108,82,65,64,0,1,99,0,0,14,66,65,99,0,67,3,0,25,68,67,4,82,69,68,0,121,66,71,0,0,71,15,0,127,99,0,0,114,99,71,0,127,99,0,0,102,98,71,1,107,99,1,98,127,98,0,0,102,99,71,2,107,98,2,99,127,99,0,0,102,98,71,3,107,99,3,98,127,98,0,0,88,72,98,0,58,73,72,0,0,74,15,0,25,75,74,4,127,98,0,0,114,98,75,0,127,98,0,0,102,99,75,1,107,98,1,99,127,99,0,0,102,98,75,2,107,99,2,98,127,98,0,0,102,99,75,3,107,98,3,99,127,99,0,0,88,76,99,0,58,77,76,0,0,78,15,0,25,79,78,8,127,99,0,0,114,99,79,0,127,99,0,0,102,98,79,1,107,99,1,98,127,98,0,0,102,99,79,2,107,98,2,99,127,99,0,0,102,98,79,3,107,99,3,98,127,98,0,0,88,80,98,0,58,82,80,0,0,83,15,0,25,84,83,12,127,98,0,0,114,98,84,0,127,98,0,0,102,99,84,1,107,98,1,99,127,99,0,0,102,98,84,2,107,99,2,98,127,98,0,0,102,99,84,3,107,98,3,99,127,99,0,0,88,85,99,0,58,86,85,0,1,99,16,0,135,87,25,0,99,69,73,77,82,86,0,0,137,92,0,0,139,0,0,0,119,0,11,0,1,99,16,0,59,98,255,255,59,97,255,255,59,96,255,255,59,95,255,255,135,88,25,0,99,69,98,97,96,95,0,0,137,92,0,0,139,0,0,0,139,0,0,0,140,2,85,0,0,0,0,0,1,80,0,0,136,82,0,0,0,81,82,0,136,82,0,0,1,83,176,0,3,82,82,83,137,82,0,0,130,82,0,0,136,83,0,0,49,82,82,83,104,120,3,0,135,82,0,0,1,82,160,0,3,79,81,82,1,82,152,0,3,78,81,82,1,82,144,0,3,4,81,82,1,82,136,0,3,12,81,82,1,82,128,0,3,11,81,82,25,10,81,120,25,9,81,112,25,8,81,104,25,7,81,96,25,6,81,88,25,5,81,80,25,3,81,72,25,2,81,64,25,77,81,56,25,14,81,40,25,25,81,24,25,36,81,16,25,47,81,8,0,58,81,0,0,13,0,0,0,69,13,0,1,82,240,0,3,71,69,82,0,72,13,0,1,82,224,0,3,73,72,82,82,82,1,0,85,77,82,0,106,83,1,4,109,77,4,83,82,83,73,0,85,2,83,0,106,82,73,4,109,2,4,82,134,82,0,0,220,249,5,0,14,77,2,0,82,82,14,0,85,71,82,0,106,83,14,4,109,71,4,83,0,15,13,0,1,83,232,0,3,16,15,83,82,83,1,0,85,16,83,0,106,82,1,4,109,16,4,82,0,17,13,0,1,82,68,1,3,18,17,82,82,19,18,0,0,76,19,0,0,20,13,0,1,82,48,1,3,21,20,82,82,22,21,0,0,75,22,0,0,23,13,0,1,82,68,1,3,24,23,82,1,82,0,0,85,24,82,0,0,26,13,0,1,82,48,1,3,27,26,82,1,82,0,0,85,27,82,0,0,28,76,0,1,82,0,0,14,29,28,82,121,29,42,0,0,30,76,0,0,31,76,0,1,82,216,0,3,32,31,82,0,33,13,0,1,82,232,0,3,34,33,82,0,35,13,0,1,82,216,0,3,37,35,82,82,82,34,0,85,3,82,0,106,83,34,4,109,3,4,83,82,83,37,0,85,5,83,0,106,82,37,4,109,5,4,82,134,82,0,0,220,249,5,0,36,3,5,0,82,82,32,0,85,6,82,0,106,83,32,4,109,6,4,83,82,83,36,0,85,7,83,0,106,82,36,4,109,7,4,82,134,82,0,0,32,250,5,0,25,6,7,0,82,82,25,0,85,8,82,0,106,83,25,4,109,8,4,83,134,83,0,0,48,120,3,0,30,8,0,0,137,81,0,0,139,0,0,0,0,38,75,0,1,83,0,0,14,39,38,83,121,39,42,0,0,40,75,0,0,41,75,0,1,83,216,0,3,42,41,83,0,43,13,0,1,83,232,0,3,44,43,83,0,45,13,0,1,83,216,0,3,46,45,83,82,83,44,0,85,9,83,0,106,82,44,4,109,9,4,82,82,82,46,0,85,10,82,0,106,83,46,4,109,10,4,83,134,83,0,0,220,249,5,0,58,9,10,0,82,83,42,0,85,11,83,0,106,82,42,4,109,11,4,82,82,82,58,0,85,12,82,0,106,83,58,4,109,12,4,83,134,83,0,0,32,250,5,0,47,11,12,0,82,83,47,0,85,4,83,0,106,82,47,4,109,4,4,82,134,82,0,0,48,120,3,0,40,4,0,0,137,81,0,0,139,0,0,0,0,48,13,0,1,82,232,0,3,49,48,82,82,82,1,0,85,49,82,0,106,83,1,4,109,49,4,83,0,50,13,0,82,51,50,0,32,74,51,5,121,74,9,0,0,52,13,0,82,83,1,0,85,78,83,0,106,82,1,4,109,78,4,82,134,82,0,0,96,36,6,0,52,78,0,0,0,53,13,0,1,82,208,0,3,54,53,82,82,55,54,0,1,82,0,0,14,56,55,82,121,56,14,0,0,57,13,0,1,82,208,0,3,59,57,82,82,60,59,0,0,61,13,0,82,82,1,0,85,79,82,0,106,83,1,4,109,79,4,83,38,82,60,63,1,84,0,0,135,83,19,0,82,61,84,79,0,62,13,0,1,83,28,1,3,63,62,83,82,64,63,0,1,83,0,0,14,65,64,83,120,65,3,0,137,81,0,0,139,0,0,0,0,66,13,0,1,83,28,1,3,67,66,83,82,68,67,0,0,70,13,0,1,82,3,0,134,83,0,0,72,232,4,0,68,70,82,0,137,81,0,0,139,0,0,0,140,2,119,0,0,0,0,0,1,115,0,0,136,117,0,0,0,116,117,0,136,117,0,0,25,117,117,64,137,117,0,0,130,117,0,0,136,118,0,0,49,117,117,118,20,124,3,0,135,117,0,0,25,6,116,48,25,5,116,32,25,4,116,24,25,3,116,16,25,2,116,8,0,8,116,0,0,7,0,0,85,8,1,0,82,27,8,0,25,38,27,24,82,49,38,0,1,117,0,0,14,60,49,117,121,60,28,0,82,71,8,0,25,82,71,24,82,93,82,0,25,104,93,28,82,9,104,0,1,117,0,0,14,18,9,117,121,18,20,0,82,19,8,0,25,20,19,24,82,21,20,0,25,22,21,28,82,23,22,0,82,24,8,0,1,117,188,0,3,25,24,117,82,26,25,0,25,28,26,4,82,29,28,0,82,30,8,0,1,117,188,0,3,31,30,117,82,32,31,0,82,33,32,0,134,117,0,0,200,79,4,0,23,29,33,0,82,34,8,0,25,35,34,8,134,117,0,0,32,65,6,0,35,0,0,0,82,36,8,0,25,37,36,8,0,39,7,0,25,40,39,16,134,117,0,0,224,44,6,0,37,40,0,0,0,41,7,0,82,42,8,0,25,43,42,24,85,43,41,0,82,44,8,0,1,117,188,0,3,45,44,117,82,46,45,0,82,47,46,0,33,48,47,0,121,48,31,0,0,50,7,0,25,51,50,28,82,52,51,0,1,117,0,0,14,53,52,117,120,53,25,0,1,117,4,0,134,54,0,0,236,195,4,0,117,0,0,0,0,55,7,0,25,56,55,28,85,56,54,0,0,57,7,0,25,58,57,28,82,59,58,0,82,61,8,0,1,117,188,0,3,62,61,117,82,63,62,0,25,64,63,4,82,65,64,0,82,66,8,0,1,117,188,0,3,67,66,117,82,68,67,0,82,69,68,0,134,117,0,0,216,19,4,0,59,65,69,8,82,70,8,0,25,72,70,4,82,73,72,0,1,117,25,0,135,74,26,0,117,73,0,0,0,75,7,0,25,76,75,4,82,77,76,0,82,78,8,0,25,79,78,4,82,80,79,0,1,117,26,0,135,81,27,0,117,77,80,0,82,83,8,0,82,84,8,0,25,85,84,72,82,117,85,0,85,2,117,0,106,118,85,4,109,2,4,118,134,118,0,0,196,181,5,0,83,2,0,0,82,86,8,0,82,87,8,0,25,88,87,56,82,118,88,0,85,3,118,0,106,117,88,4,109,3,4,117,134,117,0,0,68,187,5,0,86,3,0,0,82,89,8,0,82,90,8,0,25,91,90,88,82,117,91,0,85,4,117,0,106,118,91,4,109,4,4,118,134,118,0,0,192,186,5,0,89,4,0,0,82,92,8,0,82,94,8,0,1,118,128,0,3,95,94,118,82,118,95,0,85,5,118,0,106,117,95,4,109,5,4,117,106,118,95,8,109,5,8,118,134,118,0,0,172,207,4,0,92,5,0,0,82,96,8,0,82,97,8,0,1,118,168,0,3,98,97,118,78,99,98,0,134,118,0,0,20,112,5,0,96,99,0,0,82,100,8,0,82,101,8,0,25,102,101,104,82,103,102,0,82,105,8,0,25,106,105,108,82,107,106,0,134,118,0,0,220,115,3,0,100,103,107,0,82,108,8,0,82,109,8,0,25,110,109,112,88,111,110,0,134,118,0,0,168,239,5,0,108,111,0,0,82,112,8,0,82,113,8,0,1,118,144,0,3,114,113,118,82,118,114,0,85,6,118,0,106,117,114,4,109,6,4,117,134,117,0,0,244,184,5,0,112,6,0,0,82,10,8,0,82,11,8,0,1,117,192,0,3,12,11,117,78,13,12,0,134,117,0,0,128,234,5,0,10,13,0,0,82,14,8,0,82,15,8,0,1,117,193,0,3,16,15,117,78,17,16,0,134,117,0,0,8,231,5,0,14,17,0,0,137,116,0,0,139,0,0,0,140,1,105,0,0,0,0,0,1,101,0,0,136,103,0,0,0,102,103,0,136,103,0,0,25,103,103,48,137,103,0,0,130,103,0,0,136,104,0,0,49,103,103,104,128,127,3,0,135,103,0,0,25,98,102,32,25,97,102,8,0,1,0,0,0,2,1,0,25,13,2,4,134,24,0,0,4,53,6,0,13,0,0,0,33,35,24,0,121,35,3,0,137,102,0,0,139,0,0,0,0,46,1,0,25,57,46,4,25,68,57,4,82,79,68,0,26,90,79,32,0,100,90,0,1,96,0,0,0,3,100,0,25,4,3,56,82,103,4,0,85,97,103,0,106,104,4,4,109,97,4,104,0,5,100,0,25,6,5,40,82,7,6,0,25,8,7,8,78,9,8,0,1,104,255,0,19,104,9,104,0,10,104,0,32,95,10,2,121,95,159,0,59,104,0,0,89,97,104,0,0,11,100,0,25,12,11,16,25,14,12,4,82,15,14,0,0,94,15,0,0,16,94,0,0,17,100,0,25,18,17,16,14,19,16,18,120,19,2,0,119,0,99,0,0,20,94,0,26,21,20,8,0,99,21,0,88,22,97,0,0,23,99,0,25,25,23,56,88,26,25,0,0,27,99,0,25,28,27,40,82,29,28,0,25,30,29,20,25,31,30,12,127,104,0,0,114,104,31,0,127,104,0,0,102,103,31,1,107,104,1,103,127,103,0,0,102,104,31,2,107,103,2,104,127,104,0,0,102,103,31,3,107,104,3,103,127,103,0,0,88,32,103,0,63,33,26,32,0,34,99,0,25,36,34,40,82,37,36,0,25,38,37,20,25,39,38,4,127,103,0,0,114,103,39,0,127,103,0,0,102,104,39,1,107,103,1,104,127,104,0,0,102,103,39,2,107,104,2,103,127,103,0,0,102,104,39,3,107,103,3,104,127,104,0,0,88,40,104,0,63,41,33,40,73,42,22,41,121,42,4,0,88,43,97,0,58,63,43,0,119,0,43,0,0,44,99,0,25,45,44,56,88,47,45,0,0,48,99,0,25,49,48,40,82,50,49,0,25,51,50,20,25,52,51,12,127,104,0,0,114,104,52,0,127,104,0,0,102,103,52,1,107,104,1,103,127,103,0,0,102,104,52,2,107,103,2,104,127,104,0,0,102,103,52,3,107,104,3,103,127,103,0,0,88,53,103,0,63,54,47,53,0,55,99,0,25,56,55,40,82,58,56,0,25,59,58,20,25,60,59,4,127,103,0,0,114,103,60,0,127,103,0,0,102,104,60,1,107,103,1,104,127,104,0,0,102,103,60,2,107,104,2,103,127,103,0,0,102,104,60,3,107,103,3,104,127,104,0,0,88,61,104,0,63,62,54,61,58,63,62,0,89,97,63,0,0,64,94,0,25,65,64,4,82,66,65,0,0,94,66,0,119,0,153,255,0,67,100,0,25,69,67,40,82,70,69,0,25,71,70,36,25,72,71,12,127,104,0,0,114,104,72,0,127,104,0,0,102,103,72,1,107,104,1,103,127,103,0,0,102,104,72,2,107,103,2,104,127,104,0,0,102,103,72,3,107,104,3,103,127,103,0,0,88,73,103,0,0,74,100,0,25,75,74,40,82,76,75,0,25,77,76,36,25,78,77,4,127,103,0,0,114,103,78,0,127,103,0,0,102,104,78,1,107,103,1,104,127,104,0,0,102,103,78,2,107,104,2,103,127,103,0,0,102,104,78,3,107,103,3,104,127,104,0,0,88,80,104,0,63,81,73,80,88,82,97,0,64,83,82,81,89,97,83,0,88,84,97,0,0,85,100,0,25,86,85,40,82,87,86,0,25,88,87,12,89,88,84,0,1,96,1,0,0,89,96,0,41,104,89,24,42,104,104,24,33,91,104,0,120,91,3,0,137,102,0,0,139,0,0,0,0,92,100,0,82,104,97,0,85,98,104,0,106,103,97,4,109,98,4,103,134,103,0,0,68,187,5,0,92,98,0,0,0,93,1,0,134,103,0,0,36,247,1,0,93,0,0,0,137,102,0,0,139,0,0,0,140,1,117,0,0,0,0,0,2,114,0,0,255,0,0,0,1,112,0,0,136,115,0,0,0,113,115,0,136,115,0,0,25,115,115,48,137,115,0,0,130,115,0,0,136,116,0,0,49,115,115,116,20,131,3,0,135,115,0,0,25,110,113,40,25,104,113,16,0,109,113,0,0,1,0,0,0,2,1,0,25,16,2,4,134,27,0,0,76,52,6,0,16,0,0,0,33,38,27,0,121,38,3,0,137,113,0,0,139,0,0,0,0,49,1,0,25,60,49,4,25,71,60,4,82,82,71,0,26,93,82,32,0,111,93,0,85,104,104,0,25,3,104,4,85,3,104,0,0,7,111,0,25,8,7,16,134,9,0,0,76,52,6,0,8,0,0,0,33,10,9,0,120,10,163,0,0,11,111,0,25,12,11,16,25,13,12,4,82,14,13,0,0,108,14,0,1,115,0,0,14,15,14,115,120,15,2,0,119,0,154,0,0,17,108,0,134,115,0,0,0,64,6,0,17,0,0,0,0,18,108,0,134,115,0,0,32,44,6,0,18,104,0,0,0,19,108,0,26,20,19,8,0,105,20,0,0,21,105,0,25,22,21,40,82,23,22,0,25,24,23,12,88,25,24,0,89,109,25,0,0,26,105,0,25,28,26,40,82,29,28,0,25,30,29,16,88,31,30,0,25,32,109,4,89,32,31,0,0,33,105,0,25,34,33,40,82,35,34,0,25,36,35,8,78,37,36,0,19,115,37,114,0,39,115,0,32,106,39,1,121,106,5,0,0,40,111,0,25,41,40,56,88,42,41,0,89,109,42,0,0,43,105,0,25,44,43,40,82,45,44,0,25,46,45,9,78,47,46,0,19,115,47,114,0,48,115,0,32,107,48,1,121,107,7,0,0,50,111,0,25,51,50,56,25,52,51,4,88,53,52,0,25,54,109,4,89,54,53,0,0,55,105,0,25,56,55,40,82,57,56,0,25,58,57,36,25,59,58,12,127,115,0,0,114,115,59,0,127,115,0,0,102,116,59,1,107,115,1,116,127,116,0,0,102,115,59,2,107,116,2,115,127,115,0,0,102,116,59,3,107,115,3,116,127,116,0,0,88,61,116,0,0,62,105,0,25,63,62,40,82,64,63,0,25,65,64,36,25,66,65,4,127,116,0,0,114,116,66,0,127,116,0,0,102,115,66,1,107,116,1,115,127,115,0,0,102,116,66,2,107,115,2,116,127,116,0,0,102,115,66,3,107,116,3,115,127,115,0,0,88,67,115,0,63,68,61,67,88,69,109,0,64,70,69,68,89,109,70,0,0,72,105,0,25,73,72,40,82,74,73,0,25,75,74,36,127,115,0,0,114,115,75,0,127,115,0,0,102,116,75,1,107,115,1,116,127,116,0,0,102,115,75,2,107,116,2,115,127,115,0,0,102,116,75,3,107,115,3,116,127,116,0,0,88,76,116,0,0,77,105,0,25,78,77,40,82,79,78,0,25,80,79,36,25,81,80,8,127,116,0,0,114,116,81,0,127,116,0,0,102,115,81,1,107,116,1,115,127,115,0,0,102,116,81,2,107,115,2,116,127,116,0,0,102,115,81,3,107,116,3,115,127,115,0,0,88,83,115,0,63,84,76,83,25,85,109,4,88,86,85,0,64,87,86,84,89,85,87,0,0,88,105,0,82,115,109,0,85,110,115,0,106,116,109,4,109,110,4,116,134,116,0,0,68,187,5,0,88,110,0,0,0,89,105,0,25,90,89,44,82,91,90,0,38,116,91,2,0,92,116,0,33,94,92,0,120,94,2,0,119,0,93,255,0,95,105,0,134,116,0,0,24,152,4,0,95,0,0,0,119,0,88,255,134,96,0,0,76,52,6,0,104,0,0,0,33,97,96,0,120,97,19,0,25,98,104,4,82,99,98,0,0,108,99,0,1,116,0,0,14,100,99,116,120,100,2,0,119,0,12,0,0,101,108,0,134,116,0,0,0,64,6,0,101,0,0,0,0,102,108,0,0,103,111,0,25,4,103,16,134,116,0,0,32,44,6,0,102,4,0,0,119,0,234,255,0,5,111,0,25,6,5,44,1,116,0,0,85,6,116,0,137,113,0,0,139,0,0,0,140,3,36,0,0,0,0,0,1,30,0,0,136,34,0,0,0,31,34,0,136,34,0,0,1,35,176,0,3,34,34,35,137,34,0,0,130,34,0,0,136,35,0,0,49,34,34,35,188,134,3,0,135,34,0,0,25,4,31,80,25,3,31,64,0,27,31,0,1,34,152,0,3,28,31,34,1,34,136,0,3,5,31,34,25,6,31,120,25,17,31,104,25,20,31,92,127,34,0,0,114,34,2,0,127,34,0,0,102,35,2,1,107,34,1,35,127,35,0,0,102,34,2,2,107,35,2,34,127,34,0,0,102,35,2,3,107,34,3,35,127,35,0,0,88,21,35,0,127,35,0,0,89,35,21,0,127,35,0,0,114,5,35,0,127,34,0,0,102,34,34,1,107,5,1,34,127,35,0,0,102,35,35,2,107,5,2,35,127,34,0,0,102,34,34,3,107,5,3,34,25,22,5,4,25,23,2,4,127,34,0,0,114,34,23,0,127,34,0,0,102,35,23,1,107,34,1,35,127,35,0,0,102,34,23,2,107,35,2,34,127,34,0,0,102,35,23,3,107,34,3,35,127,35,0,0,88,24,35,0,127,35,0,0,89,35,24,0,127,35,0,0,114,22,35,0,127,34,0,0,102,34,34,1,107,22,1,34,127,35,0,0,102,35,35,2,107,22,2,35,127,34,0,0,102,34,34,3,107,22,3,34,25,25,5,8,25,26,2,8,127,34,0,0,114,34,26,0,127,34,0,0,102,35,26,1,107,34,1,35,127,35,0,0,102,34,26,2,107,35,2,34,127,34,0,0,102,35,26,3,107,34,3,35,127,35,0,0,88,7,35,0,127,35,0,0,89,35,7,0,127,35,0,0,114,25,35,0,127,34,0,0,102,34,34,1,107,25,1,34,127,35,0,0,102,35,35,2,107,25,2,35,127,34,0,0,102,34,34,3,107,25,3,34,25,8,5,12,127,34,0,0,59,35,1,0,89,34,35,0,127,35,0,0,114,8,35,0,127,34,0,0,102,34,34,1,107,8,1,34,127,35,0,0,102,35,35,2,107,8,2,35,127,34,0,0,102,34,34,3,107,8,3,34,0,29,6,0,0,32,5,0,25,33,29,16,78,34,32,0,83,29,34,0,25,29,29,1,25,32,32,1,54,34,29,33,116,136,3,0,0,29,27,0,0,32,1,0,25,33,29,64,82,34,32,0,85,29,34,0,25,29,29,4,25,32,32,4,54,34,29,33,152,136,3,0,82,34,6,0,85,3,34,0,106,35,6,4,109,3,4,35,106,34,6,8,109,3,8,34,106,35,6,12,109,3,12,35,134,35,0,0,44,177,2,0,28,27,3,0,127,35,0,0,114,35,28,0,127,35,0,0,102,34,28,1,107,35,1,34,127,34,0,0,102,35,28,2,107,34,2,35,127,35,0,0,102,34,28,3,107,35,3,34,127,34,0,0,88,9,34,0,127,34,0,0,89,34,9,0,127,34,0,0,114,17,34,0,127,35,0,0,102,35,35,1,107,17,1,35,127,34,0,0,102,34,34,2,107,17,2,34,127,35,0,0,102,35,35,3,107,17,3,35,25,10,17,4,25,11,28,4,127,35,0,0,114,35,11,0,127,35,0,0,102,34,11,1,107,35,1,34,127,34,0,0,102,35,11,2,107,34,2,35,127,35,0,0,102,34,11,3,107,35,3,34,127,34,0,0,88,12,34,0,127,34,0,0,89,34,12,0,127,34,0,0,114,10,34,0,127,35,0,0,102,35,35,1,107,10,1,35,127,34,0,0,102,34,34,2,107,10,2,34,127,35,0,0,102,35,35,3,107,10,3,35,25,13,17,8,25,14,28,8,127,35,0,0,114,35,14,0,127,35,0,0,102,34,14,1,107,35,1,34,127,34,0,0,102,35,14,2,107,34,2,35,127,35,0,0,102,34,14,3,107,35,3,34,127,34,0,0,88,15,34,0,127,34,0,0,89,34,15,0,127,34,0,0,114,13,34,0,127,35,0,0,102,35,35,1,107,13,1,35,127,34,0,0,102,34,34,2,107,13,2,34,127,35,0,0,102,35,35,3,107,13,3,35,0,29,20,0,0,32,17,0,25,33,29,12,78,35,32,0,83,29,35,0,25,29,29,1,25,32,32,1,54,35,29,33,48,138,3,0,25,16,28,12,127,35,0,0,114,35,16,0,127,35,0,0,102,34,16,1,107,35,1,34,127,34,0,0,102,35,16,2,107,34,2,35,127,35,0,0,102,34,16,3,107,35,3,34,127,34,0,0,88,18,34,0,59,34,1,0,66,19,34,18,82,34,20,0,85,4,34,0,106,35,20,4,109,4,4,35,106,34,20,8,109,4,8,34,134,34,0,0,236,125,4,0,0,4,19,0,137,31,0,0,139,0,0,0,140,2,120,0,0,0,0,0,2,116,0,0,255,0,0,0,2,117,0,0,20,174,71,1,1,114,0,0,136,118,0,0,0,115,118,0,25,3,0,4,82,4,3,0,25,15,0,100,82,26,15,0,16,37,4,26,121,37,8,0,25,48,4,1,85,3,48,0,78,59,4,0,19,118,59,116,0,70,118,0,0,92,70,0,119,0,5,0,134,81,0,0,196,92,4,0,0,0,0,0,0,92,81,0,32,5,92,45,1,118,43,0,1,119,3,0,138,92,118,119,68,139,3,0,56,139,3,0,72,139,3,0,0,103,92,0,1,111,0,0,119,0,42,0,119,0,1,0,38,118,5,1,0,6,118,0,82,7,3,0,82,8,15,0,16,9,7,8,121,9,8,0,25,10,7,1,85,3,10,0,78,11,7,0,19,118,11,116,0,12,118,0,0,16,12,0,119,0,5,0,134,13,0,0,196,92,4,0,0,0,0,0,0,16,13,0,26,14,16,48,1,118,9,0,16,17,118,14,33,18,1,0,19,118,18,17,0,112,118,0,121,112,14,0,82,19,15,0,1,118,0,0,13,20,19,118,121,20,4,0,0,103,16,0,0,111,6,0,119,0,10,0,82,21,3,0,26,22,21,1,85,3,22,0,0,103,16,0,0,111,6,0,119,0,4,0,0,103,16,0,0,111,6,0,119,0,1,0,26,23,103,48,1,118,9,0,16,24,118,23,121,24,16,0,82,25,15,0,1,118,0,0,13,27,25,118,121,27,5,0,2,101,0,0,0,0,0,128,1,102,0,0,119,0,158,0,82,28,3,0,26,29,28,1,85,3,29,0,2,101,0,0,0,0,0,128,1,102,0,0,119,0,151,0,0,106,103,0,1,113,0,0,27,30,113,10,26,31,106,48,3,32,31,30,82,33,3,0,82,34,15,0,16,35,33,34,121,35,8,0,25,36,33,1,85,3,36,0,78,38,33,0,19,118,38,116,0,39,118,0,0,104,39,0,119,0,5,0,134,40,0,0,196,92,4,0,0,0,0,0,0,104,40,0,26,41,104,48,35,42,41,10,2,118,0,0,204,204,204,12,15,43,32,118,19,118,42,43,0,44,118,0,121,44,4,0,0,106,104,0,0,113,32,0,119,0,228,255,0,2,32,0,0,105,104,0,119,0,1,0,34,45,2,0,41,118,45,31,42,118,118,31,0,46,118,0,26,47,105,48,35,49,47,10,121,49,64,0,0,52,2,0,0,53,46,0,0,109,105,0,1,118,10,0,1,119,0,0,134,54,0,0,128,235,5,0,52,53,118,119,128,119,0,0,0,55,119,0,34,56,109,0,41,119,56,31,42,119,119,31,0,57,119,0,1,119,208,255,1,118,255,255,134,58,0,0,36,111,6,0,109,57,119,118,128,118,0,0,0,60,118,0,134,61,0,0,36,111,6,0,58,60,54,55,128,118,0,0,0,62,118,0,82,63,3,0,82,64,15,0,16,65,63,64,121,65,8,0,25,66,63,1,85,3,66,0,78,67,63,0,19,118,67,116,0,68,118,0,0,107,68,0,119,0,5,0,134,69,0,0,196,92,4,0,0,0,0,0,0,107,69,0,26,71,107,48,35,72,71,10,15,73,62,117,2,118,0,0,174,71,225,122,16,74,61,118,13,75,62,117,19,118,75,74,0,76,118,0,20,118,73,76,0,77,118,0,19,118,72,77,0,78,118,0,121,78,5,0,0,52,61,0,0,53,62,0,0,109,107,0,119,0,201,255,0,95,61,0,0,96,62,0,0,108,107,0,119,0,4,0,0,95,2,0,0,96,46,0,0,108,105,0,26,50,108,48,35,51,50,10,121,51,20,0,82,79,3,0,82,80,15,0,16,82,79,80,121,82,8,0,25,83,79,1,85,3,83,0,78,84,79,0,19,118,84,116,0,85,118,0,0,110,85,0,119,0,5,0,134,86,0,0,196,92,4,0,0,0,0,0,0,110,86,0,26,87,110,48,35,88,87,10,120,88,239,255,119,0,1,0,82,89,15,0,1,118,0,0,13,90,89,118,120,90,4,0,82,91,3,0,26,93,91,1,85,3,93,0,33,94,111,0,1,118,0,0,1,119,0,0,134,97,0,0,112,110,6,0,118,119,95,96,128,119,0,0,0,98,119,0,125,99,94,97,95,0,0,0,125,100,94,98,96,0,0,0,0,101,100,0,0,102,99,0,129,101,0,0,139,102,0,0,140,2,83,0,0,0,0,0,1,78,0,0,136,80,0,0,0,79,80,0,136,80,0,0,1,81,176,0,3,80,80,81,137,80,0,0,130,80,0,0,136,81,0,0,49,80,80,81,204,142,3,0,135,80,0,0,1,80,160,0,3,77,79,80,1,80,152,0,3,76,79,80,1,80,144,0,3,4,79,80,1,80,136,0,3,12,79,80,1,80,128,0,3,11,79,80,25,10,79,120,25,9,79,112,25,8,79,104,25,7,79,96,25,6,79,88,25,5,79,80,25,3,79,72,25,2,79,64,25,75,79,56,25,14,79,40,25,25,79,24,25,36,79,16,25,47,79,8,0,58,79,0,0,13,0,0,0,68,13,0,1,80,240,0,3,69,68,80,0,70,13,0,1,80,224,0,3,71,70,80,82,80,1,0,85,75,80,0,106,81,1,4,109,75,4,81,82,81,71,0,85,2,81,0,106,80,71,4,109,2,4,80,134,80,0,0,220,249,5,0,14,75,2,0,82,80,14,0,85,69,80,0,106,81,14,4,109,69,4,81,0,15,13,0,1,81,232,0,3,16,15,81,82,81,1,0,85,16,81,0,106,80,1,4,109,16,4,80,0,17,13,0,1,80,68,1,3,18,17,80,82,19,18,0,0,74,19,0,0,20,13,0,1,80,48,1,3,21,20,80,82,22,21,0,0,73,22,0,0,23,13,0,1,80,68,1,3,24,23,80,1,80,0,0,85,24,80,0,0,26,13,0,1,80,48,1,3,27,26,80,1,80,0,0,85,27,80,0,0,28,74,0,1,80,0,0,14,29,28,80,121,29,42,0,0,30,74,0,0,31,74,0,1,80,216,0,3,32,31,80,0,33,13,0,1,80,232,0,3,34,33,80,0,35,13,0,1,80,216,0,3,37,35,80,82,80,34,0,85,3,80,0,106,81,34,4,109,3,4,81,82,81,37,0,85,5,81,0,106,80,37,4,109,5,4,80,134,80,0,0,220,249,5,0,36,3,5,0,82,80,32,0,85,6,80,0,106,81,32,4,109,6,4,81,82,81,36,0,85,7,81,0,106,80,36,4,109,7,4,80,134,80,0,0,32,250,5,0,25,6,7,0,82,80,25,0,85,8,80,0,106,81,25,4,109,8,4,81,134,81,0,0,148,142,3,0,30,8,0,0,137,79,0,0,139,0,0,0,0,38,73,0,1,81,0,0,14,39,38,81,121,39,42,0,0,40,73,0,0,41,73,0,1,81,216,0,3,42,41,81,0,43,13,0,1,81,232,0,3,44,43,81,0,45,13,0,1,81,216,0,3,46,45,81,82,81,44,0,85,9,81,0,106,80,44,4,109,9,4,80,82,80,46,0,85,10,80,0,106,81,46,4,109,10,4,81,134,81,0,0,220,249,5,0,58,9,10,0,82,81,42,0,85,11,81,0,106,80,42,4,109,11,4,80,82,80,58,0,85,12,80,0,106,81,58,4,109,12,4,81,134,81,0,0,32,250,5,0,47,11,12,0,82,81,47,0,85,4,81,0,106,80,47,4,109,4,4,80,134,80,0,0,148,142,3,0,40,4,0,0,137,79,0,0,139,0,0,0,0,48,13,0,82,49,48,0,32,72,49,5,121,72,9,0,0,50,13,0,82,80,1,0,85,76,80,0,106,81,1,4,109,76,4,81,134,81,0,0,232,37,6,0,50,76,0,0,0,51,13,0,1,81,204,0,3,52,51,81,82,53,52,0,1,81,0,0,14,54,53,81,121,54,14,0,0,55,13,0,1,81,204,0,3,56,55,81,82,57,56,0,0,59,13,0,82,81,1,0,85,77,81,0,106,80,1,4,109,77,4,80,38,81,57,63,1,82,0,0,135,80,19,0,81,59,82,77,0,60,13,0,1,80,28,1,3,61,60,80,82,62,61,0,1,80,0,0,14,63,62,80,120,63,3,0,137,79,0,0,139,0,0,0,0,64,13,0,1,80,28,1,3,65,64,80,82,66,65,0,0,67,13,0,1,81,2,0,134,80,0,0,72,232,4,0,66,67,81,0,137,79,0,0,139,0,0,0,140,4,121,0,0,0,0,0,1,117,0,0,136,119,0,0,0,118,119,0,136,119,0,0,25,119,119,48,137,119,0,0,130,119,0,0,136,120,0,0,49,119,119,120,92,146,3,0,135,119,0,0,25,116,118,16,25,110,118,12,0,4,0,0,0,5,1,0,0,21,2,0,0,32,3,0,1,113,0,0,1,119,254,255,85,116,119,0,1,119,255,255,85,110,119,0,1,109,0,0,1,111,255,255,1,112,0,0,0,43,112,0,0,54,4,0,82,65,54,0,16,76,43,65,120,76,2,0,119,0,126,0,0,87,112,0,0,98,4,0,25,6,98,4,82,12,6,0,3,13,12,87,78,14,13,0,41,119,14,24,42,119,119,24,0,15,119,0,0,16,109,0,0,17,5,0,3,18,17,16,78,19,18,0,41,119,19,24,42,119,119,24,0,20,119,0,13,22,15,20,121,22,60,0,0,23,111,0,32,24,23,255,0,25,109,0,1,119,0,0,15,26,119,25,19,119,24,26,0,114,119,0,121,114,19,0,0,27,112,0,0,28,4,0,25,29,28,4,82,30,29,0,3,31,30,27,78,33,31,0,41,119,33,24,42,119,119,24,0,34,119,0,0,35,5,0,78,36,35,0,41,119,36,24,42,119,119,24,0,37,119,0,13,38,34,37,121,38,3,0,0,39,112,0,0,111,39,0,0,40,112,0,85,110,40,0,0,41,109,0,32,42,41,0,121,42,3,0,0,44,112,0,85,116,44,0,0,45,109,0,25,46,45,1,0,109,46,0,0,47,109,0,0,48,21,0,13,49,47,48,121,49,64,0,0,50,113,0,25,51,50,1,0,113,51,0,0,52,32,0,134,119,0,0,88,242,4,0,52,116,0,0,0,53,32,0,134,119,0,0,88,242,4,0,53,110,0,0,1,111,255,255,0,55,112,0,26,56,55,1,85,116,56,0,0,57,112,0,85,110,57,0,1,109,0,0,119,0,45,0,1,109,0,0,0,58,111,0,1,119,0,0,15,59,119,58,121,59,12,0,0,60,111,0,0,112,60,0,1,111,255,255,0,61,109,0,25,62,61,1,0,109,62,0,0,63,112,0,85,116,63,0,0,64,112,0,85,110,64,0,119,0,29,0,0,66,112,0,26,67,66,1,85,116,67,0,0,68,112,0,85,110,68,0,0,69,112,0,0,70,4,0,25,71,70,4,82,72,71,0,3,73,72,69,78,74,73,0,41,119,74,24,42,119,119,24,0,75,119,0,0,77,109,0,0,78,5,0,3,79,78,77,78,80,79,0,41,119,80,24,42,119,119,24,0,81,119,0,13,82,75,81,121,82,6,0,82,83,110,0,85,116,83,0,0,84,109,0,25,85,84,1,0,109,85,0,0,86,112,0,25,88,86,1,0,112,88,0,119,0,126,255,82,89,110,0,82,90,116,0,4,91,89,90,25,92,91,1,0,93,21,0,13,94,92,93,82,95,116,0,1,119,0,0,17,96,119,95,19,119,94,96,0,115,119,0,120,115,4,0,0,11,113,0,137,118,0,0,139,11,0,0,82,97,116,0,0,99,4,0,25,100,99,4,82,101,100,0,3,102,101,97,78,103,102,0,41,119,103,24,42,119,119,24,0,104,119,0,0,105,5,0,78,106,105,0,41,119,106,24,42,119,119,24,0,107,119,0,13,108,104,107,120,108,4,0,0,11,113,0,137,118,0,0,139,11,0,0,0,7,32,0,134,119,0,0,88,242,4,0,7,116,0,0,0,8,32,0,134,119,0,0,88,242,4,0,8,110,0,0,0,9,113,0,25,10,9,1,0,113,10,0,0,11,113,0,137,118,0,0,139,11,0,0,140,2,132,0,0,0,0,0,1,128,0,0,136,130,0,0,0,129,130,0,136,130,0,0,25,130,130,64,137,130,0,0,130,130,0,0,136,131,0,0,49,130,130,131,148,149,3,0,135,130,0,0,0,2,0,0,0,3,1,0,0,28,2,0,0,39,3,0,134,50,0,0,228,42,5,0,28,39,0,0,0,116,50,0,1,130,4,0,1,131,1,0,134,61,0,0,224,168,5,0,130,131,0,0,0,123,61,0,0,72,116,0,0,83,123,0,1,130,203,15,134,131,0,0,104,0,6,0,72,130,83,0,1,131,0,0,134,94,0,0,148,94,6,0,131,0,0,0,0,125,94,0,0,105,2,0,135,4,4,0,105,0,0,0,0,118,4,0,0,15,118,0,26,20,15,1,0,118,20,0,0,21,118,0,33,22,21,0,120,22,2,0,119,0,16,0,0,23,118,0,0,24,2,0,3,25,24,23,78,26,25,0,41,131,26,24,42,131,131,24,0,27,131,0,32,29,27,47,121,29,3,0,1,128,4,0,119,0,5,0,0,34,118,0,26,35,34,1,0,118,35,0,119,0,238,255,32,131,128,4,121,131,8,0,0,30,125,0,0,31,2,0,0,32,118,0,25,33,32,1,134,131,0,0,128,39,6,0,30,31,33,0,1,131,0,0,134,36,0,0,148,94,6,0,131,0,0,0,0,122,36,0,0,37,123,0,82,38,37,0,26,40,38,1,2,131,0,0,255,255,0,0,19,131,40,131,0,41,131,0,0,119,41,0,0,42,119,0,41,131,42,16,42,131,131,16,0,43,131,0,1,131,0,0,17,44,131,43,120,44,2,0,119,0,133,0,0,45,119,0,41,131,45,16,42,131,131,16,0,46,131,0,26,47,46,1,0,48,123,0,25,49,48,12,82,51,49,0,41,131,47,2,3,52,51,131,82,53,52,0,0,127,53,0,0,54,119,0,41,131,54,16,42,131,131,16,0,55,131,0,0,56,123,0,25,57,56,12,82,58,57,0,41,131,55,2,3,59,58,131,82,60,59,0,0,117,60,0,1,124,0,0,0,62,122,0,1,131,0,0,85,62,131,0,0,63,122,0,0,64,125,0,134,131,0,0,84,15,6,0,63,64,0,0,1,126,0,0,0,65,117,0,25,66,65,1,0,120,66,0,0,67,120,0,0,68,116,0,82,69,68,0,16,70,67,69,120,70,2,0,119,0,32,0,0,71,120,0,0,73,116,0,25,74,73,4,82,75,74,0,3,76,75,71,78,77,76,0,41,131,77,24,42,131,131,24,0,78,131,0,32,79,78,60,0,80,120,0,121,79,4,0,25,81,80,1,0,126,81,0,119,0,13,0,0,82,116,0,25,84,82,4,82,85,84,0,3,86,85,80,78,87,86,0,41,131,87,24,42,131,131,24,0,88,131,0,32,89,88,62,121,89,3,0,1,128,13,0,119,0,5,0,0,9,120,0,25,10,9,1,0,120,10,0,119,0,220,255,32,131,128,13], eb + 225280);
  HEAPU8.set([121,131,47,0,1,128,0,0,0,90,120,0,0,91,127,0,4,92,90,91,25,93,92,1,0,124,93,0,0,95,122,0,0,96,116,0,25,97,96,4,82,98,97,0,0,99,126,0,3,100,98,99,0,101,120,0,0,102,126,0,4,103,101,102,134,131,0,0,128,39,6,0,95,100,103,0,0,104,122,0,134,131,0,0,172,199,3,0,104,0,0,0,0,106,122,0,25,107,106,4,82,108,107,0,0,109,3,0,134,110,0,0,228,42,5,0,108,109,0,0,0,121,110,0,0,111,116,0,0,112,127,0,0,113,124,0,0,114,121,0,25,115,114,4,82,5,115,0,0,6,121,0,82,7,6,0,134,131,0,0,116,226,4,0,111,112,113,5,7,0,0,0,0,8,121,0,134,131,0,0,148,105,6,0,8,0,0,0,0,11,119,0,41,131,11,16,42,131,131,16,0,12,131,0,26,13,12,2,2,131,0,0,255,255,0,0,19,131,13,131,0,14,131,0,0,119,14,0,119,0,117,255,0,16,125,0,134,131,0,0,148,105,6,0,16,0,0,0,0,17,122,0,134,131,0,0,148,105,6,0,17,0,0,0,0,18,123,0,134,131,0,0,180,1,6,0,18,0,0,0,0,19,116,0,137,129,0,0,139,19,0,0,140,5,127,0,0,0,0,0,1,123,0,0,136,125,0,0,0,124,125,0,136,125,0,0,25,125,125,48,137,125,0,0,130,125,0,0,136,126,0,0,49,125,125,126,88,153,3,0,135,125,0,0,0,5,0,0,0,6,1,0,0,28,2,0,0,39,3,0,0,50,4,0,1,122,254,255,1,117,255,255,1,116,0,0,1,118,255,255,1,119,0,0,0,61,119,0,0,72,5,0,82,83,72,0,16,94,61,83,120,94,2,0,119,0,125,0,0,105,119,0,0,7,5,0,25,18,7,4,82,20,18,0,3,21,20,105,78,22,21,0,41,125,22,24,42,125,125,24,0,23,125,0,0,24,116,0,0,25,6,0,3,26,25,24,78,27,26,0,41,125,27,24,42,125,125,24,0,29,125,0,13,30,23,29,121,30,59,0,0,31,118,0,32,32,31,255,0,33,116,0,1,125,0,0,15,34,125,33,19,125,32,34,0,120,125,0,121,120,19,0,0,35,119,0,0,36,5,0,25,37,36,4,82,38,37,0,3,40,38,35,78,41,40,0,41,125,41,24,42,125,125,24,0,42,125,0,0,43,6,0,78,44,43,0,41,125,44,24,42,125,125,24,0,45,125,0,13,46,42,45,121,46,3,0,0,47,119,0,0,118,47,0,0,48,119,0,0,117,48,0,0,49,116,0,32,51,49,0,121,51,3,0,0,52,119,0,0,122,52,0,0,53,116,0,25,54,53,1,0,116,54,0,0,55,116,0,0,56,28,0,13,57,55,56,121,57,63,0,0,58,5,0,25,59,58,4,82,60,59,0,0,62,122,0,3,63,60,62,0,64,39,0,0,65,28,0,134,125,0,0,160,232,5,0,63,64,65,0,1,118,255,255,0,66,119,0,26,67,66,1,0,122,67,0,0,68,119,0,0,117,68,0,1,116,0,0,119,0,45,0,1,116,0,0,0,69,118,0,1,125,0,0,15,70,125,69,121,70,12,0,0,71,118,0,0,119,71,0,1,118,255,255,0,73,116,0,25,74,73,1,0,116,74,0,0,75,119,0,0,122,75,0,0,76,119,0,0,117,76,0,119,0,29,0,0,77,119,0,26,78,77,1,0,122,78,0,0,79,119,0,0,117,79,0,0,80,119,0,0,81,5,0,25,82,81,4,82,84,82,0,3,85,84,80,78,86,85,0,41,125,86,24,42,125,125,24,0,87,125,0,0,88,116,0,0,89,6,0,3,90,89,88,78,91,90,0,41,125,91,24,42,125,125,24,0,92,125,0,13,93,87,92,121,93,6,0,0,95,117,0,0,122,95,0,0,96,116,0,25,97,96,1,0,116,97,0,0,98,119,0,25,99,98,1,0,119,99,0,119,0,127,255,0,100,117,0,0,101,122,0,4,102,100,101,25,103,102,1,0,104,28,0,13,106,103,104,0,107,122,0,1,125,0,0,17,108,125,107,19,125,106,108,0,121,125,0,120,121,3,0,137,124,0,0,139,0,0,0,0,109,122,0,0,110,5,0,25,111,110,4,82,112,111,0,3,113,112,109,78,114,113,0,41,125,114,24,42,125,125,24,0,115,125,0,0,8,6,0,78,9,8,0,41,125,9,24,42,125,125,24,0,10,125,0,13,11,115,10,120,11,3,0,137,124,0,0,139,0,0,0,0,12,5,0,25,13,12,4,82,14,13,0,0,15,122,0,3,16,14,15,0,17,39,0,0,19,28,0,134,125,0,0,160,232,5,0,16,17,19,0,137,124,0,0,139,0,0,0,140,1,120,0,0,0,0,0,2,117,0,0,36,1,0,0,1,115,0,0,136,118,0,0,0,116,118,0,136,118,0,0,25,118,118,48,137,118,0,0,130,118,0,0,136,119,0,0,49,118,118,119,116,156,3,0,135,118,0,0,0,1,0,0,0,2,1,0,25,19,2,100,78,30,19,0,41,118,30,24,42,118,118,24,33,41,118,0,121,41,3,0,137,116,0,0,139,0,0,0,0,52,1,0,25,63,52,100,1,118,1,0,83,63,118,0,1,107,0,0,0,74,1,0,25,85,74,48,82,96,85,0,0,111,96,0,0,3,111,0,1,118,0,0,14,10,3,118,120,10,2,0,119,0,15,0,0,11,111,0,25,12,11,100,78,13,12,0,41,118,13,24,42,118,118,24,33,14,118,0,121,14,3,0,1,115,23,0,119,0,6,0,0,15,111,0,25,16,15,48,82,17,16,0,0,111,17,0,119,0,238,255,32,118,115,23,121,118,3,0,137,116,0,0,139,0,0,0,0,18,1,0,3,20,18,117,82,21,20,0,25,22,21,8,25,23,22,4,82,24,23,0,0,108,24,0,0,25,108,0,25,26,25,4,82,27,26,0,0,109,27,0,0,28,108,0,0,29,1,0,3,31,29,117,82,32,31,0,25,33,32,8,14,34,28,33,120,34,2,0,119,0,82,0,0,35,108,0,26,36,35,76,0,110,36,0,0,37,1,0,0,38,110,0,13,39,37,38,121,39,37,0,0,40,1,0,25,42,40,92,134,118,0,0,164,75,6,0,42,0,0,0,0,43,1,0,25,44,43,76,134,118,0,0,60,22,6,0,44,0,0,0,0,45,1,0,25,46,45,48,82,47,46,0,0,112,47,0,0,48,112,0,1,118,0,0,14,49,48,118,121,49,17,0,0,50,1,0,25,51,50,84,0,53,112,0,25,54,53,92,134,118,0,0,64,48,6,0,51,54,0,0,0,55,112,0,25,56,55,76,0,57,1,0,3,58,57,117,82,59,58,0,25,60,59,8,134,118,0,0,64,48,6,0,56,60,0,0,1,107,1,0,119,0,32,0,0,61,110,0,25,62,61,48,82,64,62,0,0,113,64,0,0,65,113,0,1,118,0,0,14,66,65,118,120,66,2,0,119,0,23,0,0,67,113,0,25,68,67,100,78,69,68,0,41,118,69,24,42,118,118,24,33,70,118,0,120,70,6,0,0,76,113,0,25,77,76,48,82,78,77,0,0,113,78,0,119,0,240,255,0,71,110,0,25,72,71,92,134,118,0,0,164,75,6,0,72,0,0,0,0,73,110,0,25,75,73,76,134,118,0,0,60,22,6,0,75,0,0,0,0,79,109,0,0,108,79,0,0,80,108,0,25,81,80,4,82,82,81,0,0,109,82,0,119,0,168,255,0,83,107,0,41,118,83,24,42,118,118,24,33,84,118,0,121,84,3,0,137,116,0,0,139,0,0,0,0,86,1,0,25,87,86,48,82,88,87,0,0,114,88,0,0,89,114,0,1,118,0,0,14,90,89,118,0,91,1,0,121,90,23,0,25,92,91,84,0,93,114,0,25,94,93,92,134,118,0,0,64,48,6,0,92,94,0,0,0,95,114,0,25,97,95,76,134,118,0,0,128,68,6,0,97,0,0,0,0,98,114,0,25,99,98,76,0,100,1,0,3,101,100,117,82,102,101,0,25,103,102,8,134,118,0,0,64,48,6,0,99,103,0,0,137,116,0,0,139,0,0,0,25,104,91,8,134,105,0,0,64,56,6,0,104,0,0,0,33,106,105,0,120,106,3,0,137,116,0,0,139,0,0,0,0,4,1,0,25,5,4,8,0,6,1,0,3,7,6,117,82,8,7,0,25,9,8,16,134,118,0,0,64,48,6,0,5,9,0,0,137,116,0,0,139,0,0,0,140,6,48,0,0,0,0,0,1,42,0,0,136,46,0,0,0,43,46,0,136,46,0,0,25,46,46,96,137,46,0,0,130,46,0,0,136,47,0,0,49,46,46,47,196,159,3,0,135,46,0,0,25,6,43,16,25,35,43,72,25,36,43,56,25,37,43,40,0,7,0,0,58,8,1,0,58,19,3,0,0,30,4,0,0,34,5,0,134,38,0,0,172,90,6,0,0,40,38,0,0,39,40,0,25,9,39,8,127,46,0,0,59,47,0,0,89,46,47,0,127,47,0,0,114,35,47,0,127,46,0,0,102,46,46,1,107,35,1,46,127,47,0,0,102,47,47,2,107,35,2,47,127,46,0,0,102,46,46,3,107,35,3,46,25,10,35,4,127,46,0,0,114,46,2,0,127,46,0,0,102,47,2,1,107,46,1,47,127,47,0,0,102,46,2,2,107,47,2,46,127,46,0,0,102,47,2,3,107,46,3,47,127,47,0,0,88,11,47,0,127,47,0,0,89,47,11,0,127,47,0,0,114,10,47,0,127,46,0,0,102,46,46,1,107,10,1,46,127,47,0,0,102,47,47,2,107,10,2,47,127,46,0,0,102,46,46,3,107,10,3,46,25,12,35,8,25,13,2,4,127,46,0,0,114,46,13,0,127,46,0,0,102,47,13,1,107,46,1,47,127,47,0,0,102,46,13,2,107,47,2,46,127,46,0,0,102,47,13,3,107,46,3,47,127,47,0,0,88,14,47,0,127,47,0,0,89,47,14,0,127,47,0,0,114,12,47,0,127,46,0,0,102,46,46,1,107,12,1,46,127,47,0,0,102,47,47,2,107,12,2,47,127,46,0,0,102,46,46,3,107,12,3,46,25,15,35,12,25,16,2,8,127,46,0,0,114,46,16,0,127,46,0,0,102,47,16,1,107,46,1,47,127,47,0,0,102,46,16,2,107,47,2,46,127,46,0,0,102,47,16,3,107,46,3,47,127,47,0,0,88,17,47,0,127,47,0,0,89,47,17,0,127,47,0,0,114,15,47,0,127,46,0,0,102,46,46,1,107,15,1,46,127,47,0,0,102,47,47,2,107,15,2,47,127,46,0,0,102,46,46,3,107,15,3,46,0,41,9,0,0,44,35,0,25,45,41,16,78,46,44,0,83,41,46,0,25,41,41,1,25,44,44,1,54,46,41,45,140,161,3,0,0,18,40,0,0,20,7,0,25,21,20,68,134,46,0,0,64,48,6,0,18,21,0,0,0,22,40,0,25,23,22,8,58,24,8,0,127,46,0,0,89,46,24,0,127,46,0,0,114,36,46,0,127,47,0,0,102,47,47,1,107,36,1,47,127,46,0,0,102,46,46,2,107,36,2,46,127,47,0,0,102,47,47,3,107,36,3,47,25,25,36,4,127,47,0,0,59,46,0,0,89,47,46,0,127,46,0,0,114,25,46,0,127,47,0,0,102,47,47,1,107,25,1,47,127,46,0,0,102,46,46,2,107,25,2,46,127,47,0,0,102,47,47,3,107,25,3,47,25,26,36,8,127,47,0,0,59,46,0,0,89,47,46,0,127,46,0,0,114,26,46,0,127,47,0,0,102,47,47,1,107,26,1,47,127,46,0,0,102,46,46,2,107,26,2,46,127,47,0,0,102,47,47,3,107,26,3,47,25,27,36,12,127,47,0,0,59,46,0,0,89,47,46,0,127,46,0,0,114,27,46,0,127,47,0,0,102,47,47,1,107,27,1,47,127,46,0,0,102,46,46,2,107,27,2,46,127,47,0,0,102,47,47,3,107,27,3,47,0,41,37,0,0,44,36,0,25,45,41,16,78,47,44,0,83,41,47,0,25,41,41,1,25,44,44,1,54,47,41,45,188,162,3,0,58,28,19,0,0,29,30,0,0,31,34,0,0,32,7,0,82,47,37,0,85,6,47,0,106,46,37,4,109,6,4,46,106,47,37,8,109,6,8,47,106,46,37,12,109,6,12,46,1,46,52,0,134,33,0,0,52,245,3,0,23,6,28,29,31,46,32,0,137,43,0,0,139,33,0,0,140,4,120,0,0,0,0,0,1,116,0,0,136,118,0,0,0,117,118,0,136,118,0,0,25,118,118,64,137,118,0,0,130,118,0,0,136,119,0,0,49,118,118,119,84,163,3,0,135,118,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,27,3,0,0,38,16,0,1,118,145,31,134,49,0,0,0,76,6,0,38,118,0,0,0,106,49,0,0,60,106,0,1,118,0,0,14,71,60,118,120,71,3,0,137,117,0,0,139,0,0,0,1,118,4,0,1,119,1,0,134,82,0,0,224,168,5,0,118,119,0,0,0,112,82,0,0,93,106,0,25,6,93,12,82,7,6,0,0,8,112,0,1,118,156,31,134,119,0,0,56,9,4,0,7,118,8,0,0,9,112,0,25,10,9,12,82,11,10,0,0,111,11,0,0,12,111,0,1,119,0,0,14,13,12,119,120,13,2,0,119,0,117,0,0,14,111,0,0,15,14,0,0,17,112,0,25,18,17,8,82,19,18,0,16,20,15,19,120,20,2,0,119,0,109,0,1,119,4,0,1,118,1,0,134,21,0,0,224,168,5,0,119,118,0,0,0,109,21,0,0,22,111,0,82,23,22,0,0,24,109,0,1,119,158,31,134,118,0,0,56,9,4,0,23,119,24,0,0,25,109,0,82,26,25,0,32,28,26,2,121,28,58,0,0,29,109,0,25,30,29,12,82,31,30,0,82,32,31,0,0,108,32,0,0,33,109,0,25,34,33,12,82,35,34,0,25,36,35,4,82,37,36,0,0,115,37,0,0,39,5,0,0,40,108,0,25,41,40,4,82,42,41,0,0,43,108,0,82,44,43,0,134,45,0,0,76,245,5,0,39,42,44,0,0,107,45,0,0,46,4,0,0,114,46,0,0,47,114,0,1,118,0,0,14,48,47,118,120,48,2,0,119,0,30,0,0,50,114,0,0,51,115,0,25,52,51,4,82,53,52,0,0,54,115,0,82,55,54,0,134,56,0,0,76,245,5,0,50,53,55,0,0,113,56,0,0,57,113,0,1,118,0,0,14,58,57,118,0,59,107,0,1,118,0,0,14,61,59,118,19,118,58,61,0,110,118,0,120,110,6,0,0,64,114,0,25,65,64,24,82,66,65,0,0,114,66,0,119,0,228,255,0,62,113,0,0,63,107,0,134,118,0,0,252,253,5,0,62,63,0,0,0,67,109,0,25,68,67,12,82,69,68,0,0,104,69,0,0,70,104,0,1,118,0,0,14,72,70,118,120,72,2,0,119,0,18,0,0,73,104,0,0,74,73,0,0,75,109,0,25,76,75,8,82,77,76,0,16,78,74,77,120,78,2,0,119,0,10,0,0,79,104,0,82,80,79,0,134,118,0,0,148,105,6,0,80,0,0,0,0,81,104,0,25,83,81,4,0,104,83,0,119,0,235,255,0,84,109,0,134,118,0,0,180,1,6,0,84,0,0,0,0,85,111,0,25,86,85,4,0,111,86,0,119,0,136,255,0,87,112,0,25,88,87,12,82,89,88,0,0,105,89,0,0,90,105,0,1,118,0,0,14,91,90,118,120,91,2,0,119,0,18,0,0,92,105,0,0,94,92,0,0,95,112,0,25,96,95,8,82,97,96,0,16,98,94,97,120,98,2,0,119,0,10,0,0,99,105,0,82,100,99,0,134,118,0,0,148,105,6,0,100,0,0,0,0,101,105,0,25,102,101,4,0,105,102,0,119,0,235,255,0,103,112,0,134,118,0,0,180,1,6,0,103,0,0,0,137,117,0,0,139,0,0,0,140,3,38,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,25,3,1,4,127,36,0,0,114,36,3,0,127,36,0,0,102,37,3,1,107,36,1,37,127,37,0,0,102,36,3,2,107,37,2,36,127,36,0,0,102,37,3,3,107,36,3,37,127,37,0,0,88,4,37,0,25,15,2,8,127,37,0,0,114,37,15,0,127,37,0,0,102,36,15,1,107,37,1,36,127,36,0,0,102,37,15,2,107,36,2,37,127,37,0,0,102,36,15,3,107,37,3,36,127,36,0,0,88,26,36,0,65,28,4,26,25,29,1,8,127,36,0,0,114,36,29,0,127,36,0,0,102,37,29,1,107,36,1,37,127,37,0,0,102,36,29,2,107,37,2,36,127,36,0,0,102,37,29,3,107,36,3,37,127,37,0,0,88,30,37,0,25,31,2,4,127,37,0,0,114,37,31,0,127,37,0,0,102,36,31,1,107,37,1,36,127,36,0,0,102,37,31,2,107,36,2,37,127,37,0,0,102,36,31,3,107,37,3,36,127,36,0,0,88,32,36,0,65,33,30,32,64,5,28,33,127,36,0,0,89,36,5,0,127,36,0,0,114,0,36,0,127,37,0,0,102,37,37,1,107,0,1,37,127,36,0,0,102,36,36,2,107,0,2,36,127,37,0,0,102,37,37,3,107,0,3,37,25,6,0,4,25,7,1,8,127,37,0,0,114,37,7,0,127,37,0,0,102,36,7,1,107,37,1,36,127,36,0,0,102,37,7,2,107,36,2,37,127,37,0,0,102,36,7,3,107,37,3,36,127,36,0,0,88,8,36,0,127,36,0,0,114,36,2,0,127,36,0,0,102,37,2,1,107,36,1,37,127,37,0,0,102,36,2,2,107,37,2,36,127,36,0,0,102,37,2,3,107,36,3,37,127,37,0,0,88,9,37,0,65,10,8,9,127,37,0,0,114,37,1,0,127,37,0,0,102,36,1,1,107,37,1,36,127,36,0,0,102,37,1,2,107,36,2,37,127,37,0,0,102,36,1,3,107,37,3,36,127,36,0,0,88,11,36,0,25,12,2,8,127,36,0,0,114,36,12,0,127,36,0,0,102,37,12,1,107,36,1,37,127,37,0,0,102,36,12,2,107,37,2,36,127,36,0,0,102,37,12,3,107,36,3,37,127,37,0,0,88,13,37,0,65,14,11,13,64,16,10,14,127,37,0,0,89,37,16,0,127,37,0,0,114,6,37,0,127,36,0,0,102,36,36,1,107,6,1,36,127,37,0,0,102,37,37,2,107,6,2,37,127,36,0,0,102,36,36,3,107,6,3,36,25,17,0,8,127,36,0,0,114,36,1,0,127,36,0,0,102,37,1,1,107,36,1,37,127,37,0,0,102,36,1,2,107,37,2,36,127,36,0,0,102,37,1,3,107,36,3,37,127,37,0,0,88,18,37,0,25,19,2,4,127,37,0,0,114,37,19,0,127,37,0,0,102,36,19,1,107,37,1,36,127,36,0,0,102,37,19,2,107,36,2,37,127,37,0,0,102,36,19,3,107,37,3,36,127,36,0,0,88,20,36,0,65,21,18,20,25,22,2,4,127,36,0,0,114,36,22,0,127,36,0,0,102,37,22,1,107,36,1,37,127,37,0,0,102,36,22,2,107,37,2,36,127,36,0,0,102,37,22,3,107,36,3,37,127,37,0,0,88,23,37,0,127,37,0,0,114,37,1,0,127,37,0,0,102,36,1,1,107,37,1,36,127,36,0,0,102,37,1,2,107,36,2,37,127,37,0,0,102,36,1,3,107,37,3,36,127,36,0,0,88,24,36,0,65,25,23,24,64,27,21,25,127,36,0,0,89,36,27,0,127,36,0,0,114,17,36,0,127,37,0,0,102,37,37,1,107,17,1,37,127,36,0,0,102,36,36,2,107,17,2,36,127,37,0,0,102,37,37,3,107,17,3,37,139,0,0,0,140,3,38,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,25,3,1,4,127,36,0,0,114,36,3,0,127,36,0,0,102,37,3,1,107,36,1,37,127,37,0,0,102,36,3,2,107,37,2,36,127,36,0,0,102,37,3,3,107,36,3,37,127,37,0,0,88,4,37,0,25,15,2,8,127,37,0,0,114,37,15,0,127,37,0,0,102,36,15,1,107,37,1,36,127,36,0,0,102,37,15,2,107,36,2,37,127,37,0,0,102,36,15,3,107,37,3,36,127,36,0,0,88,26,36,0,65,28,4,26,25,29,1,8,127,36,0,0,114,36,29,0,127,36,0,0,102,37,29,1,107,36,1,37,127,37,0,0,102,36,29,2,107,37,2,36,127,36,0,0,102,37,29,3,107,36,3,37,127,37,0,0,88,30,37,0,25,31,2,4,127,37,0,0,114,37,31,0,127,37,0,0,102,36,31,1,107,37,1,36,127,36,0,0,102,37,31,2,107,36,2,37,127,37,0,0,102,36,31,3,107,37,3,36,127,36,0,0,88,32,36,0,65,33,30,32,64,5,28,33,127,36,0,0,89,36,5,0,127,36,0,0,114,0,36,0,127,37,0,0,102,37,37,1,107,0,1,37,127,36,0,0,102,36,36,2,107,0,2,36,127,37,0,0,102,37,37,3,107,0,3,37,25,6,0,4,25,7,1,8,127,37,0,0,114,37,7,0,127,37,0,0,102,36,7,1,107,37,1,36,127,36,0,0,102,37,7,2,107,36,2,37,127,37,0,0,102,36,7,3,107,37,3,36,127,36,0,0,88,8,36,0,127,36,0,0,114,36,2,0,127,36,0,0,102,37,2,1,107,36,1,37,127,37,0,0,102,36,2,2,107,37,2,36,127,36,0,0,102,37,2,3,107,36,3,37,127,37,0,0,88,9,37,0,65,10,8,9,127,37,0,0,114,37,1,0,127,37,0,0,102,36,1,1,107,37,1,36,127,36,0,0,102,37,1,2,107,36,2,37,127,37,0,0,102,36,1,3,107,37,3,36,127,36,0,0,88,11,36,0,25,12,2,8,127,36,0,0,114,36,12,0,127,36,0,0,102,37,12,1,107,36,1,37,127,37,0,0,102,36,12,2,107,37,2,36,127,36,0,0,102,37,12,3,107,36,3,37,127,37,0,0,88,13,37,0,65,14,11,13,64,16,10,14,127,37,0,0,89,37,16,0,127,37,0,0,114,6,37,0,127,36,0,0,102,36,36,1,107,6,1,36,127,37,0,0,102,37,37,2,107,6,2,37,127,36,0,0,102,36,36,3,107,6,3,36,25,17,0,8,127,36,0,0,114,36,1,0,127,36,0,0,102,37,1,1,107,36,1,37,127,37,0,0,102,36,1,2,107,37,2,36,127,36,0,0,102,37,1,3,107,36,3,37,127,37,0,0,88,18,37,0,25,19,2,4,127,37,0,0,114,37,19,0,127,37,0,0,102,36,19,1,107,37,1,36,127,36,0,0,102,37,19,2,107,36,2,37,127,37,0,0,102,36,19,3,107,37,3,36,127,36,0,0,88,20,36,0,65,21,18,20,25,22,2,4,127,36,0,0,114,36,22,0,127,36,0,0,102,37,22,1,107,36,1,37,127,37,0,0,102,36,22,2,107,37,2,36,127,36,0,0,102,37,22,3,107,36,3,37,127,37,0,0,88,23,37,0,127,37,0,0,114,37,1,0,127,37,0,0,102,36,1,1,107,37,1,36,127,36,0,0,102,37,1,2,107,36,2,37,127,37,0,0,102,36,1,3,107,37,3,36,127,36,0,0,88,24,36,0,65,25,23,24,64,27,21,25,127,36,0,0,89,36,27,0,127,36,0,0,114,17,36,0,127,37,0,0,102,37,37,1,107,17,1,37,127,36,0,0,102,36,36,2,107,17,2,36,127,37,0,0,102,37,37,3,107,17,3,37,139,0,0,0,140,2,123,0,0,0,0,0,1,117,0,0,136,119,0,0,0,118,119,0,136,119,0,0,25,119,119,32,137,119,0,0,130,119,0,0,136,120,0,0,49,119,119,120,84,173,3,0,135,119,0,0,0,114,118,0,0,2,0,0,0,3,1,0,134,25,0,0,44,129,5,0,0,116,25,0,0,36,114,0,0,47,36,0,1,119,0,0,85,47,119,0,25,58,36,4,0,69,58,0,1,119,0,0,85,69,119,0,1,113,0,0,1,115,0,0,0,80,3,0,25,91,80,12,82,102,91,0,1,119,193,13,1,120,9,0,1,121,2,0,134,4,0,0,28,203,4,0,102,119,120,121,0,115,4,0,0,15,116,0,0,17,115,0,25,18,17,4,82,19,18,0,0,20,115,0,82,21,20,0,1,120,193,13,1,119,9,0,134,121,0,0,104,199,5,0,15,120,119,19,21,0,0,0,0,22,3,0,25,23,22,12,82,24,23,0,1,121,203,13,1,119,6,0,1,120,2,0,134,26,0,0,28,203,4,0,24,121,119,120,0,115,26,0,0,27,116,0,0,28,115,0,25,29,28,4,82,30,29,0,0,31,115,0,82,32,31,0,1,119,203,13,1,121,6,0,134,120,0,0,104,199,5,0,27,119,121,30,32,0,0,0,0,33,3,0,25,34,33,12,82,35,34,0,1,120,215,11,1,121,5,0,1,119,2,0,134,37,0,0,16,196,3,0,35,120,121,119,128,119,0,0,0,38,119,0,0,39,114,0,0,40,39,0,85,40,37,0,25,41,39,4,0,42,41,0,85,42,38,0,0,43,116,0,0,44,114,0,0,45,44,0,82,46,45,0,25,48,44,4,0,49,48,0,82,50,49,0,1,121,215,11,1,120,5,0,134,119,0,0,244,142,5,0,43,121,120,46,50,0,0,0,0,51,3,0,25,52,51,12,82,53,52,0,1,119,221,11,1,120,9,0,1,121,2,0,134,54,0,0,208,101,4,0,53,119,120,121,0,113,54,0,0,55,116,0,0,56,113,0,1,120,221,11,1,119,9,0,134,121,0,0,160,189,5,0,55,120,119,56,0,57,3,0,25,59,57,12,82,60,59,0,1,121,231,11,1,119,15,0,1,120,2,0,134,61,0,0,16,196,3,0,60,121,119,120,128,120,0,0,0,62,120,0,0,63,114,0,0,64,63,0,85,64,61,0,25,65,63,4,0,66,65,0,85,66,62,0,0,67,116,0,0,68,114,0,0,70,68,0,82,71,70,0,25,72,68,4,0,73,72,0,82,74,73,0,1,119,231,11,1,121,15,0,134,120,0,0,244,142,5,0,67,119,121,71,74,0,0,0,0,75,3,0,25,76,75,12,82,77,76,0,1,120,247,11,1,121,5,0,1,119,2,0,134,78,0,0,28,203,4,0,77,120,121,119,0,115,78,0,0,79,116,0,0,81,115,0,25,82,81,4,82,83,82,0,0,84,115,0,82,85,84,0,1,121,247,11,1,120,5,0,134,119,0,0,104,199,5,0,79,121,120,83,85,0,0,0,0,86,116,0,1,119,240,13,1,120,8,0,1,121,2,0,134,87,0,0,208,101,4,0,86,119,120,121,0,113,87,0,0,88,113,0,1,120,0,0,1,122,5,0,138,88,120,122,24,176,3,0,20,176,3,0,56,176,3,0,128,176,3,0,200,176,3,0,119,0,46,0,0,103,116,0,1,119,52,14,1,121,11,0,1,122,1,0,134,120,0,0,160,189,5,0,103,119,121,122,119,0,38,0,0,89,3,0,25,90,89,12,82,92,90,0,1,121,253,11,1,120,10,0,1,119,2,0,134,93,0,0,208,101,4,0,92,121,120,119,0,113,93,0,0,94,116,0,0,95,113,0,1,120,52,14,1,121,11,0,134,119,0,0,160,189,5,0,94,120,121,95,119,0,20,0,0,96,3,0,25,97,96,12,82,98,97,0,1,119,8,12,1,121,14,0,1,120,2,0,134,99,0,0,208,101,4,0,98,119,121,120,0,113,99,0,0,100,116,0,0,101,113,0,1,121,52,14,1,119,11,0,134,120,0,0,160,189,5,0,100,121,119,101,119,0,2,0,119,0,220,255,0,104,3,0,25,105,104,12,82,106,105,0,1,120,23,12,1,122,10,0,1,121,2,0,134,107,0,0,28,203,4,0,106,120,122,121,0,115,107,0,0,108,116,0,0,109,115,0,25,110,109,4,82,111,110,0,0,112,115,0,82,5,112,0,1,122,23,12,1,120,10,0,134,121,0,0,104,199,5,0,108,122,120,111,5,0,0,0,0,6,3,0,25,7,6,12,82,8,7,0,1,121,23,12,1,120,10,0,1,122,2,0,134,9,0,0,28,203,4,0,8,121,120,122,0,115,9,0,0,10,116,0,0,11,115,0,25,12,11,4,82,13,12,0,0,14,115,0,82,16,14,0,1,120,34,12,1,121,11,0,134,122,0,0,104,199,5,0,10,120,121,13,16,0,0,0,137,118,0,0,139,0,0,0,140,1,97,0,0,0,0,0,1,93,0,0,136,95,0,0,0,94,95,0,136,95,0,0,25,95,95,48,137,95,0,0,130,95,0,0,136,96,0,0,49,95,95,96,184,177,3,0,135,95,0,0,25,86,94,8,0,1,0,0,1,90,0,0,0,2,1,0,25,13,2,40,134,95,0,0,44,195,5,0,13,0,0,0,0,24,1,0,25,35,24,20,134,46,0,0,36,50,6,0,35,0,0,0,33,57,46,0,120,57,10,0,0,68,1,0,25,79,68,20,25,85,79,4,82,3,85,0,0,90,3,0,0,4,90,0,134,95,0,0,232,60,6,0,4,0,0,0,0,5,1,0,25,6,5,40,134,95,0,0,64,96,6,0,6,0,0,0,0,7,90,0,1,95,0,0,14,8,7,95,120,8,2,0,119,0,140,0,0,9,90,0,0,88,9,0,85,86,86,0,25,10,86,4,85,10,86,0,0,11,1,0,25,12,11,40,134,95,0,0,44,195,5,0,12,0,0,0,0,14,1,0,25,15,14,28,134,16,0,0,36,50,6,0,15,0,0,0,33,17,16,0,120,17,19,0,0,18,1,0,25,19,18,28,25,20,19,4,82,21,20,0,0,92,21,0,1,95,0,0,14,22,21,95,120,22,2,0,119,0,10,0,0,23,92,0,134,95,0,0,232,60,6,0,23,0,0,0,0,25,92,0,134,95,0,0,64,40,6,0,25,86,0,0,119,0,232,255,0,26,1,0,25,27,26,40,134,95,0,0,64,96,6,0,27,0,0,0,25,28,86,4,82,29,28,0,0,92,29,0,0,30,92,0,14,31,30,86,120,31,2,0,119,0,54,0,0,32,92,0,0,91,32,0,0,33,88,0,25,34,33,8,80,36,34,0,41,95,36,16,42,95,95,16,0,37,95,0,32,87,37,11,121,87,31,0,0,38,88,0,0,89,38,0,0,39,91,0,25,40,39,12,82,41,40,0,34,42,41,0,120,42,15,0,0,43,89,0,25,44,43,24,82,45,44,0,34,47,45,0,120,47,10,0,0,48,91,0,25,49,48,12,82,50,49,0,0,51,89,0,25,52,51,24,82,53,52,0,13,54,50,53,120,54,2,0,119,0,18,0,0,55,91,0,25,56,55,8,82,58,56,0,0,59,91,0,0,60,88,0,38,96,58,31,135,95,28,0,96,59,60,0,119,0,9,0,0,61,91,0,25,62,61,8,82,63,62,0,0,64,91,0,0,65,88,0,38,96,63,31,135,95,28,0,96,64,65,0,0,66,92,0,25,67,66,4,82,69,67,0,0,92,69,0,119,0,200,255,0,70,1,0,25,71,70,40,134,95,0,0,44,195,5,0,71,0,0,0,134,72,0,0,36,50,6,0,86,0,0,0,33,73,72,0,120,73,19,0,25,74,86,4,82,75,74,0,0,92,75,0,1,95,0,0,14,76,75,95,120,76,2,0,119,0,12,0,0,77,92,0,134,95,0,0,232,60,6,0,77,0,0,0,0,78,92,0,0,80,1,0,25,81,80,28,134,95,0,0,64,40,6,0,78,81,0,0,119,0,234,255,0,82,1,0,25,83,82,40,134,95,0,0,64,96,6,0,83,0,0,0,0,84,88,0,134,95,0,0,4,206,4,0,84,0,0,0,1,90,0,0,119,0,87,255,137,94,0,0,139,0,0,0,140,3,78,0,0,0,0,0,2,75,0,0,146,0,0,0,1,73,0,0,136,76,0,0,0,74,76,0,136,76,0,0,25,76,76,48,137,76,0,0,130,76,0,0,136,77,0,0,49,76,76,77,176,180,3,0,135,76,0,0,25,68,74,16,0,67,74,0,25,65,74,32,25,6,0,28,82,7,6,0,85,65,7,0,25,18,65,4,25,29,0,20,82,40,29,0,0,51,40,0,4,53,51,7,85,18,53,0,25,54,65,8,85,54,1,0,25,55,65,12,85,55,2,0,3,56,53,2,25,8,0,60,25,9,0,44,0,59,65,0,1,62,2,0,0,66,56,0,1,76,40,6,82,10,76,0,1,76,0,0,13,11,10,76,121,11,14,0,82,15,8,0,85,68,15,0,25,71,68,4,85,71,59,0,25,72,68,8,85,72,62,0,135,16,29,0,75,68,0,0,134,17,0,0,156,93,6,0,16,0,0,0,0,57,17,0,119,0,19,0,1,77,135,0,135,76,30,0,77,0,0,0,82,12,8,0,85,67,12,0,25,69,67,4,85,69,59,0,25,70,67,8,85,70,62,0,135,13,29,0,75,67,0,0,134,14,0,0,156,93,6,0,13,0,0,0,1,77,0,0,135,76,31,0,77,0,0,0,0,57,14,0,13,19,66,57,121,19,3,0,1,73,6,0,119,0,49,0,34,26,57,0,121,26,5,0,0,60,59,0,0,63,62,0,1,73,8,0,119,0,43,0,4,35,66,57,25,36,59,4,82,37,36,0,16,38,37,57,121,38,14,0,82,39,9,0,85,6,39,0,85,29,39,0,4,41,57,37,25,42,59,8,26,43,62,1,25,4,59,12,82,5,4,0,0,52,5,0,0,58,41,0,0,61,42,0,0,64,43,0,119,0,15,0,32,44,62,2,121,44,9,0,82,45,6,0,3,46,45,57,85,6,46,0,0,52,37,0,0,58,57,0,0,61,59,0,1,64,2,0,119,0,5,0,0,52,37,0,0,58,57,0,0,61,59,0,0,64,62,0,82,47,61,0,3,48,47,58,85,61,48,0,25,49,61,4,4,50,52,58,85,49,50,0,0,59,61,0,0,62,64,0,0,66,35,0,119,0,169,255,32,76,73,6,121,76,12,0,82,20,9,0,25,21,0,48,82,22,21,0,3,23,20,22,25,24,0,16,85,24,23,0,0,25,20,0,85,6,25,0,85,29,25,0,0,3,2,0,119,0,22,0,32,76,73,8,121,76,20,0,25,27,0,16,1,76,0,0,85,27,76,0,1,76,0,0,85,6,76,0,1,76,0,0,85,29,76,0,82,28,0,0,39,76,28,32,0,30,76,0,85,0,30,0,32,31,63,2,121,31,3,0,1,3,0,0,119,0,5,0,25,32,60,4,82,33,32,0,4,34,2,33,0,3,34,0,137,74,0,0,139,3,0,0,140,1,112,0,0,0,0,0,2,109,0,0,40,1,0,0,1,107,0,0,136,110,0,0,0,108,110,0,136,110,0,0,25,110,110,32,137,110,0,0,130,110,0,0,136,111,0,0,49,110,110,111,52,183,3,0,135,110,0,0,0,1,0,0,0,2,1,0,1,110,32,1,3,13,2,110,82,24,13,0,1,110,0,0,14,35,24,110,121,35,13,0,0,46,1,0,1,110,32,1,3,57,46,110,82,68,57,0,0,79,1,0,1,110,28,1,3,90,79,110,82,3,90,0,1,111,255,0,19,111,68,111,135,110,9,0,111,3,0,0,1,103,0,0,0,4,103,0,34,5,4,3,120,5,2,0,119,0,23,0,0,6,103,0,0,7,1,0,3,8,7,109,41,110,6,2,3,9,8,110,82,10,9,0,1,110,0,0,14,11,10,110,121,11,10,0,0,12,103,0,0,14,1,0,3,15,14,109,41,110,12,2,3,16,15,110,82,17,16,0,134,110,0,0,140,125,5,0,17,0,0,0,0,18,103,0,25,19,18,1,0,103,19,0,119,0,231,255,0,20,1,0,1,110,52,1,3,21,20,110,82,22,21,0,134,110,0,0,180,1,6,0,22,0,0,0,0,23,1,0,1,110,56,1,3,25,23,110,82,26,25,0,25,27,26,12,82,28,27,0,0,101,28,0,0,29,101,0,1,110,0,0,14,30,29,110,120,30,2,0,119,0,21,0,0,31,101,0,0,32,31,0,0,33,1,0,1,110,56,1,3,34,33,110,82,36,34,0,25,37,36,8,82,38,37,0,16,39,32,38,120,39,2,0,119,0,10,0,0,40,101,0,82,41,40,0,134,110,0,0,124,164,5,0,41,0,0,0,0,42,101,0,25,43,42,4,0,101,43,0,119,0,232,255,0,44,1,0,1,110,56,1,3,45,44,110,82,47,45,0,134,110,0,0,180,1,6,0,47,0,0,0,0,48,1,0,25,49,48,52,134,110,0,0,88,161,5,0,49,0,0,0,0,50,1,0,25,51,50,24,134,110,0,0,128,68,6,0,51,0,0,0,0,52,1,0,25,53,52,8,134,110,0,0,128,68,6,0,53,0,0,0,0,54,1,0,25,55,54,76,134,110,0,0,128,68,6,0,55,0,0,0,0,56,1,0,25,58,56,84,134,110,0,0,128,68,6,0,58,0,0,0,0,59,1,0,134,110,0,0,128,68,6,0,59,0,0,0,0,60,1,0,25,61,60,16,134,110,0,0,128,68,6,0,61,0,0,0,0,62,1,0,25,63,62,32,134,64,0,0,64,56,6,0,63,0,0,0,33,65,64,0,120,65,18,0,0,66,1,0,25,67,66,32,25,69,67,4,82,70,69,0,0,102,70,0,1,110,0,0,14,71,70,110,120,71,2,0,119,0,9,0,0,72,102,0,26,73,72,24,0,104,73,0,0,74,104,0,134,110,0,0,248,182,3,0,74,0,0,0,119,0,233,255,0,75,1,0,25,76,75,40,134,77,0,0,64,56,6,0,76,0,0,0,33,78,77,0,120,78,18,0,0,80,1,0,25,81,80,40,25,82,81,4,82,83,82,0,0,102,83,0,1,110,0,0,14,84,83,110,120,84,2,0,119,0,9,0,0,85,102,0,26,86,85,24,0,105,86,0,0,87,105,0,134,110,0,0,248,182,3,0,87,0,0,0,119,0,233,255,0,88,1,0,25,89,88,68,134,91,0,0,64,56,6,0,89,0,0,0,33,92,91,0,121,92,3,0,1,107,22,0,119,0,18,0,0,93,1,0,25,94,93,68,25,95,94,4,82,96,95,0,0,102,96,0,1,110,0,0,14,97,96,110,120,97,3,0,1,107,22,0,119,0,8,0,0,98,102,0,0,106,98,0,0,99,106,0,134,110,0,0,224,93,6,0,99,0,0,0,119,0,231,255,32,110,107,22,121,110,7,0,0,100,1,0,134,110,0,0,216,166,5,0,100,0,0,0,137,108,0,0,139,0,0,0,139,0,0,0,140,2,66,0,0,0,0,0,1,61,0,0,136,64,0,0,0,62,64,0,136,64,0,0,25,64,64,112,137,64,0,0,130,64,0,0,136,65,0,0,49,64,64,65,176,186,3,0,135,64,0,0,25,50,62,40,25,52,62,24,25,51,62,16,0,49,62,0,25,48,62,52,78,5,1,0,41,64,5,24,42,64,64,24,0,6,64,0,1,64,4,45,1,65,4,0,134,47,0,0,224,221,3,0,64,6,65,0,1,65,0,0,13,17,47,65,121,17,7,0,134,28,0,0,80,88,6,0,1,65,22,0,85,28,65,0,1,2,0,0,119,0,154,0,1,65,120,4,135,39,32,0,65,0,0,0,1,65,0,0,13,42,39,65,121,42,3,0,1,2,0,0,119,0,146,0,0,60,39,0,25,63,60,112,1,65,0,0,85,60,65,0,25,60,60,4,54,65,60,63,52,187,3,0,1,65,43,0,134,43,0,0,64,94,6,0,1,65,0,0,1,65,0,0,13,44,43,65,121,44,9,0,41,65,5,24,42,65,65,24,32,45,65,114,1,65,8,0,1,64,4,0,125,46,45,65,64,0,0,0,85,39,46,0,1,64,101,0,134,7,0,0,64,94,6,0,1,64,0,0,1,64,0,0,13,8,7,64,121,8,3,0,0,9,5,0,119,0,13,0,85,49,0,0,25,53,49,4,1,64,2,0,85,53,64,0,25,58,49,8,1,64,1,0,85,58,64,0,1,65,221,0,135,64,33,0,65,49,0,0,78,3,1,0,0,9,3,0,41,64,9,24,42,64,64,24,32,10,64,97,121,10,32,0,85,51,0,0,25,59,51,4,1,64,3,0,85,59,64,0,1,64,221,0,135,11,33,0,64,51,0,0,1,64,0,4,19,64,11,64,0,12,64,0,32,13,12,0,121,13,13,0,1,64,0,4,20,64,11,64,0,14,64,0,85,52,0,0,25,54,52,4,1,64,4,0,85,54,64,0,25,55,52,8,85,55,14,0,1,65,221,0,135,64,33,0,65,52,0,0,82,15,39,0,1,64,128,0,20,64,15,64,0,16,64,0,85,39,16,0,0,24,16,0,119,0,3,0,82,4,39,0,0,24,4,0,25,18,39,60,85,18,0,0,25,19,39,120,25,20,39,44,85,20,19,0,25,21,39,48,1,64,0,4,85,21,64,0,25,22,39,75,1,64,255,255,83,22,64,0,38,64,24,8,0,23,64,0,32,25,23,0,121,25,14,0,85,50,0,0,25,56,50,4,1,64,1,84,85,56,64,0,25,57,50,8,85,57,48,0,1,64,54,0,135,26,34,0,64,50,0,0,32,27,26,0,121,27,3,0,1,64,10,0,83,22,64,0,25,29,39,32,1,64,132,0,85,29,64,0,25,30,39,36,1,64,133,0,85,30,64,0,25,31,39,40,1,64,4,0,85,31,64,0,25,32,39,12,1,64,2,0,85,32,64,0,1,64,44,6,82,33,64,0,32,34,33,0,121,34,4,0,25,35,39,76,1,64,255,255,85,35,64,0,1,65,68,6,135,64,35,0,65,0,0,0,1,64,64,6,82,36,64,0,25,37,39,56,85,37,36,0,32,38,36,0,120,38,4,0,0,40,36,0,25,41,40,52,85,41,39,0,1,64,64,6,85,64,39,0,1,65,68,6,135,64,36,0,65,0,0,0,0,2,39,0,137,62,0,0,139,2,0,0,140,1,101,0,0,0,0,0,1,97,0,0,136,99,0,0,0,98,99,0,136,99,0,0,25,99,99,32,137,99,0,0,130,99,0,0,136,100,0,0,49,99,99,100,172,189,3,0,135,99,0,0,0,95,98,0,0,1,0,0,1,99,4,0,1,100,1,0,134,2,0,0,224,168,5,0,99,100,0,0,0,92,2,0,0,13,1,0,25,24,13,40,82,35,24,0,0,46,92,0,134,100,0,0,36,105,4,0,35,46,0,0,0,57,92,0,25,68,57,12,82,79,68,0,0,91,79,0,0,90,91,0,1,100,0,0,14,3,90,100,120,3,2,0,119,0,18,0,0,4,91,0,0,5,4,0,0,6,92,0,25,7,6,8,82,8,7,0,16,9,5,8,120,9,2,0,119,0,10,0,0,10,91,0,82,11,10,0,134,100,0,0,220,225,5,0,11,0,0,0,0,12,91,0,25,14,12,4,0,91,14,0,119,0,235,255,0,15,92,0,134,100,0,0,180,1,6,0,15,0,0,0,0,16,1,0,25,17,16,40,82,18,17,0,134,100,0,0,52,67,4,0,18,0,0,0,0,19,1,0,134,20,0,0,96,53,6,0,19,0,0,0,33,21,20,0,120,21,18,0,0,22,1,0,25,23,22,4,82,25,23,0,26,26,25,48,0,96,26,0,0,27,1,0,134,100,0,0,228,17,6,0,27,0,0,0,1,99,8,22,134,100,0,0,44,77,6,0,99,95,0,0,0,28,96,0,134,100,0,0,228,94,6,0,28,0,0,0,0,29,1,0,25,30,29,8,134,31,0,0,96,53,6,0,30,0,0,0,33,32,31,0,120,32,36,0,0,33,1,0,25,34,33,8,25,36,34,4,82,37,36,0,0,94,37,0,1,100,0,0,14,38,37,100,120,38,2,0,119,0,27,0,0,39,94,0,26,40,39,16,0,93,40,0,0,41,94,0,134,100,0,0,228,17,6,0,41,0,0,0,0,42,93,0,25,43,42,32,82,44,43,0,1,100,0,0,14,45,44,100,121,45,9,0,0,47,93,0,25,48,47,32,82,49,48,0,0,50,93,0,1,99,255,0,19,99,49,99,135,100,9,0,99,50,0,0,0,51,93,0,134,100,0,0,120,189,3,0,51,0,0,0,119,0,215,255,0,52,1,0,25,53,52,16,134,54,0,0,96,53,6,0,53,0,0,0,33,55,54,0,121,55,3,0,1,97,15,0,119,0,22,0,0,56,1,0,25,58,56,32,82,59,58,0,1,100,0,0,14,60,59,100,121,60,15,0,0,61,1,0,25,62,61,16,134,100,0,0,228,17,6,0,62,0,0,0,0,63,1,0,25,64,63,32,82,65,64,0,0,66,1,0,1,99,255,0,19,99,65,99,135,100,9,0,99,66,0,0,119,0,2,0,1,97,15,0,32,100,97,15,121,100,6,0,0,67,1,0], eb + 235520);
  HEAPU8.set([25,69,67,16,134,100,0,0,228,17,6,0,69,0,0,0,0,70,1,0,25,71,70,44,82,72,71,0,1,100,0,0,14,73,72,100,120,73,7,0,0,89,1,0,134,100,0,0,216,166,5,0,89,0,0,0,137,98,0,0,139,0,0,0,0,74,1,0,25,75,74,48,82,76,75,0,1,100,0,0,14,77,76,100,120,77,7,0,0,89,1,0,134,100,0,0,216,166,5,0,89,0,0,0,137,98,0,0,139,0,0,0,0,78,1,0,25,80,78,48,82,81,80,0,0,82,1,0,25,83,82,44,82,84,83,0,1,99,255,0,19,99,81,99,135,100,9,0,99,84,0,0,0,85,1,0,25,86,85,44,1,100,0,0,85,86,100,0,0,87,1,0,25,88,87,48,1,100,0,0,85,88,100,0,0,89,1,0,134,100,0,0,216,166,5,0,89,0,0,0,137,98,0,0,139,0,0,0,140,2,114,0,0,0,0,0,1,107,0,0,136,109,0,0,0,108,109,0,136,109,0,0,25,109,109,32,137,109,0,0,130,109,0,0,136,110,0,0,49,109,109,110,4,193,3,0,135,109,0,0,25,106,108,12,0,104,108,0,0,2,0,0,0,3,1,0,134,15,0,0,104,85,6,0,0,105,15,0,0,26,3,0,25,37,26,16,82,48,37,0,25,59,48,4,82,70,59,0,0,81,3,0,25,92,81,16,82,4,92,0,82,6,4,0,134,7,0,0,240,9,6,0,70,6,0,0,85,106,7,0,0,8,105,0,1,110,104,35,1,111,8,0,1,112,9,0,1,113,4,0,134,109,0,0,152,211,5,0,8,110,111,112,106,113,0,0,0,9,104,0,0,10,9,0,1,109,0,0,85,10,109,0,25,11,9,4,0,12,11,0,1,109,0,0,85,12,109,0,0,13,3,0,25,14,13,24,82,16,14,0,34,17,16,0,41,109,17,31,42,109,109,31,0,18,109,0,0,19,104,0,0,20,19,0,85,20,16,0,25,21,19,4,0,22,21,0,85,22,18,0,0,23,105,0,1,113,113,35,1,112,4,0,1,111,1,0,1,110,8,0,134,109,0,0,152,211,5,0,23,113,112,111,104,110,0,0,0,24,104,0,0,25,24,0,1,109,0,0,85,25,109,0,25,27,24,4,0,28,27,0,1,109,0,0,85,28,109,0,0,29,3,0,25,30,29,20,82,31,30,0,34,32,31,0,41,109,32,31,42,109,109,31,0,33,109,0,0,34,104,0,0,35,34,0,85,35,31,0,25,36,34,4,0,38,36,0,85,38,33,0,0,39,105,0,1,110,118,35,1,111,10,0,1,112,1,0,1,113,8,0,134,109,0,0,152,211,5,0,39,110,111,112,104,113,0,0,0,40,3,0,25,41,40,28,82,42,41,0,25,43,42,4,82,44,43,0,0,45,3,0,25,46,45,28,82,47,46,0,82,49,47,0,134,50,0,0,240,9,6,0,44,49,0,0,85,106,50,0,0,51,105,0,1,113,129,35,1,112,8,0,1,111,9,0,1,110,4,0,134,109,0,0,152,211,5,0,51,113,112,111,106,110,0,0,0,52,3,0,25,53,52,36,82,54,53,0,25,55,54,4,82,56,55,0,0,57,3,0,25,58,57,36,82,60,58,0,82,61,60,0,134,62,0,0,240,9,6,0,56,61,0,0,85,106,62,0,0,63,105,0,1,110,138,35,1,111,12,0,1,112,9,0,1,113,4,0,134,109,0,0,152,211,5,0,63,110,111,112,106,113,0,0,0,64,3,0,25,65,64,32,82,66,65,0,25,67,66,4,82,68,67,0,0,69,3,0,25,71,69,32,82,72,71,0,82,73,72,0,134,74,0,0,240,9,6,0,68,73,0,0,85,106,74,0,0,75,105,0,1,113,151,35,1,112,4,0,1,111,9,0,1,110,4,0,134,109,0,0,152,211,5,0,75,113,112,111,106,110,0,0,0,76,105,0,134,77,0,0,36,87,4,0,76,0,0,0,0,103,77,0,0,78,105,0,134,109,0,0,184,57,5,0,78,0,0,0,0,79,2,0,25,80,79,44,82,82,80,0,0,83,3,0,25,84,83,12,82,85,84,0,25,86,85,4,82,87,86,0,0,88,3,0,25,89,88,16,82,90,89,0,25,91,90,4,82,93,91,0,0,94,2,0,25,95,94,8,82,96,95,0,25,97,96,4,82,98,97,0,0,99,103,0,25,100,99,4,82,101,100,0,1,109,31,0,135,102,37,0,109,82,87,93,98,101,0,0,0,5,103,0,134,109,0,0,148,105,6,0,5,0,0,0,137,108,0,0,139,0,0,0,140,4,98,0,0,0,0,0,2,92,0,0,255,0,0,0,1,90,0,0,136,93,0,0,0,91,93,0,136,93,0,0,25,93,93,32,137,93,0,0,130,93,0,0,136,94,0,0,49,93,93,94,76,196,3,0,135,93,0,0,0,5,91,0,0,6,0,0,0,17,1,0,0,28,2,0,0,39,3,0,0,50,6,0,82,61,50,0,0,72,17,0,0,83,28,0,134,86,0,0,68,71,4,0,61,72,83,0,82,7,86,0,0,88,7,0,0,8,88,0,1,93,0,0,14,9,8,93,121,9,167,0,0,20,88,0,78,21,20,0,19,93,21,92,0,22,93,0,1,93,1,0,1,95,8,0,138,22,93,95,44,197,3,0,104,197,3,0,108,197,3,0,112,197,3,0,116,197,3,0,120,197,3,0,180,197,3,0,112,198,3,0,0,69,39,0,19,93,69,92,0,70,93,0,32,87,70,2,121,87,10,0,0,71,6,0,0,73,17,0,0,74,28,0,1,94,0,0,1,95,0,0,134,93,0,0,244,142,5,0,71,73,74,94,95,0,0,0,0,75,5,0,0,76,75,0,1,93,0,0,85,76,93,0,25,77,75,4,0,78,77,0,1,93,0,0,85,78,93,0,119,0,152,0,0,23,88,0,25,24,23,8,0,25,24,0,0,26,25,0,82,27,26,0,25,29,25,4,0,30,29,0,82,31,30,0,0,32,5,0,0,33,32,0,85,33,27,0,25,34,32,4,0,35,34,0,85,35,31,0,119,0,137,0,119,0,241,255,119,0,240,255,119,0,239,255,119,0,238,255,0,36,88,0,25,37,36,8,0,38,37,0,0,40,38,0,82,41,40,0,25,42,38,4,0,43,42,0,82,44,43,0,0,45,5,0,0,46,45,0,85,46,41,0,25,47,45,4,0,48,47,0,85,48,44,0,119,0,118,0,0,59,88,0,25,60,59,8,86,62,60,0,75,63,62,0,135,94,2,0,62,0,0,0,59,95,1,0,74,94,94,95,121,94,29,0,59,95,0,0,73,95,62,95,121,95,14,0,61,96,0,0,0,0,128,79,66,96,62,96,135,97,38,0,96,0,0,0,62,96,0,0,0,0,224,255,255,255,239,65,135,95,39,0,97,96,0,0,75,95,95,0,0,94,95,0,119,0,11,0,75,96,62,0,77,96,96,0,64,96,62,96,61,97,0,0,0,0,128,79,66,96,96,97,135,95,40,0,96,0,0,0,75,95,95,0,0,94,95,0,0,93,94,0,119,0,3,0,1,94,0,0,0,93,94,0,0,64,93,0,0,65,5,0,0,66,65,0,85,66,63,0,25,67,65,4,0,68,67,0,85,68,64,0,119,0,71,0,0,49,88,0,25,51,49,8,88,52,51,0,75,53,52,0,135,94,2,0,52,0,0,0,59,95,1,0,74,94,94,95,121,94,29,0,59,95,0,0,73,95,52,95,121,95,14,0,61,97,0,0,0,0,128,79,66,97,52,97,135,96,38,0,97,0,0,0,62,97,0,0,0,0,224,255,255,255,239,65,135,95,39,0,96,97,0,0,75,95,95,0,0,94,95,0,119,0,11,0,75,97,52,0,77,97,97,0,64,97,52,97,61,96,0,0,0,0,128,79,66,97,97,96,135,95,40,0,97,0,0,0,75,95,95,0,0,94,95,0,0,93,94,0,119,0,3,0,1,94,0,0,0,93,94,0,0,54,93,0,0,55,5,0,0,56,55,0,85,56,53,0,25,57,55,4,0,58,57,0,85,58,54,0,119,0,24,0,0,10,39,0,19,93,10,92,0,11,93,0,26,4,11,1,35,89,4,2,121,89,10,0,0,12,6,0,0,13,17,0,0,14,28,0,1,95,0,0,1,94,0,0,134,93,0,0,244,142,5,0,12,13,14,95,94,0,0,0,0,15,5,0,0,16,15,0,1,93,0,0,85,16,93,0,25,18,15,4,0,19,18,0,1,93,0,0,85,19,93,0,0,79,5,0,0,80,79,0,82,81,80,0,25,82,79,4,0,84,82,0,82,85,84,0,129,85,0,0,137,91,0,0,139,81,0,0,140,1,105,0,0,0,0,0,2,102,0,0,47,16,0,0,1,100,0,0,136,103,0,0,0,101,103,0,136,103,0,0,25,103,103,48,137,103,0,0,130,103,0,0,136,104,0,0,49,103,103,104,232,199,3,0,135,103,0,0,25,96,101,20,0,1,0,0,1,103,0,0,134,2,0,0,148,94,6,0,103,0,0,0,0,95,2,0,0,13,95,0,0,24,1,0,134,103,0,0,84,15,6,0,13,24,0,0,0,35,95,0,25,46,35,4,82,57,46,0,0,99,57,0,0,68,99,0,134,79,0,0,172,99,5,0,68,102,0,0,0,92,79,0,1,103,4,0,1,104,1,0,134,89,0,0,224,168,5,0,103,104,0,0,0,91,89,0,0,3,92,0,1,104,0,0,14,4,3,104,120,4,2,0,119,0,28,0,0,5,92,0,0,6,92,0,135,7,4,0,6,0,0,0,134,8,0,0,240,9,6,0,5,7,0,0,85,96,8,0,82,9,96,0,82,10,9,0,33,11,10,0,121,11,6,0,0,12,91,0,134,104,0,0,88,242,4,0,12,96,0,0,119,0,5,0,82,14,96,0,134,104,0,0,148,105,6,0,14,0,0,0,1,104,0,0,134,15,0,0,172,99,5,0,104,102,0,0,0,92,15,0,119,0,225,255,1,93,0,0,0,16,91,0,82,17,16,0,26,18,17,1,0,94,18,0,0,19,94,0,1,104,0,0,17,20,104,19,120,20,2,0,119,0,49,0,0,21,94,0,0,22,91,0,25,23,22,12,82,25,23,0,41,104,21,2,3,26,25,104,82,27,26,0,0,97,27,0,0,28,97,0,25,29,28,4,82,30,29,0,1,104,49,16,134,31,0,0,208,147,5,0,30,104,0,0,32,32,31,0,0,33,93,0,121,32,13,0,25,34,33,1,0,93,34,0,0,36,91,0,0,37,94,0,134,104,0,0,160,240,3,0,36,37,0,0,0,38,97,0,134,104,0,0,148,105,6,0,38,0,0,0,119,0,15,0,33,39,33,0,121,39,13,0,0,40,93,0,26,41,40,1,0,93,41,0,0,42,91,0,0,43,94,0,134,104,0,0,160,240,3,0,42,43,0,0,0,44,97,0,134,104,0,0,148,105,6,0,44,0,0,0,0,45,94,0,26,47,45,1,0,94,47,0,119,0,204,255,0,48,1,0,1,104,0,0,85,48,104,0,1,94,0,0,0,49,94,0,0,50,91,0,82,51,50,0,16,52,49,51,120,52,2,0,119,0,29,0,0,53,94,0,0,54,91,0,25,55,54,12,82,56,55,0,41,104,53,2,3,58,56,104,82,59,58,0,0,98,59,0,0,60,1,0,0,61,98,0,134,104,0,0,84,15,6,0,60,61,0,0,0,62,94,0,0,63,91,0,82,64,63,0,26,65,64,1,16,66,62,65,121,66,6,0,0,67,1,0,1,103,1,0,134,104,0,0,128,39,6,0,67,102,103,0,0,69,94,0,25,70,69,1,0,94,70,0,119,0,223,255,0,71,91,0,25,72,71,12,82,73,72,0,0,90,73,0,0,74,90,0,1,104,0,0,14,75,74,104,120,75,3,0,1,100,23,0,119,0,19,0,0,76,90,0,0,77,76,0,0,78,91,0,25,80,78,8,82,81,80,0,16,82,77,81,120,82,3,0,1,100,23,0,119,0,10,0,0,83,90,0,82,84,83,0,134,104,0,0,148,105,6,0,84,0,0,0,0,85,90,0,25,86,85,4,0,90,86,0,119,0,233,255,32,104,100,23,121,104,11,0,0,87,91,0,134,104,0,0,180,1,6,0,87,0,0,0,0,88,95,0,134,104,0,0,148,105,6,0,88,0,0,0,137,101,0,0,139,0,0,0,139,0,0,0,140,2,76,0,0,0,0,0,2,72,0,0,255,0,0,0,1,70,0,0,136,73,0,0,0,71,73,0,136,73,0,0,25,73,73,32,137,73,0,0,130,73,0,0,136,74,0,0,49,73,73,74,52,203,3,0,135,73,0,0,0,2,0,0,0,3,1,0,0,14,2,0,82,25,14,0,0,69,25,0,0,36,3,0,82,47,36,0,25,58,47,12,82,62,58,0,0,66,62,0,1,68,0,0,0,63,66,0,1,73,0,0,14,64,63,73,120,64,3,0,1,70,18,0,119,0,130,0,0,4,66,0,0,5,4,0,0,6,3,0,82,7,6,0,25,8,7,8,82,9,8,0,16,10,5,9,120,10,3,0,1,70,18,0,119,0,120,0,0,11,2,0,25,12,11,4,82,13,12,0,0,15,68,0,0,16,69,0,27,73,15,6,3,17,16,73,25,18,17,2,80,19,18,0,41,73,19,16,42,73,73,16,0,20,73,0,3,21,13,20,0,67,21,0,0,22,66,0,82,23,22,0,0,65,23,0,0,24,65,0,34,26,24,0,120,26,93,0,0,27,68,0,0,28,69,0,27,73,27,6,3,29,28,73,25,30,29,1,78,31,30,0,19,73,31,72,0,32,73,0,1,73,0,0,1,75,11,0,138,32,73,75,76,204,3,0,100,204,3,0,124,204,3,0,148,204,3,0,172,204,3,0,196,204,3,0,220,204,3,0,244,204,3,0,12,205,3,0,40,205,3,0,68,205,3,0,119,0,70,0,0,33,65,0,0,34,67,0,1,74,1,0,135,73,41,0,33,74,34,0,119,0,64,0,0,35,65,0,0,37,67,0,1,74,1,0,135,73,42,0,35,74,37,0,119,0,58,0,0,38,65,0,0,39,67,0,1,74,1,0,135,73,43,0,38,74,39,0,119,0,52,0,0,40,65,0,0,41,67,0,1,74,1,0,135,73,44,0,40,74,41,0,119,0,46,0,0,42,65,0,0,43,67,0,1,74,1,0,135,73,45,0,42,74,43,0,119,0,40,0,0,44,65,0,0,45,67,0,1,74,1,0,135,73,46,0,44,74,45,0,119,0,34,0,0,46,65,0,0,48,67,0,1,74,1,0,135,73,47,0,46,74,48,0,119,0,28,0,0,49,65,0,0,50,67,0,1,74,1,0,135,73,48,0,49,74,50,0,119,0,22,0,0,51,65,0,0,52,67,0,1,74,1,0,1,75,0,0,135,73,49,0,51,74,75,52,119,0,15,0,0,53,65,0,0,54,67,0,1,75,1,0,1,74,0,0,135,73,50,0,53,75,74,54,119,0,8,0,0,55,65,0,0,56,67,0,1,74,1,0,1,75,0,0,135,73,51,0,55,74,75,56,119,0,1,0,0,57,66,0,25,59,57,4,0,66,59,0,0,60,68,0,25,61,60,1,0,68,61,0,119,0,122,255,32,73,70,18,121,73,3,0,137,71,0,0,139,0,0,0,139,0,0,0,140,3,28,0,0,0,0,0,1,24,0,0,136,26,0,0,0,25,26,0,127,26,0,0,114,26,1,0,127,26,0,0,102,27,1,1,107,26,1,27,127,27,0,0,102,26,1,2,107,27,2,26,127,26,0,0,102,27,1,3,107,26,3,27,127,27,0,0,88,3,27,0,127,27,0,0,114,27,2,0,127,27,0,0,102,26,2,1,107,27,1,26,127,26,0,0,102,27,2,2,107,26,2,27,127,27,0,0,102,26,2,3,107,27,3,26,127,26,0,0,88,4,26,0,64,15,3,4,127,26,0,0,89,26,15,0,127,26,0,0,114,0,26,0,127,27,0,0,102,27,27,1,107,0,1,27,127,26,0,0,102,26,26,2,107,0,2,26,127,27,0,0,102,27,27,3,107,0,3,27,25,17,0,4,25,18,1,4,127,27,0,0,114,27,18,0,127,27,0,0,102,26,18,1,107,27,1,26,127,26,0,0,102,27,18,2,107,26,2,27,127,27,0,0,102,26,18,3,107,27,3,26,127,26,0,0,88,19,26,0,25,20,2,4,127,26,0,0,114,26,20,0,127,26,0,0,102,27,20,1,107,26,1,27,127,27,0,0,102,26,20,2,107,27,2,26,127,26,0,0,102,27,20,3,107,26,3,27,127,27,0,0,88,21,27,0,64,22,19,21,127,27,0,0,89,27,22,0,127,27,0,0,114,17,27,0,127,26,0,0,102,26,26,1,107,17,1,26,127,27,0,0,102,27,27,2,107,17,2,27,127,26,0,0,102,26,26,3,107,17,3,26,25,23,0,8,25,5,1,8,127,26,0,0,114,26,5,0,127,26,0,0,102,27,5,1,107,26,1,27,127,27,0,0,102,26,5,2,107,27,2,26,127,26,0,0,102,27,5,3,107,26,3,27,127,27,0,0,88,6,27,0,25,7,2,8,127,27,0,0,114,27,7,0,127,27,0,0,102,26,7,1,107,27,1,26,127,26,0,0,102,27,7,2,107,26,2,27,127,27,0,0,102,26,7,3,107,27,3,26,127,26,0,0,88,8,26,0,64,9,6,8,127,26,0,0,89,26,9,0,127,26,0,0,114,23,26,0,127,27,0,0,102,27,27,1,107,23,1,27,127,26,0,0,102,26,26,2,107,23,2,26,127,27,0,0,102,27,27,3,107,23,3,27,25,10,0,12,25,11,1,12,127,27,0,0,114,27,11,0,127,27,0,0,102,26,11,1,107,27,1,26,127,26,0,0,102,27,11,2,107,26,2,27,127,27,0,0,102,26,11,3,107,27,3,26,127,26,0,0,88,12,26,0,25,13,2,12,127,26,0,0,114,26,13,0,127,26,0,0,102,27,13,1,107,26,1,27,127,27,0,0,102,26,13,2,107,27,2,26,127,26,0,0,102,27,13,3,107,26,3,27,127,27,0,0,88,14,27,0,64,16,12,14,127,27,0,0,89,27,16,0,127,27,0,0,114,10,27,0,127,26,0,0,102,26,26,1,107,10,1,26,127,27,0,0,102,27,27,2,107,10,2,27,127,26,0,0,102,26,26,3,107,10,3,26,139,0,0,0,140,3,28,0,0,0,0,0,1,24,0,0,136,26,0,0,0,25,26,0,127,26,0,0,114,26,1,0,127,26,0,0,102,27,1,1,107,26,1,27,127,27,0,0,102,26,1,2,107,27,2,26,127,26,0,0,102,27,1,3,107,26,3,27,127,27,0,0,88,3,27,0,127,27,0,0,114,27,2,0,127,27,0,0,102,26,2,1,107,27,1,26,127,26,0,0,102,27,2,2,107,26,2,27,127,27,0,0,102,26,2,3,107,27,3,26,127,26,0,0,88,4,26,0,64,15,3,4,127,26,0,0,89,26,15,0,127,26,0,0,114,0,26,0,127,27,0,0,102,27,27,1,107,0,1,27,127,26,0,0,102,26,26,2,107,0,2,26,127,27,0,0,102,27,27,3,107,0,3,27,25,17,0,4,25,18,1,4,127,27,0,0,114,27,18,0,127,27,0,0,102,26,18,1,107,27,1,26,127,26,0,0,102,27,18,2,107,26,2,27,127,27,0,0,102,26,18,3,107,27,3,26,127,26,0,0,88,19,26,0,25,20,2,4,127,26,0,0,114,26,20,0,127,26,0,0,102,27,20,1,107,26,1,27,127,27,0,0,102,26,20,2,107,27,2,26,127,26,0,0,102,27,20,3,107,26,3,27,127,27,0,0,88,21,27,0,64,22,19,21,127,27,0,0,89,27,22,0,127,27,0,0,114,17,27,0,127,26,0,0,102,26,26,1,107,17,1,26,127,27,0,0,102,27,27,2,107,17,2,27,127,26,0,0,102,26,26,3,107,17,3,26,25,23,0,8,25,5,1,8,127,26,0,0,114,26,5,0,127,26,0,0,102,27,5,1,107,26,1,27,127,27,0,0,102,26,5,2,107,27,2,26,127,26,0,0,102,27,5,3,107,26,3,27,127,27,0,0,88,6,27,0,25,7,2,8,127,27,0,0,114,27,7,0,127,27,0,0,102,26,7,1,107,27,1,26,127,26,0,0,102,27,7,2,107,26,2,27,127,27,0,0,102,26,7,3,107,27,3,26,127,26,0,0,88,8,26,0,64,9,6,8,127,26,0,0,89,26,9,0,127,26,0,0,114,23,26,0,127,27,0,0,102,27,27,1,107,23,1,27,127,26,0,0,102,26,26,2,107,23,2,26,127,27,0,0,102,27,27,3,107,23,3,27,25,10,0,12,25,11,1,12,127,27,0,0,114,27,11,0,127,27,0,0,102,26,11,1,107,27,1,26,127,26,0,0,102,27,11,2,107,26,2,27,127,27,0,0,102,26,11,3,107,27,3,26,127,26,0,0,88,12,26,0,25,13,2,12,127,26,0,0,114,26,13,0,127,26,0,0,102,27,13,1,107,26,1,27,127,27,0,0,102,26,13,2,107,27,2,26,127,26,0,0,102,27,13,3,107,26,3,27,127,27,0,0,88,14,27,0,64,16,12,14,127,27,0,0,89,27,16,0,127,27,0,0,114,10,27,0,127,26,0,0,102,26,26,1,107,10,1,26,127,27,0,0,102,27,27,2,107,10,2,27,127,26,0,0,102,26,26,3,107,10,3,26,139,0,0,0,140,3,28,0,0,0,0,0,1,24,0,0,136,26,0,0,0,25,26,0,127,26,0,0,114,26,1,0,127,26,0,0,102,27,1,1,107,26,1,27,127,27,0,0,102,26,1,2,107,27,2,26,127,26,0,0,102,27,1,3,107,26,3,27,127,27,0,0,88,3,27,0,127,27,0,0,114,27,2,0,127,27,0,0,102,26,2,1,107,27,1,26,127,26,0,0,102,27,2,2,107,26,2,27,127,27,0,0,102,26,2,3,107,27,3,26,127,26,0,0,88,4,26,0,63,15,3,4,127,26,0,0,89,26,15,0,127,26,0,0,114,0,26,0,127,27,0,0,102,27,27,1,107,0,1,27,127,26,0,0,102,26,26,2,107,0,2,26,127,27,0,0,102,27,27,3,107,0,3,27,25,17,0,4,25,18,1,4,127,27,0,0,114,27,18,0,127,27,0,0,102,26,18,1,107,27,1,26,127,26,0,0,102,27,18,2,107,26,2,27,127,27,0,0,102,26,18,3,107,27,3,26,127,26,0,0,88,19,26,0,25,20,2,4,127,26,0,0,114,26,20,0,127,26,0,0,102,27,20,1,107,26,1,27,127,27,0,0,102,26,20,2,107,27,2,26,127,26,0,0,102,27,20,3,107,26,3,27,127,27,0,0,88,21,27,0,63,22,19,21,127,27,0,0,89,27,22,0,127,27,0,0,114,17,27,0,127,26,0,0,102,26,26,1,107,17,1,26,127,27,0,0,102,27,27,2,107,17,2,27,127,26,0,0,102,26,26,3,107,17,3,26,25,23,0,8,25,5,1,8,127,26,0,0,114,26,5,0,127,26,0,0,102,27,5,1,107,26,1,27,127,27,0,0,102,26,5,2,107,27,2,26,127,26,0,0,102,27,5,3,107,26,3,27,127,27,0,0,88,6,27,0,25,7,2,8,127,27,0,0,114,27,7,0,127,27,0,0,102,26,7,1,107,27,1,26,127,26,0,0,102,27,7,2,107,26,2,27,127,27,0,0,102,26,7,3,107,27,3,26,127,26,0,0,88,8,26,0,63,9,6,8,127,26,0,0,89,26,9,0,127,26,0,0,114,23,26,0,127,27,0,0,102,27,27,1,107,23,1,27,127,26,0,0,102,26,26,2,107,23,2,26,127,27,0,0,102,27,27,3,107,23,3,27,25,10,0,12,25,11,1,12,127,27,0,0,114,27,11,0,127,27,0,0,102,26,11,1,107,27,1,26,127,26,0,0,102,27,11,2,107,26,2,27,127,27,0,0,102,26,11,3,107,27,3,26,127,26,0,0,88,12,26,0,25,13,2,12,127,26,0,0,114,26,13,0,127,26,0,0,102,27,13,1,107,26,1,27,127,27,0,0,102,26,13,2,107,27,2,26,127,26,0,0,102,27,13,3,107,26,3,27,127,27,0,0,88,14,27,0,63,16,12,14,127,27,0,0,89,27,16,0,127,27,0,0,114,10,27,0,127,26,0,0,102,26,26,1,107,10,1,26,127,27,0,0,102,27,27,2,107,10,2,27,127,26,0,0,102,26,26,3,107,10,3,26,139,0,0,0,140,3,28,0,0,0,0,0,1,24,0,0,136,26,0,0,0,25,26,0,127,26,0,0,114,26,1,0,127,26,0,0,102,27,1,1,107,26,1,27,127,27,0,0,102,26,1,2,107,27,2,26,127,26,0,0,102,27,1,3,107,26,3,27,127,27,0,0,88,3,27,0,127,27,0,0,114,27,2,0,127,27,0,0,102,26,2,1,107,27,1,26,127,26,0,0,102,27,2,2,107,26,2,27,127,27,0,0,102,26,2,3,107,27,3,26,127,26,0,0,88,4,26,0,64,15,3,4,127,26,0,0,89,26,15,0,127,26,0,0,114,0,26,0,127,27,0,0,102,27,27,1,107,0,1,27,127,26,0,0,102,26,26,2,107,0,2,26,127,27,0,0,102,27,27,3,107,0,3,27,25,17,0,4,25,18,1,4,127,27,0,0,114,27,18,0,127,27,0,0,102,26,18,1,107,27,1,26,127,26,0,0,102,27,18,2,107,26,2,27,127,27,0,0,102,26,18,3,107,27,3,26,127,26,0,0,88,19,26,0,25,20,2,4,127,26,0,0,114,26,20,0,127,26,0,0,102,27,20,1,107,26,1,27,127,27,0,0,102,26,20,2,107,27,2,26,127,26,0,0,102,27,20,3,107,26,3,27,127,27,0,0,88,21,27,0,64,22,19,21,127,27,0,0,89,27,22,0,127,27,0,0,114,17,27,0,127,26,0,0,102,26,26,1,107,17,1,26,127,27,0,0,102,27,27,2,107,17,2,27,127,26,0,0,102,26,26,3,107,17,3,26,25,23,0,8,25,5,1,8,127,26,0,0,114,26,5,0,127,26,0,0,102,27,5,1,107,26,1,27,127,27,0,0,102,26,5,2,107,27,2,26,127,26,0,0,102,27,5,3,107,26,3,27,127,27,0,0,88,6,27,0,25,7,2,8,127,27,0,0,114,27,7,0,127,27,0,0,102,26,7,1,107,27,1,26,127,26,0,0,102,27,7,2,107,26,2,27,127,27,0,0,102,26,7,3,107,27,3,26,127,26,0,0,88,8,26,0,64,9,6,8,127,26,0,0,89,26,9,0,127,26,0,0,114,23,26,0,127,27,0,0,102,27,27,1,107,23,1,27,127,26,0,0,102,26,26,2,107,23,2,26,127,27,0,0,102,27,27,3,107,23,3,27,25,10,0,12,25,11,1,12,127,27,0,0,114,27,11,0,127,27,0,0,102,26,11,1,107,27,1,26,127,26,0,0,102,27,11,2,107,26,2,27,127,27,0,0,102,26,11,3,107,27,3,26,127,26,0,0,88,12,26,0,25,13,2,12,127,26,0,0,114,26,13,0,127,26,0,0,102,27,13,1,107,26,1,27,127,27,0,0,102,26,13,2,107,27,2,26,127,26,0,0,102,27,13,3,107,26,3,27,127,27,0,0,88,14,27,0,64,16,12,14,127,27,0,0,89,27,16,0,127,27,0,0,114,10,27,0,127,26,0,0,102,26,26,1,107,10,1,26,127,27,0,0,102,27,27,2,107,10,2,27,127,26,0,0,102,26,26,3,107,10,3,26,139,0,0,0,140,3,28,0,0,0,0,0,1,24,0,0,136,26,0,0,0,25,26,0,127,26,0,0,114,26,1,0,127,26,0,0,102,27,1,1,107,26,1,27,127,27,0,0,102,26,1,2,107,27,2,26,127,26,0,0,102,27,1,3,107,26,3,27,127,27,0,0,88,3,27,0,127,27,0,0,114,27,2,0,127,27,0,0,102,26,2,1,107,27,1,26,127,26,0,0,102,27,2,2,107,26,2,27,127,27,0,0,102,26,2,3,107,27,3,26,127,26,0,0,88,4,26,0,63,15,3,4,127,26,0,0,89,26,15,0,127,26,0,0,114,0,26,0,127,27,0,0,102,27,27,1,107,0,1,27,127,26,0,0,102,26,26,2,107,0,2,26,127,27,0,0,102,27,27,3,107,0,3,27,25,17,0,4,25,18,1,4,127,27,0,0,114,27,18,0,127,27,0,0,102,26,18,1,107,27,1,26,127,26,0,0,102,27,18,2,107,26,2,27,127,27,0,0,102,26,18,3,107,27,3,26,127,26,0,0,88,19,26,0,25,20,2,4,127,26,0,0,114,26,20,0,127,26,0,0,102,27,20,1,107,26,1,27,127,27,0,0,102,26,20,2,107,27,2,26,127,26,0,0,102,27,20,3,107,26,3,27,127,27,0,0,88,21,27,0,63,22,19,21,127,27,0,0,89,27,22,0,127,27,0,0,114,17,27,0,127,26,0,0,102,26,26,1,107,17,1,26,127,27,0,0,102,27,27,2,107,17,2,27,127,26,0,0,102,26,26,3,107,17,3,26,25,23,0,8,25,5,1,8,127,26,0,0,114,26,5,0,127,26,0,0,102,27,5,1,107,26,1,27,127,27,0,0,102,26,5,2,107,27,2,26,127,26,0,0,102,27,5,3,107,26,3,27,127,27,0,0,88,6,27,0,25,7,2,8,127,27,0,0,114,27,7,0,127,27,0,0,102,26,7,1,107,27,1,26,127,26,0,0,102,27,7,2,107,26,2,27,127,27,0,0,102,26,7,3,107,27,3,26,127,26,0,0,88,8,26,0,63,9,6,8,127,26,0,0,89,26,9,0,127,26,0,0,114,23,26,0,127,27,0,0,102,27,27,1,107,23,1,27,127,26,0,0,102,26,26,2,107,23,2,26,127,27,0,0,102,27,27,3,107,23,3,27,25,10,0,12,25,11,1,12,127,27,0,0,114,27,11,0,127,27,0,0,102,26,11,1,107,27,1,26,127,26,0,0,102,27,11,2,107,26,2,27,127,27,0,0,102,26,11,3,107,27,3,26,127,26,0,0,88,12,26,0,25,13,2,12,127,26,0,0,114,26,13,0,127,26,0,0,102,27,13,1,107,26,1,27,127,27,0,0,102,26,13,2,107,27,2,26,127,26,0,0,102,27,13,3,107,26,3,27,127,27,0,0,88,14,27,0,63,16,12,14,127,27,0,0,89,27,16,0,127,27,0,0,114,10,27,0,127,26,0,0,102,26,26,1,107,10,1,26,127,27,0,0,102,27,27,2,107,10,2,27,127,26,0,0,102,26,26,3,107,10,3,26,139,0,0,0,140,5,100,0,0,0,0,0,1,96,0,0,136,98,0,0,0,97,98,0,136,98,0,0,25,98,98,64,137,98,0,0,130,98,0,0,136,99,0,0,49,98,98,99,112,219,3,0,135,98,0,0,0,5,0,0,0,6,1,0,0,17,2,0,0,28,3,0,0,39,4,0,1,98,4,0,1,99,1,0,134,50,0,0,224,168,5,0,98,99,0,0,0,93,50,0,0,61,5,0,0,72,6,0,0,83,17,0,0,87,93,0,134,7,0,0,40,146,3,0,61,72,83,87,0,92,7,0,0,8,5,0,82,9,8,0,0,10,92,0,0,11,17,0,5,12,10,11,4,13,9,12,0,14,92,0,0,15,39,0,5,16,14,15,3,18,13,16,0,94,18,0,1,99,0,0,134,19,0,0,20,222,5,0,99,0,0,0,0,88,19,0,0,20,88,0,0,21,94,0,134,99,0,0,72,251,5,0,20,21,0,0,1,91,0,0,1,90,0,0,0,22,90,0,0,23,93,0,82,24,23,0,16,25,22,24,120,25,2,0,119,0,47,0,0,26,90,0,0,27,93,0,25,29,27,12,82,30,29,0,41,99,26,2,3,31,30,99,82,32,31,0,0,95,32,0,0,33,90,0,25,34,33,1,0,35,93,0,25,36,35,12,82,37,36,0,41,99,34,2,3,38,37,99,82,40,38,0,0,89,40,0,0,41,95,0,0,42,91,0,16,43,42,41,121,43,13,0,0,44,88,0,0,45,5,0,25,46,45,4,82,47,46,0,0,48,91,0,3,49,47,48,0,51,95,0,0,52,91,0,4,53,51,52,134,99,0,0,76,111,5,0,44,49,53,0,0,54,88,0,0,55,28,0,0,56,39,0,134,99,0,0,76,111,5,0,54,55,56,0,0,57,89,0,25,58,57,1,0,91,58,0,0,59,90,0,25,60,59,2,0,90,60,0,119,0,205,255,0,62,91,0,0,63,5,0,82,64,63,0,16,65,62,64,120,65,23,0,0,77,93,0,134,99,0,0,180,1,6,0,77,0,0,0,0,78,5,0,1,99,0,0,85,78,99,0,0,79,5,0,0,80,88,0,25,81,80,4,82,82,81,0,0,84,88,0,82,85,84,0,134,99,0,0,76,111,5,0,79,82,85,0,0,86,88,0,134,99,0,0,4,84,6,0,86,0,0,0,137,97,0,0,139,0,0,0,0,66,88,0,0,67,5,0,25,68,67,4,82,69,68,0,0,70,91,0,3,71,69,70,0,73,5,0,82,74,73,0,0,75,91,0,4,76,74,75,134,99,0,0,76,111,5,0,66,71,76,0,0,77,93,0,134,99,0,0,180,1,6,0,77,0,0,0,0,78,5,0,1,99,0,0,85,78,99,0,0,79,5,0,0,80,88,0,25,81,80,4,82,82,81,0,0,84,88,0,82,85,84,0,134,99,0,0,76,111,5,0,79,82,85,0,0,86,88,0,134,99,0,0,4,84,6,0,86,0,0,0,137,97,0,0,139,0,0,0,140,3,66,0,0,0,0,0,2,61,0,0,128,128,128,128,2,62,0,0,255,254,254,254,2,63,0,0,255,0,0,0,1,59,0,0,136,64,0,0,0,60,64,0,19,64,1,63,0,12,64,0,0,13,0,0,38,64,13,3,0,24,64,0,33,35,24,0,33,43,2,0,19,64,43,35,0,50,64,0,121,50,34,0,19,64,1,63,0,44,64,0,0,5,2,0,0,53,0,0,78,45,53,0,41,64,45,24,42,64,64,24,41,65,44,24,42,65,65,24,13,46,64,65,121,46,5,0,0,4,5,0,0,52,53,0,1,59,6,0,119,0,23,0,25,47,53,1,26,48,5,1,0,14,47,0,38,65,14,3,0,15,65,0,33,16,15,0,33,17,48,0,19,65,17,16,0,49,65,0,121,49,4,0,0,5,48,0,0,53,47,0,119,0,233,255,0,3,48,0,0,11,17,0,0,51,47,0,1,59,5,0,119,0,5,0,0,3,2,0,0,11,43,0,0,51,0,0,1,59,5,0,32,65,59,5,121,65,8,0,121,11,5,0,0,4,3,0,0,52,51,0,1,59,6,0,119,0,3,0,1,10,0,0,0,55,51,0,32,65,59,6,121,65,85,0,78,18,52,0,19,65,1,63,0,19,65,0,41,65,18,24,42,65,65,24,41,64,19,24,42,64,64,24,13,20,65,64,121,20,4,0,0,10,4,0,0,55,52,0,119,0,73,0,2,64,0,0,1,1,1,1,5,21,12,64,1,64,3,0,16,22,64,4,121,22,35,0,0,7,4,0,0,57,52,0,82,23,57,0,21,64,23,21,0,25,64,0,2,64,0,0,1,1,1,1,4,26,25,64,19,64,25,61,0,27,64,0,21,64,27,61,0,28,64,0,19,64,28,26,0,29,64,0,32,30,29,0,120,30,4,0,0,8,7,0,0,58,57,0,119,0,13,0,25,31,57,4,26,32,7,4,1,64,3,0,16,33,64,32,121,33,4,0,0,7,32,0,0,57,31,0,119,0,232,255,0,6,32,0,0,56,31,0,1,59,11,0,119,0,7,0,0,9,8,0,0,54,58,0,119,0,4,0,0,6,4,0,0,56,52,0,1,59,11,0,32,64,59,11,121,64,8,0,32,34,6,0,121,34,4,0,1,10,0,0,0,55,56,0,119,0,23,0,0,9,6,0,0,54,56,0,78,36,54,0,41,64,36,24,42,64,64,24,41,65,19,24,42,65,65,24,13,37,64,65,121,37,4,0,0,10,9,0,0,55,54,0,119,0,11,0,25,38,54,1,26,39,9,1,32,40,39,0,121,40,4,0,1,10,0,0,0,55,38,0,119,0,4,0,0,9,39,0,0,54,38,0,119,0,237,255,33,41,10,0,1,65,0,0,125,42,41,55,65,0,0,0,139,42,0,0,140,2,54,0,0,0,0,0,1,48,0,0,136,52,0,0,0,49,52,0,136,52,0,0,1,53,144,0,3,52,52,53,137,52,0,0,130,52,0,0,136,53,0,0,49,52,52,53,144,224,3,0,135,52,0,0,25,6,49,72,25,5,49,56,25,4,49,40,25,3,49,24,25,2,49,8,25,19,49,120,25,30,49,104,25,41,49,88,0,7,0,0,58,8,1,0,0,42,7,0,25,43,42,28,82,44,43,0,0,45,7,0,25,46,45,28,82,9,46,0,0,10,7,0,25,11,10,32,25,12,11,16,82,52,9,0,85,2,52,0,106,53,9,4,109,2,4,53,106,52,9,8,109,2,8,52,106,53,9,12,109,2,12,53,82,53,12,0,85,3,53,0,106,52,12,4,109,3,4,52,106,53,12,8,109,3,8,53,106,52,12,12,109,3,12,52,134,52,0,0,144,205,3,0,19,2,3,0,0,47,44,0,0,50,19,0,25,51,47,16,78,52,50,0,83,47,52,0,25,47,47,1,25,50,50,1,54,52,47,51,52,225,3,0,0,13,7,0,25,14,13,32,25,15,14,16,0,16,7,0,25,17,16,32,58,18,8,0,82,52,17,0,85,4,52,0,106,53,17,4,109,4,4,53,106,52,17,8,109,4,8,52,106,53,17,12,109,4,12,53,134,53,0,0,68,34,4,0,30,4,18,0,0,47,15,0,0,50,30,0,25,51,47,16,78,53,50,0,83,47,53,0,25,47,47,1,25,50,50,1,54,53,47,51,156,225,3,0,0,20,7,0,25,21,20,28,82,22,21,0,0,23,7,0,25,24,23,28,82,25,24,0,0,26,7,0,25,27,26,32,25,28,27,16,82,53,25,0,85,5,53,0,106,52,25,4,109,5,4,52,106,53,25,8,109,5,8,53,106,52,25,12,109,5,12,52,82,52,28,0,85,6,52,0,106,53,28,4,109,6,4,53,106,52,28,8,109,6,8,52,106,53,28,12,109,6,12,53,134,53,0,0,8,211,3,0,41,5,6,0,0,47,22,0,0,50,41,0,25,51,47,16,78,53,50,0,83,47,53,0,25,47,47,1,25,50,50,1,54,53,47,51,48,226,3,0,0,29,7,0,25,31,29,32,25,32,31,36,88,33,32,0,58,34,33,0,62,53,0,0,187,189,215,217,223,124,27,62,72,35,34,53,120,35,3,0,137,49,0,0,139,0,0,0,0,36,7,0,25,37,36,80,1,53,1,0,83,37,53,0,0,38,7,0,25,39,38,32,25,40,39,36,59,53,0,0,89,40,53,0,137,49,0,0,139,0,0,0,140,2,54,0,0,0,0,0,1,48,0,0,136,52,0,0,0,49,52,0,136,52,0,0,1,53,144,0,3,52,52,53,137,52,0,0,130,52,0,0,136,53,0,0,49,52,52,53,220,226,3,0,135,52,0,0,25,6,49,72,25,5,49,56,25,4,49,40,25,3,49,24,25,2,49,8,25,19,49,120,25,30,49,104,25,41,49,88,0,7,0,0,58,8,1,0,0,42,7,0,25,43,42,28,82,44,43,0,0,45,7,0,25,46,45,28,82,9,46,0,0,10,7,0,25,11,10,32,25,12,11,16,82,52,9,0,85,2,52,0,106,53,9,4,109,2,4,53,106,52,9,8,109,2,8,52,106,53,9,12,109,2,12,53,82,53,12,0,85,3,53,0,106,52,12,4,109,3,4,52,106,53,12,8,109,3,8,53,106,52,12,12,109,3,12,52,134,52,0,0,76,208,3,0,19,2,3,0,0,47,44,0,0,50,19,0,25,51,47,16,78,52,50,0,83,47,52,0,25,47,47,1,25,50,50,1,54,52,47,51,128,227,3,0,0,13,7,0,25,14,13,32,25,15,14,16,0,16,7,0,25,17,16,32,58,18,8,0,82,52,17,0,85,4,52,0,106,53,17,4,109,4,4,53,106,52,17,8,109,4,8,52,106,53,17,12,109,4,12,53,134,53,0,0,92,36,4,0,30,4,18,0,0,47,15,0,0,50,30,0,25,51,47,16,78,53,50,0,83,47,53,0,25,47,47,1,25,50,50,1,54,53,47,51,232,227,3,0,0,20,7,0,25,21,20,28,82,22,21,0,0,23,7,0,25,24,23,28,82,25,24,0,0,26,7,0,25,27,26,32,25,28,27,16,82,53,25,0,85,5,53,0,106,52,25,4,109,5,4,52,106,53,25,8,109,5,8,53,106,52,25,12,109,5,12,52,82,52,28,0,85,6,52,0,106,53,28,4,109,6,4,53,106,52,28,8,109,6,8,52,106,53,28,12,109,6,12,53,134,53,0,0,128,216,3,0,41,5,6,0,0,47,22,0,0,50,41,0,25,51,47,16,78,53,50,0,83,47,53,0,25,47,47,1,25,50,50,1,54,53,47,51,124,228,3,0,0,29,7,0,25,31,29,32,25,32,31,36,88,33,32,0,58,34,33,0,62,53,0,0,187,189,215,217,223,124,27,62,72,35,34,53,120,35,3,0,137,49,0,0,139,0,0,0,0,36,7,0,25,37,36,80,1,53,1,0,83,37,53,0,0,38,7,0,25,39,38,32,25,40,39,36,59,53,0,0,89,40,53,0,137,49,0,0,139,0,0,0,140,0,88,0,0,0,0,0,1,83,0,0,136,85,0,0,0,84,85,0,136,85,0,0,25,85,85,16,137,85,0,0,130,85,0,0,136,86,0,0,49,85,85,86,36,229,3,0,135,85,0,0,134,85,0,0,44,129,5,0,134,0,0,0,100,174,5,0,0,80,0,0,0,1,80,0,25,12,1,20,1,85,0,0,83,12,85,0,0,23,80,0,25,34,23,16,82,45,34,0,1,86,177,13,1,87,15,0,134,85,0,0,128,39,6,0,45,86,87,0,1,85,44,0,82,56,85,0,1,85,193,13,1,87,9,0,1,86,2,0,134,67,0,0,28,203,4,0,56,85,87,86,0,82,67,0,0,78,80,0,25,79,78,12,82,2,79,0,0,3,82,0,25,4,3,4,82,5,4,0,0,6,82,0,82,7,6,0,1,87,193,13,1,85,9,0,134,86,0,0,104,199,5,0,2,87,85,5,7,0,0,0,1,86,44,0,82,8,86,0,1,86,203,13,1,85,6,0,1,87,2,0,134,9,0,0,28,203,4,0,8,86,85,87,0,82,9,0,0,10,80,0,25,11,10,12,82,13,11,0,0,14,82,0,25,15,14,4,82,16,15,0,0,17,82,0,82,18,17,0,1,85,203,13,1,86,6,0,134,87,0,0,104,199,5,0,13,85,86,16,18,0,0,0,1,87,44,0,82,19,87,0,1,87,210,13,1,86,12,0,1,85,2,0,134,20,0,0,28,203,4,0,19,87,86,85,0,82,20,0,0,21,80,0,25,22,21,12,82,24,22,0,0,25,82,0,25,26,25,4,82,27,26,0,0,28,82,0,82,29,28,0,1,86,210,13,1,87,12,0,134,85,0,0,104,199,5,0,24,86,87,27,29,0,0,0,1,85,44,0,82,30,85,0,1,85,223,13,1,87,7,0,1,86,2,0,134,31,0,0,28,203,4,0,30,85,87,86,0,82,31,0,0,32,80,0,25,33,32,12,82,35,33,0,0,36,82,0,25,37,36,4,82,38,37,0,0,39,82,0,82,40,39,0,1,87,223,13,1,85,7,0,134,86,0,0,104,199,5,0,35,87,85,38,40,0,0,0,1,86,44,0,82,41,86,0,1,86,231,13,1,85,8,0,1,87,2,0,134,42,0,0,28,203,4,0,41,86,85,87,0,82,42,0,0,43,80,0,25,44,43,12,82,46,44,0,0,47,82,0,25,48,47,4,82,49,48,0,0,50,82,0,82,51,50,0,1,85,231,13,1,86,8,0,134,87,0,0,104,199,5,0,46,85,86,49,51,0,0,0,1,87,44,0,82,52,87,0,1,87,118,35,1,86,10,0,1,85,2,0,134,53,0,0,208,101,4,0,52,87,86,85,0,81,53,0,0,54,80,0,25,55,54,12,82,57,55,0,0,58,81,0,1,86,118,35,1,87,10,0,134,85,0,0,160,189,5,0,57,86,87,58,1,85,44,0,82,59,85,0,1,85,240,13,1,87,8,0,1,86,2,0,134,60,0,0,208,101,4,0,59,85,87,86,0,81,60,0,0,61,80,0,25,62,61,12,82,63,62,0,0,64,81,0,1,87,113,35,1,85,4,0,134,86,0,0,160,189,5,0,63,87,85,64,1,86,44,0,82,65,86,0,1,86,249,13,1,85,8,0,1,87,2,0,134,66,0,0,28,203,4,0,65,86,85,87,0,82,66,0,0,68,80,0,25,69,68,12,82,70,69,0,0,71,82,0,25,72,71,4,82,73,72,0], eb + 245760);
  HEAPU8.set([0,74,82,0,82,75,74,0,1,85,249,13,1,86,8,0,134,87,0,0,104,199,5,0,70,85,86,73,75,0,0,0,1,87,40,0,82,76,87,0,0,77,80,0,134,87,0,0,200,244,5,0,76,77,0,0,137,84,0,0,139,0,0,0,140,0,35,0,0,0,0,0,1,29,0,0,136,33,0,0,0,30,33,0,136,33,0,0,25,33,33,48,137,33,0,0,130,33,0,0,136,34,0,0,49,33,33,34,116,232,3,0,135,33,0,0,25,0,30,24,25,1,30,8,1,33,56,0,1,34,120,0,134,12,0,0,168,171,5,0,33,34,0,0,0,27,12,0,0,20,27,0,0,21,20,0,0,22,21,0,1,34,0,0,85,22,34,0,25,23,21,4,0,24,23,0,1,34,0,0,85,24,34,0,0,25,27,0,25,26,25,8,1,34,3,0,83,26,34,0,0,2,27,0,25,3,2,9,1,34,3,0,83,3,34,0,0,4,27,0,25,5,4,12,59,34,0,0,89,5,34,0,0,6,27,0,25,7,6,16,59,34,0,0,89,7,34,0,0,8,27,0,25,9,8,20,127,34,0,0,59,33,0,0,89,34,33,0,127,33,0,0,114,0,33,0,127,34,0,0,102,34,34,1,107,0,1,34,127,33,0,0,102,33,33,2,107,0,2,33,127,34,0,0,102,34,34,3,107,0,3,34,25,10,0,4,127,34,0,0,59,33,0,0,89,34,33,0,127,33,0,0,114,10,33,0,127,34,0,0,102,34,34,1,107,10,1,34,127,33,0,0,102,33,33,2,107,10,2,33,127,34,0,0,102,34,34,3,107,10,3,34,25,11,0,8,127,34,0,0,59,33,0,0,89,34,33,0,127,33,0,0,114,11,33,0,127,34,0,0,102,34,34,1,107,11,1,34,127,33,0,0,102,33,33,2,107,11,2,33,127,34,0,0,102,34,34,3,107,11,3,34,25,13,0,12,127,34,0,0,59,33,0,0,89,34,33,0,127,33,0,0,114,13,33,0,127,34,0,0,102,34,34,1,107,13,1,34,127,33,0,0,102,33,33,2,107,13,2,33,127,34,0,0,102,34,34,3,107,13,3,34,0,28,9,0,0,31,0,0,25,32,28,16,78,34,31,0,83,28,34,0,25,28,28,1,25,31,31,1,54,34,28,32,248,233,3,0,0,14,27,0,25,15,14,36,127,34,0,0,59,33,0,0,89,34,33,0,127,33,0,0,114,1,33,0,127,34,0,0,102,34,34,1,107,1,1,34,127,33,0,0,102,33,33,2,107,1,2,33,127,34,0,0,102,34,34,3,107,1,3,34,25,16,1,4,127,34,0,0,59,33,0,0,89,34,33,0,127,33,0,0,114,16,33,0,127,34,0,0,102,34,34,1,107,16,1,34,127,33,0,0,102,33,33,2,107,16,2,33,127,34,0,0,102,34,34,3,107,16,3,34,25,17,1,8,127,34,0,0,59,33,0,0,89,34,33,0,127,33,0,0,114,17,33,0,127,34,0,0,102,34,34,1,107,17,1,34,127,33,0,0,102,33,33,2,107,17,2,33,127,34,0,0,102,34,34,3,107,17,3,34,25,18,1,12,127,34,0,0,59,33,0,0,89,34,33,0,127,33,0,0,114,18,33,0,127,34,0,0,102,34,34,1,107,18,1,34,127,33,0,0,102,33,33,2,107,18,2,33,127,34,0,0,102,34,34,3,107,18,3,34,0,28,15,0,0,31,1,0,25,32,28,16,78,34,31,0,83,28,34,0,25,28,28,1,25,31,31,1,54,34,28,32,16,235,3,0,0,19,27,0,137,30,0,0,139,19,0,0,140,1,65,0,0,0,0,0,1,61,0,0,136,63,0,0,0,62,63,0,136,63,0,0,25,63,63,16,137,63,0,0,130,63,0,0,136,64,0,0,49,63,63,64,104,235,3,0,135,63,0,0,0,1,0,0,0,2,1,0,78,13,2,0,1,63,255,0,19,63,13,63,0,24,63,0,1,63,9,0,1,64,12,0,138,24,63,64,200,235,3,0,236,235,3,0,16,236,3,0,52,236,3,0,88,236,3,0,124,236,3,0,160,236,3,0,196,236,3,0,232,236,3,0,12,237,3,0,48,237,3,0,84,237,3,0,137,62,0,0,139,0,0,0,119,0,139,0,0,35,1,0,25,46,35,8,82,56,46,0,134,63,0,0,148,105,6,0,56,0,0,0,137,62,0,0,139,0,0,0,119,0,130,0,0,57,1,0,25,58,57,8,82,59,58,0,134,63,0,0,184,57,5,0,59,0,0,0,137,62,0,0,139,0,0,0,119,0,121,0,0,3,1,0,25,4,3,8,82,5,4,0,134,63,0,0,68,137,5,0,5,0,0,0,137,62,0,0,139,0,0,0,119,0,112,0,0,6,1,0,25,7,6,8,82,8,7,0,134,63,0,0,180,1,6,0,8,0,0,0,137,62,0,0,139,0,0,0,119,0,103,0,0,9,1,0,25,10,9,8,82,11,10,0,134,63,0,0,180,1,6,0,11,0,0,0,137,62,0,0,139,0,0,0,119,0,94,0,0,12,1,0,25,14,12,8,82,15,14,0,134,63,0,0,180,1,6,0,15,0,0,0,137,62,0,0,139,0,0,0,119,0,85,0,0,22,1,0,25,23,22,8,82,25,23,0,134,63,0,0,180,1,6,0,25,0,0,0,137,62,0,0,139,0,0,0,119,0,76,0,0,16,1,0,25,17,16,8,82,18,17,0,134,63,0,0,180,1,6,0,18,0,0,0,137,62,0,0,139,0,0,0,119,0,67,0,0,19,1,0,25,20,19,8,82,21,20,0,134,63,0,0,180,1,6,0,21,0,0,0,137,62,0,0,139,0,0,0,119,0,58,0,0,29,1,0,25,30,29,8,82,31,30,0,134,63,0,0,180,1,6,0,31,0,0,0,137,62,0,0,139,0,0,0,119,0,49,0,0,26,1,0,25,27,26,8,82,28,27,0,134,63,0,0,180,1,6,0,28,0,0,0,137,62,0,0,139,0,0,0,119,0,40,0,0,32,1,0,25,33,32,8,82,34,33,0,25,36,34,12,82,37,36,0,0,60,37,0,0,38,60,0,1,63,0,0,14,39,38,63,120,39,2,0,119,0,20,0,0,40,60,0,0,41,40,0,0,42,1,0,25,43,42,8,82,44,43,0,25,45,44,8,82,47,45,0,16,48,41,47,120,48,2,0,119,0,10,0,0,49,60,0,82,50,49,0,134,63,0,0,148,105,6,0,50,0,0,0,0,51,60,0,25,52,51,4,0,60,52,0,119,0,233,255,0,53,1,0,25,54,53,8,82,55,54,0,134,63,0,0,180,1,6,0,55,0,0,0,137,62,0,0,139,0,0,0,119,0,1,0,139,0,0,0,140,2,77,0,0,0,0,0,2,74,0,0,255,0,0,0,1,72,0,0,136,75,0,0,0,73,75,0,136,75,0,0,25,75,75,48,137,75,0,0,130,75,0,0,136,76,0,0,49,75,75,76,48,238,3,0,135,75,0,0,25,64,73,24,25,65,73,8,0,2,0,0,58,3,1,0,85,64,64,0,25,14,64,4,85,14,64,0,0,25,2,0,25,36,25,8,134,47,0,0,208,54,6,0,36,0,0,0,33,58,47,0,120,58,112,0,0,61,2,0,25,62,61,8,25,63,62,4,82,4,63,0,0,70,4,0,1,75,0,0,14,5,4,75,120,5,2,0,119,0,103,0,0,6,70,0,134,75,0,0,160,66,6,0,6,0,0,0,0,7,70,0,134,75,0,0,192,46,6,0,7,64,0,0,0,8,70,0,0,71,8,0,1,68,1,0,85,65,65,0,25,9,65,4,85,9,65,0,0,10,71,0,25,11,10,8,134,12,0,0,208,54,6,0,11,0,0,0,33,13,12,0,120,13,48,0,0,15,71,0,25,16,15,8,25,17,16,4,82,18,17,0,0,67,18,0,1,75,0,0,14,19,18,75,120,19,2,0,119,0,39,0,0,20,67,0,134,75,0,0,160,66,6,0,20,0,0,0,0,21,67,0,134,75,0,0,192,46,6,0,21,65,0,0,0,22,67,0,26,23,22,8,0,66,23,0,0,24,66,0,58,26,3,0,134,27,0,0,180,246,2,0,24,26,0,0,0,69,27,0,0,28,69,0,41,75,28,24,42,75,75,24,33,29,75,0,121,29,5,0,0,30,66,0,134,75,0,0,44,45,5,0,30,0,0,0,0,31,69,0,19,75,31,74,0,32,75,0,0,33,68,0,19,75,33,74,0,34,75,0,19,75,34,32,0,35,75,0,19,75,35,74,0,37,75,0,0,68,37,0,119,0,203,255,134,38,0,0,208,54,6,0,65,0,0,0,33,39,38,0,120,39,19,0,25,40,65,4,82,41,40,0,0,67,41,0,1,75,0,0,14,42,41,75,120,42,2,0,119,0,12,0,0,43,67,0,134,75,0,0,160,66,6,0,43,0,0,0,0,44,67,0,0,45,71,0,25,46,45,8,134,75,0,0,192,46,6,0,44,46,0,0,119,0,234,255,0,48,68,0,41,75,48,24,42,75,75,24,33,49,75,0,120,49,2,0,119,0,144,255,0,50,71,0,134,75,0,0,164,19,6,0,50,0,0,0,119,0,139,255,134,51,0,0,208,54,6,0,64,0,0,0,33,52,51,0,121,52,3,0,1,72,18,0,119,0,20,0,25,53,64,4,82,54,53,0,0,70,54,0,1,75,0,0,14,55,54,75,120,55,3,0,1,72,18,0,119,0,12,0,0,56,70,0,134,75,0,0,160,66,6,0,56,0,0,0,0,57,70,0,0,59,2,0,25,60,59,8,134,75,0,0,192,46,6,0,57,60,0,0,119,0,231,255,32,75,72,18,121,75,3,0,137,73,0,0,139,0,0,0,139,0,0,0,140,2,100,0,0,0,0,0,2,97,0,0,255,255,0,0,1,95,0,0,136,98,0,0,0,96,98,0,136,98,0,0,25,98,98,32,137,98,0,0,130,98,0,0,136,99,0,0,49,98,98,99,220,240,3,0,135,98,0,0,0,2,0,0,0,3,1,0,0,14,3,0,0,25,2,0,82,36,25,0,18,47,36,14,121,47,3,0,137,96,0,0,139,0,0,0,0,58,2,0,25,69,58,4,80,80,69,0,0,91,80,0,0,90,3,0,0,4,2,0,82,5,4,0,26,6,5,1,14,7,90,6,121,7,79,0,0,8,2,0,25,9,8,6,78,10,9,0,1,98,255,0,19,98,10,98,0,11,98,0,32,12,11,1,121,12,39,0,0,13,2,0,25,15,13,12,82,16,15,0,0,17,3,0,0,18,91,0,19,98,18,97,0,19,98,0,5,20,17,19,3,21,16,20,0,93,21,0,0,22,2,0,25,23,22,12,82,24,23,0,0,26,3,0,25,27,26,1,0,28,91,0,19,98,28,97,0,29,98,0,5,30,27,29,3,31,24,30,0,94,31,0,0,32,2,0,82,33,32,0,0,34,3,0,4,35,33,34,26,37,35,1,0,38,91,0,19,98,38,97,0,39,98,0,5,40,37,39,0,92,40,0,0,41,93,0,0,42,94,0,0,43,92,0,134,98,0,0,160,232,5,0,41,42,43,0,119,0,33,0,0,44,3,0,0,45,2,0,82,46,45,0,26,48,46,1,16,49,44,48,121,49,27,0,0,50,2,0,25,51,50,12,82,52,51,0,0,53,3,0,0,54,91,0,19,98,54,97,0,55,98,0,5,56,53,55,3,57,52,56,0,59,2,0,25,60,59,12,82,61,60,0,0,62,2,0,82,63,62,0,26,64,63,1,0,65,91,0,19,98,65,97,0,66,98,0,5,67,64,66,3,68,61,67,0,70,91,0,19,98,70,97,0,71,98,0,134,98,0,0,160,232,5,0,57,68,71,0,0,72,2,0,82,73,72,0,26,74,73,1,85,72,74,0,0,75,2,0,25,76,75,12,82,77,76,0,0,78,77,0,0,79,2,0,25,81,79,4,80,82,81,0,19,98,82,97,0,83,98,0,0,84,2,0,82,85,84,0,5,86,83,85,3,87,78,86,0,88,2,0,25,89,88,8,85,89,87,0,137,96,0,0,139,0,0,0,140,7,62,0,0,0,0,0,1,56,0,0,136,60,0,0,0,57,60,0,136,60,0,0,25,60,60,48,137,60,0,0,130,60,0,0,136,61,0,0,49,60,60,61,236,242,3,0,135,60,0,0,25,50,57,24,0,7,0,0,58,8,2,0,0,19,3,0,0,30,4,0,0,41,5,0,0,49,6,0,1,60,84,0,1,61,65,0,134,51,0,0,168,171,5,0,60,61,0,0,0,54,51,0,0,52,19,0,0,53,54,0,25,9,53,24,83,9,52,0,0,10,7,0,0,11,54,0,25,12,11,28,85,12,10,0,0,13,54,0,25,14,13,32,0,55,14,0,0,58,1,0,25,59,55,16,78,61,58,0,83,55,61,0,25,55,55,1,25,58,58,1,54,61,55,59,84,243,3,0,0,15,54,0,25,16,15,32,25,17,16,16,127,61,0,0,59,60,0,0,89,61,60,0,127,60,0,0,114,50,60,0,127,61,0,0,102,61,61,1,107,50,1,61,127,60,0,0,102,60,60,2,107,50,2,60,127,61,0,0,102,61,61,3,107,50,3,61,25,18,50,4,127,61,0,0,59,60,0,0,89,61,60,0,127,60,0,0,114,18,60,0,127,61,0,0,102,61,61,1,107,18,1,61,127,60,0,0,102,60,60,2,107,18,2,60,127,61,0,0,102,61,61,3,107,18,3,61,25,20,50,8,127,61,0,0,59,60,0,0,89,61,60,0,127,60,0,0,114,20,60,0,127,61,0,0,102,61,61,1,107,20,1,61,127,60,0,0,102,60,60,2,107,20,2,60,127,61,0,0,102,61,61,3,107,20,3,61,25,21,50,12,127,61,0,0,59,60,0,0,89,61,60,0,127,60,0,0,114,21,60,0,127,61,0,0,102,61,61,1,107,21,1,61,127,60,0,0,102,60,60,2,107,21,2,60,127,61,0,0,102,61,61,3,107,21,3,61,0,55,17,0,0,58,50,0,25,59,55,16,78,61,58,0,83,55,61,0,25,55,55,1,25,58,58,1,54,61,55,59,112,244,3,0,58,22,8,0,0,23,54,0,25,24,23,32,25,25,24,32,89,25,22,0,58,26,8,0,0,27,54,0,25,28,27,32,25,29,28,36,89,29,26,0,0,31,54,0,25,32,31,80,1,61,0,0,83,32,61,0,0,33,30,0,0,34,54,0,25,35,34,82,84,35,33,0,0,36,41,0,0,37,54,0,25,38,37,72,85,38,36,0,0,39,49,0,0,40,54,0,25,42,40,76,85,42,39,0,0,43,54,0,25,44,43,8,134,61,0,0,144,74,6,0,44,0,0,0,0,45,54,0,25,46,45,16,134,61,0,0,144,74,6,0,46,0,0,0,0,47,54,0,134,61,0,0,144,74,6,0,47,0,0,0,0,48,54,0,137,57,0,0,139,48,0,0,140,7,62,0,0,0,0,0,1,56,0,0,136,60,0,0,0,57,60,0,136,60,0,0,25,60,60,48,137,60,0,0,130,60,0,0,136,61,0,0,49,60,60,61,104,245,3,0,135,60,0,0,25,50,57,24,0,7,0,0,58,8,2,0,0,19,3,0,0,30,4,0,0,41,5,0,0,49,6,0,1,60,84,0,1,61,64,0,134,51,0,0,168,171,5,0,60,61,0,0,0,54,51,0,0,52,19,0,0,53,54,0,25,9,53,24,83,9,52,0,0,10,7,0,0,11,54,0,25,12,11,28,85,12,10,0,0,13,54,0,25,14,13,32,0,55,14,0,0,58,1,0,25,59,55,16,78,61,58,0,83,55,61,0,25,55,55,1,25,58,58,1,54,61,55,59,208,245,3,0,0,15,54,0,25,16,15,32,25,17,16,16,127,61,0,0,59,60,0,0,89,61,60,0,127,60,0,0,114,50,60,0,127,61,0,0,102,61,61,1,107,50,1,61,127,60,0,0,102,60,60,2,107,50,2,60,127,61,0,0,102,61,61,3,107,50,3,61,25,18,50,4,127,61,0,0,59,60,0,0,89,61,60,0,127,60,0,0,114,18,60,0,127,61,0,0,102,61,61,1,107,18,1,61,127,60,0,0,102,60,60,2,107,18,2,60,127,61,0,0,102,61,61,3,107,18,3,61,25,20,50,8,127,61,0,0,59,60,0,0,89,61,60,0,127,60,0,0,114,20,60,0,127,61,0,0,102,61,61,1,107,20,1,61,127,60,0,0,102,60,60,2,107,20,2,60,127,61,0,0,102,61,61,3,107,20,3,61,25,21,50,12,127,61,0,0,59,60,0,0,89,61,60,0,127,60,0,0,114,21,60,0,127,61,0,0,102,61,61,1,107,21,1,61,127,60,0,0,102,60,60,2,107,21,2,60,127,61,0,0,102,61,61,3,107,21,3,61,0,55,17,0,0,58,50,0,25,59,55,16,78,61,58,0,83,55,61,0,25,55,55,1,25,58,58,1,54,61,55,59,236,246,3,0,58,22,8,0,0,23,54,0,25,24,23,32,25,25,24,32,89,25,22,0,58,26,8,0,0,27,54,0,25,28,27,32,25,29,28,36,89,29,26,0,0,31,54,0,25,32,31,80,1,61,0,0,83,32,61,0,0,33,30,0,0,34,54,0,25,35,34,82,84,35,33,0,0,36,41,0,0,37,54,0,25,38,37,72,85,38,36,0,0,39,49,0,0,40,54,0,25,42,40,76,85,42,39,0,0,43,54,0,25,44,43,8,134,61,0,0,236,74,6,0,44,0,0,0,0,45,54,0,25,46,45,16,134,61,0,0,236,74,6,0,46,0,0,0,0,47,54,0,134,61,0,0,236,74,6,0,47,0,0,0,0,48,54,0,137,57,0,0,139,48,0,0,140,1,54,0,0,0,0,0,2,51,0,0,8,6,0,0,1,49,0,0,136,52,0,0,0,50,52,0,136,52,0,0,25,52,52,80,137,52,0,0,130,52,0,0,136,53,0,0,49,52,52,53,236,247,3,0,135,52,0,0,25,46,50,56,25,45,50,48,25,44,50,40,25,43,50,32,25,39,50,16,0,42,50,0,0,1,0,0,85,39,39,0,25,2,39,4,85,2,39,0,135,52,7,0,51,0,0,0,0,13,1,0,25,24,13,16,134,33,0,0,208,54,6,0,24,0,0,0,33,34,33,0,120,34,91,0,0,35,1,0,25,36,35,16,25,37,36,4,82,38,37,0,0,41,38,0,1,52,0,0,14,3,38,52,120,3,2,0,119,0,82,0,0,4,41,0,134,52,0,0,160,66,6,0,4,0,0,0,0,5,41,0,134,52,0,0,192,46,6,0,5,39,0,0,135,52,8,0,51,0,0,0,0,6,41,0,0,40,6,0,0,7,40,0,25,8,7,16,82,9,8,0,0,48,9,0,0,10,40,0,25,11,10,20,78,12,11,0,0,47,12,0,0,14,40,0,25,15,14,24,82,52,15,0,85,42,52,0,106,53,15,4,109,42,4,53,0,16,40,0,134,53,0,0,208,78,6,0,16,0,0,0,0,17,47,0,1,53,255,0,19,53,17,53,0,18,53,0,1,53,0,0,1,52,4,0,138,18,53,52,4,249,3,0,40,249,3,0,76,249,3,0,112,249,3,0,119,0,37,0,0,19,48,0,82,53,42,0,85,43,53,0,106,52,42,4,109,43,4,52,134,52,0,0,244,154,4,0,19,43,0,0,119,0,28,0,0,20,48,0,82,52,42,0,85,44,52,0,106,53,42,4,109,44,4,53,134,53,0,0,252,252,2,0,20,44,0,0,119,0,19,0,0,21,48,0,82,53,42,0,85,45,53,0,106,52,42,4,109,45,4,52,134,52,0,0,148,142,3,0,21,45,0,0,119,0,10,0,0,22,48,0,82,52,42,0,85,46,52,0,106,53,42,4,109,46,4,53,134,53,0,0,48,120,3,0,22,46,0,0,119,0,1,0,135,53,7,0,51,0,0,0,119,0,160,255,134,23,0,0,208,54,6,0,39,0,0,0,33,25,23,0,121,25,3,0,1,49,13,0,119,0,20,0,25,26,39,4,82,27,26,0,0,41,27,0,1,53,0,0,14,28,27,53,120,28,3,0,1,49,13,0,119,0,12,0,0,29,41,0,134,53,0,0,160,66,6,0,29,0,0,0,0,30,41,0,0,31,1,0,25,32,31,16,134,53,0,0,192,46,6,0,30,32,0,0,119,0,231,255,32,53,49,13,121,53,5,0,135,53,8,0,51,0,0,0,137,50,0,0,139,0,0,0,139,0,0,0,140,1,80,0,0,0,0,0,1,76,0,0,136,78,0,0,0,77,78,0,136,78,0,0,25,78,78,32,137,78,0,0,130,78,0,0,136,79,0,0,49,78,78,79,88,250,3,0,135,78,0,0,0,1,0,0,0,2,1,0,25,13,2,40,134,78,0,0,44,195,5,0,13,0,0,0,0,24,1,0,25,35,24,12,134,46,0,0,36,50,6,0,35,0,0,0,33,57,46,0,120,57,17,0,0,68,1,0,25,69,68,12,25,70,69,4,82,3,70,0,0,73,3,0,1,78,0,0,14,4,3,78,120,4,2,0,119,0,8,0,0,5,73,0,0,74,5,0,0,6,74,0,134,78,0,0,4,206,4,0,6,0,0,0,119,0,234,255,0,7,1,0,25,8,7,20,134,9,0,0,36,50,6,0,8,0,0,0,33,10,9,0,120,10,17,0,0,11,1,0,25,12,11,20,25,14,12,4,82,15,14,0,0,73,15,0,1,78,0,0,14,16,15,78,120,16,2,0,119,0,8,0,0,17,73,0,0,75,17,0,0,18,75,0,134,78,0,0,4,206,4,0,18,0,0,0,119,0,234,255,0,19,1,0,25,20,19,28,134,21,0,0,36,50,6,0,20,0,0,0,33,22,21,0,120,22,15,0,0,23,1,0,25,25,23,28,25,26,25,4,82,27,26,0,0,73,27,0,1,78,0,0,14,28,27,78,120,28,2,0,119,0,6,0,0,29,73,0,134,78,0,0,44,16,6,0,29,0,0,0,119,0,236,255,0,30,1,0,25,31,30,40,134,78,0,0,64,96,6,0,31,0,0,0,0,32,1,0,82,33,32,0,134,78,0,0,148,105,6,0,33,0,0,0,0,34,1,0,25,36,34,8,82,37,36,0,134,78,0,0,148,105,6,0,37,0,0,0,0,38,1,0,25,39,38,40,134,78,0,0,92,107,6,0,39,0,0,0,1,78,4,0,1,79,1,0,134,40,0,0,224,168,5,0,78,79,0,0,0,72,40,0,0,41,1,0,25,42,41,36,82,43,42,0,0,44,72,0,134,79,0,0,36,105,4,0,43,44,0,0,0,45,72,0,25,47,45,12,82,48,47,0,0,71,48,0,0,49,71,0,1,79,0,0,14,50,49,79,120,50,3,0,1,76,15,0,119,0,19,0,0,51,71,0,0,52,51,0,0,53,72,0,25,54,53,8,82,55,54,0,16,56,52,55,120,56,3,0,1,76,15,0,119,0,10,0,0,58,71,0,82,59,58,0,134,79,0,0,100,6,6,0,59,0,0,0,0,60,71,0,25,61,60,4,0,71,61,0,119,0,233,255,32,79,76,15,121,79,21,0,0,62,72,0,134,79,0,0,180,1,6,0,62,0,0,0,0,63,1,0,25,64,63,36,82,65,64,0,134,79,0,0,52,67,4,0,65,0,0,0,0,66,1,0,134,79,0,0,4,78,6,0,66,0,0,0,0,67,1,0,134,79,0,0,216,166,5,0,67,0,0,0,137,77,0,0,139,0,0,0,139,0,0,0,140,3,58,0,0,0,0,0,1,50,0,0,136,52,0,0,0,51,52,0,136,52,0,0,25,52,52,48,137,52,0,0,130,52,0,0,136,53,0,0,49,52,52,53,4,253,3,0,135,52,0,0,25,49,51,16,25,48,51,8,0,47,51,0,0,3,0,0,0,4,1,0,0,15,2,0,0,26,15,0,0,37,3,0,25,41,37,8,85,41,26,0,0,42,3,0,134,52,0,0,100,98,6,0,42,0,0,0,1,46,255,255,0,43,15,0,1,52,0,0,1,57,5,0,138,43,52,57,112,253,3,0,236,253,3,0,84,254,3,0,188,254,3,0,56,255,3,0,137,51,0,0,139,0,0,0,119,0,146,0,0,44,4,0,82,45,44,0,1,52,47,20,135,5,52,0,45,52,0,0,0,46,5,0,0,6,46,0,32,7,6,255,121,7,8,0,1,53,56,20,134,52,0,0,44,77,6,0,53,47,0,0,137,51,0,0,139,0,0,0,119,0,130,0,0,8,46,0,135,52,53,0,8,0,0,0,0,9,46,0,1,53,2,0,1,54,6,20,1,55,0,0,1,56,8,0,1,57,0,0,135,52,54,0,9,53,54,55,56,57,0,0,137,51,0,0,139,0,0,0,119,0,115,0,0,10,4,0,82,11,10,0,1,52,47,20,135,12,52,0,11,52,0,0,0,46,12,0,0,13,46,0,32,14,13,255,121,14,3,0,137,51,0,0,139,0,0,0,0,16,46,0,135,52,53,0,16,0,0,0,0,17,46,0,1,57,3,0,1,56,6,20,1,55,0,0,1,54,12,0,1,53,0,0,135,52,54,0,17,57,56,55,54,53,0,0,137,51,0,0,139,0,0,0,119,0,89,0,0,18,4,0,82,19,18,0,1,52,72,20,135,20,52,0,19,52,0,0,0,46,20,0,0,21,46,0,32,22,21,255,121,22,3,0,137,51,0,0,139,0,0,0,0,23,46,0,135,52,53,0,23,0,0,0,0,24,46,0,1,53,3,0,1,54,6,20,1,55,0,0,1,56,12,0,1,57,0,0,135,52,54,0,24,53,54,55,56,57,0,0,137,51,0,0,139,0,0,0,119,0,63,0,0,25,4,0,82,27,25,0,1,52,79,20,135,28,52,0,27,52,0,0,0,46,28,0,0,29,46,0,32,30,29,255,121,30,8,0,1,57,88,20,134,52,0,0,44,77,6,0,57,48,0,0,137,51,0,0,139,0,0,0,119,0,47,0,0,31,46,0,135,52,53,0,31,0,0,0,0,32,46,0,1,57,2,0,1,56,6,20,1,55,0,0,1,54,8,0,1,53,0,0,135,52,54,0,32,57,56,55,54,53,0,0,137,51,0,0,139,0,0,0,119,0,32,0,0,33,4,0,82,34,33,0,1,52,44,21,135,35,52,0,34,52,0,0,0,46,35,0,0,36,46,0,32,38,36,255,121,38,8,0,1,53,104,20,134,52,0,0,44,77,6,0,53,49,0,0,137,51,0,0,139,0,0,0,119,0,16,0,0,39,46,0,135,52,53,0,39,0,0,0,0,40,46,0,1,53,4,0,1,54,6,20,1,55,0,0,1,56,16,0,1,57,0,0,135,52,54,0,40,53,54,55,56,57,0,0,137,51,0,0,139,0,0,0,119,0,1,0,139,0,0,0,140,3,60,0,0,0,0,0,1,51,0,0,136,55,0,0,0,52,55,0,136,55,0,0,1,56,144,1,3,55,55,56,137,55,0,0,130,55,0,0,136,56,0,0,49,55,55,56,240,255,3,0,135,55,0,0,1,55,144,0,3,49,52,55,25,46,52,80,25,48,52,16,1,55,80,1,3,47,52,55,1,55,16,1,3,45,52,55,1,55,208,0,3,26,52,55,0,3,0,0,0,4,1,0,0,15,2,0,0,37,4,0,1,55,140,4,85,55,37,0,0,40,15,0,1,55,144,4,85,55,40,0,1,55,140,4,82,41,55,0,76,55,41,0,58,42,55,0,1,55,144,4,82,43,55,0,76,55,43,0,58,44,55,0,66,5,42,44,61,56,0,0,219,15,73,63,59,57,100,0,60,58,0,0,160,134,1,0,134,55,0,0,116,111,3,0,47,56,5,57,58,0,0,0,1,55,140,4,82,6,55,0,28,55,6,2,38,55,55,255,0,7,55,0,76,55,7,0,58,8,55,0,1,55,144,4,82,9,55,0,28,55,9,2,38,55,55,255,0,10,55,0,76,55,10,0,58,11,55,0,1,55,144,4,82,12,55,0,28,55,12,2,38,55,55,255,0,13,55,0,76,55,13,0,58,14,55,0,61,55,0,0,219,15,201,62,135,16,24,0,55,0,0,0,66,17,14,16,1,55,140,4,82,18,55,0,28,55,18,2,38,55,55,255,0,19,55,0,76,55,19,0,58,20,55,0,1,55,144,4,82,21,55,0,28,55,21,2,38,55,55,255,0,22,55,0,76,55,22,0,58,23,55,0,59,58,0,0,59,57,0,0,59,56,1,0,59,59,0,0,134,55,0,0,16,74,2,0,45,8,11,17,20,23,58,57,56,59,0,0,0,24,3,0,25,25,24,8,82,27,25,0,0,50,48,0,0,53,47,0,25,54,50,64,82,55,53,0,85,50,55,0,25,50,50,4,25,53,53,4,54,55,50,54,96,1,4,0,134,55,0,0,44,228,5,0,27,48,0,0,0,28,3,0,25,29,28,8,82,30,29,0,0,50,46,0,0,53,45,0,25,54,50,64,82,55,53,0,85,50,55,0,25,50,50,4,25,53,53,4,54,55,50,54,156,1,4,0,134,55,0,0,68,229,5,0,30,46,0,0,1,55,140,4,82,31,55,0,76,55,31,0,58,32,55,0,1,55,144,4,82,33,55,0,76,55,33,0,58,34,55,0,59,59,0,0,59,56,0,0,59,57,0,0,59,58,2,0,134,55,0,0,108,83,3,0,26,59,32,56,34,57,58,0,0,50,47,0,0,53,26,0,25,54,50,64,78,55,53,0,83,50,55,0,25,50,50,1,25,53,53,1,54,55,50,54,12,2,4,0,0,35,3,0,25,36,35,8,25,38,36,4,82,39,38,0,0,50,49,0,0,53,47,0,25,54,50,64,82,55,53,0,85,50,55,0,25,50,50,4,25,53,53,4,54,55,50,54,64,2,4,0,134,55,0,0,44,228,5,0,39,49,0,0,137,52,0,0,139,0,0,0,140,2,53,0,0,0,0,0,1,48,0,0,136,50,0,0,0,49,50,0,136,50,0,0,1,51,64,2,3,50,50,51,137,50,0,0,130,50,0,0,136,51,0,0,49,50,50,51,164,2,4,0,135,50,0,0,25,46,49,16,25,45,49,8,0,44,49,0,25,3,49,44,25,14,49,40,25,43,49,32,25,40,49,56,85,3,0,0,85,14,1,0,2,50,0,0,49,139,0,0,135,25,55,0,50,0,0,0,0,47,25,0,0,33,47,0,1,51,1,0,1,52,0,0,135,50,56,0,33,51,3,52,0,34,47,0,135,50,57,0,34,0,0,0,0,35,47,0,2,52,0,0,129,139,0,0,135,50,58,0,35,52,43,0,82,36,43,0,33,37,36,0,120,37,15,0,0,38,47,0,1,52,0,2,1,51,0,0,135,50,59,0,38,52,51,40,85,44,40,0,1,51,212,15,134,50,0,0,44,77,6,0,51,44,0,0,1,2,0,0,0,32,2,0,137,49,0,0,139,32,0,0,2,50,0,0,48,139,0,0,135,4,55,0,50,0,0,0,0,39,4,0,0,5,39,0,1,51,1,0,1,52,0,0,135,50,56,0,5,51,14,52,0,6,39,0,135,50,57,0,6,0,0,0,0,7,39,0,2,52,0,0,129,139,0,0,135,50,58,0,7,52,43,0,82,8,43,0,33,9,8,0,120,9,15,0,0,10,39,0,1,52,0,2,1,51,0,0,135,50,59,0,10,52,51,40,85,45,40,0,1,51,245,15,134,50,0,0,44,77,6,0,51,45,0,0,1,2,0,0,0,32,2,0,137,49,0,0,139,32,0,0,135,11,60,0,0,42,11,0,0,12,42,0,0,13,47,0,135,50,61,0,12,13,0,0,0,15,42,0,0,16,39,0,135,50,61,0,15,16,0,0,0,17,42,0,135,50,62,0,17,0,0,0,0,18,42,0,2,51,0,0,130,139,0,0,135,50,63,0,18,51,43,0,82,19,43,0,33,20,19,0,121,20,30,0,0,22,47,0,135,50,64,0,22,0,0,0,0,23,39,0,135,50,64,0,23,0,0,0,1,50,8,0,1,51,45,0,134,24,0,0,168,171,5,0,50,51,0,0,0,41,24,0,0,26,42,0,0,27,41,0,85,27,26,0,1,51,4,0,1,50,1,0,134,28,0,0,224,168,5,0,51,50,0,0,0,29,41,0,25,30,29,4,85,30,28,0,0,31,41,0,0,2,31,0,0,32,2,0,137,49,0,0,139,32,0,0,119,0,15,0,0,21,42,0,1,51,0,2,1,52,0,0,135,50,65,0,21,51,52,40,85,46,40,0,1,52,24,16,134,50,0,0,44,77,6,0,52,46,0,0,1,2,0,0,0,32,2,0,137,49,0,0,139,32,0,0,1,50,0,0,139,50,0,0,140,3,75,0,0,0,0,0,1,71,0,0,136,73,0,0,0,72,73,0,136,73,0,0,25,73,73,32,137,73,0,0,130,73,0,0,136,74,0,0,49,73,73,74,28,5,4,0,135,73,0,0,0,68,72,0,0,3,0,0,0,4,1,0,0,15,2,0,0,26,3,0,0,70,26,0,134,37,0,0,144,83,6,0,0,69,37,0,0,48,15,0,82,59,48,0,25,64,59,1,85,48,64,0,0,65,15,0,82,66,65,0,0,5,70,0,3,6,5,66,78,7,6,0,41,73,7,24,42,73,73,24,0,8,73,0,134,9,0,0,160,107,6,0,8,0,0,0,33,10,9,0,0,11,15,0,82,12,11,0,121,10,10,0,25,13,12,1,85,11,13,0,0,14,15,0,82,16,14,0,0,17,4,0,18,18,17,16,121,18,235,255,1,71,9,0,119,0,64,0,0,19,70,0,3,20,19,12,78,21,20,0,41,73,21,24,42,73,73,24,0,22,73,0,32,23,22,93,121,23,3,0,1,71,5,0,119,0,54,0,0,28,3,0,0,29,4,0,0,30,15,0,134,31,0,0,152,138,1,0,28,29,30,0,85,68,31,0,0,32,69,0,82,33,32,0,134,73,0,0,88,242,4,0,33,68,0,0,0,34,15,0,82,35,34,0,0,36,70,0,3,38,36,35,78,39,38,0,41,73,39,24,42,73,73,24,0,40,73,0,32,41,40,44,0,42,15,0,82,43,42,0,121,41,10,0,25,44,43,1,85,42,44,0,0,45,15,0,82,46,45,0,0,47,4,0,18,49,47,46,121,49,192,255,1,71,9,0,119,0,21,0,0,50,70,0,3,51,50,43,78,52,51,0,41,73,52,24,42,73,73,24,0,53,73,0,32,54,53,93,0,55,15,0,82,56,55,0,25,57,56,1,85,55,57,0,0,58,15,0,82,60,58,0,0,61,4,0,18,62,61,60,20,73,54,62,0,67,73,0,121,67,172,255,1,71,9,0,119,0,1,0,32,73,71,5,121,73,9,0,0,24,15,0,82,25,24,0,25,27,25,1,85,24,27,0,0,63,69,0,137,72,0,0,139,63,0,0,119,0,6,0,32,73,71,9,121,73,4,0,0,63,69,0,137,72,0,0,139,63,0,0,1,73,0,0,139,73,0,0,140,2,65,0,0,0,0,0,1,61,0,0,136,63,0,0,0,62,63,0,136,63,0,0,25,63,63,64,137,63,0,0,130,63,0,0,136,64,0,0,49,63,63,64,36,7,4,0,135,63,0,0,25,6,62,56,25,5,62,40,25,4,62,32,25,3,62,24,25,2,62,16,0,7,0,0,0,8,1,0,0,19,7,0,1,63,1,0,85,19,63,0,0,30,7,0,1,63,21,0,135,41,26,0,63,30,0,0,0,59,41,0,0,52,7,0,0,55,59,0,134,63,0,0,96,7,5,0,52,55,0,0,0,56,7,0,0,57,7,0,25,58,57,72,82,63,58,0,85,2,63,0,106,64,58,4,109,2,4,64,134,64,0,0,196,181,5,0,56,2,0,0,0,9,7,0,0,10,7,0,25,11,10,56,82,64,11,0,85,3,64,0,106,63,11,4,109,3,4,63,134,63,0,0,68,187,5,0,9,3,0,0,0,12,7,0,0,13,7,0,25,14,13,88,82,63,14,0,85,4,63,0,106,64,14,4,109,4,4,64,134,64,0,0,192,186,5,0,12,4,0,0,0,15,7,0,0,16,7,0,1,64,128,0,3,17,16,64,82,64,17,0,85,5,64,0,106,63,17,4,109,5,4,63,106,64,17,8,109,5,8,64,134,64,0,0,172,207,4,0,15,5,0,0,0,18,7,0,0,20,7,0,1,64,168,0,3,21,20,64,78,22,21,0,134,64,0,0,20,112,5,0,18,22,0,0,0,23,7,0,0,24,7,0,25,25,24,104,82,26,25,0,0,27,7,0,25,28,27,108,82,29,28,0,134,64,0,0,220,115,3,0,23,26,29,0,0,31,7,0,0,32,7,0,25,33,32,112,88,34,33,0,134,64,0,0,168,239,5,0,31,34,0,0,0,35,7,0,0,36,7,0,1,64,144,0,3,37,36,64,82,64,37,0,85,6,64,0,106,63,37,4,109,6,4,63,134,63,0,0,244,184,5,0,35,6,0,0,0,38,7,0,0,39,7,0,1,63,192,0,3,40,39,63,78,42,40,0,134,63,0,0,128,234,5,0,38,42,0,0,0,43,7,0,0,44,7,0,1,63,193,0,3,45,44,63,78,46,45,0,134,63,0,0,8,231,5,0,43,46,0,0,0,47,8,0,134,48,0,0,208,81,6,0,47,0,0,0,0,60,48,0,0,49,7,0,0,50,60,0,25,51,50,4,82,53,51,0,134,63,0,0,144,14,6,0,49,53,0,0,0,54,60,0,134,63,0,0,148,105,6,0,54,0,0,0,137,62,0,0,139,0,0,0,140,3,84,0,0,0,0,0,1,80,0,0,136,82,0,0,0,81,82,0,136,82,0,0,25,82,82,48,137,82,0,0,130,82,0,0,136,83,0,0,49,82,82,83,108,9,4,0,135,82,0,0,25,76,81,8,25,77,81,4,0,78,81,0,0,3,0,0,0,4,1,0,0,15,2,0,1,82,4,0,1,83,1,0,134,26,0,0,224,168,5,0,82,83,0,0,0,74,26,0,0,37,3,0,0,48,4,0,0,59,4,0,135,69,4,0,59,0,0,0,0,70,74,0,134,83,0,0,40,146,3,0,37,48,69,70,1,75,0,0,1,73,0,0,0,71,73,0,0,5,74,0,82,6,5,0,16,7,71,6,120,7,2,0,119,0,45,0,0,8,73,0,0,9,74,0,25,10,9,12,82,11,10,0,41,83,8,2,3,12,11,83,82,13,12,0,0,79,13,0,0,14,73,0,25,16,14,1,0,17,74,0,25,18,17,12,82,19,18,0,41,83,16,2,3,20,19,83,82,21,20,0,0,72,21,0,0,22,75,0,0,23,79,0,15,24,22,23,121,24,20,0,0,25,3,0,25,27,25,4,82,28,27,0,0,29,75,0,3,30,28,29,0,31,79,0,0,32,75,0,4,33,31,32,134,34,0,0,240,9,6,0,30,33,0,0,85,76,34,0,0,35,15,0,134,83,0,0,88,242,4,0,35,76,0,0,0,36,72,0,25,38,36,1,0,75,38,0,0,39,73,0,25,40,39,2,0,73,40,0,119,0,207,255,0,41,75,0,0,42,3,0,82,43,42,0,16,44,41,43,121,44,18,0,0,45,3,0,25,46,45,4,82,47,46,0,0,49,75,0,3,50,47,49,0,51,3,0,82,52,51,0,0,53,75,0,4,54,52,53,134,55,0,0,240,9,6,0,50,54,0,0,85,77,55,0,0,56,15,0,134,83,0,0,88,242,4,0,56,77,0,0,0,57,74,0,82,58,57,0,32,60,58,0,120,60,7,0,0,68,74,0,134,83,0,0,180,1,6,0,68,0,0,0,137,81,0,0,139,0,0,0,0,61,3,0,25,62,61,4,82,63,62,0,0,64,3,0,82,65,64,0,134,66,0,0,240,9,6,0,63,65,0,0,85,78,66,0,0,67,15,0,134,83,0,0,88,242,4,0,67,78,0,0,0,68,74,0,134,83,0,0,180,1,6,0,68,0,0,0,137,81,0,0,139,0,0,0,140,1,75,0,0,0,0,0,1,71,0,0,136,73,0,0,0,72,73,0,136,73,0,0,25,73,73,32,137,73,0,0,130,73,0,0,136,74,0,0,49,73,73,74,144,11,4,0,135,73,0,0,0,1,0,0,1,73,4,0,1,74,1,0,134,2,0,0,224,168,5,0,73,74,0,0,0,68,2,0,0,13,1,0,25,24,13,8,82,35,24,0,0,46,68,0,134,74,0,0,36,105,4,0,35,46,0,0,0,57,68,0,25,63,57,12,82,64,63,0,0,66,64,0,0,65,66,0,1,74,0,0,14,3,65,74,120,3,2,0,119,0,18,0,0,4,66,0,0,5,4,0,0,6,68,0,25,7,6,8,82,8,7,0,16,9,5,8,120,9,2,0,119,0,10,0,0,10,66,0,82,11,10,0,134,74,0,0,36,198,5,0,11,0,0,0,0,12,66,0,25,14,12,4,0,66,14,0,119,0,235,255,0,15,68,0,134,74,0,0,180,1,6,0,15,0,0,0,0,16,1,0,25,17,16,8,82,18,17,0,134,74,0,0,52,67,4,0,18,0,0,0,1,74,4,0,1,73,1,0,134,19,0,0,224,168,5,0,74,73,0,0,0,69,19,0,0,20,1,0,25,21,20,12,82,22,21,0,0,23,69,0,134,73,0,0,36,105,4,0,22,23,0,0,0,25,69,0,25,26,25,12,82,27,26,0,0,67,27,0,0,28,67,0,1,73,0,0,14,29,28,73,120,29,2,0,119,0,18,0,0,30,67,0,0,31,30,0,0,32,69,0,25,33,32,8,82,34,33,0,16,36,31,34,120,36,2,0,119,0,10,0,0,37,67,0,82,38,37,0,134,73,0,0,96,210,4,0,38,0,0,0,0,39,67,0,25,40,39,4,0,67,40,0,119,0,235,255,0,41,69,0,134,73,0,0,180,1,6,0,41,0,0,0,0,42,1,0,25,43,42,12,82,44,43,0,134,73,0,0,52,67,4,0,44,0,0,0,0,45,1,0,25,47,45,16,82,48,47,0,134,73,0,0,52,67,4,0,48,0,0,0,0,49,1,0,134,50,0,0,116,54,6,0,49,0,0,0,33,51,50,0,121,51,11,0,0,61,1,0,134,73,0,0,52,19,6,0,61,0,0,0,0,62,1,0,134,73,0,0,216,166,5,0,62,0,0,0,137,72,0,0,139,0,0,0,0,52,1,0,25,53,52,4,82,54,53,0,1,73,248,0,4,55,54,73,0,70,55,0,0,56,1,0,25,58,56,4,82,59,58,0,134,73,0,0,52,19,6,0,59,0,0,0,0,60,70,0,134,73,0,0,228,94,6,0,60,0,0,0,0,61,1,0,134,73,0,0,52,19,6,0,61,0,0,0,0,62,1,0,134,73,0,0,216,166,5,0,62,0,0,0,137,72,0,0,139,0,0,0,140,3,57,0,0,0,0,0,1,53,0,0,136,55,0,0,0,54,55,0,136,55,0,0,25,55,55,48,137,55,0,0,130,55,0,0,136,56,0,0,49,55,55,56,16,14,4,0,135,55,0,0,25,48,54,16,0,47,54,0,25,46,54,32,85,46,1,0,25,4,46,4,25,5,0,48,82,16,5,0,33,27,16,0,38,55,27,1,0,38,55,0,4,40,2,38,85,4,40,0,25,41,46,8,25,42,0,44,82,43,42,0,85,41,43,0,25,44,46,12,85,44,16,0,1,55,40,6,82,6,55,0,1,55,0,0,13,7,6,55,121,7,17,0,25,12,0,60,82,13,12,0,85,48,13,0,25,51,48,4,85,51,46,0,25,52,48,8,1,55,2,0,85,52,55,0,1,55,145,0,135,14,66,0,55,48,0,0,134,15,0,0,156,93,6,0,14,0,0,0,0,45,15,0,119,0,22,0,1,56,134,0,135,55,30,0,56,0,0,0,25,8,0,60,82,9,8,0,85,47,9,0,25,49,47,4,85,49,46,0,25,50,47,8,1,55,2,0,85,50,55,0,1,55,145,0,135,10,66,0,55,47,0,0,134,11,0,0,156,93,6,0,10,0,0,0,1,56,0,0,135,55,31,0,56,0,0,0,0,45,11,0,34,17,45,1,121,17,17,0,38,55,45,48,0,18,55,0,40,55,18,16,0,19,55,0,82,20,0,0,20,55,20,19,0,21,55,0,85,0,21,0,25,22,0,8,1,55,0,0,85,22,55,0,25,23,0,4,1,55,0,0,85,23,55,0,0,3,45,0,119,0,26,0,82,24,4,0,16,25,24,45,121,25,22,0,4,26,45,24,82,28,42,0,25,29,0,4,85,29,28,0,0,30,28,0,3,31,30,26,25,32,0,8,85,32,31,0,82,33,5,0,32,34,33,0,121,34,3,0,0,3,2,0,119,0,10,0,25,35,30,1,85,29,35,0,78,36,30,0,26,37,2,1,3,39,1,37,83,39,36,0,0,3,2,0,119,0,2,0,0,3,45,0,137,54,0,0,139,3,0,0,140,1,68,0,0,0,0,0,1,64,0,0,136,66,0,0,0,65,66,0,136,66,0,0,25,66,66,16,137,66,0,0,130,66,0,0,136,67,0,0,49,66,66,67,232,15,4,0,135,66,0,0,0,3,0,0,0,4,3,0,25,15,4,24,82,26,15,0,1,66,0,0,14,37,26,66], eb + 256000);
  HEAPU8.set([0,48,3,0,120,37,18,0,25,47,48,44,82,49,47,0,39,66,49,1,0,50,66,0,85,47,50,0,0,51,3,0,25,52,51,44,82,53,52,0,39,66,53,2,0,54,66,0,85,52,54,0,0,55,3,0,134,66,0,0,24,152,4,0,55,0,0,0,137,65,0,0,139,0,0,0,25,56,48,24,82,57,56,0,0,62,57,0,0,58,62,0,25,59,58,24,82,5,59,0,0,63,5,0,0,6,62,0,25,7,6,32,134,8,0,0,188,53,6,0,7,0,0,0,32,9,8,0,0,10,63,0,1,66,0,0,14,11,10,66,19,66,9,11,0,61,66,0,121,61,52,0,0,12,63,0,25,13,12,32,134,14,0,0,188,53,6,0,13,0,0,0,33,16,14,0,120,16,45,0,0,17,63,0,25,18,17,32,25,19,18,4,82,20,19,0,26,21,20,4,0,60,21,0,0,22,3,0,82,23,22,0,1,66,1,0,1,67,5,0,138,23,66,67,248,16,4,0,252,16,4,0,244,16,4,0,0,17,4,0,4,17,4,0,119,0,28,0,119,0,4,0,119,0,3,0,119,0,2,0,119,0,1,0,0,24,62,0,25,25,24,44,82,27,25,0,39,66,27,1,0,28,66,0,85,25,28,0,0,29,62,0,25,30,29,44,82,31,30,0,39,66,31,2,0,32,66,0,85,30,32,0,0,33,63,0,0,62,33,0,0,34,63,0,25,35,34,24,82,36,35,0,0,63,36,0,0,1,63,0,1,66,0,0,14,2,1,66,120,2,207,255,119,0,1,0,0,38,62,0,25,39,38,44,82,40,39,0,39,66,40,1,0,41,66,0,85,39,41,0,0,42,62,0,25,43,42,44,82,44,43,0,39,66,44,2,0,45,66,0,85,43,45,0,0,46,62,0,134,66,0,0,24,152,4,0,46,0,0,0,137,65,0,0,139,0,0,0,140,2,55,0,0,0,0,0,2,52,0,0,255,0,0,0,1,50,0,0,136,53,0,0,0,51,53,0,136,53,0,0,25,53,53,32,137,53,0,0,130,53,0,0,136,54,0,0,49,53,53,54,232,17,4,0,135,53,0,0,0,47,51,0,1,53,0,0,85,47,53,0,1,54,0,0,109,47,4,54,1,53,0,0,109,47,8,53,1,54,0,0,109,47,12,54,1,53,0,0,109,47,16,53,1,54,0,0,109,47,20,54,1,53,0,0,109,47,24,53,1,54,0,0,109,47,28,54,78,8,1,0,41,54,8,24,42,54,54,24,32,9,54,0,121,9,3,0,1,2,0,0,119,0,99,0,25,20,1,1,78,31,20,0,41,54,31,24,42,54,54,24,32,41,54,0,121,41,19,0,0,4,0,0,78,42,4,0,41,54,42,24,42,54,54,24,41,53,8,24,42,53,53,24,13,43,54,53,25,44,4,1,121,43,3,0,0,4,44,0,119,0,247,255,0,5,4,0,119,0,1,0,0,45,5,0,0,46,0,0,4,10,45,46,0,2,10,0,119,0,75,0,0,3,1,0,0,14,8,0,38,53,14,31,0,13,53,0,19,53,13,52,0,15,53,0,1,53,1,0,22,53,53,15,0,16,53,0,19,53,14,52,43,53,53,5,0,49,53,0,19,53,49,52,0,17,53,0,41,53,17,2,3,18,47,53,82,19,18,0,20,53,19,16,0,21,53,0,85,18,21,0,25,22,3,1,78,23,22,0,41,53,23,24,42,53,53,24,32,24,53,0,120,24,4,0,0,3,22,0,0,14,23,0,119,0,230,255,78,11,0,0,41,53,11,24,42,53,53,24,32,12,53,0,121,12,3,0,0,6,0,0,119,0,35,0,0,7,0,0,0,25,11,0,19,53,25,52,43,53,53,5,0,48,53,0,19,53,48,52,0,26,53,0,41,53,26,2,3,27,47,53,82,28,27,0,38,53,25,31,0,29,53,0,19,53,29,52,0,30,53,0,1,53,1,0,22,53,53,30,0,32,53,0,19,53,28,32,0,33,53,0,32,34,33,0,121,34,3,0,0,6,7,0,119,0,12,0,25,35,7,1,78,36,35,0,41,53,36,24,42,53,53,24,32,37,53,0,121,37,3,0,0,6,35,0,119,0,4,0,0,7,35,0,0,25,36,0,119,0,225,255,0,38,6,0,0,39,0,0,4,40,38,39,0,2,40,0,137,51,0,0,139,2,0,0,140,4,79,0,0,0,0,0,1,75,0,0,136,77,0,0,0,76,77,0,136,77,0,0,25,77,77,48,137,77,0,0,130,77,0,0,136,78,0,0,49,77,77,78,12,20,4,0,135,77,0,0,0,69,76,0,0,4,0,0,0,5,1,0,0,16,2,0,0,27,3,0,0,38,5,0,0,49,16,0,134,60,0,0,60,155,5,0,38,49,0,0,0,72,60,0,0,66,72,0,0,67,4,0,25,68,67,8,82,6,68,0,25,7,6,12,82,8,7,0,41,77,66,2,3,9,8,77,82,10,9,0,0,74,10,0,0,11,72,0,0,12,4,0,25,13,12,12,82,14,13,0,25,15,14,12,82,17,15,0,41,77,11,2,3,18,17,77,82,19,18,0,0,70,19,0,0,20,74,0,25,21,20,12,82,22,21,0,0,73,22,0,1,71,0,0,0,23,73,0,1,77,0,0,14,24,23,77,120,24,3,0,1,75,7,0,119,0,36,0,0,25,73,0,0,26,25,0,0,28,74,0,25,29,28,8,82,30,29,0,16,31,26,30,120,31,3,0,1,75,7,0,119,0,27,0,0,32,73,0,82,33,32,0,82,34,33,0,0,35,16,0,13,36,34,35,121,36,14,0,0,37,5,0,0,39,73,0,82,40,39,0,25,41,40,4,82,42,41,0,0,43,16,0,134,44,0,0,180,228,4,0,37,42,43,0,32,45,44,0,121,45,3,0,1,75,8,0,119,0,8,0,0,46,73,0,25,47,46,4,0,73,47,0,0,48,71,0,25,50,48,1,0,71,50,0,119,0,216,255,32,77,75,7,121,77,27,0,134,51,0,0,92,78,6,0,85,69,51,0,82,52,69,0,0,53,5,0,0,54,16,0,134,77,0,0,48,166,5,0,52,53,54,0,0,55,74,0,134,77,0,0,88,242,4,0,55,69,0,0,0,56,70,0,0,57,27,0,134,77,0,0,88,242,4,0,56,57,0,0,0,58,4,0,25,59,58,4,82,61,59,0,25,62,61,1,85,59,62,0,137,76,0,0,139,0,0,0,119,0,11,0,32,77,75,8,121,77,9,0,0,63,70,0,0,64,71,0,0,65,27,0,134,77,0,0,184,176,5,0,63,64,65,0,137,76,0,0,139,0,0,0,139,0,0,0,140,1,56,0,0,0,0,0,1,52,0,0,136,54,0,0,0,53,54,0,136,54,0,0,25,54,54,64,137,54,0,0,130,54,0,0,136,55,0,0,49,54,54,55,16,22,4,0,135,54,0,0,25,5,53,56,25,4,53,40,25,3,53,32,25,2,53,24,25,1,53,16,0,51,53,0,0,6,0,0,1,55,2,28,134,54,0,0,44,77,6,0,55,51,0,0,0,7,6,0,1,54,3,0,85,7,54,0,0,18,6,0,1,54,24,0,135,29,26,0,54,18,0,0,0,50,29,0,0,40,6,0,0,45,50,0,134,54,0,0,96,7,5,0,40,45,0,0,0,46,6,0,0,47,6,0,25,48,47,72,82,54,48,0,85,1,54,0,106,55,48,4,109,1,4,55,134,55,0,0,196,181,5,0,46,1,0,0,0,49,6,0,0,8,6,0,25,9,8,56,82,55,9,0,85,2,55,0,106,54,9,4,109,2,4,54,134,54,0,0,68,187,5,0,49,2,0,0,0,10,6,0,0,11,6,0,25,12,11,88,82,54,12,0,85,3,54,0,106,55,12,4,109,3,4,55,134,55,0,0,192,186,5,0,10,3,0,0,0,13,6,0,0,14,6,0,1,55,128,0,3,15,14,55,82,55,15,0,85,4,55,0,106,54,15,4,109,4,4,54,106,55,15,8,109,4,8,55,134,55,0,0,172,207,4,0,13,4,0,0,0,16,6,0,0,17,6,0,1,55,168,0,3,19,17,55,78,20,19,0,134,55,0,0,20,112,5,0,16,20,0,0,0,21,6,0,0,22,6,0,25,23,22,104,82,24,23,0,0,25,6,0,25,26,25,108,82,27,26,0,134,55,0,0,220,115,3,0,21,24,27,0,0,28,6,0,0,30,6,0,25,31,30,112,88,32,31,0,134,55,0,0,168,239,5,0,28,32,0,0,0,33,6,0,0,34,6,0,1,55,144,0,3,35,34,55,82,55,35,0,85,5,55,0,106,54,35,4,109,5,4,54,134,54,0,0,244,184,5,0,33,5,0,0,0,36,6,0,0,37,6,0,1,54,192,0,3,38,37,54,78,39,38,0,134,54,0,0,128,234,5,0,36,39,0,0,0,41,6,0,0,42,6,0,1,54,193,0,3,43,42,54,78,44,43,0,134,54,0,0,8,231,5,0,41,44,0,0,137,53,0,0,139,0,0,0,140,3,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,127,20,0,0,114,20,1,0,127,20,0,0,102,21,1,1,107,20,1,21,127,21,0,0,102,20,1,2,107,21,2,20,127,20,0,0,102,21,1,3,107,20,3,21,127,21,0,0,88,3,21,0,127,21,0,0,114,21,2,0,127,21,0,0,102,20,2,1,107,21,1,20,127,20,0,0,102,21,2,2,107,20,2,21,127,21,0,0,102,20,2,3,107,21,3,20,127,20,0,0,88,4,20,0,64,10,3,4,127,20,0,0,89,20,10,0,127,20,0,0,114,0,20,0,127,21,0,0,102,21,21,1,107,0,1,21,127,20,0,0,102,20,20,2,107,0,2,20,127,21,0,0,102,21,21,3,107,0,3,21,25,11,0,4,25,12,1,4,127,21,0,0,114,21,12,0,127,21,0,0,102,20,12,1,107,21,1,20,127,20,0,0,102,21,12,2,107,20,2,21,127,21,0,0,102,20,12,3,107,21,3,20,127,20,0,0,88,13,20,0,25,14,2,4,127,20,0,0,114,20,14,0,127,20,0,0,102,21,14,1,107,20,1,21,127,21,0,0,102,20,14,2,107,21,2,20,127,20,0,0,102,21,14,3,107,20,3,21,127,21,0,0,88,15,21,0,64,16,13,15,127,21,0,0,89,21,16,0,127,21,0,0,114,11,21,0,127,20,0,0,102,20,20,1,107,11,1,20,127,21,0,0,102,21,21,2,107,11,2,21,127,20,0,0,102,20,20,3,107,11,3,20,25,17,0,8,25,5,1,8,127,20,0,0,114,20,5,0,127,20,0,0,102,21,5,1,107,20,1,21,127,21,0,0,102,20,5,2,107,21,2,20,127,20,0,0,102,21,5,3,107,20,3,21,127,21,0,0,88,6,21,0,25,7,2,8,127,21,0,0,114,21,7,0,127,21,0,0,102,20,7,1,107,21,1,20,127,20,0,0,102,21,7,2,107,20,2,21,127,21,0,0,102,20,7,3,107,21,3,20,127,20,0,0,88,8,20,0,64,9,6,8,127,20,0,0,89,20,9,0,127,20,0,0,114,17,20,0,127,21,0,0,102,21,21,1,107,17,1,21,127,20,0,0,102,20,20,2,107,17,2,20,127,21,0,0,102,21,21,3,107,17,3,21,139,0,0,0,140,3,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,127,20,0,0,114,20,1,0,127,20,0,0,102,21,1,1,107,20,1,21,127,21,0,0,102,20,1,2,107,21,2,20,127,20,0,0,102,21,1,3,107,20,3,21,127,21,0,0,88,3,21,0,127,21,0,0,114,21,2,0,127,21,0,0,102,20,2,1,107,21,1,20,127,20,0,0,102,21,2,2,107,20,2,21,127,21,0,0,102,20,2,3,107,21,3,20,127,20,0,0,88,4,20,0,63,10,3,4,127,20,0,0,89,20,10,0,127,20,0,0,114,0,20,0,127,21,0,0,102,21,21,1,107,0,1,21,127,20,0,0,102,20,20,2,107,0,2,20,127,21,0,0,102,21,21,3,107,0,3,21,25,11,0,4,25,12,1,4,127,21,0,0,114,21,12,0,127,21,0,0,102,20,12,1,107,21,1,20,127,20,0,0,102,21,12,2,107,20,2,21,127,21,0,0,102,20,12,3,107,21,3,20,127,20,0,0,88,13,20,0,25,14,2,4,127,20,0,0,114,20,14,0,127,20,0,0,102,21,14,1,107,20,1,21,127,21,0,0,102,20,14,2,107,21,2,20,127,20,0,0,102,21,14,3,107,20,3,21,127,21,0,0,88,15,21,0,63,16,13,15,127,21,0,0,89,21,16,0,127,21,0,0,114,11,21,0,127,20,0,0,102,20,20,1,107,11,1,20,127,21,0,0,102,21,21,2,107,11,2,21,127,20,0,0,102,20,20,3,107,11,3,20,25,17,0,8,25,5,1,8,127,20,0,0,114,20,5,0,127,20,0,0,102,21,5,1,107,20,1,21,127,21,0,0,102,20,5,2,107,21,2,20,127,20,0,0,102,21,5,3,107,20,3,21,127,21,0,0,88,6,21,0,25,7,2,8,127,21,0,0,114,21,7,0,127,21,0,0,102,20,7,1,107,21,1,20,127,20,0,0,102,21,7,2,107,20,2,21,127,21,0,0,102,20,7,3,107,21,3,20,127,20,0,0,88,8,20,0,63,9,6,8,127,20,0,0,89,20,9,0,127,20,0,0,114,17,20,0,127,21,0,0,102,21,21,1,107,17,1,21,127,20,0,0,102,20,20,2,107,17,2,20,127,21,0,0,102,21,21,3,107,17,3,21,139,0,0,0,140,3,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,127,20,0,0,114,20,1,0,127,20,0,0,102,21,1,1,107,20,1,21,127,21,0,0,102,20,1,2,107,21,2,20,127,20,0,0,102,21,1,3,107,20,3,21,127,21,0,0,88,3,21,0,127,21,0,0,114,21,2,0,127,21,0,0,102,20,2,1,107,21,1,20,127,20,0,0,102,21,2,2,107,20,2,21,127,21,0,0,102,20,2,3,107,21,3,20,127,20,0,0,88,4,20,0,64,10,3,4,127,20,0,0,89,20,10,0,127,20,0,0,114,0,20,0,127,21,0,0,102,21,21,1,107,0,1,21,127,20,0,0,102,20,20,2,107,0,2,20,127,21,0,0,102,21,21,3,107,0,3,21,25,11,0,4,25,12,1,4,127,21,0,0,114,21,12,0,127,21,0,0,102,20,12,1,107,21,1,20,127,20,0,0,102,21,12,2,107,20,2,21,127,21,0,0,102,20,12,3,107,21,3,20,127,20,0,0,88,13,20,0,25,14,2,4,127,20,0,0,114,20,14,0,127,20,0,0,102,21,14,1,107,20,1,21,127,21,0,0,102,20,14,2,107,21,2,20,127,20,0,0,102,21,14,3,107,20,3,21,127,21,0,0,88,15,21,0,64,16,13,15,127,21,0,0,89,21,16,0,127,21,0,0,114,11,21,0,127,20,0,0,102,20,20,1,107,11,1,20,127,21,0,0,102,21,21,2,107,11,2,21,127,20,0,0,102,20,20,3,107,11,3,20,25,17,0,8,25,5,1,8,127,20,0,0,114,20,5,0,127,20,0,0,102,21,5,1,107,20,1,21,127,21,0,0,102,20,5,2,107,21,2,20,127,20,0,0,102,21,5,3,107,20,3,21,127,21,0,0,88,6,21,0,25,7,2,8,127,21,0,0,114,21,7,0,127,21,0,0,102,20,7,1,107,21,1,20,127,20,0,0,102,21,7,2,107,20,2,21,127,21,0,0,102,20,7,3,107,21,3,20,127,20,0,0,88,8,20,0,64,9,6,8,127,20,0,0,89,20,9,0,127,20,0,0,114,17,20,0,127,21,0,0,102,21,21,1,107,17,1,21,127,20,0,0,102,20,20,2,107,17,2,20,127,21,0,0,102,21,21,3,107,17,3,21,139,0,0,0,140,3,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,127,20,0,0,114,20,1,0,127,20,0,0,102,21,1,1,107,20,1,21,127,21,0,0,102,20,1,2,107,21,2,20,127,20,0,0,102,21,1,3,107,20,3,21,127,21,0,0,88,3,21,0,127,21,0,0,114,21,2,0,127,21,0,0,102,20,2,1,107,21,1,20,127,20,0,0,102,21,2,2,107,20,2,21,127,21,0,0,102,20,2,3,107,21,3,20,127,20,0,0,88,4,20,0,65,10,3,4,127,20,0,0,89,20,10,0,127,20,0,0,114,0,20,0,127,21,0,0,102,21,21,1,107,0,1,21,127,20,0,0,102,20,20,2,107,0,2,20,127,21,0,0,102,21,21,3,107,0,3,21,25,11,0,4,25,12,1,4,127,21,0,0,114,21,12,0,127,21,0,0,102,20,12,1,107,21,1,20,127,20,0,0,102,21,12,2,107,20,2,21,127,21,0,0,102,20,12,3,107,21,3,20,127,20,0,0,88,13,20,0,25,14,2,4,127,20,0,0,114,20,14,0,127,20,0,0,102,21,14,1,107,20,1,21,127,21,0,0,102,20,14,2,107,21,2,20,127,20,0,0,102,21,14,3,107,20,3,21,127,21,0,0,88,15,21,0,65,16,13,15,127,21,0,0,89,21,16,0,127,21,0,0,114,11,21,0,127,20,0,0,102,20,20,1,107,11,1,20,127,21,0,0,102,21,21,2,107,11,2,21,127,20,0,0,102,20,20,3,107,11,3,20,25,17,0,8,25,5,1,8,127,20,0,0,114,20,5,0,127,20,0,0,102,21,5,1,107,20,1,21,127,21,0,0,102,20,5,2,107,21,2,20,127,20,0,0,102,21,5,3,107,20,3,21,127,21,0,0,88,6,21,0,25,7,2,8,127,21,0,0,114,21,7,0,127,21,0,0,102,20,7,1,107,21,1,20,127,20,0,0,102,21,7,2,107,20,2,21,127,21,0,0,102,20,7,3,107,21,3,20,127,20,0,0,88,8,20,0,65,9,6,8,127,20,0,0,89,20,9,0,127,20,0,0,114,17,20,0,127,21,0,0,102,21,21,1,107,17,1,21,127,20,0,0,102,20,20,2,107,17,2,20,127,21,0,0,102,21,21,3,107,17,3,21,139,0,0,0,140,3,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,127,20,0,0,114,20,1,0,127,20,0,0,102,21,1,1,107,20,1,21,127,21,0,0,102,20,1,2,107,21,2,20,127,20,0,0,102,21,1,3,107,20,3,21,127,21,0,0,88,3,21,0,127,21,0,0,114,21,2,0,127,21,0,0,102,20,2,1,107,21,1,20,127,20,0,0,102,21,2,2,107,20,2,21,127,21,0,0,102,20,2,3,107,21,3,20,127,20,0,0,88,4,20,0,63,10,3,4,127,20,0,0,89,20,10,0,127,20,0,0,114,0,20,0,127,21,0,0,102,21,21,1,107,0,1,21,127,20,0,0,102,20,20,2,107,0,2,20,127,21,0,0,102,21,21,3,107,0,3,21,25,11,0,4,25,12,1,4,127,21,0,0,114,21,12,0,127,21,0,0,102,20,12,1,107,21,1,20,127,20,0,0,102,21,12,2,107,20,2,21,127,21,0,0,102,20,12,3,107,21,3,20,127,20,0,0,88,13,20,0,25,14,2,4,127,20,0,0,114,20,14,0,127,20,0,0,102,21,14,1,107,20,1,21,127,21,0,0,102,20,14,2,107,21,2,20,127,20,0,0,102,21,14,3,107,20,3,21,127,21,0,0,88,15,21,0,63,16,13,15,127,21,0,0,89,21,16,0,127,21,0,0,114,11,21,0,127,20,0,0,102,20,20,1,107,11,1,20,127,21,0,0,102,21,21,2,107,11,2,21,127,20,0,0,102,20,20,3,107,11,3,20,25,17,0,8,25,5,1,8,127,20,0,0,114,20,5,0,127,20,0,0,102,21,5,1,107,20,1,21,127,21,0,0,102,20,5,2,107,21,2,20,127,20,0,0,102,21,5,3,107,20,3,21,127,21,0,0,88,6,21,0,25,7,2,8,127,21,0,0,114,21,7,0,127,21,0,0,102,20,7,1,107,21,1,20,127,20,0,0,102,21,7,2,107,20,2,21,127,21,0,0,102,20,7,3,107,21,3,20,127,20,0,0,88,8,20,0,63,9,6,8,127,20,0,0,89,20,9,0,127,20,0,0,114,17,20,0,127,21,0,0,102,21,21,1,107,17,1,21,127,20,0,0,102,20,20,2,107,17,2,20,127,21,0,0,102,21,21,3,107,17,3,21,139,0,0,0,140,3,26,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,120,34,4,0,135,24,0,0,58,3,2,0,127,24,0,0,114,24,1,0,127,24,0,0,102,25,1,1,107,24,1,25,127,25,0,0,102,24,1,2,107,25,2,24,127,24,0,0,102,25,1,3,107,24,3,25,127,25,0,0,88,4,25,0,58,14,3,0,65,15,4,14,127,25,0,0,89,25,15,0,127,25,0,0,114,0,25,0,127,24,0,0,102,24,24,1,107,0,1,24,127,25,0,0,102,25,25,2,107,0,2,25,127,24,0,0,102,24,24,3,107,0,3,24,25,16,0,4,25,17,1,4,127,24,0,0,114,24,17,0,127,24,0,0,102,25,17,1,107,24,1,25,127,25,0,0,102,24,17,2,107,25,2,24,127,24,0,0,102,25,17,3,107,24,3,25,127,25,0,0,88,18,25,0,58,19,3,0,65,20,18,19,127,25,0,0,89,25,20,0,127,25,0,0,114,16,25,0,127,24,0,0,102,24,24,1,107,16,1,24,127,25,0,0,102,25,25,2,107,16,2,25,127,24,0,0,102,24,24,3,107,16,3,24,25,21,0,8,25,5,1,8,127,24,0,0,114,24,5,0,127,24,0,0,102,25,5,1,107,24,1,25,127,25,0,0,102,24,5,2,107,25,2,24,127,24,0,0,102,25,5,3,107,24,3,25,127,25,0,0,88,6,25,0,58,7,3,0,65,8,6,7,127,25,0,0,89,25,8,0,127,25,0,0,114,21,25,0,127,24,0,0,102,24,24,1,107,21,1,24,127,25,0,0,102,25,25,2,107,21,2,25,127,24,0,0,102,24,24,3,107,21,3,24,25,9,0,12,25,10,1,12,127,24,0,0,114,24,10,0,127,24,0,0,102,25,10,1,107,24,1,25,127,25,0,0,102,24,10,2,107,25,2,24,127,24,0,0,102,25,10,3,107,24,3,25,127,25,0,0,88,11,25,0,58,12,3,0,65,13,11,12,127,25,0,0,89,25,13,0,127,25,0,0,114,9,25,0,127,24,0,0,102,24,24,1,107,9,1,24,127,25,0,0,102,25,25,2,107,9,2,25,127,24,0,0,102,24,24,3,107,9,3,24,137,23,0,0,139,0,0,0,140,3,26,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,144,36,4,0,135,24,0,0,58,3,2,0,127,24,0,0,114,24,1,0,127,24,0,0,102,25,1,1,107,24,1,25,127,25,0,0,102,24,1,2,107,25,2,24,127,24,0,0,102,25,1,3,107,24,3,25,127,25,0,0,88,4,25,0,58,14,3,0,65,15,4,14,127,25,0,0,89,25,15,0,127,25,0,0,114,0,25,0,127,24,0,0,102,24,24,1,107,0,1,24,127,25,0,0,102,25,25,2,107,0,2,25,127,24,0,0,102,24,24,3,107,0,3,24,25,16,0,4,25,17,1,4,127,24,0,0,114,24,17,0,127,24,0,0,102,25,17,1,107,24,1,25,127,25,0,0,102,24,17,2,107,25,2,24,127,24,0,0,102,25,17,3,107,24,3,25,127,25,0,0,88,18,25,0,58,19,3,0,65,20,18,19,127,25,0,0,89,25,20,0,127,25,0,0,114,16,25,0,127,24,0,0,102,24,24,1,107,16,1,24,127,25,0,0,102,25,25,2,107,16,2,25,127,24,0,0,102,24,24,3,107,16,3,24,25,21,0,8,25,5,1,8,127,24,0,0,114,24,5,0,127,24,0,0,102,25,5,1,107,24,1,25,127,25,0,0,102,24,5,2,107,25,2,24,127,24,0,0,102,25,5,3,107,24,3,25,127,25,0,0,88,6,25,0,58,7,3,0,65,8,6,7,127,25,0,0,89,25,8,0,127,25,0,0,114,21,25,0,127,24,0,0,102,24,24,1,107,21,1,24,127,25,0,0,102,25,25,2,107,21,2,25,127,24,0,0,102,24,24,3,107,21,3,24,25,9,0,12,25,10,1,12,127,24,0,0,114,24,10,0,127,24,0,0,102,25,10,1,107,24,1,25,127,25,0,0,102,24,10,2,107,25,2,24,127,24,0,0,102,25,10,3,107,24,3,25,127,25,0,0,88,11,25,0,58,12,3,0,65,13,11,12,127,25,0,0,89,25,13,0,127,25,0,0,114,9,25,0,127,24,0,0,102,24,24,1,107,9,1,24,127,25,0,0,102,25,25,2,107,9,2,25,127,24,0,0,102,24,24,3,107,9,3,24,137,23,0,0,139,0,0,0,140,3,26,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,168,38,4,0,135,24,0,0,58,3,2,0,127,24,0,0,114,24,1,0,127,24,0,0,102,25,1,1,107,24,1,25,127,25,0,0,102,24,1,2,107,25,2,24,127,24,0,0,102,25,1,3,107,24,3,25,127,25,0,0,88,4,25,0,58,14,3,0,65,15,4,14,127,25,0,0,89,25,15,0,127,25,0,0,114,0,25,0,127,24,0,0,102,24,24,1,107,0,1,24,127,25,0,0,102,25,25,2,107,0,2,25,127,24,0,0,102,24,24,3,107,0,3,24,25,16,0,4,25,17,1,4,127,24,0,0,114,24,17,0,127,24,0,0,102,25,17,1,107,24,1,25,127,25,0,0,102,24,17,2,107,25,2,24,127,24,0,0,102,25,17,3,107,24,3,25,127,25,0,0,88,18,25,0,58,19,3,0,65,20,18,19,127,25,0,0,89,25,20,0,127,25,0,0,114,16,25,0,127,24,0,0,102,24,24,1,107,16,1,24,127,25,0,0,102,25,25,2,107,16,2,25,127,24,0,0,102,24,24,3,107,16,3,24,25,21,0,8,25,5,1,8,127,24,0,0,114,24,5,0,127,24,0,0,102,25,5,1,107,24,1,25,127,25,0,0,102,24,5,2,107,25,2,24,127,24,0,0,102,25,5,3,107,24,3,25,127,25,0,0,88,6,25,0,58,7,3,0,65,8,6,7,127,25,0,0,89,25,8,0,127,25,0,0,114,21,25,0,127,24,0,0,102,24,24,1,107,21,1,24,127,25,0,0,102,25,25,2,107,21,2,25,127,24,0,0,102,24,24,3,107,21,3,24,25,9,0,12,25,10,1,12,127,24,0,0,114,24,10,0,127,24,0,0,102,25,10,1,107,24,1,25,127,25,0,0,102,24,10,2,107,25,2,24,127,24,0,0,102,25,10,3,107,24,3,25,127,25,0,0,88,11,25,0,58,12,3,0,65,13,11,12,127,25,0,0,89,25,13,0,127,25,0,0,114,9,25,0,127,24,0,0,102,24,24,1,107,9,1,24,127,25,0,0,102,25,25,2,107,9,2,25,127,24,0,0,102,24,24,3,107,9,3,24,137,23,0,0,139,0,0,0,140,1,56,0,0,0,0,0,1,52,0,0,136,54,0,0,0,53,54,0,136,54,0,0,25,54,54,64,137,54,0,0,130,54,0,0,136,55,0,0,49,54,54,55,192,40,4,0,135,54,0,0,25,5,53,48,25,4,53,32,25,3,53,24,25,2,53,16,25,1,53,8,0,6,0,0,0,7,6,0,1,54,5,0,85,7,54,0,0,18,6,0,1,54,8,0,135,29,26,0,54,18,0,0,0,51,29,0,0,40,6,0,0,46,51,0,134,54,0,0,96,7,5,0,40,46,0,0,0,47,6,0,0,48,6,0,25,49,48,72,82,54,49,0,85,1,54,0,106,55,49,4,109,1,4,55,134,55,0,0,196,181,5,0,47,1,0,0,0,50,6,0,0,8,6,0,25,9,8,56,82,55,9,0,85,2,55,0,106,54,9,4,109,2,4,54,134,54,0,0,68,187,5,0,50,2,0,0,0,10,6,0,0,11,6,0,25,12,11,88,82,54,12,0,85,3,54,0,106,55,12,4,109,3,4,55,134,55,0,0,192,186,5,0,10,3,0,0,0,13,6,0,0,14,6,0,1,55,128,0,3,15,14,55,82,55,15,0,85,4,55,0,106,54,15,4,109,4,4,54,106,55,15,8,109,4,8,55,134,55,0,0,172,207,4,0,13,4,0,0,0,16,6,0,0,17,6,0,1,55,168,0,3,19,17,55,78,20,19,0,134,55,0,0,20,112,5,0,16,20,0,0,0,21,6,0,0,22,6,0,25,23,22,104,82,24,23,0,0,25,6,0,25,26,25,108,82,27,26,0,134,55,0,0,220,115,3,0,21,24,27,0,0,28,6,0,0,30,6,0,25,31,30,112,88,32,31,0,134,55,0,0,168,239,5,0,28,32,0,0,0,33,6,0,0,34,6,0,1,55,144,0,3,35,34,55,82,55,35,0,85,5,55,0,106,54,35,4,109,5,4,54,134,54,0,0,244,184,5,0,33,5,0,0,0,36,6,0,0,37,6,0,1,54,192,0,3,38,37,54,78,39,38,0,134,54,0,0,128,234,5,0,36,39,0,0,0,41,6,0,0,42,6,0,1,54,193,0,3,43,42,54,78,44,43,0,134,54,0,0,8,231,5,0,41,44,0,0,0,45,6,0,134,54,0,0,84,150,5,0,45,0,0,0,137,53,0,0,139,0,0,0,140,1,56,0,0,0,0,0,1,52,0,0,136,54,0,0,0,53,54,0,136,54,0,0,25,54,54,64,137,54,0,0,130,54,0,0,136,55,0,0,49,54,54,55,212,42,4,0,135,54,0,0,25,5,53,48,25,4,53,32,25,3,53,24,25,2,53,16,25,1,53,8,0,6,0,0,0,7,6,0,1,54,2,0,85,7,54,0,0,18,6,0,1,54,23,0,135,29,26,0,54,18,0,0,0,51,29,0,0,40,6,0,0,46,51,0,134,54,0,0,96,7,5,0,40,46,0,0,0,47,6,0,0,48,6,0,25,49,48,72,82,54,49,0,85,1,54,0,106,55,49,4,109,1,4,55,134,55,0,0,196,181,5,0,47,1,0,0,0,50,6,0,0,8,6,0,25,9,8,56,82,55,9,0,85,2,55,0,106,54,9,4,109,2,4,54,134,54,0,0,68,187,5,0,50,2,0,0,0,10,6,0,0,11,6,0,25,12,11,88,82,54,12,0,85,3,54,0,106,55,12,4,109,3,4,55,134,55,0,0,192,186,5,0,10,3,0,0,0,13,6,0,0,14,6,0,1,55,128,0,3,15,14,55,82,55,15,0,85,4,55,0,106,54,15,4,109,4,4,54,106,55,15,8,109,4,8,55,134,55,0,0,172,207,4,0,13,4,0,0,0,16,6,0,0,17,6,0,1,55,168,0,3,19,17,55,78,20,19,0,134,55,0,0,20,112,5,0,16,20,0,0,0,21,6,0,0,22,6,0,25,23,22,104,82,24,23,0,0,25,6,0,25,26,25,108,82,27,26,0,134,55,0,0,220,115,3,0,21,24,27,0,0,28,6,0,0,30,6,0,25,31,30,112,88,32,31,0,134,55,0,0,168,239,5,0,28,32,0,0,0,33,6,0,0,34,6,0,1,55,144,0,3,35,34,55,82,55,35,0,85,5,55,0,106,54,35,4,109,5,4,54,134,54,0,0,244,184,5,0,33,5,0,0,0,36,6,0,0,37,6,0,1,54,192,0,3,38,37,54,78,39,38,0,134,54,0,0,128,234,5,0,36,39,0,0,0,41,6,0,0,42,6,0,1,54,193,0,3,43,42,54,78,44,43,0,134,54,0,0,8,231,5,0,41,44,0,0,0,45,6,0,134,54,0,0,112,109,6,0,45,0,0,0,137,53,0,0,139,0,0,0,140,0,64,0,0,0,0,0,2,60,0,0,235,14,0,0,2,61,0,0,213,14,0,0,1,58,0,0,136,62,0,0,0,59,62,0,136,62,0,0,25,62,62,64,137,62,0,0,130,62,0,0,136,63,0,0,49,62,62,63,248,44,4,0,135,62,0,0,25,55,59,24,25,54,59,8,0,53,59,0,1,47,1,0,1,49,0,0,0,0,49,0,34,1,0,32,120,1,2,0,119,0,91,0,0,12,49,0,27,62,12,28,25,23,62,68,0,48,23,0,0,34,48,0,25,42,34,8,25,43,42,4,82,44,43,0,0,50,44,0,0,45,50,0,25,46,45,4,82,2,46,0,0,51,2,0,0,3,50,0,0,4,48,0,25,5,4,8,14,6,3,5,120,6,2,0,119,0,68,0,0,7,50,0,0,52,7,0,0,8,52,0,25,9,8,8,82,10,9,0,82,11,10,0,32,13,11,0,0,14,52,0,121,13,36,0,85,53,14,0,134,62,0,0,44,77,6,0,61,53,0,0,1,63,60,0,134,62,0,0,196,195,5,0,63,0,0,0,0,15,48,0,0,16,52,0,134,62,0,0,20,218,4,0,15,16,0,0,0,17,50,0,134,62,0,0,224,68,6,0,17,0,0,0,1,63,60,0,134,62,0,0,144,96,6,0,63,0,0,0,0,18,52,0,25,19,18,12,82,20,19,0,135,62,22,0,20,0,0,0,0,21,52,0,25,22,21,8,82,24,22,0,135,62,22,0,24,0,0,0,0,25,52,0,135,62,22,0,25,0,0,0,119,0,17,0,0,26,48,0,25,27,26,24,82,28,27,0,0,29,52,0,25,30,29,8,82,31,30,0,82,32,31,0,85,54,14,0,25,56,54,4,85,56,28,0,25,57,54,8,85,57,32,0,134,62,0,0,44,77,6,0,60,54,0,0,1,47,0,0,0,33,51,0,0,50,33,0,0,35,50,0,25,36,35,4,82,37,36,0,0,51,37,0,119,0,184,255,0,38,49,0,25,39,38,1,0,49,39,0,119,0,163,255,0,40,47,0,33,41,40,0,120,41,3,0,137,59,0,0,139,0,0,0,1,63,15,15,134,62,0,0,44,77,6,0,63,55,0,0,137,59,0,0,139,0,0,0,140,3,54,0,0,0,0,0,1,47,0,0,136,50,0,0,0,48,50,0,136,50,0,0,1,51,224,0,3,50,50,51,137,50,0,0,130,50,0,0,136,51,0,0,49,50,50,51,232,46,4,0,135,50,0,0,25,39,48,120,25,42,48,80,0,41,48,0,1,50,136,0,3,40,48,50,0,46,42,0,25,49,46,40,1,50,0,0,85,46,50,0,25,46,46,4,54,50,46,49,4,47,4,0,82,45,2,0,85,39,45,0,1,50,0,0,134,5,0,0,124,247,0,0,50,1,39,41,42,0,0,0,34,6,5,0,121,6,3,0,1,4,255,255,119,0,95,0,25,17,0,76,82,28,17,0,1,50,255,255,15,33,50,28,121,33,6,0,134,34,0,0,196,122,6,0,0,0,0,0,0,31,34,0,119,0,2,0,1,31,0,0,82,35,0,0,38,50,35,32,0,36,50,0,25,37,0,74,78,38,37,0,41,50,38,24,42,50,50,24,34,7,50,1,121,7,4,0,38,50,35,223,0,8,50,0,85,0,8,0,25,9,0,48,82,10,9,0,32,11,10,0,121,11,47,0,25,13,0,44,82,14,13,0,85,13,40,0,25,15,0,28,85,15,40,0,25,16,0,20,85,16,40,0,1,50,80,0,85,9,50,0,25,18,40,80,25,19,0,16,85,19,18,0,134,20,0,0,124,247,0,0,0,1,39,41,42,0,0,0,1,50,0,0,13,21,14,50,121,21,3,0,0,43,20,0,119,0,31,0,25,22,0,36,82,23,22,0,1,51,255,0,19,51,23,51,1,52,0,0,1,53,0,0,135,50,5,0,51,0,52,53,82,24,16,0,1,50,0,0,13,25,24,50,1,50,255,255,125,3,25,50,20,0,0,0,85,13,14,0,1,50,0,0,85,9,50,0,1,50,0,0,85,19,50,0,1,50,0,0,85,15,50,0,1,50,0,0,85,16,50,0,0,43,3,0,119,0,6,0,134,12,0,0,124,247,0,0,0,1,39,41,42,0,0,0,0,43,12,0,82,26,0,0,38,50,26,32,0,27,50,0,32,29,27,0,1,50,255,255,125,44,29,43,50,0,0,0,20,50,26,36,0,30,50,0,85,0,30,0,32,32,31,0,120,32,4,0,134,50,0,0,172,122,6,0,0,0,0,0,0,4,44,0,137,48,0,0,139,4,0,0,140,1,46,0,0,0,0,0,1,40,0,0,136,44,0,0,0,41,44,0,136,44,0,0,25,44,44,32,137,44,0,0,130,44,0,0,136,45,0,0,49,44,44,45,248,48,4,0,135,44,0,0,25,2,41,16,0,1,0,0,0,13,1,0,25,24,13,80,1,44,0,0,83,24,44,0,0,30,1,0,25,31,30,24,78,32,31,0,1,44,255,0,19,44,32,44,0,33,44,0,32,37,33,26,0,34,1,0,25,35,34,32,25,3,35,32,88,4,3,0,0,5,1,0,25,6,5,32,121,37,3,0,89,6,4,0,119,0,74,0,25,7,6,36,89,7,4,0,0,8,1,0,25,9,8,32,25,10,9,16,127,44,0,0,59,45,0,0,89,44,45,0,127,45,0,0,114,2,45,0,127,44,0,0,102,44,44,1,107,2,1,44,127,45,0,0,102,45,45,2,107,2,2,45,127,44,0,0,102,44,44,3,107,2,3,44,25,11,2,4,127,44,0,0,59,45,0,0,89,44,45,0,127,45,0,0,114,11,45,0,127,44,0,0,102,44,44,1,107,11,1,44,127,45,0,0,102,45,45,2,107,11,2,45,127,44,0,0,102,44,44,3,107,11,3,44,25,12,2,8,127,44,0,0,59,45,0,0,89,44,45,0,127,45,0,0,114,12,45,0,127,44,0,0,102,44,44,1,107,12,1,44,127,45,0,0,102,45,45,2,107,12,2,45,127,44,0,0,102,44,44,3,107,12,3,44,25,14,2,12,127,44,0,0,59,45,0,0,89,44,45,0,127,45,0,0,114,14,45,0,127,44,0,0,102,44,44,1,107,14,1,44,127,45,0,0,102,45,45,2,107,14,2,45,127,44,0,0,102,44,44,3,107,14,3,44,0,39,10,0,0,42,2,0,25,43,39,16,78,44,42,0,83,39,44,0,25,39,39,1,25,42,42,1,54,44,39,43,92,50,4,0,0,15,1,0,25,16,15,16,25,17,16,4,82,18,17,0,0,38,18,0,0,19,38,0,0,20,1,0,25,21,20,16,14,22,19,21,120,22,2,0,119,0,13,0,0,23,38,0,26,25,23,8,0,36,25,0,0,26,36,0,134,44,0,0,196,48,4,0,26,0,0,0,0,27,38,0,25,28,27,4,82,29,28,0,0,38,29,0,119,0,239,255,137,41,0,0,139,0,0,0,140,1,46,0,0,0,0,0,1,40,0,0,136,44,0,0,0,41,44,0,136,44,0,0,25,44,44,32,137,44,0,0,130,44,0,0,136,45,0,0,49,44,44,45,12,51,4,0,135,44,0,0,25,2,41,16,0,1,0,0,0,13,1,0,25,24,13,80,1,44,0,0,83,24,44,0,0,30,1,0,25,31,30,24,78,32,31,0,1,44,255,0,19,44,32,44,0,33,44,0,32,37,33,26,0,34,1,0,25,35,34,32,25,3,35,32,88,4,3,0,0,5,1,0,25,6,5,32,121,37,3,0,89,6,4,0,119,0,74,0,25,7,6,36,89,7,4,0,0,8,1,0,25,9,8,32,25,10,9,16,127,44,0,0,59,45,0,0,89,44,45,0,127,45,0,0,114,2,45,0,127,44,0,0,102,44,44,1,107,2,1,44,127,45,0,0,102,45,45,2,107,2,2,45,127,44,0,0,102,44,44,3,107,2,3,44,25,11,2,4,127,44,0,0,59,45,0,0,89,44,45,0,127,45,0,0,114,11,45,0,127,44,0,0,102,44,44,1,107,11,1,44,127,45,0,0,102,45,45,2,107,11,2,45,127,44,0,0,102,44,44,3,107,11,3,44,25,12,2,8,127,44,0,0,59,45,0,0,89,44,45,0,127,45,0,0,114,12,45,0,127,44,0,0,102,44,44,1,107,12,1,44,127,45,0,0,102,45,45,2,107,12,2,45,127,44,0,0,102,44,44,3,107,12,3,44,25,14,2,12,127,44,0,0,59,45,0,0,89,44,45,0,127,45,0,0,114,14,45,0,127,44,0,0,102,44,44,1,107,14,1,44,127,45,0,0,102,45,45,2,107,14,2,45,127,44,0,0,102,44,44,3,107,14,3,44,0,39,10,0,0,42,2,0,25,43,39,16,78,44,42,0,83,39,44,0,25,39,39,1,25,42,42,1,54,44,39,43,112,52,4,0,0,15,1,0,25,16,15,16,25,17,16,4,82,18,17,0,0,38,18,0,0,19,38,0,0,20,1,0,25,21,20,16,14,22,19,21,120,22,2,0,119,0,13,0,0,23,38,0,26,25,23,8,0,36,25,0,0,26,36,0,134,44,0,0,216,50,4,0,26,0,0,0,0,27,38,0,25,28,27,4,82,29,28,0,0,38,29,0,119,0,239,255,137,41,0,0,139,0,0,0,140,1,55,0,0,0,0,0,1,51,0,0,136,53,0,0,0,52,53,0,136,53,0,0,25,53,53,64,137,53,0,0,130,53,0,0,136,54,0,0,49,53,53,54,32,53,4,0,135,53,0,0,25,5,52,48,25,4,52,32,25,3,52,24,25,2,52,16,25,1,52,8,0,6,0,0,0,7,6,0,1,53,4,0,85,7,53,0,0,18,6,0,1,53,24,0,135,29,26,0,53,18,0,0,0,50,29,0,0,40,6,0,0,45,50,0,134,53,0,0,96,7,5,0,40,45,0,0,0,46,6,0,0,47,6,0,25,48,47,72,82,53,48,0,85,1,53,0,106,54,48,4,109,1,4,54,134,54,0,0,196,181,5,0,46,1,0,0,0,49,6,0,0,8,6,0,25,9,8,56,82,54,9,0,85,2,54,0,106,53,9,4,109,2,4,53,134,53,0,0,68,187,5,0,49,2,0,0,0,10,6,0,0,11,6,0,25,12,11,88,82,53,12,0,85,3,53,0,106,54,12,4,109,3,4,54,134,54,0,0,192,186,5,0,10,3,0,0,0,13,6,0,0,14,6,0,1,54,128,0,3,15,14,54,82,54,15,0,85,4,54,0,106,53,15,4,109,4,4,53,106,54,15,8,109,4,8,54,134,54,0,0,172,207,4,0,13,4,0,0,0,16,6,0,0,17,6,0,1,54,168,0,3,19,17,54,78,20,19,0,134,54,0,0,20,112,5,0,16,20,0,0,0,21,6,0,0,22,6,0,25,23,22,104,82,24,23,0,0,25,6,0,25,26,25,108,82,27,26,0,134,54,0,0,220,115,3,0,21,24,27,0,0,28,6,0,0,30,6,0,25,31,30,112,88,32,31,0,134,54,0,0,168,239,5,0,28,32,0,0,0,33,6,0,0,34,6,0,1,54,144,0,3,35,34,54,82,54,35,0,85,5,54,0,106,53,35,4,109,5,4,53,134,53,0,0,244,184,5,0,33,5,0,0,0,36,6,0,0,37,6,0,1,53,192,0,3,38,37,53,78,39,38,0,134,53,0,0,128,234,5,0,36,39,0,0,0,41,6,0,0,42,6,0,1,53,193,0,3,43,42,53,78,44,43,0,134,53,0,0,8,231,5,0,41,44,0,0,137,52,0,0,139,0,0,0,140,1,55,0,0,0,0,0,1,51,0,0,136,53,0,0,0,52,53,0,136,53,0,0,25,53,53,64,137,53,0,0,130,53,0,0,136,54,0,0,49,53,53,54,36,55,4,0,135,53,0,0,25,5,52,48,25,4,52,32,25,3,52,24,25,2,52,16,25,1,52,8,0,6,0,0,0,7,6,0,1,53,0,0,85,7,53,0,0,18,6,0,1,53,8,0,135,29,26,0,53,18,0,0,0,50,29,0,0,40,6,0,0,45,50,0,134,53,0,0,96,7,5,0,40,45,0,0,0,46,6,0,0,47,6,0,25,48,47,72,82,53,48,0,85,1,53,0,106,54,48,4,109,1,4,54,134,54,0,0,196,181,5,0,46,1,0,0,0,49,6,0,0,8,6,0,25,9,8,56,82,54,9,0,85,2,54,0,106,53,9,4,109,2,4,53,134,53,0,0,68,187,5,0,49,2,0,0,0,10,6,0,0,11,6,0,25,12,11,88,82,53,12,0,85,3,53,0,106,54,12,4,109,3,4,54,134,54,0,0,192,186,5,0,10,3,0,0,0,13,6,0,0,14,6,0,1,54,128,0,3,15,14,54,82,54,15,0,85,4,54,0], eb + 266240);
  HEAPU8.set([106,53,15,4,109,4,4,53,106,54,15,8,109,4,8,54,134,54,0,0,172,207,4,0,13,4,0,0,0,16,6,0,0,17,6,0,1,54,168,0,3,19,17,54,78,20,19,0,134,54,0,0,20,112,5,0,16,20,0,0,0,21,6,0,0,22,6,0,25,23,22,104,82,24,23,0,0,25,6,0,25,26,25,108,82,27,26,0,134,54,0,0,220,115,3,0,21,24,27,0,0,28,6,0,0,30,6,0,25,31,30,112,88,32,31,0,134,54,0,0,168,239,5,0,28,32,0,0,0,33,6,0,0,34,6,0,1,54,144,0,3,35,34,54,82,54,35,0,85,5,54,0,106,53,35,4,109,5,4,53,134,53,0,0,244,184,5,0,33,5,0,0,0,36,6,0,0,37,6,0,1,53,192,0,3,38,37,53,78,39,38,0,134,53,0,0,128,234,5,0,36,39,0,0,0,41,6,0,0,42,6,0,1,53,193,0,3,43,42,53,78,44,43,0,134,53,0,0,8,231,5,0,41,44,0,0,137,52,0,0,139,0,0,0,140,4,77,0,0,0,0,0,1,73,0,0,136,75,0,0,0,74,75,0,136,75,0,0,25,75,75,32,137,75,0,0,130,75,0,0,136,76,0,0,49,75,75,76,40,57,4,0,135,75,0,0,25,71,74,4,0,4,0,0,0,5,1,0,0,16,2,0,0,27,3,0,0,38,16,0,25,49,38,8,82,60,49,0,0,67,5,0,25,68,67,12,82,69,68,0,25,6,69,4,82,7,6,0,0,8,5,0,25,9,8,12,82,10,9,0,82,11,10,0,134,12,0,0,140,117,4,0,60,7,11,0,33,13,12,0,121,13,23,0,0,14,16,0,25,15,14,8,82,17,15,0,0,18,5,0,25,19,18,12,82,20,19,0,25,21,20,4,82,22,21,0,0,23,5,0,25,24,23,12,82,25,24,0,82,26,25,0,134,28,0,0,68,71,4,0,17,22,26,0,82,29,28,0,0,70,29,0,0,30,70,0,134,75,0,0,116,17,6,0,30,0,0,0,119,0,26,0,1,75,8,0,1,76,0,0,134,31,0,0,168,171,5,0,75,76,0,0,85,71,31,0,82,32,71,0,134,76,0,0,176,71,6,0,32,0,0,0,0,33,16,0,25,34,33,8,82,35,34,0,0,36,5,0,25,37,36,12,82,39,37,0,25,40,39,4,82,41,40,0,0,42,5,0,25,43,42,12,82,44,43,0,82,45,44,0,134,76,0,0,216,19,4,0,35,41,45,71,0,46,16,0,25,47,46,8,82,48,47,0,0,50,5,0,25,51,50,12,82,52,51,0,25,53,52,4,82,54,53,0,0,55,5,0,25,56,55,12,82,57,56,0,82,58,57,0,134,59,0,0,68,71,4,0,48,54,58,0,82,61,59,0,0,72,61,0,0,62,4,0,1,76,0,1,3,63,62,76,134,76,0,0,96,64,6,0,63,0,0,0,0,64,4,0,1,76,0,1,3,65,64,76,0,66,72,0,134,76,0,0,128,44,6,0,65,66,0,0,137,74,0,0,139,0,0,0,140,1,59,0,0,0,0,0,1,54,0,0,136,56,0,0,0,55,56,0,136,56,0,0,25,56,56,16,137,56,0,0,130,56,0,0,136,57,0,0,49,56,56,57,240,58,4,0,135,56,0,0,0,53,55,0,0,1,0,0,134,2,0,0,160,82,6,0,85,53,2,0,0,13,1,0,25,24,13,4,82,35,24,0,134,56,0,0,88,242,4,0,35,53,0,0,0,46,1,0,82,49,53,0,1,57,69,17,134,56,0,0,180,222,5,0,46,49,57,0,0,50,1,0,82,51,53,0,1,57,84,17,134,56,0,0,180,222,5,0,50,51,57,0,0,52,1,0,82,3,53,0,1,57,96,17,134,56,0,0,180,222,5,0,52,3,57,0,134,4,0,0,160,82,6,0,85,53,4,0,0,5,1,0,25,6,5,4,82,7,6,0,134,56,0,0,88,242,4,0,7,53,0,0,0,8,1,0,82,9,53,0,1,57,112,17,134,56,0,0,180,222,5,0,8,9,57,0,0,10,1,0,82,11,53,0,1,57,135,17,134,56,0,0,180,222,5,0,10,11,57,0,0,12,1,0,82,14,53,0,1,57,156,17,134,56,0,0,180,222,5,0,12,14,57,0,0,15,1,0,82,16,53,0,1,57,177,17,134,56,0,0,180,222,5,0,15,16,57,0,0,17,1,0,82,18,53,0,1,57,199,17,134,56,0,0,180,222,5,0,17,18,57,0,0,19,1,0,82,20,53,0,1,57,222,17,134,56,0,0,180,222,5,0,19,20,57,0,0,21,1,0,82,22,53,0,1,57,243,17,134,56,0,0,180,222,5,0,21,22,57,0,0,23,1,0,82,25,53,0,1,57,8,18,134,56,0,0,180,222,5,0,23,25,57,0,0,26,1,0,82,27,53,0,1,57,30,18,134,56,0,0,180,222,5,0,26,27,57,0,0,28,1,0,82,29,53,0,1,57,53,18,134,56,0,0,180,222,5,0,28,29,57,0,0,30,1,0,82,31,53,0,1,57,74,18,134,56,0,0,180,222,5,0,30,31,57,0,0,32,1,0,82,33,53,0,1,57,95,18,134,56,0,0,180,222,5,0,32,33,57,0,134,34,0,0,160,82,6,0,85,53,34,0,0,36,1,0,25,37,36,4,82,38,37,0,134,56,0,0,88,242,4,0,38,53,0,0,0,39,1,0,82,40,53,0,1,57,117,18,134,56,0,0,180,222,5,0,39,40,57,0,134,41,0,0,160,82,6,0,85,53,41,0,0,42,1,0,25,43,42,4,82,44,43,0,134,56,0,0,88,242,4,0,44,53,0,0,0,45,1,0,82,47,53,0,1,57,137,18,134,56,0,0,180,222,5,0,45,47,57,0,0,48,1,0,1,57,157,18,1,58,0,0,134,56,0,0,220,198,5,0,48,57,58,0,137,55,0,0,139,0,0,0,140,1,29,0,0,0,0,0,1,25,0,0,136,27,0,0,0,26,27,0,127,27,0,0,114,27,0,0,127,27,0,0,102,28,0,1,107,27,1,28,127,28,0,0,102,27,0,2,107,28,2,27,127,27,0,0,102,28,0,3,107,27,3,28,127,28,0,0,88,1,28,0,127,28,0,0,114,28,0,0,127,28,0,0,102,27,0,1,107,28,1,27,127,27,0,0,102,28,0,2,107,27,2,28,127,28,0,0,102,27,0,3,107,28,3,27,127,27,0,0,88,2,27,0,65,13,1,2,25,18,0,4,127,27,0,0,114,27,18,0,127,27,0,0,102,28,18,1,107,27,1,28,127,28,0,0,102,27,18,2,107,28,2,27,127,27,0,0,102,28,18,3,107,27,3,28,127,28,0,0,88,19,28,0,25,20,0,4,127,28,0,0,114,28,20,0,127,28,0,0,102,27,20,1,107,28,1,27,127,27,0,0,102,28,20,2,107,27,2,28,127,28,0,0,102,27,20,3,107,28,3,27,127,27,0,0,88,21,27,0,65,22,19,21,63,23,13,22,25,24,0,8,127,27,0,0,114,27,24,0,127,27,0,0,102,28,24,1,107,27,1,28,127,28,0,0,102,27,24,2,107,28,2,27,127,27,0,0,102,28,24,3,107,27,3,28,127,28,0,0,88,3,28,0,25,4,0,8,127,28,0,0,114,28,4,0,127,28,0,0,102,27,4,1,107,28,1,27,127,27,0,0,102,28,4,2,107,27,2,28,127,28,0,0,102,27,4,3,107,28,3,27,127,27,0,0,88,5,27,0,65,6,3,5,63,7,23,6,25,8,0,12,127,27,0,0,114,27,8,0,127,27,0,0,102,28,8,1,107,27,1,28,127,28,0,0,102,27,8,2,107,28,2,27,127,27,0,0,102,28,8,3,107,27,3,28,127,28,0,0,88,9,28,0,25,10,0,12,127,28,0,0,114,28,10,0,127,28,0,0,102,27,10,1,107,28,1,27,127,27,0,0,102,28,10,2,107,27,2,28,127,28,0,0,102,27,10,3,107,28,3,27,127,27,0,0,88,11,27,0,65,12,9,11,63,14,7,12,58,15,14,0,135,16,67,0,15,0,0,0,58,17,16,0,139,17,0,0,140,1,29,0,0,0,0,0,1,25,0,0,136,27,0,0,0,26,27,0,127,27,0,0,114,27,0,0,127,27,0,0,102,28,0,1,107,27,1,28,127,28,0,0,102,27,0,2,107,28,2,27,127,27,0,0,102,28,0,3,107,27,3,28,127,28,0,0,88,1,28,0,127,28,0,0,114,28,0,0,127,28,0,0,102,27,0,1,107,28,1,27,127,27,0,0,102,28,0,2,107,27,2,28,127,28,0,0,102,27,0,3,107,28,3,27,127,27,0,0,88,2,27,0,65,13,1,2,25,18,0,4,127,27,0,0,114,27,18,0,127,27,0,0,102,28,18,1,107,27,1,28,127,28,0,0,102,27,18,2,107,28,2,27,127,27,0,0,102,28,18,3,107,27,3,28,127,28,0,0,88,19,28,0,25,20,0,4,127,28,0,0,114,28,20,0,127,28,0,0,102,27,20,1,107,28,1,27,127,27,0,0,102,28,20,2,107,27,2,28,127,28,0,0,102,27,20,3,107,28,3,27,127,27,0,0,88,21,27,0,65,22,19,21,63,23,13,22,25,24,0,8,127,27,0,0,114,27,24,0,127,27,0,0,102,28,24,1,107,27,1,28,127,28,0,0,102,27,24,2,107,28,2,27,127,27,0,0,102,28,24,3,107,27,3,28,127,28,0,0,88,3,28,0,25,4,0,8,127,28,0,0,114,28,4,0,127,28,0,0,102,27,4,1,107,28,1,27,127,27,0,0,102,28,4,2,107,27,2,28,127,28,0,0,102,27,4,3,107,28,3,27,127,27,0,0,88,5,27,0,65,6,3,5,63,7,23,6,25,8,0,12,127,27,0,0,114,27,8,0,127,27,0,0,102,28,8,1,107,27,1,28,127,28,0,0,102,27,8,2,107,28,2,27,127,27,0,0,102,28,8,3,107,27,3,28,127,28,0,0,88,9,28,0,25,10,0,12,127,28,0,0,114,28,10,0,127,28,0,0,102,27,10,1,107,28,1,27,127,27,0,0,102,28,10,2,107,27,2,28,127,28,0,0,102,27,10,3,107,28,3,27,127,27,0,0,88,11,27,0,65,12,9,11,63,14,7,12,58,15,14,0,135,16,67,0,15,0,0,0,58,17,16,0,139,17,0,0,140,1,29,0,0,0,0,0,1,25,0,0,136,27,0,0,0,26,27,0,127,27,0,0,114,27,0,0,127,27,0,0,102,28,0,1,107,27,1,28,127,28,0,0,102,27,0,2,107,28,2,27,127,27,0,0,102,28,0,3,107,27,3,28,127,28,0,0,88,1,28,0,127,28,0,0,114,28,0,0,127,28,0,0,102,27,0,1,107,28,1,27,127,27,0,0,102,28,0,2,107,27,2,28,127,28,0,0,102,27,0,3,107,28,3,27,127,27,0,0,88,2,27,0,65,13,1,2,25,18,0,4,127,27,0,0,114,27,18,0,127,27,0,0,102,28,18,1,107,27,1,28,127,28,0,0,102,27,18,2,107,28,2,27,127,27,0,0,102,28,18,3,107,27,3,28,127,28,0,0,88,19,28,0,25,20,0,4,127,28,0,0,114,28,20,0,127,28,0,0,102,27,20,1,107,28,1,27,127,27,0,0,102,28,20,2,107,27,2,28,127,28,0,0,102,27,20,3,107,28,3,27,127,27,0,0,88,21,27,0,65,22,19,21,63,23,13,22,25,24,0,8,127,27,0,0,114,27,24,0,127,27,0,0,102,28,24,1,107,27,1,28,127,28,0,0,102,27,24,2,107,28,2,27,127,27,0,0,102,28,24,3,107,27,3,28,127,28,0,0,88,3,28,0,25,4,0,8,127,28,0,0,114,28,4,0,127,28,0,0,102,27,4,1,107,28,1,27,127,27,0,0,102,28,4,2,107,27,2,28,127,28,0,0,102,27,4,3,107,28,3,27,127,27,0,0,88,5,27,0,65,6,3,5,63,7,23,6,25,8,0,12,127,27,0,0,114,27,8,0,127,27,0,0,102,28,8,1,107,27,1,28,127,28,0,0,102,27,8,2,107,28,2,27,127,27,0,0,102,28,8,3,107,27,3,28,127,28,0,0,88,9,28,0,25,10,0,12,127,28,0,0,114,28,10,0,127,28,0,0,102,27,10,1,107,28,1,27,127,27,0,0,102,28,10,2,107,27,2,28,127,28,0,0,102,27,10,3,107,28,3,27,127,27,0,0,88,11,27,0,65,12,9,11,63,14,7,12,58,15,14,0,135,16,67,0,15,0,0,0,58,17,16,0,139,17,0,0,140,1,70,0,0,0,0,0,1,66,0,0,136,68,0,0,0,67,68,0,136,68,0,0,25,68,68,16,137,68,0,0,130,68,0,0,136,69,0,0,49,68,68,69,104,67,4,0,135,68,0,0,0,1,0,0,0,2,1,0,25,13,2,8,82,24,13,0,25,35,24,12,82,46,35,0,0,64,46,0,0,57,64,0,1,68,0,0,14,61,57,68,120,61,2,0,119,0,48,0,0,62,64,0,0,63,62,0,0,3,1,0,25,4,3,8,82,5,4,0,25,6,5,8,82,7,6,0,16,8,63,7,120,8,2,0,119,0,38,0,0,9,64,0,82,10,9,0,25,11,10,12,82,12,11,0,0,65,12,0,0,14,65,0,1,68,0,0,14,15,14,68,120,15,2,0,119,0,19,0,0,16,65,0,0,17,16,0,0,18,64,0,82,19,18,0,25,20,19,8,82,21,20,0,16,22,17,21,120,22,2,0,119,0,10,0,0,23,65,0,82,25,23,0,134,68,0,0,168,3,6,0,25,0,0,0,0,26,65,0,25,27,26,4,0,65,27,0,119,0,234,255,0,28,64,0,82,29,28,0,134,68,0,0,180,1,6,0,29,0,0,0,0,30,64,0,25,31,30,4,0,64,31,0,119,0,205,255,0,32,1,0,25,33,32,8,82,34,33,0,134,68,0,0,180,1,6,0,34,0,0,0,0,36,1,0,25,37,36,12,82,38,37,0,25,39,38,12,82,40,39,0,0,64,40,0,0,41,64,0,1,68,0,0,14,42,41,68,120,42,3,0,1,66,13,0,119,0,21,0,0,43,64,0,0,44,43,0,0,45,1,0,25,47,45,12,82,48,47,0,25,49,48,8,82,50,49,0,16,51,44,50,120,51,3,0,1,66,13,0,119,0,10,0,0,52,64,0,82,53,52,0,134,68,0,0,180,1,6,0,53,0,0,0,0,54,64,0,25,55,54,4,0,64,55,0,119,0,231,255,32,68,66,13,121,68,13,0,0,56,1,0,25,58,56,12,82,59,58,0,134,68,0,0,180,1,6,0,59,0,0,0,0,60,1,0,134,68,0,0,216,166,5,0,60,0,0,0,137,67,0,0,139,0,0,0,139,0,0,0,140,2,52,0,0,0,0,0,2,49,0,0,255,0,0,0,1,47,0,0,136,50,0,0,0,48,50,0,136,50,0,0,25,50,50,32,137,50,0,0,130,50,0,0,136,51,0,0,49,50,50,51,100,69,4,0,135,50,0,0,0,44,48,0,78,6,1,0,41,50,6,24,42,50,50,24,32,7,50,0,121,7,3,0,1,47,3,0,119,0,99,0,25,18,1,1,78,29,18,0,41,50,29,24,42,50,50,24,32,38,50,0,121,38,3,0,1,47,3,0,119,0,91,0,1,50,0,0,85,44,50,0,1,51,0,0,109,44,4,51,1,50,0,0,109,44,8,50,1,51,0,0,109,44,12,51,1,50,0,0,109,44,16,50,1,51,0,0,109,44,20,51,1,50,0,0,109,44,24,50,1,51,0,0,109,44,28,51,0,3,1,0,0,11,6,0,38,51,11,31,0,10,51,0,19,51,10,49,0,12,51,0,1,51,1,0,22,51,51,12,0,13,51,0,19,51,11,49,43,51,51,5,0,46,51,0,19,51,46,49,0,14,51,0,41,51,14,2,3,15,44,51,82,16,15,0,20,51,16,13,0,17,51,0,85,15,17,0,25,19,3,1,78,20,19,0,41,51,20,24,42,51,51,24,32,21,51,0,120,21,4,0,0,3,19,0,0,11,20,0,119,0,230,255,78,8,0,0,41,51,8,24,42,51,51,24,32,9,51,0,121,9,3,0,0,4,0,0,119,0,35,0,0,5,0,0,0,22,8,0,19,51,22,49,43,51,51,5,0,45,51,0,19,51,45,49,0,23,51,0,41,51,23,2,3,24,44,51,82,25,24,0,38,51,22,31,0,26,51,0,19,51,26,49,0,27,51,0,1,51,1,0,22,51,51,27,0,28,51,0,19,51,25,28,0,30,51,0,32,31,30,0,120,31,3,0,0,4,5,0,119,0,12,0,25,32,5,1,78,33,32,0,41,51,33,24,42,51,51,24,32,34,51,0,121,34,3,0,0,4,32,0,119,0,4,0,0,5,32,0,0,22,33,0,119,0,225,255,0,35,4,0,0,36,0,0,4,37,35,36,0,2,37,0,32,51,47,3,121,51,11,0,41,51,6,24,42,51,51,24,0,39,51,0,134,40,0,0,208,77,4,0,0,39,0,0,0,41,40,0,0,42,0,0,4,43,41,42,0,2,43,0,137,48,0,0,139,2,0,0,140,3,74,0,0,0,0,0,1,70,0,0,136,72,0,0,0,71,72,0,136,72,0,0,25,72,72,48,137,72,0,0,130,72,0,0,136,73,0,0,49,72,72,73,120,71,4,0,135,72,0,0,0,4,0,0,0,15,1,0,0,26,2,0,0,37,15,0,0,48,26,0,134,59,0,0,60,155,5,0,37,48,0,0,0,67,59,0,0,62,67,0,0,63,4,0,25,64,63,8,82,5,64,0,25,6,5,12,82,7,6,0,41,72,62,2,3,8,7,72,82,9,8,0,0,69,9,0,0,10,67,0,0,11,4,0,25,12,11,12,82,13,12,0,25,14,13,12,82,16,14,0,41,72,10,2,3,17,16,72,82,18,17,0,0,65,18,0,0,19,69,0,25,20,19,12,82,21,20,0,0,68,21,0,1,66,0,0,0,22,68,0,1,72,0,0,14,23,22,72,120,23,3,0,1,70,8,0,119,0,36,0,0,24,68,0,0,25,24,0,0,27,69,0,25,28,27,8,82,29,28,0,16,30,25,29,120,30,3,0,1,70,8,0,119,0,27,0,0,31,68,0,82,32,31,0,82,33,32,0,0,34,26,0,13,35,33,34,121,35,14,0,0,36,15,0,0,38,68,0,82,39,38,0,25,40,39,4,82,41,40,0,0,42,26,0,134,43,0,0,180,228,4,0,36,41,42,0,32,44,43,0,121,44,3,0,1,70,6,0,119,0,8,0,0,56,68,0,25,57,56,4,0,68,57,0,0,58,66,0,25,60,58,1,0,66,60,0,119,0,216,255,32,72,70,6,121,72,19,0,0,45,65,0,25,46,45,12,82,47,46,0,0,49,66,0,0,50,65,0,25,51,50,4,80,52,51,0,2,72,0,0,255,255,0,0,19,72,52,72,0,53,72,0,5,54,49,53,3,55,47,54,0,3,55,0,0,61,3,0,137,71,0,0,139,61,0,0,119,0,7,0,32,72,70,8,121,72,5,0,1,3,56,0,0,61,3,0,137,71,0,0,139,61,0,0,1,72,0,0,139,72,0,0,140,1,70,0,0,0,0,0,2,67,0,0,255,0,0,0,1,65,0,0,136,68,0,0,0,66,68,0,136,68,0,0,25,68,68,16,137,68,0,0,130,68,0,0,136,69,0,0,49,68,68,69,80,73,4,0,135,68,0,0,0,2,0,0,0,13,2,0,0,64,13,0,0,24,64,0,78,35,24,0,19,68,35,67,43,68,68,7,0,46,68,0,19,68,46,67,0,57,68,0,32,61,57,0,121,61,5,0,1,1,1,0,0,60,1,0,137,66,0,0,139,60,0,0,0,62,64,0,78,63,62,0,19,68,63,67,43,68,68,6,0,3,68,0,38,68,3,1,0,4,68,0,19,68,4,67,0,5,68,0,32,6,5,1,121,6,16,0,0,7,64,0,78,8,7,0,19,68,8,67,43,68,68,5,0,9,68,0,38,68,9,1,0,10,68,0,19,68,10,67,0,11,68,0,32,12,11,0,121,12,5,0,1,1,2,0,0,60,1,0,137,66,0,0,139,60,0,0,0,14,64,0,78,15,14,0,19,68,15,67,43,68,68,6,0,16,68,0,38,68,16,1,0,17,68,0,19,68,17,67,0,18,68,0,32,19,18,1,121,19,27,0,0,20,64,0,78,21,20,0,19,68,21,67,43,68,68,5,0,22,68,0,38,68,22,1,0,23,68,0,19,68,23,67,0,25,68,0,32,26,25,1,121,26,16,0,0,27,64,0,78,28,27,0,19,68,28,67,43,68,68,4,0,29,68,0,38,68,29,1,0,30,68,0,19,68,30,67,0,31,68,0,32,32,31,0,121,32,5,0,1,1,3,0,0,60,1,0,137,66,0,0,139,60,0,0,0,33,64,0,78,34,33,0,19,68,34,67,43,68,68,6,0,36,68,0,38,68,36,1,0,37,68,0,19,68,37,67,0,38,68,0,32,39,38,1,121,39,38,0,0,40,64,0,78,41,40,0,19,68,41,67,43,68,68,5,0,42,68,0,38,68,42,1,0,43,68,0,19,68,43,67,0,44,68,0,32,45,44,1,121,45,27,0,0,47,64,0,78,48,47,0,19,68,48,67,43,68,68,4,0,49,68,0,38,68,49,1,0,50,68,0,19,68,50,67,0,51,68,0,32,52,51,1,121,52,16,0,0,53,64,0,78,54,53,0,19,68,54,67,43,68,68,3,0,55,68,0,38,68,55,1,0,56,68,0,19,68,56,67,0,58,68,0,32,59,58,0,121,59,5,0,1,1,4,0,0,60,1,0,137,66,0,0,139,60,0,0,1,1,1,0,0,60,1,0,137,66,0,0,139,60,0,0,140,2,57,0,0,0,0,0,1,50,0,0,136,52,0,0,0,51,52,0,136,52,0,0,25,52,52,32,137,52,0,0,130,52,0,0,136,53,0,0,49,52,52,53,144,75,4,0,135,52,0,0,0,49,51,0,25,47,51,16,25,46,51,12,25,44,51,4,0,2,0,0,0,3,1,0,134,52,0,0,148,35,6,0,1,52,16,0,1,53,43,0,134,14,0,0,168,171,5,0,52,53,0,0,0,48,14,0,1,53,0,0,85,47,53,0,1,52,1,0,135,53,68,0,52,47,0,0,82,25,47,0,2,52,0,0,64,141,0,0,135,53,69,0,52,25,0,0,82,36,47,0,0,39,48,0,85,39,36,0,1,52,1,0,135,53,70,0,52,46,0,0,82,40,46,0,2,52,0,0,65,141,0,0,135,53,71,0,52,40,0,0,0,41,2,0,0,42,3,0,2,52,0,0,65,141,0,0,2,54,0,0,165,129,0,0,135,53,72,0,52,54,41,42,82,43,46,0,2,54,0,0,64,141,0,0,2,52,0,0,0,141,0,0,2,55,0,0,65,141,0,0,135,53,73,0,54,52,55,43,1,53,12,0,1,55,44,0,134,4,0,0,168,171,5,0,53,55,0,0,0,45,4,0,82,5,47,0,0,6,45,0,25,7,6,8,85,7,5,0,82,8,46,0,0,9,45,0,25,10,9,4,85,10,8,0,0,11,2,0,2,55,0,0,255,255,0,0,19,55,11,55,0,12,55,0,0,13,3,0,2,55,0,0,255,255,0,0,19,55,13,55,0,15,55,0,134,16,0,0,112,97,4,0,12,15,0,0,0,17,45,0,85,17,16,0,0,18,45,0,82,19,18,0,25,20,19,4,80,21,20,0,25,55,21,1,41,55,55,16,42,55,55,16,0,22,55,0,84,20,22,0,0,23,45,0,0,24,48,0,25,26,24,8,85,26,23,0,0,27,45,0,82,28,27,0,25,29,28,8,82,30,29,0,2,53,0,0,64,141,0,0,2,52,0,0,224,140,0,0,1,54,225,13,1,56,0,0,135,55,74,0,53,52,54,30,56,0,0,0,1,55,92,4,82,55,55,0,85,44,55,0,2,55,0,0,64,141,0,0,135,31,75,0,55,0,0,0,2,55,0,0,213,140,0,0,14,32,31,55,120,32,12,0,0,33,48,0,25,34,33,12,1,55,44,0,85,34,55,0,0,35,48,0,25,37,35,4,1,55,255,255,83,37,55,0,0,38,48,0,137,51,0,0,139,38,0,0,1,56,172,15,134,55,0,0,44,77,6,0,56,49,0,0,0,33,48,0,25,34,33,12,1,55,44,0,85,34,55,0,0,35,48,0,25,37,35,4,1,55,255,255,83,37,55,0,0,38,48,0,137,51,0,0,139,38,0,0,140,2,58,0,0,0,0,0,2,53,0,0,128,128,128,128,2,54,0,0,255,254,254,254,2,55,0,0,255,0,0,0,1,51,0,0,136,56,0,0,0,52,56,0,19,56,1,55,0,6,56,0,32,7,6,0,121,7,6,0,135,43,4,0,0,0,0,0,3,44,0,43,0,2,44,0,119,0,106,0,0,18,0,0,38,56,18,3,0,29,56,0,32,40,29,0,121,40,3,0,0,3,0,0,119,0,28,0,19,56,1,55,0,42,56,0,0,4,0,0,78,45,4,0,41,56,45,24,42,56,56,24,32,46,56,0,41,56,45,24,42,56,56,24,41,57,42,24,42,57,57,24,13,8,56,57,20,57,46,8,0,47,57,0,121,47,3,0,0,2,4,0,119,0,82,0,25,9,4,1,0,10,9,0,38,57,10,3,0,11,57,0,32,12,11,0,121,12,3,0,0,3,9,0,119,0,3,0,0,4,9,0,119,0,233,255,2,57,0,0,1,1,1,1,5,13,6,57,82,14,3,0,2,57,0,0,1,1,1,1,4,15,14,57,19,57,14,53,0,16,57,0,21,57,16,53,0,17,57,0,19,57,17,15,0,19,57,0,32,20,19,0,121,20,36,0,0,22,14,0,0,50,3,0,21,57,22,13,0,21,57,0,2,57,0,0,1,1,1,1,4,23,21,57,19,57,21,53,0,24,57,0,21,57,24,53,0,25,57,0,19,57,25,23,0,26,57,0,32,27,26,0,120,27,3,0,0,49,50,0,119,0,20,0,25,28,50,4,82,30,28,0,2,57,0,0,1,1,1,1,4,31,30,57,19,57,30,53,0,32,57,0,21,57,32,53,0,33,57,0,19,57,33,31,0,34,57,0,32,35,34,0,121,35,4,0,0,22,30,0,0,50,28,0,119,0,226,255,0,49,28,0,119,0,2,0,0,49,3,0,19,57,1,55,0,36,57,0,0,5,49,0,78,37,5,0,41,57,37,24,42,57,57,24,32,38,57,0,41,57,37,24,42,57,57,24,41,56,36,24,42,56,56,24,13,39,57,56,20,56,38,39,0,48,56,0,25,41,5,1,121,48,3,0,0,2,5,0,119,0,3,0,0,5,41,0,119,0,240,255,139,2,0,0,140,3,72,0,0,0,0,0,1,68,0,0,136,70,0,0,0,69,70,0,136,70,0,0,25,70,70,32,137,70,0,0,130,70,0,0,136,71,0,0,49,70,70,71,252,79,4,0,135,70,0,0,0,3,0,0,0,4,1,0,0,15,2,0,0,26,4,0,0,37,15,0,134,48,0,0,60,155,5,0,26,37,0,0,0,65,48,0,0,59,65,0,0,60,3,0,25,61,60,8,82,62,61,0,25,5,62,12,82,6,5,0,41,70,59,2,3,7,6,70,82,8,7,0,0,67,8,0,0,9,65,0,0,10,3,0,25,11,10,12,82,12,11,0,25,13,12,12,82,14,13,0,41,70,9,2,3,16,14,70,82,17,16,0,0,63,17,0,1,64,0,0,0,18,67,0,25,19,18,12,82,20,19,0,0,66,20,0,1,64,0,0,0,21,66,0,1,70,0,0,14,22,21,70,120,22,3,0,1,68,8,0,119,0,36,0,0,23,66,0,0,24,23,0,0,25,67,0,25,27,25,8,82,28,27,0,16,29,24,28,120,29,3,0,1,68,8,0,119,0,27,0,0,30,66,0,82,31,30,0,82,32,31,0,0,33,15,0,13,34,32,33,121,34,14,0,0,35,4,0,0,36,66,0,82,38,36,0,25,39,38,4,82,40,39,0,0,41,15,0,134,42,0,0,180,228,4,0,35,40,41,0,32,43,42,0,121,43,3,0,1,68,6,0,119,0,8,0,0,55,66,0,25,56,55,4,0,66,56,0,0,57,64,0,25,58,57,1,0,64,58,0,119,0,216,255,32,70,68,6,121,70,24,0,0,44,66,0,82,45,44,0,134,70,0,0,168,3,6,0,45,0,0,0,0,46,67,0,0,47,64,0,134,70,0,0,160,240,3,0,46,47,0,0,0,49,63,0,0,50,64,0,134,70,0,0,160,240,3,0,49,50,0,0,0,51,3,0,25,52,51,4,82,53,52,0,26,54,53,1,85,52,54,0,137,69,0,0,139,0,0,0,119,0,5,0,32,70,68,8,121,70,3,0,137,69,0,0,139,0,0,0,139,0,0,0,140,1,56,0,0,0,0,0,2,53,0,0,8,6,0,0,1,51,0,0,136,54,0,0,0,52,54,0,136,54,0,0,25,54,54,32,137,54,0,0,130,54,0,0,136,55,0,0,49,54,54,55,224,81,4,0,135,54,0,0,25,46,52,16,0,1,0,0,85,46,46,0,25,2,46,4,85,2,46,0,135,54,7,0,53,0,0,0,0,13,1,0,25,24,13,16,134,35,0,0,208,54,6,0,24,0,0,0,33,41,35,0,120,41,29,0,0,42,1,0,25,43,42,16,25,44,43,4,82,45,44,0,0,48,45,0,1,54,0,0,14,3,45,54,120,3,2,0,119,0,20,0,0,4,48,0,134,54,0,0,160,66,6,0,4,0,0,0,0,5,48,0,134,54,0,0,192,46,6,0,5,46,0,0,135,54,8,0,53,0,0,0,0,6,48,0,0,47,6,0,0,7,47,0,134,54,0,0,208,78,6,0,7,0,0,0,135,54,7,0,53,0,0,0,119,0,222,255,134,8,0,0,208,54,6,0,46,0,0,0,33,9,8,0,120,9,19,0,25,10,46,4,82,11,10,0,0,48,11,0,1,54,0,0,14,12,11,54,120,12,2,0,119,0,12,0,0,14,48,0,134,54,0,0,160,66,6,0,14,0,0,0,0,15,48,0,0,16,1,0,25,17,16,16,134,54,0,0,192,46,6,0,15,17,0,0,119,0,234,255,135,54,8,0,53,0,0,0,0,18,1,0,134,19,0,0,208,54,6,0,18,0,0,0,33,20,19,0,120,20,16,0,0,21,1,0,25,22,21,4,82,23,22,0,0,48,23,0,1,54,0,0,14,25,23,54,120,25,2,0,119,0,8,0,0,26,48,0,0,50,26,0,0,27,50,0,134,54,0,0,44,82,6,0,27,0,0,0,119,0,236,255,0,28,1,0,25,29,28,8,134,30,0,0,208,54,6,0,29,0,0,0,33,31,30,0,121,31,3,0,1,51,15,0,119,0,18,0,0,32,1,0,25,33,32,8,25,34,33,4,82,36,34,0,0,48,36,0,1,54,0,0,14,37,36,54,120,37,3,0,1,51,15,0,119,0,8,0,0,38,48,0,0,49,38,0,0,39,49,0,134,54,0,0,144,160,5,0,39,0,0,0,119,0,231,255,32,54,51,15,121,54,7,0,0,40,1,0,134,54,0,0,216,166,5,0,40,0,0,0,137,52,0,0,139,0,0,0,139,0,0,0,140,3,71,0,0,0,0,0,1,67,0,0,136,69,0,0,0,68,69,0,136,69,0,0,25,69,69,48,137,69,0,0,130,69,0,0,136,70,0,0,49,69,69,70,0,84,4,0,135,69,0,0,0,4,0,0,0,15,1,0,0,26,2,0,1,64,0,0,0,37,4,0,25,48,37,8,25,58,48,4,82,59,58,0,0,63,59,0,0,60,63,0,0,61,4,0,25,5,61,8,14,6,60,5,120,6,2,0,119,0,25,0,0,7,63,0,0,62,7,0,0,8,62,0,25,9,8,8,82,10,9,0,25,11,10,4,82,12,11,0,1,69,141,31,134,13,0,0,208,147,5,0,12,69,0,0,32,14,13,0,121,14,7,0,0,16,62,0,25,17,16,12,82,18,17,0,25,19,18,4,82,20,19,0,0,64,20,0,0,21,63,0,25,22,21,4,82,23,22,0,0,63,23,0,119,0,227,255,0,24,64,0,1,69,0,0,14,25,24,69,120,25,7,0,134,56,0,0,36,25,6,0,0,3,56,0,0,57,3,0,137,68,0,0,139,57,0,0,134,27,0,0,236,158,5,0,0,65,27,0,0,28,65,0,0,29,64,0,0,30,15,0,134,69,0,0,176,160,2,0,28,29,30,0,0,31,15,0,0,32,65,0,0,33,4,0,0,34,26,0,134,69,0,0,32,163,3,0,31,32,33,34,0,35,15,0,25,36,35,20,82,38,36,0,1,69,0,0,14,39,38,69,121,39,16,0,0,40,65,0,25,41,40,20,82,42,41,0,1,69,0,0,14,43,42,69,121,43,10,0,0,44,15,0,25,45,44,20,82,46,45,0,0,47,65,0,25,49,47,20,82,50,49,0,134,69,0,0,132,234,4,0,46,50,0,0,0,51,65,0,25,52,51,4,82,53,52,0,1,69,248,0,4,54,53,69,0,66,54,0,0,55,66,0,0,3,55,0,0,57,3,0,137,68,0,0,139,57,0,0,140,3,71,0,0,0,0,0,1,67,0,0,136,69,0,0,0,68,69,0,136,69,0,0,25,69,69,32,137,69,0,0,130,69,0,0,136,70,0,0,49,69,69,70,184,85,4,0,135,69,0,0,25,64,68,4,0,3,0,0,0,4,1,0,0,15,2,0,0,26,3,0,1,69,177,31,134,37,0,0,0,76,6,0,26,69,0,0,0,65,37,0,0,48,65,0,1,69,0,0,14,59,48,69,120,59,4,0,137,68,0,0,1,69,0,0,139,69,0,0,134,61,0,0,96,177,5,0,85,64,61,0,0,62,4,0,25,63,62,12,82,5,63,0,0,6,65,0,25,7,6,12,82,8,7,0,25,9,8,4,82,10,9,0,0,11,65,0,25,12,11,12,82,13,12,0,82,14,13,0,134,16,0,0,140,117,4,0,5,10,14,0,33,17,16,0,121,17,37,0,0,18,4,0,25,19,18,12,82,20,19,0,0,21,65,0,25,22,21,12,82,23,22,0,25,24,23,4,82,25,24,0,0,27,65,0,25,28,27,12,82,29,28,0,82,30,29,0,134,31,0,0,68,71,4,0,20,25,30,0,82,32,31,0,0,66,32,0,0,33,66,0,134,69,0,0,96,210,4,0,33,0,0,0,0,34,4,0,25,35,34,12,82,36,35,0,0,38,65,0,25,39,38,12,82,40,39,0,25,41,40,4,82,42,41,0,0,43,65,0,25,44,43,12,82,45,44,0,82,46,45,0,134,69,0,0,200,79,4,0,36,42,46,0,0,47,4,0,25,49,47,12,82,50,49,0,0,51,65,0,25,52,51,12,82,53,52,0,25,54,53,4,82,55,54,0,0,56,65,0,25,57,56,12,82,58,57,0,82,60,58,0,134,69,0,0,216,19,4,0,50,55,60,64,137,68,0,0,1,69,0,0,139,69,0,0,140,1,68,0,0,0,0,0,1,63,0,0,136,65,0,0,0,64,65,0,136,65,0,0,25,65,65,32,137,65,0,0,130,65,0,0,136,66,0,0,49,65,65,66,88,87,4,0,135,65,0,0,0,1,0,0,1,65,0,0,134,2,0,0,148,94,6,0,65,0,0,0,0,62,2,0,0,13,62,0,1,66,192,31,1,67,1,0,134,65,0,0,128,39,6,0,13,66,67,0,1,65,4,0,1,67,1,0,134,24,0,0,224,168,5,0,65,67,0,0,0,61,24,0,0,35,1,0,82,46,35,0,0,53,61,0,134,67,0,0,180,106,4,0,46,53,0,0,1,59,0,0,0,54,61,0,25,55,54,12,82,56,55,0,0,60,56,0,0,3,60,0,1,67,0,0,14,4,3,67,120,4,3,0,1,63,7,0,119,0,79,0,0,5,60,0,0,6,5,0,0,7,61,0,25,8,7,8,82,9,8,0,16,10,6,9,120,10,3,0,1,63,7,0,119,0,70,0,0,11,62,0,1,65,185,31,1,66,1,0,134,67,0,0,128,39,6,0,11,65,66,0,0,12,62,0,0,14,60,0,82,15,14,0,25,16,15,4,82,17,16,0,0,18,60,0,82,19,18,0,82,20,19,0,134,67,0,0,128,39,6,0,12,17,20,0,0,21,62,0,1,66,194,31,1,65,4,0,134,67,0,0,128,39,6,0,21,66,65,0,0,22,1,0,82,23,22,0,0,25,60,0,82,26,25,0,25,27,26,4,82,28,27,0,0,29,60,0,82,30,29,0,82,31,30,0,134,32,0,0,68,71,4,0,23,28,31,0,82,33,32,0,0,57,33,0,0,34,57,0,134,36,0,0,12,85,2,0,34,0,0,0,0,58,36,0,0,37,62,0,0,38,58,0,134,67,0,0,40,14,6,0,37,38,0,0,0,39,58,0,134,67,0,0,148,105,6,0,39,0,0,0,0,40,59,0,25,41,40,1,0,59,41,0,0,42,59,0,0,43,61,0,82,44,43,0,14,45,42,44,121,45,7,0,0,47,62,0,1,65,199,31,1,66,1,0,134,67,0,0,128,39,6,0,47,65,66,0,0,48,60,0,25,49,48,4,0,60,49,0,119,0,173,255,32,67,63,7,121,67,14,0,0,50,61,0,134,67,0,0,180,1,6,0,50,0,0,0,0,51,62,0,1,66,201,31,1,65,1,0,134,67,0,0,128,39,6,0,51,66,65,0,0,52,62,0,137,64,0,0,139,52,0,0,1,67,0,0,139,67,0,0,140,4,54,0,0,0,0,0,2,52,0,0,255,0,0,0,1,50,0,0,136,53,0,0,0,51,53,0,5,6,2,1,25,7,3,76,82,18,7,0,1,53,255,255,15,29,53,18,121,29,6,0,134,39,0,0,196,122,6,0,3,0,0,0,0,31,39,0,119,0,2,0,1,31,0,0,25,40,3,74,78,41,40,0,41,53,41,24,42,53,53,24,0,42,53,0,3,43,42,52,20,53,43,42,0,44,53,0,19,53,44,52,0,8,53,0,83,40,8,0,25,9,3,8,82,10,9,0,25,11,3,4,82,12,11,0,0,13,10,0,0,14,12,0,4,15,13,14,1,53,0,0,15,16,53,15,121,16,13,0,16,17,15,6,125,4,17,15,6,0,0,0,135,53,76,0,0,12,4,0,3,19,12,4,85,11,19,0,3,20,0,4,4,21,6,4,0,45,20,0,0,47,21,0,119,0,3,0,0,45,0,0,0,47,6,0,32,22,47,0,121,22,3,0,1,50,13,0,119,0,39,0,25,23,3,32,0,46,45,0,0,48,47,0,134,24,0,0,32,50,5,0,3,0,0,0,32,25,24,0,120,25,3,0,0,49,48,0,119,0,19,0,82,26,23,0,19,53,26,52,135,27,5,0,53,3,46,48,25,28,27,1,35,30,28,2,121,30,3,0,0,49,48,0,119,0,10,0,4,35,48,27,3,36,46,27,13,37,48,27,121,37,3,0,1,50,13,0,119,0,14,0,0,46,36,0,0,48,35,0,119,0,232,255,32,32,31,0,120,32,4,0,134,53,0,0,172,122,6,0,3,0,0,0,4,33,6,49,7,53,33,1,38,53,53,255,0,34,53,0,0,5,34,0,32,53,50,13,121,53,9,0,32,38,31,0,121,38,3,0,0,5,2,0,119,0,5,0,134,53,0,0,172,122,6,0,3,0,0,0,0,5,2,0,139,5,0,0,140,5,62,0,0,0,0,0,1,58,0,0,136,60,0,0,0,59,60,0,136,60,0,0,25,60,60,32,137,60,0,0,130,60,0,0,136,61,0,0,49,60,60,61,64,91,4,0,135,60,0,0,25,17,59,20,25,57,59,4,0,5,0,0,0,6,1,0,85,17,2,0,0,28,3,0,0,39,4,0,0,50,5,0,25,51,50,36,82,52,51,0,1,60,4,0,134,53,0,0,140,117,4,0,52,17,60,0,33,54,53,0,121,54,21,0,0,7,5,0,25,8,7,36,82,9,8,0,1,60,4,0,134,10,0,0,68,71,4,0,9,17,60,0,82,11,10,0,0,56,11,0,0,12,56,0,134,60,0,0,100,6,6,0,12,0,0,0,0,13,5,0,25,14,13,36,82,15,14,0,1,61,4,0,134,60,0,0,200,79,4,0,15,17,61,0,0,16,6,0,134,18,0,0,168,2,6,0,16,0,0,0,85,57,18,0,82,19,17,0,82,20,57,0,25,21,20,4,85,21,19,0,82,22,57,0,25,23,22,8,82,24,23,0,0,25,28,0,0,26,39,0,134,60,0,0,128,39,6,0,24,25,26,0,0,27,5,0,25,29,27,40,134,60,0,0,148,194,5,0,29,0,0,0,0,30,5,0,25,31,30,36,82,32,31,0,1,61,4,0,134,60,0,0,216,19,4,0,32,17,61,57,0,33,5,0,25,34,33,40,134,60,0,0,240,95,6,0,34,0,0,0,134,35,0,0,212,252,5,0,0,55,35,0,0,36,55,0,25,37,36,20,1,60,1,0,83,37,60,0,82,38,17,0,0,40,55,0,25,41,40,16,85,41,38,0,0,42,55,0,25,43,42,12,82,44,43,0,82,45,57,0,25,46,45,8,82,47,46,0,134,60,0,0,192,13,6,0,44,47,0,0,0,48,5,0,0,49,55,0,134,60,0,0,240,243,5,0,48,49,0,0,137,59,0,0,139,0,0,0,140,1,51,0,0,0,0,0,1,48,0,0,136,50,0,0,0,49,50,0,25,6,0,104,82,7,6,0,32,18,7,0,121,18,3,0,1,48,3,0,119,0,8,0,25,29,0,108,82,40,29,0,15,43,40,7,121,43,3,0,1,48,3,0,119,0,2,0,1,48,4,0,32,50,48,3,121,50,70,0,134,44,0,0,160,169,5,0,0,0,0,0,34,45,44,0,121,45,3,0,1,48,4,0,119,0,63,0,82,47,6,0,32,8,47,0,25,2,0,8,121,8,7,0,82,4,2,0,0,9,4,0,0,25,4,0,0,42,9,0,1,48,9,0,119,0,21,0,82,10,2,0,25,11,0,4,82,12,11,0,0,13,10,0,0,14,12,0,4,15,13,14,25,16,0,108,82,17,16,0,4,19,47,17,26,20,19,1,15,21,20,15,121,21,6,0,3,22,12,20,25,23,0,100,85,23,22,0,0,26,10,0,119,0,4,0,0,25,13,0,0,42,10,0,1,48,9,0,32,50,48,9,121,50,4,0,25,24,0,100,85,24,25,0,0,26,42,0,1,50,0,0,13,27,26,50,25,3,0,4,82,5,3,0,120,27,9,0,0,28,26,0,0,30,5,0,25,31,0,108,82,32,31,0,25,33,28,1,4,34,33,30,3,35,34,32,85,31,35,0,26,36,5,1,78,37,36,0,1,50,255,0,19,50,37,50,0,38,50,0,13,39,38,44,121,39,3,0,0,1,44,0,119,0,6,0,1,50,255,0,19,50,44,50,0,41,50,0,83,36,41,0,0,1,44,0,32,50,48,4,121,50,5,0,25,46,0,100,1,50,0,0,85,46,50,0,1,1,255,255,139,1,0,0,140,3,49,0,0,0,0,0,2,46,0,0,255,0,0,0,1,44,0,0,136,47,0,0,0,45,47,0,25,8,2,16,82,9,8,0,1,47,0,0,13,20,9,47,121,20,12,0,134,31,0,0,116,135,5,0,2,0,0,0,32,35,31,0,121,35,5,0,82,6,8,0,0,38,6,0,1,44,4,0,119,0,5,0,1,3,0,0,119,0,3,0,0,38,9,0,1,44,4,0,32,47,44,4,121,47,69,0,25,36,2,20,82,37,36,0,0,39,38,0,0,40,37,0,4,10,39,40,16,11,10,1,121,11,8,0,25,12,2,36,82,13,12,0,19,47,13,46,135,14,5,0,47,2,0,1,0,3,14,0,119,0,55,0,25,15,2,75,78,16,15,0,1,47,255,255,41,48,16,24,42,48,48,24,15,17,47,48,121,17,37,0,0,41,1,0,32,18,41,0,121,18,6,0,0,4,1,0,0,5,0,0,0,30,37,0,1,43,0,0,119,0,33,0,26,19,41,1,3,21,0,19,78,22,21,0,41,48,22,24,42,48,48,24,32,23,48,10,121,23,3,0,0,42,41,0,119,0,3,0,0,41,19,0,119,0,239,255,25,24,2,36,82,25,24,0,19,48,25,46,135,26,5,0,48,2,0,42,16,27,26,42,121,27,3,0,0,3,42,0,119,0,20,0,3,28,0,42,4,29,1,42,82,7,36,0,0,4,29,0,0,5,28,0,0,30,7,0,0,43,42,0,119,0,5,0,0,4,1,0,0,5,0,0,0,30,37,0,1,43,0,0,135,48,76,0,30,5,4,0,82,32,36,0,3,33,32,4,85,36,33,0,3,34,43,4,0,3,34,0,139,3,0,0,140,1,65,0,0,0,0,0,1,61,0,0,136,63,0,0,0,62,63,0,136,63,0,0,25,63,63,48,137,63,0,0,130,63,0,0,136,64,0,0,49,63,63,64,248,95,4,0,135,63,0,0,0,1,0,0,0,2,1,0], eb + 276480);
  HEAPU8.set([25,13,2,16,134,24,0,0,228,55,6,0,13,0,0,0,33,35,24,0,120,35,22,0,0,46,1,0,25,49,46,16,25,50,49,4,82,51,50,0,0,56,51,0,1,63,0,0,14,52,51,63,120,52,2,0,119,0,13,0,0,3,56,0,26,4,3,8,0,58,4,0,0,5,58,0,134,63,0,0,180,204,1,0,5,0,0,0,0,6,56,0,134,63,0,0,244,20,6,0,6,0,0,0,119,0,229,255,0,7,1,0,25,8,7,8,25,9,8,4,82,10,9,0,0,57,10,0,0,11,57,0,25,12,11,4,82,14,12,0,0,59,14,0,0,15,57,0,0,16,1,0,25,17,16,8,14,18,15,17,120,18,2,0,119,0,49,0,0,19,57,0,26,20,19,76,0,60,20,0,0,21,60,0,25,22,21,92,25,23,22,4,82,25,23,0,0,53,25,0,0,26,53,0,25,27,26,4,82,28,27,0,0,54,28,0,0,29,53,0,0,30,60,0,25,31,30,92,14,32,29,31,120,32,2,0,119,0,15,0,0,33,53,0,26,34,33,84,0,55,34,0,0,36,55,0,134,63,0,0,180,204,1,0,36,0,0,0,0,37,54,0,0,53,37,0,0,38,53,0,25,39,38,4,82,40,39,0,0,54,40,0,119,0,237,255,0,41,60,0,25,42,41,92,134,63,0,0,72,75,6,0,42,0,0,0,0,43,57,0,134,63,0,0,244,20,6,0,43,0,0,0,0,44,59,0,0,57,44,0,0,45,57,0,25,47,45,4,82,48,47,0,0,59,48,0,119,0,203,255,137,62,0,0,139,0,0,0,140,2,59,0,0,0,0,0,1,49,0,0,136,51,0,0,0,50,51,0,136,51,0,0,25,51,51,16,137,51,0,0,130,51,0,0,136,52,0,0,49,51,51,52,164,97,4,0,135,51,0,0,25,47,50,4,0,2,0,0,0,3,1,0,134,51,0,0,180,98,6,0,1,51,104,4,82,14,51,0,0,48,14,0,1,51,16,0,1,52,46,0,134,25,0,0,168,171,5,0,51,52,0,0,85,47,25,0,82,36,47,0,25,41,36,8,1,51,1,0,135,52,77,0,51,41,0,0,2,51,0,0,192,132,0,0,135,52,78,0,51,0,0,0,82,42,47,0,25,43,42,8,82,44,43,0,1,51,225,13,135,52,79,0,51,44,0,0,0,45,2,0,2,52,0,0,255,255,0,0,19,52,45,52,0,4,52,0,0,5,3,0,2,52,0,0,255,255,0,0,19,52,5,52,0,6,52,0,1,51,225,13,1,53,0,0,1,54,7,25,1,55,0,0,1,56,7,25,1,57,1,20,1,58,0,0,135,52,80,0,51,53,54,4,6,55,56,57,58,0,0,0,1,58,225,13,1,57,1,40,1,56,1,38,135,52,81,0,58,57,56,0,1,56,225,13,1,57,0,40,1,58,1,38,135,52,81,0,56,57,58,0,1,58,225,13,1,57,2,40,2,56,0,0,47,129,0,0,135,52,81,0,58,57,56,0,1,56,225,13,1,57,3,40,2,58,0,0,47,129,0,0,135,52,81,0,56,57,58,0,0,7,2,0,82,8,47,0,84,8,7,0,0,9,3,0,82,10,47,0,25,11,10,2,84,11,9,0,82,12,47,0,25,13,12,4,1,52,0,0,84,13,52,0,82,15,47,0,25,16,15,12,1,52,255,255,85,16,52,0,0,17,48,0,1,52,0,0,14,18,17,52,121,18,7,0,0,19,48,0,25,20,19,8,82,21,20,0,1,58,225,13,135,52,79,0,58,21,0,0,1,52,0,0,134,22,0,0,148,94,6,0,52,0,0,0,0,46,22,0,0,23,46,0,1,52,136,4,82,24,52,0,134,52,0,0,112,243,5,0,23,24,0,0,1,52,100,4,82,26,52,0,0,27,46,0,25,28,27,4,82,29,28,0,0,30,46,0,82,31,30,0,134,52,0,0,216,19,4,0,26,29,31,47,82,32,47,0,25,33,32,4,80,34,33,0,25,52,34,1,41,52,52,16,42,52,52,16,0,35,52,0,84,33,35,0,1,52,136,4,82,37,52,0,25,38,37,1,1,52,136,4,85,52,38,0,0,39,46,0,134,52,0,0,148,105,6,0,39,0,0,0,82,40,47,0,137,50,0,0,139,40,0,0,140,1,60,0,0,0,0,0,1,56,0,0,136,58,0,0,0,57,58,0,136,58,0,0,25,58,58,32,137,58,0,0,130,58,0,0,136,59,0,0,49,58,58,59,0,100,4,0,135,58,0,0,0,1,0,0,1,58,4,0,1,59,1,0,134,2,0,0,224,168,5,0,58,59,0,0,0,52,2,0,0,13,1,0,82,24,13,0,0,35,52,0,134,59,0,0,36,105,4,0,24,35,0,0,0,46,52,0,25,47,46,12,82,48,47,0,0,51,48,0,0,49,51,0,1,59,0,0,14,50,49,59,120,50,2,0,119,0,18,0,0,3,51,0,0,4,3,0,0,5,52,0,25,6,5,8,82,7,6,0,16,8,4,7,120,8,2,0,119,0,10,0,0,9,51,0,82,10,9,0,134,59,0,0,124,164,5,0,10,0,0,0,0,11,51,0,25,12,11,4,0,51,12,0,119,0,235,255,0,14,52,0,134,59,0,0,180,1,6,0,14,0,0,0,0,15,1,0,82,16,15,0,134,59,0,0,52,67,4,0,16,0,0,0,0,17,1,0,25,18,17,4,82,19,18,0,134,59,0,0,52,67,4,0,19,0,0,0,0,20,1,0,134,59,0,0,44,175,5,0,20,0,0,0,0,21,1,0,25,22,21,24,134,23,0,0,228,55,6,0,22,0,0,0,33,25,23,0,120,25,17,0,0,26,1,0,25,27,26,24,25,28,27,4,82,29,28,0,0,53,29,0,1,59,0,0,14,30,29,59,120,30,2,0,119,0,8,0,0,31,53,0,0,54,31,0,0,32,54,0,134,59,0,0,248,182,3,0,32,0,0,0,119,0,234,255,0,33,1,0,25,34,33,32,134,36,0,0,228,55,6,0,34,0,0,0,33,37,36,0,121,37,3,0,1,56,12,0,119,0,18,0,0,38,1,0,25,39,38,32,25,40,39,4,82,41,40,0,0,53,41,0,1,59,0,0,14,42,41,59,120,42,3,0,1,56,12,0,119,0,8,0,0,43,53,0,0,55,43,0,0,44,55,0,134,59,0,0,92,81,6,0,44,0,0,0,119,0,231,255,32,59,56,12,121,59,7,0,0,45,1,0,134,59,0,0,216,166,5,0,45,0,0,0,137,57,0,0,139,0,0,0,139,0,0,0,140,4,59,0,0,0,0,0,2,56,0,0,255,0,0,0,1,54,0,0,136,57,0,0,0,55,57,0,136,57,0,0,25,57,57,32,137,57,0,0,130,57,0,0,136,58,0,0,49,57,57,58,12,102,4,0,135,57,0,0,0,6,0,0,0,17,1,0,0,28,2,0,0,39,3,0,0,46,6,0,82,47,46,0,0,48,17,0,0,49,28,0,134,50,0,0,68,71,4,0,47,48,49,0,82,7,50,0,0,52,7,0,0,8,52,0,1,57,0,0,14,9,8,57,121,9,61,0,0,15,52,0,78,16,15,0,19,57,16,56,0,18,57,0,1,57,1,0,1,58,8,0,138,18,57,58,196,102,4,0,216,102,4,0,220,102,4,0,224,102,4,0,228,102,4,0,232,102,4,0,16,103,4,0,40,103,4,0,0,40,39,0,19,57,40,56,0,41,57,0,32,51,41,2,121,51,8,0,0,42,6,0,0,43,17,0,0,44,28,0,1,58,0,0,134,57,0,0,160,189,5,0,42,43,44,58,1,5,0,0,119,0,46,0,0,19,52,0,25,20,19,8,82,21,20,0,0,5,21,0,119,0,41,0,119,0,251,255,119,0,250,255,119,0,249,255,119,0,248,255,0,22,52,0,25,23,22,8,0,24,23,0,0,25,24,0,82,26,25,0,25,27,24,4,0,29,27,0,82,30,29,0,0,5,26,0,119,0,27,0,0,35,52,0,25,36,35,8,86,37,36,0,75,38,37,0,0,5,38,0,119,0,21,0,0,31,52,0,25,32,31,8,88,33,32,0,75,34,33,0,0,5,34,0,119,0,15,0,0,10,39,0,19,57,10,56,0,11,57,0,26,4,11,1,35,53,4,2,121,53,8,0,0,12,6,0,0,13,17,0,0,14,28,0,1,58,0,0,134,57,0,0,160,189,5,0,12,13,14,58,1,5,0,0,0,45,5,0,137,55,0,0,139,45,0,0,140,2,65,0,0,0,0,0,2,62,0,0,255,0,0,0,1,60,0,0,136,63,0,0,0,61,63,0,136,63,0,0,25,63,63,48,137,63,0,0,130,63,0,0,136,64,0,0,49,63,63,64,192,103,4,0,135,63,0,0,0,2,0,0,58,3,1,0,0,14,2,0,25,25,14,40,25,36,25,4,82,47,36,0,0,57,47,0,0,48,57,0,25,49,48,4,82,50,49,0,0,59,50,0,0,51,57,0,0,4,2,0,25,5,4,40,14,6,51,5,120,6,2,0,119,0,71,0,0,7,57,0,0,58,7,0,1,55,1,0,0,8,58,0,25,9,8,8,25,10,9,4,82,11,10,0,0,53,11,0,0,12,53,0,25,13,12,4,82,15,13,0,0,54,15,0,0,16,53,0,0,17,58,0,25,18,17,8,14,19,16,18,120,19,2,0,119,0,37,0,0,20,53,0,26,21,20,8,0,52,21,0,0,22,52,0,58,23,3,0,134,24,0,0,72,3,3,0,22,23,0,0,0,56,24,0,0,26,56,0,41,63,26,24,42,63,63,24,33,27,63,0,121,27,5,0,0,28,52,0,134,63,0,0,84,46,5,0,28,0,0,0,0,29,56,0,19,63,29,62,0,30,63,0,0,31,55,0,19,63,31,62,0,32,63,0,19,63,32,30,0,33,63,0,19,63,33,62,0,34,63,0,0,55,34,0,0,35,54,0,0,53,35,0,0,37,53,0,25,38,37,4,82,39,38,0,0,54,39,0,119,0,215,255,0,40,55,0,41,63,40,24,42,63,63,24,33,41,63,0,121,41,5,0,0,42,58,0,134,63,0,0,244,20,6,0,42,0,0,0,0,43,59,0,0,57,43,0,0,44,57,0,25,45,44,4,82,46,45,0,0,59,46,0,119,0,181,255,137,61,0,0,139,0,0,0,140,2,63,0,0,0,0,0,1,59,0,0,136,61,0,0,0,60,61,0,136,61,0,0,25,61,61,32,137,61,0,0,130,61,0,0,136,62,0,0,49,61,61,62,88,105,4,0,135,61,0,0,0,2,0,0,0,3,1,0,0,14,3,0,1,61,0,0,85,14,61,0,0,25,2,0,25,36,25,4,82,47,36,0,33,52,47,0,120,52,3,0,137,60,0,0,139,0,0,0,0,53,3,0,0,54,2,0,25,55,54,4,82,4,55,0,134,61,0,0,180,61,5,0,53,4,0,0,1,58,0,0,0,5,2,0,25,6,5,12,82,7,6,0,25,8,7,12,82,9,8,0,0,57,9,0,0,10,57,0,1,61,0,0,14,11,10,61,120,11,3,0,1,59,8,0,119,0,51,0,0,12,57,0,0,13,12,0,0,15,2,0,25,16,15,12,82,17,16,0,25,18,17,8,82,19,18,0,16,20,13,19,120,20,3,0,1,59,8,0,119,0,40,0,0,21,57,0,82,22,21,0,82,23,22,0,33,24,23,0,121,24,31,0,0,26,57,0,82,27,26,0,82,28,27,0,0,29,57,0,82,30,29,0,25,31,30,4,80,32,31,0,2,61,0,0,255,255,0,0,19,61,32,61,0,33,61,0,5,34,28,33,0,56,34,0,0,35,3,0,25,37,35,12,82,38,37,0,0,39,58,0,3,40,38,39,0,41,57,0,82,42,41,0,25,43,42,12,82,44,43,0,0,45,56,0,134,61,0,0,160,232,5,0,40,44,45,0,0,46,56,0,0,48,58,0,3,49,48,46,0,58,49,0,0,50,57,0,25,51,50,4,0,57,51,0,119,0,201,255,32,61,59,8,121,61,3,0,137,60,0,0,139,0,0,0,139,0,0,0,140,2,63,0,0,0,0,0,1,59,0,0,136,61,0,0,0,60,61,0,136,61,0,0,25,61,61,32,137,61,0,0,130,61,0,0,136,62,0,0,49,61,61,62,232,106,4,0,135,61,0,0,0,2,0,0,0,3,1,0,0,14,3,0,1,61,0,0,85,14,61,0,0,25,2,0,25,36,25,4,82,47,36,0,33,52,47,0,120,52,3,0,137,60,0,0,139,0,0,0,0,53,3,0,0,54,2,0,25,55,54,4,82,4,55,0,134,61,0,0,180,61,5,0,53,4,0,0,1,57,0,0,0,5,2,0,25,6,5,8,82,7,6,0,25,8,7,12,82,9,8,0,0,58,9,0,0,10,58,0,1,61,0,0,14,11,10,61,120,11,3,0,1,59,8,0,119,0,51,0,0,12,58,0,0,13,12,0,0,15,2,0,25,16,15,8,82,17,16,0,25,18,17,8,82,19,18,0,16,20,13,19,120,20,3,0,1,59,8,0,119,0,40,0,0,21,58,0,82,22,21,0,82,23,22,0,33,24,23,0,121,24,31,0,0,26,58,0,82,27,26,0,82,28,27,0,0,29,58,0,82,30,29,0,25,31,30,4,80,32,31,0,2,61,0,0,255,255,0,0,19,61,32,61,0,33,61,0,5,34,28,33,0,56,34,0,0,35,3,0,25,37,35,12,82,38,37,0,0,39,57,0,3,40,38,39,0,41,58,0,82,42,41,0,25,43,42,12,82,44,43,0,0,45,56,0,134,61,0,0,160,232,5,0,40,44,45,0,0,46,56,0,0,48,57,0,3,49,48,46,0,57,49,0,0,50,58,0,25,51,50,4,0,58,51,0,119,0,201,255,32,61,59,8,121,61,3,0,137,60,0,0,139,0,0,0,139,0,0,0,140,2,44,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,64,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,120,108,4,0,135,41,0,0,25,3,40,48,25,2,40,40,25,16,40,24,25,27,40,16,25,33,40,8,0,34,40,0,0,4,0,0,0,5,1,0,1,41,12,0,82,35,41,0,1,41,0,0,14,36,35,41,120,36,3,0,137,40,0,0,139,0,0,0,1,41,12,0,82,37,41,0,0,38,4,0,76,41,38,0,58,6,41,0,89,16,6,0,25,7,16,4,0,8,5,0,76,41,8,0,58,9,41,0,89,7,9,0,82,41,16,0,85,27,41,0,106,42,16,4,109,27,4,42,82,42,27,0,85,2,42,0,106,41,27,4,109,2,4,41,134,41,0,0,68,187,5,0,37,2,0,0,1,41,12,0,82,10,41,0,1,41,12,0,82,11,41,0,25,12,11,56,88,13,12,0,59,41,2,0,66,14,13,41,89,33,14,0,25,15,33,4,1,41,12,0,82,17,41,0,25,18,17,56,25,19,18,4,88,20,19,0,59,41,2,0,66,21,20,41,89,15,21,0,82,41,33,0,85,34,41,0,106,42,33,4,109,34,4,42,82,42,34,0,85,3,42,0,106,41,34,4,109,3,4,41,134,41,0,0,196,181,5,0,10,3,0,0,1,41,12,0,82,22,41,0,134,41,0,0,24,152,4,0,22,0,0,0,1,41,16,0,1,42,1,0,85,41,42,0,0,23,4,0,1,42,140,4,85,42,23,0,0,24,5,0,1,42,144,4,85,42,24,0,1,42,140,4,82,25,42,0,1,42,144,4,82,26,42,0,1,41,0,0,1,43,0,0,135,42,82,0,41,43,25,26,1,42,20,0,82,28,42,0,1,42,0,0,14,29,28,42,120,29,3,0,137,40,0,0,139,0,0,0,1,42,20,0,82,30,42,0,1,42,140,4,82,31,42,0,1,42,144,4,82,32,42,0,134,42,0,0,184,255,3,0,30,31,32,0,137,40,0,0,139,0,0,0,140,2,54,0,0,0,0,0,1,50,0,0,136,52,0,0,0,51,52,0,136,52,0,0,25,52,52,32,137,52,0,0,130,52,0,0,136,53,0,0,49,52,52,53,84,110,4,0,135,52,0,0,25,47,51,8,0,2,0,0,58,3,1,0,85,47,47,0,25,14,47,4,85,14,47,0,0,25,2,0,134,36,0,0,208,54,6,0,25,0,0,0,33,42,36,0,120,42,57,0,0,43,2,0,25,44,43,4,82,45,44,0,0,48,45,0,1,52,0,0,14,46,45,52,120,46,2,0,119,0,49,0,0,4,48,0,134,52,0,0,160,66,6,0,4,0,0,0,0,5,48,0,134,52,0,0,192,46,6,0,5,47,0,0,0,6,48,0,0,49,6,0,0,7,49,0,25,8,7,20,82,9,8,0,1,52,0,0,14,10,9,52,121,10,11,0,0,11,49,0,25,12,11,20,82,13,12,0,0,15,49,0,25,16,15,16,82,17,16,0,58,18,3,0,38,53,13,127,135,52,83,0,53,17,18,0,0,19,49,0,25,20,19,24,82,21,20,0,1,52,0,0,15,22,52,21,121,22,6,0,0,23,49,0,25,24,23,24,82,26,24,0,26,27,26,1,85,24,27,0,0,28,49,0,25,29,28,24,82,30,29,0,32,31,30,0,120,31,2,0,119,0,200,255,0,32,49,0,134,52,0,0,44,82,6,0,32,0,0,0,119,0,195,255,134,33,0,0,208,54,6,0,47,0,0,0,33,34,33,0,121,34,3,0,1,50,13,0,119,0,19,0,25,35,47,4,82,37,35,0,0,48,37,0,1,52,0,0,14,38,37,52,120,38,3,0,1,50,13,0,119,0,11,0,0,39,48,0,134,52,0,0,160,66,6,0,39,0,0,0,0,40,48,0,0,41,2,0,134,52,0,0,192,46,6,0,40,41,0,0,119,0,232,255,32,52,50,13,121,52,3,0,137,51,0,0,139,0,0,0,139,0,0,0,140,3,56,0,0,0,0,0,1,52,0,0,136,54,0,0,0,53,54,0,136,54,0,0,25,54,54,32,137,54,0,0,130,54,0,0,136,55,0,0,49,54,54,55,16,112,4,0,135,54,0,0,25,49,53,8,0,3,0,0,58,4,1,0,0,15,2,0,85,49,49,0,25,26,49,4,85,26,49,0,0,37,3,0,25,44,37,32,134,45,0,0,228,55,6,0,44,0,0,0,33,46,45,0,120,46,53,0,0,47,3,0,25,48,47,32,25,5,48,4,82,6,5,0,0,50,6,0,1,54,0,0,14,7,6,54,120,7,2,0,119,0,44,0,0,8,50,0,134,54,0,0,32,68,6,0,8,0,0,0,0,9,50,0,134,54,0,0,224,47,6,0,9,49,0,0,0,10,50,0,0,51,10,0,0,11,51,0,25,12,11,20,82,13,12,0,0,14,51,0,25,16,14,16,82,17,16,0,58,18,4,0,0,19,15,0,38,55,13,0,135,54,84,0,55,17,18,19,0,20,51,0,25,21,20,24,82,22,21,0,1,54,0,0,15,23,54,22,121,23,6,0,0,24,51,0,25,25,24,24,82,27,25,0,26,28,27,1,85,25,28,0,0,29,51,0,25,30,29,24,82,31,30,0,32,32,31,0,120,32,2,0,119,0,203,255,0,33,51,0,134,54,0,0,92,81,6,0,33,0,0,0,119,0,198,255,134,34,0,0,228,55,6,0,49,0,0,0,33,35,34,0,121,35,3,0,1,52,11,0,119,0,20,0,25,36,49,4,82,38,36,0,0,50,38,0,1,54,0,0,14,39,38,54,120,39,3,0,1,52,11,0,119,0,12,0,0,40,50,0,134,54,0,0,32,68,6,0,40,0,0,0,0,41,50,0,0,42,3,0,25,43,42,32,134,54,0,0,224,47,6,0,41,43,0,0,119,0,231,255,32,54,52,11,121,54,3,0,137,53,0,0,139,0,0,0,139,0,0,0,140,2,61,0,0,0,0,0,1,56,0,0,136,58,0,0,0,57,58,0,136,58,0,0,25,58,58,32,137,58,0,0,130,58,0,0,136,59,0,0,49,58,58,59,200,113,4,0,135,58,0,0,0,3,0,0,0,14,1,0,0,25,3,0,1,58,162,15,1,59,8,0,134,36,0,0,236,248,4,0,25,58,59,0,32,47,36,0,121,47,10,0,0,48,3,0,0,49,14,0,134,50,0,0,240,9,6,0,48,49,0,0,0,2,50,0,0,46,2,0,137,57,0,0,139,46,0,0,1,59,0,0,134,51,0,0,148,94,6,0,59,0,0,0,0,53,51,0,134,4,0,0,148,110,6,0,0,54,4,0,0,5,54,0,135,6,4,0,5,0,0,0,0,55,6,0,1,52,0,0,1,59,8,0,82,7,59,0,82,8,7,0,33,9,8,0,121,9,35,0,0,10,3,0,1,59,8,0,82,11,59,0,25,12,11,4,82,13,12,0,1,59,8,0,82,15,59,0,82,16,15,0,134,17,0,0,236,248,4,0,10,13,16,0,33,18,17,0,121,18,14,0,0,19,53,0,1,59,8,0,82,20,59,0,134,59,0,0,12,17,6,0,19,20,0,0,0,21,53,0,1,58,47,16,1,60,1,0,134,59,0,0,128,39,6,0,21,58,60,0,119,0,9,0,1,59,8,0,82,22,59,0,82,23,22,0,25,24,23,1,0,26,52,0,3,27,26,24,0,52,27,0,119,0,1,0,0,28,55,0,33,29,28,0,121,29,23,0,0,30,3,0,0,31,52,0,3,32,30,31,0,33,54,0,0,34,55,0,134,35,0,0,236,248,4,0,32,33,34,0,33,37,35,0,121,37,13,0,0,38,53,0,0,39,54,0,0,40,55,0,134,59,0,0,128,39,6,0,38,39,40,0,0,41,53,0,1,60,47,16,1,58,1,0,134,59,0,0,128,39,6,0,41,60,58,0,0,42,53,0,0,43,3,0,0,44,14,0,134,59,0,0,128,39,6,0,42,43,44,0,0,45,53,0,0,2,45,0,0,46,2,0,137,57,0,0,139,46,0,0,140,3,56,0,0,0,0,0,2,53,0,0,255,0,0,0,2,54,0,0,128,0,0,0,1,51,0,0,136,55,0,0,0,52,55,0,1,55,0,0,13,4,0,55,121,4,3,0,1,3,1,0,119,0,120,0,35,5,1,128,121,5,6,0,19,55,1,53,0,16,55,0,83,0,16,0,1,3,1,0,119,0,113,0,1,55,0,8,16,27,1,55,121,27,19,0,43,55,1,6,0,38,55,0,1,55,192,0,20,55,38,55,0,45,55,0,19,55,45,53,0,46,55,0,25,47,0,1,83,0,46,0,38,55,1,63,0,48,55,0,20,55,48,54,0,49,55,0,19,55,49,53,0,6,55,0,83,47,6,0,1,3,2,0,119,0,92,0,2,55,0,0,0,216,0,0,16,7,1,55,1,55,0,224,19,55,1,55,0,8,55,0,2,55,0,0,0,224,0,0,13,9,8,55,20,55,7,9,0,50,55,0,121,50,29,0,43,55,1,12,0,10,55,0,1,55,224,0,20,55,10,55,0,11,55,0,19,55,11,53,0,12,55,0,25,13,0,1,83,0,12,0,43,55,1,6,0,14,55,0,38,55,14,63,0,15,55,0,20,55,15,54,0,17,55,0,19,55,17,53,0,18,55,0,25,19,0,2,83,13,18,0,38,55,1,63,0,20,55,0,20,55,20,54,0,21,55,0,19,55,21,53,0,22,55,0,83,19,22,0,1,3,3,0,119,0,52,0,2,55,0,0,0,0,1,0,4,23,1,55,2,55,0,0,0,0,16,0,16,24,23,55,121,24,39,0,43,55,1,18,0,25,55,0,1,55,240,0,20,55,25,55,0,26,55,0,19,55,26,53,0,28,55,0,25,29,0,1,83,0,28,0,43,55,1,12,0,30,55,0,38,55,30,63,0,31,55,0,20,55,31,54,0,32,55,0,19,55,32,53,0,33,55,0,25,34,0,2,83,29,33,0,43,55,1,6,0,35,55,0,38,55,35,63,0,36,55,0,20,55,36,54,0,37,55,0,19,55,37,53,0,39,55,0,25,40,0,3,83,34,39,0,38,55,1,63,0,41,55,0,20,55,41,54,0,42,55,0,19,55,42,53,0,43,55,0,83,40,43,0,1,3,4,0,119,0,7,0,134,44,0,0,80,88,6,0,1,55,84,0,85,44,55,0,1,3,255,255,119,0,1,0,139,3,0,0,140,3,61,0,0,0,0,0,1,57,0,0,136,59,0,0,0,58,59,0,136,59,0,0,25,59,59,32,137,59,0,0,130,59,0,0,136,60,0,0,49,59,59,60,192,117,4,0,135,59,0,0,0,4,0,0,0,15,1,0,0,26,2,0,0,37,15,0,0,48,26,0,134,49,0,0,60,155,5,0,37,48,0,0,0,54,49,0,0,50,54,0,0,51,4,0,25,52,51,8,82,5,52,0,25,6,5,12,82,7,6,0,41,59,50,2,3,8,7,59,82,9,8,0,0,56,9,0,0,10,54,0,0,11,4,0,25,12,11,12,82,13,12,0,25,14,13,12,82,16,14,0,41,59,10,2,3,17,16,59,82,18,17,0,0,53,18,0,0,19,56,0,25,20,19,12,82,21,20,0,0,55,21,0,0,22,55,0,1,59,0,0,14,23,22,59,120,23,3,0,1,57,8,0,119,0,33,0,0,24,55,0,0,25,24,0,0,27,56,0,25,28,27,8,82,29,28,0,16,30,25,29,120,30,3,0,1,57,8,0,119,0,24,0,0,31,55,0,82,32,31,0,82,33,32,0,0,34,26,0,13,35,33,34,121,35,14,0,0,36,15,0,0,38,55,0,82,39,38,0,25,40,39,4,82,41,40,0,0,42,26,0,134,43,0,0,180,228,4,0,36,41,42,0,32,44,43,0,121,44,3,0,1,57,6,0,119,0,5,0,0,45,55,0,25,46,45,4,0,55,46,0,119,0,219,255,32,59,57,6,121,59,6,0,1,3,1,0,0,47,3,0,137,58,0,0,139,47,0,0,119,0,7,0,32,59,57,8,121,59,5,0,1,3,0,0,0,47,3,0,137,58,0,0,139,47,0,0,1,59,0,0,139,59,0,0,140,1,37,0,0,0,0,0,1,30,0,0,136,34,0,0,0,31,34,0,136,34,0,0,1,35,176,0,3,34,34,35,137,34,0,0,130,34,0,0,136,35,0,0,49,34,34,35,80,119,4,0,135,34,0,0,25,1,31,24,25,26,31,104,25,27,31,88,0,3,31,0,0,2,0,0,0,14,2,0,78,19,14,0,41,34,19,24,42,34,34,24,33,20,34,0,120,20,3,0,137,31,0,0,139,0,0,0,0,21,2,0,1,34,0,0,83,21,34,0,0,22,2,0,25,23,22,4,82,24,23,0,25,25,24,4,82,4,25,0,0,28,4,0,0,5,28,0,25,6,5,64,0,29,1,0,0,32,6,0,25,33,29,64,82,34,32,0,85,29,34,0,25,29,29,4,25,32,32,4,54,34,29,33,188,119,4,0,134,34,0,0,0,0,0,0,26,1,0,0,25,7,26,48,127,34,0,0,114,34,7,0,127,34,0,0,102,35,7,1,107,34,1,35,127,35,0,0,102,34,7,2,107,35,2,34,127,34,0,0,102,35,7,3,107,34,3,35,127,35,0,0,88,8,35,0,89,3,8,0,25,9,3,4,25,10,26,52,127,35,0,0,114,35,10,0,127,35,0,0,102,34,10,1,107,35,1,34,127,34,0,0,102,35,10,2,107,34,2,35,127,35,0,0,102,34,10,3,107,35,3,34,127,34,0,0,88,11,34,0,89,9,11,0,25,12,9,4,25,13,26,56,127,34,0,0,114,34,13,0,127,34,0,0,102,35,13,1,107,34,1,35,127,35,0,0,102,34,13,2,107,35,2,34,127,34,0,0,102,35,13,3,107,34,3,35,127,35,0,0,88,15,35,0,89,12,15,0,134,35,0,0,132,22,5,0,27,3,0,0,0,16,2,0,25,17,16,4,82,18,17,0,1,34,2,0,1,36,12,0,134,35,0,0,20,213,4,0,18,34,27,36,137,31,0,0,139,0,0,0,140,4,60,0,0,0,0,0,1,56,0,0,136,58,0,0,0,57,58,0,136,58,0,0,25,58,58,16,137,58,0,0,130,58,0,0,136,59,0,0,49,58,58,59,4,121,4,0,135,58,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,27,3,0,0,38,5,0,25,49,38,12,82,52,49,0,25,53,52,4,82,54,53,0,1,58,227,30,134,55,0,0,208,147,5,0,54,58,0,0,32,6,55,0,121,6,9,0,0,7,4,0,25,8,7,40,82,9,8,0,25,10,9,8,1,58,1,0,83,10,58,0,137,57,0,0,139,0,0,0,0,11,5,0,25,12,11,12,82,13,12,0,25,14,13,4,82,15,14,0,1,58,240,30,134,17,0,0,208,147,5,0,15,58,0,0,32,18,17,0,121,18,9,0,0,19,4,0,25,20,19,40,82,21,20,0,25,22,21,8,1,58,4,0,83,22,58,0,137,57,0,0,139,0,0,0,0,23,5,0,25,24,23,12,82,25,24,0,25,26,25,4,82,28,26,0,1,58,252,30,134,29,0,0,208,147,5,0,28,58,0,0,32,30,29,0,121,30,10,0,0,31,4,0,25,32,31,40,82,33,32,0,25,34,33,8,1,58,2,0,83,34,58,0,137,57,0,0,139,0,0,0,119,0,23,0,0,35,5,0,25,36,35,12,82,37,36,0,25,39,37,4,82,40,39,0,134,41,0,0,60,101,6,0,40,0,0,0,58,42,41,0,0,43,4,0,25,44,43,40,82,45,44,0,25,46,45,12,89,46,42,0,0,47,4,0,25,48,47,40,82,50,48,0,25,51,50,8,1,58,3,0,83,51,58,0,137,57,0,0,139,0,0,0,139,0,0,0,140,1,44,0,0,0,0,0,1,40,0,0,136,42,0,0,0,41,42,0,136,42,0,0,25,42,42,16,137,42,0,0,130,42,0,0,136,43,0,0,49,42,42,43,140,122,4,0,135,42,0,0,0,39,41,0,0,1,0,0,1,38,0,0,0,2,1,0,25,13,2,40,134,42,0,0,148,194,5,0,13,0,0,0,0,24,1,0,25,31,24,12,134,32,0,0,200,49,6,0,31,0,0,0,33,33,32,0,120,33,10,0,0,34,1,0,25,35,34,12,25,36,35,4,82,3,36,0,0,38,3,0,0,4,38,0,134,42,0,0,136,60,6,0,4,0,0,0,0,5,1,0,25,6,5,40,134,42,0,0,240,95,6,0,6,0,0,0,0,7,38,0,1,42,0,0,14,8,7,42,120,8,2,0,119,0,77,0,0,9,38,0,0,37,9,0,0,10,37,0,25,11,10,8,80,12,11,0,41,42,12,16,42,42,42,16,0,14,42,0,1,42,0,0,1,43,12,0,138,14,42,43,116,123,4,0,112,123,4,0,140,123,4,0,112,123,4,0,180,123,4,0,112,123,4,0,204,123,4,0,112,123,4,0,228,123,4,0,252,123,4,0,112,123,4,0,20,124,4,0,119,0,47,0,0,15,1,0,0,16,38,0,134,42,0,0,72,182,5,0,15,16,0,0,119,0,41,0,1,43,253,31,134,42,0,0,44,77,6,0,43,39,0,0,0,17,1,0,0,18,38,0,134,42,0,0,208,192,3,0,17,18,0,0,119,0,31,0,0,19,1,0,0,20,38,0,134,42,0,0,56,35,6,0,19,20,0,0,119,0,25,0,0,21,1,0,0,22,38,0,134,42,0,0,200,134,5,0,21,22,0,0,119,0,19,0,0,23,1,0,0,25,38,0,134,42,0,0,148,33,6,0,23,25,0,0,119,0,13,0,0,26,1,0,0,27,38,0,134,42,0,0,60,143,4,0,26,27,0,0,119,0,7,0,0,28,1,0,0,29,38,0,134,42,0,0,248,147,4,0,28,29,0,0,119,0,1,0,0,30,37,0,134,42,0,0,4,206,4,0,30,0,0,0,1,38,0,0,119,0,150,255,137,41,0,0,139,0,0,0,140,3,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,128,124,4,0,135,19,0,0,58,3,2,0,127,19,0,0,114,19,1,0,127,19,0,0,102,20,1,1,107,19,1,20,127,20,0,0,102,19,1,2,107,20,2,19,127,19,0,0,102,20,1,3,107,19,3,20,127,20,0,0,88,4,20,0,58,9,3,0,65,10,4,9,127,20,0,0,89,20,10,0,127,20,0,0,114,0,20,0,127,19,0,0,102,19,19,1,107,0,1,19,127,20,0,0,102,20,20,2,107,0,2,20,127,19,0,0,102,19,19,3,107,0,3,19,25,11,0,4,25,12,1,4,127,19,0,0,114,19,12,0,127,19,0,0,102,20,12,1,107,19,1,20,127,20,0,0,102,19,12,2,107,20,2,19,127,19,0,0,102,20,12,3,107,19,3,20,127,20,0,0,88,13,20,0,58,14,3,0,65,15,13,14,127,20,0,0,89,20,15,0,127,20,0,0,114,11,20,0,127,19,0,0,102,19,19,1,107,11,1,19,127,20,0,0,102,20,20,2,107,11,2,20,127,19,0,0,102,19,19,3,107,11,3,19,25,16,0,8,25,5,1,8,127,19,0,0,114,19,5,0,127,19,0,0,102,20,5,1,107,19,1,20,127,20,0,0,102,19,5,2,107,20,2,19,127,19,0,0,102,20,5,3,107,19,3,20,127,20,0,0,88,6,20,0,58,7,3,0,65,8,6,7,127,20,0,0,89,20,8,0,127,20,0,0,114,16,20,0,127,19,0,0,102,19,19,1,107,16,1,19,127,20,0,0,102,20,20,2,107,16,2,20,127,19,0,0,102,19,19,3,107,16,3,19,137,18,0,0,139,0,0,0,140,3,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,32,126,4,0,135,19,0,0,58,3,2,0,127,19,0,0,114,19,1,0,127,19,0,0,102,20,1,1,107,19,1,20,127,20,0,0,102,19,1,2,107,20,2,19,127,19,0,0,102,20,1,3,107,19,3,20,127,20,0,0,88,4,20,0,58,9,3,0,65,10,4,9,127,20,0,0,89,20,10,0,127,20,0,0,114,0,20,0,127,19,0,0,102,19,19,1,107,0,1,19,127,20,0,0,102,20,20,2,107,0,2,20,127,19,0,0,102,19,19,3,107,0,3,19,25,11,0,4,25,12,1,4,127,19,0,0,114,19,12,0,127,19,0,0,102,20,12,1,107,19,1,20,127,20,0,0,102,19,12,2,107,20,2,19,127,19,0,0,102,20,12,3,107,19,3,20,127,20,0,0,88,13,20,0,58,14,3,0,65,15,13,14,127,20,0,0,89,20,15,0,127,20,0,0,114,11,20,0,127,19,0,0,102,19,19,1,107,11,1,19,127,20,0,0,102,20,20,2,107,11,2,20,127,19,0,0,102,19,19,3,107,11,3,19,25,16,0,8,25,5,1,8,127,19,0,0,114,19,5,0,127,19,0,0,102,20,5,1,107,19,1,20,127,20,0,0,102,19,5,2,107,20,2,19,127,19,0,0,102,20,5,3,107,19,3,20,127,20,0,0,88,6,20,0,58,7,3,0,65,8,6,7,127,20,0,0,89,20,8,0,127,20,0,0,114,16,20,0,127,19,0,0,102,19,19,1,107,16,1,19,127,20,0,0,102,20,20,2,107,16,2,20,127,19,0,0,102,19,19,3,107,16,3,19,137,18,0,0,139,0,0,0,140,2,60,0,0,0,0,0,1,55,0,0,136,57,0,0,0,56,57,0,136,57,0,0,25,57,57,32,137,57,0,0,130,57,0,0,136,58,0,0,49,57,57,58,192,127,4,0,135,57,0,0,0,3,0,0,0,14,1,0,0,25,3,0,1,57,162,15,1,58,8,0,134,36,0,0,236,248,4,0,25,57,58,0,32,47,36,0,121,47,10,0,0,48,3,0,0,49,14,0,134,50,0,0,240,9,6,0,48,49,0,0,0,2,50,0,0,46,2,0,137,56,0,0,139,46,0,0,1,58,0,0,134,51,0,0,148,94,6,0,58,0,0,0,0,53,51,0,134,4,0,0,148,110,6,0,0,54,4,0,0,5,54,0,135,6,4,0,5,0,0,0,0,52,6,0,1,58,8,0,82,7,58,0,82,8,7,0,33,9,8,0,121,9,28,0,0,10,3,0,1,58,8,0,82,11,58,0,25,12,11,4,82,13,12,0,1,58,8,0,82,15,58,0,82,16,15,0,134,17,0,0,236,248,4,0,10,13,16,0,32,18,17,0,121,18,15,0,1,58,8,0,82,19,58,0,82,20,19,0,25,21,20,1,0,22,3,0,3,23,22,21,0,3,23,0,1,58,8,0,82,24,58,0,82,26,24,0,25,27,26,1,0,28,14,0,4,29,28,27,0,14,29,0,0,30,52,0,33,31,30,0,121,31,21,0,0,32,3,0,0,33,54,0,0,34,52,0,134,35,0,0,236,248,4,0,32,33,34,0,33,37,35,0,121,37,13,0,0,38,53,0,0,39,54,0,0,40,52,0,134,58,0,0,128,39,6,0,38,39,40,0,0,41,53,0,1,57,47,16,1,59,1,0,134,58,0,0,128,39,6,0,41,57,59,0,0,42,53,0,0,43,3,0,0,44,14,0,134,58,0,0,128,39,6,0,42,43,44,0,0,45,53,0,0,2,45,0,0,46,2,0,137,56,0,0,139,46,0,0,140,1,42,0,0,0,0,0,2,39,0,0,68,6,0,0,2,40,0,0,88,6,0,0,1,37,0,0,136,41,0,0,0,38,41,0,1,41,0,0,13,5,0,41,121,5,67,0,82,30,40,0,1,41,0,0,13,31,30,41,121,31,3,0,1,25,0,0,119,0,6,0,82,32,40,0,134,7,0,0,68,129,4,0,32,0,0,0,0,25,7,0,135,41,35,0,39,0,0,0,1,41,64,6,82,3,41,0,1,41,0,0,13,8,3,41,121,8,3,0,0,34,25,0,119,0,43,0,0,4,3,0,0,35,25,0,25,9,4,76,82,10,9,0,1,41,255,255,15,11,41,10,121,11,6,0,134,12,0,0,196,122,6,0,4,0,0,0,0,21,12,0,119,0,2,0,1,21,0,0,25,13,4,20,82,14,13,0,25,15,4,28,82,16,15,0,16,18,16,14,121,18,8,0,134,19,0,0,4,55,5,0,4,0,0,0,20,41,19,35,0,20,41,0,0,36,20,0,119,0,2,0,0,36,35,0,32,22,21,0,120,22,4,0,134,41,0,0,172,122,6,0,4,0,0,0,25,23,4,56,82,2,23,0,1,41,0,0,13,24,2,41,121,24,3,0,0,34,36,0,119,0,4,0,0,4,2,0,0,35,36,0,119,0,217,255,135,41,36,0,39,0,0,0,0,1,34,0,119,0,25,0,25,6,0,76,82,17,6,0,1,41,255,255,15,26,41,17,120,26,6,0,134,27,0,0,4,55,5,0,0,0,0,0,0,1,27,0,119,0,15,0,134,28,0,0,196,122,6,0,0,0,0,0,32,33,28,0,134,29,0,0,4,55,5,0,0,0,0,0,121,33,3,0,0,1,29,0,119,0,5,0,134,41,0,0,172,122,6,0,0,0,0,0,0,1,29,0,139,1,0,0,140,3,34,0,0,0,0,0,1,30,0,0,136,32,0,0,0,31,32,0,136,32,0,0,25,32,32,16,137,32,0,0,130,32,0,0,136,33,0,0,49,32,32,33,20,131,4,0,135,32,0,0,58,3,1,0,0,4,2,0,58,15,3,0,61,32,0,0,0,0,0,63,65,21,15,32,58,28,21,0,58,22,28,0,135,23,85,0,22,0,0,0,58,29,23,0,58,24,29,0,0,25,4,0,88,26,25,0,65,27,24,26,127,32,0,0,89,32,27,0,127,32,0,0,114,0,32,0,127,33,0,0,102,33,33,1,107,0,1,33,127,32,0,0,102,32,32,2,107,0,2,32,127,33,0,0,102,33,33,3,107,0,3,33,25,5,0,4,58,6,29,0,0,7,4,0,25,8,7,4,88,9,8,0,65,10,6,9,127,33,0,0,89,33,10,0,127,33,0,0,114,5,33,0,127,32,0,0,102,32,32,1,107,5,1,32,127,33,0,0,102,33,33,2,107,5,2,33,127,32,0,0,102,32,32,3,107,5,3,32,25,11,0,8,58,12,29,0,0,13,4,0,25,14,13,8,88,16,14,0,65,17,12,16,127,32,0,0,89,32,17,0,127,32,0,0,114,11,32,0,127,33,0,0,102,33,33,1,107,11,1,33,127,32,0,0,102,32,32,2,107,11,2,32,127,33,0,0,102,33,33,3,107,11,3,33,25,18,0,12,58,19,28,0,135,20,86,0,19,0,0,0,127,33,0,0,89,33,20,0,127,33,0,0,114,18,33,0,127,32,0,0,102,32,32,1,107,18,1,32,127,33,0,0,102,33,33,2,107,18,2,33,127,32,0,0,102,32,32,3,107,18,3,32,137,31,0,0,139,0,0,0,140,3,34,0,0,0,0,0,1,30,0,0,136,32,0,0,0,31,32,0,136,32,0,0,25,32,32,16,137,32,0,0,130,32,0,0,136,33,0,0,49,32,32,33,156,132,4,0,135,32,0,0,58,3,1,0,0,4,2,0,58,15,3,0,61,32,0,0,0,0,0,63,65,21,15,32,58,28,21,0,58,22,28,0,135,23,85,0,22,0,0,0,58,29,23,0,58,24,29,0,0,25,4,0,88,26,25,0,65,27,24,26,127,32,0,0,89,32,27,0,127,32,0,0,114,0,32,0,127,33,0,0,102,33,33,1,107,0,1,33,127,32,0,0,102,32,32,2,107,0,2,32,127,33,0,0,102,33,33,3,107,0,3,33,25,5,0,4,58,6,29,0,0,7,4,0,25,8,7,4,88,9,8,0,65,10,6,9,127,33,0,0,89,33,10,0,127,33,0,0,114,5,33,0,127,32,0,0,102,32,32,1,107,5,1,32,127,33,0,0,102,33,33,2,107,5,2,33,127,32,0,0,102,32,32,3,107,5,3,32,25,11,0,8,58,12,29,0,0,13,4,0,25,14,13,8,88,16,14,0,65,17,12,16,127,32,0,0,89,32,17,0,127,32,0,0,114,11,32,0,127,33,0,0,102,33,33,1,107,11,1,33,127,32,0,0,102,32,32,2,107,11,2,32,127,33,0,0,102,33,33,3,107,11,3,33,25,18,0,12,58,19,28,0,135,20,86,0,19,0,0,0,127,33,0,0,89,33,20,0,127,33,0,0,114,18,33,0,127,32,0,0,102,32,32,1,107,18,1,32,127,33,0,0,102,33,33,2,107,18,2,33,127,32,0,0,102,32,32,3,107,18,3,32,137,31,0,0,139,0,0,0,140,2,62,0,0,0,0,0,1,58,0,0,136,60,0,0,0,59,60,0,136,60,0,0,25,60,60,16,137,60,0,0,130,60,0,0,136,61,0,0,49,60,60,61,36,134,4,0,135,60,0,0,0,2,0,0,58,3,1,0,59,57,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,47,36,0,58,52,3,0,64,53,47,52,58,56,53,0,58,54,56,0,58,55,54,0,62,60,0,0,187,189,215,217,223,124,27,62,74,4,55,60,121,4,54,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,56,0,64,10,8,9,58,57,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,60,2,0,66,16,15,60,58,17,57,0,66,18,17,16,58,57,18,0,58,19,57,0,59,60,1,0,71,20,19,60,58,21,57,0,121,20,14,0,58,22,57,0,65,23,21,22,58,24,57,0,65,26,23,24,58,27,57,0,65,28,26,27,58,29,57,0,65,30,28,29,61,60,0,0,0,0,0,63,65,31,30,60,58,57,31,0,119,0,21,0,59,60,2,0,64,32,21,60,58,57,32,0,58,33,57,0,58,34,57,0,65,35,33,34,58,37,57,0,65,38,35,37,58,39,57,0,65,40,38,39,58,41,57,0,65,42,40,41,59,60,2,0,63,43,42,60,61,60,0,0,0,0,0,63,65,44,43,60,58,57,44,0,119,0,2,0,59,57,1,0,58,45,56,0,0,46,2,0,25,48,46,32,25,49,48,36,89,49,45,0,0,50,2,0,58,51,57,0,134,60,0,0,88,224,3,0,50,51,0,0,137,59,0,0,139,0,0,0,140,4,52,0,0,0,0,0,1,48,0,0,136,50,0,0,0,49,50,0,136,50,0,0,25,50,50,16,137,50,0,0,130,50,0,0,136,51,0,0,49,50,50,51,164,135,4,0,135,50,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,27,3,0,0,38,5,0,25,43,38,12,82,44,43,0,25,45,44,4,82,46,45,0,1,50,168,30,134,47,0,0,208,147,5,0,46,50,0,0,32,6,47,0,121,6,8,0,0,7,4,0,1,51,0,0,134,50,0,0,56,38,5,0,7,51,0,0,137,49,0,0,139,0,0,0,0,8,5,0], eb + 286720);
  HEAPU8.set([25,9,8,12,82,10,9,0,25,11,10,4,82,12,11,0,1,50,177,30,134,13,0,0,208,147,5,0,12,50,0,0,32,14,13,0,121,14,8,0,0,15,4,0,1,51,1,0,134,50,0,0,56,38,5,0,15,51,0,0,137,49,0,0,139,0,0,0,0,17,5,0,25,18,17,12,82,19,18,0,25,20,19,4,82,21,20,0,1,50,186,30,134,22,0,0,208,147,5,0,21,50,0,0,32,23,22,0,121,23,8,0,0,24,4,0,1,51,2,0,134,50,0,0,56,38,5,0,24,51,0,0,137,49,0,0,139,0,0,0,0,25,5,0,25,26,25,12,82,28,26,0,25,29,28,4,82,30,29,0,1,50,197,30,134,31,0,0,208,147,5,0,30,50,0,0,32,32,31,0,121,32,8,0,0,33,4,0,1,51,4,0,134,50,0,0,56,38,5,0,33,51,0,0,137,49,0,0,139,0,0,0,0,34,5,0,25,35,34,12,82,36,35,0,25,37,36,4,82,39,37,0,1,50,211,30,134,40,0,0,208,147,5,0,39,50,0,0,32,41,40,0,0,42,4,0,121,41,8,0,1,51,5,0,134,50,0,0,56,38,5,0,42,51,0,0,137,49,0,0,139,0,0,0,119,0,7,0,1,51,3,0,134,50,0,0,56,38,5,0,42,51,0,0,137,49,0,0,139,0,0,0,139,0,0,0,140,2,62,0,0,0,0,0,1,58,0,0,136,60,0,0,0,59,60,0,136,60,0,0,25,60,60,16,137,60,0,0,130,60,0,0,136,61,0,0,49,60,60,61,112,137,4,0,135,60,0,0,0,2,0,0,58,3,1,0,59,57,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,47,36,0,58,52,3,0,64,53,47,52,58,56,53,0,58,54,56,0,58,55,54,0,62,60,0,0,187,189,215,217,223,124,27,62,74,4,55,60,121,4,54,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,56,0,64,10,8,9,58,57,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,60,2,0,66,16,15,60,58,17,57,0,66,18,17,16,58,57,18,0,58,19,57,0,59,60,1,0,71,20,19,60,58,21,57,0,121,20,14,0,58,22,57,0,65,23,21,22,58,24,57,0,65,26,23,24,58,27,57,0,65,28,26,27,58,29,57,0,65,30,28,29,61,60,0,0,0,0,0,63,65,31,30,60,58,57,31,0,119,0,21,0,59,60,2,0,64,32,21,60,58,57,32,0,58,33,57,0,58,34,57,0,65,35,33,34,58,37,57,0,65,38,35,37,58,39,57,0,65,40,38,39,58,41,57,0,65,42,40,41,59,60,2,0,63,43,42,60,61,60,0,0,0,0,0,63,65,44,43,60,58,57,44,0,119,0,2,0,59,57,1,0,58,45,56,0,0,46,2,0,25,48,46,32,25,49,48,36,89,49,45,0,0,50,2,0,58,51,57,0,134,60,0,0,164,226,3,0,50,51,0,0,137,59,0,0,139,0,0,0,140,2,60,0,0,0,0,0,1,56,0,0,136,58,0,0,0,57,58,0,136,58,0,0,25,58,58,16,137,58,0,0,130,58,0,0,136,59,0,0,49,58,58,59,240,138,4,0,135,58,0,0,0,2,0,0,58,3,1,0,59,55,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,47,36,0,58,50,3,0,64,51,47,50,58,54,51,0,58,52,54,0,58,53,52,0,62,58,0,0,187,189,215,217,223,124,27,62,74,4,53,58,121,4,56,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,54,0,64,10,8,9,58,55,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,58,2,0,66,16,15,58,58,17,55,0,66,18,17,16,58,55,18,0,58,19,55,0,59,58,1,0,71,20,19,58,58,21,55,0,121,20,16,0,58,22,55,0,65,23,21,22,59,58,1,0,64,24,58,23,58,26,24,0,135,27,67,0,26,0,0,0,58,28,27,0,59,58,1,0,64,29,28,58,61,58,0,0,0,0,0,191,65,30,58,29,58,55,30,0,119,0,21,0,59,58,2,0,64,31,21,58,58,55,31,0,58,32,55,0,58,33,55,0,58,34,55,0,65,35,33,34,64,37,32,35,58,38,37,0,135,39,67,0,38,0,0,0,58,40,39,0,59,58,1,0,63,41,40,58,61,58,0,0,0,0,0,63,65,42,58,41,58,55,42,0,119,0,2,0,59,55,1,0,58,43,54,0,0,44,2,0,25,45,44,32,25,46,45,36,89,46,43,0,0,48,2,0,58,49,55,0,134,58,0,0,88,224,3,0,48,49,0,0,137,57,0,0,139,0,0,0,140,2,60,0,0,0,0,0,1,56,0,0,136,58,0,0,0,57,58,0,136,58,0,0,25,58,58,16,137,58,0,0,130,58,0,0,136,59,0,0,49,58,58,59,120,140,4,0,135,58,0,0,0,2,0,0,58,3,1,0,59,55,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,47,36,0,58,50,3,0,64,51,47,50,58,54,51,0,58,52,54,0,58,53,52,0,62,58,0,0,187,189,215,217,223,124,27,62,74,4,53,58,121,4,56,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,54,0,64,10,8,9,58,55,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,58,2,0,66,16,15,58,58,17,55,0,66,18,17,16,58,55,18,0,58,19,55,0,59,58,1,0,71,20,19,58,58,21,55,0,121,20,16,0,58,22,55,0,65,23,21,22,59,58,1,0,64,24,58,23,58,26,24,0,135,27,67,0,26,0,0,0,58,28,27,0,59,58,1,0,64,29,28,58,61,58,0,0,0,0,0,191,65,30,58,29,58,55,30,0,119,0,21,0,59,58,2,0,64,31,21,58,58,55,31,0,58,32,55,0,58,33,55,0,58,34,55,0,65,35,33,34,64,37,32,35,58,38,37,0,135,39,67,0,38,0,0,0,58,40,39,0,59,58,1,0,63,41,40,58,61,58,0,0,0,0,0,63,65,42,58,41,58,55,42,0,119,0,2,0,59,55,1,0,58,43,54,0,0,44,2,0,25,45,44,32,25,46,45,36,89,46,43,0,0,48,2,0,58,49,55,0,134,58,0,0,164,226,3,0,48,49,0,0,137,57,0,0,139,0,0,0,140,4,56,0,0,0,0,0,1,52,0,0,136,54,0,0,0,53,54,0,136,54,0,0,25,54,54,16,137,54,0,0,130,54,0,0,136,55,0,0,49,54,54,55,0,142,4,0,135,54,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,27,3,0,0,38,5,0,25,47,38,12,82,48,47,0,25,49,48,4,82,50,49,0,1,54,227,30,134,51,0,0,208,147,5,0,50,54,0,0,32,6,51,0,121,6,9,0,0,7,4,0,25,8,7,40,82,9,8,0,25,10,9,9,1,54,1,0,83,10,54,0,137,53,0,0,139,0,0,0,0,11,5,0,25,12,11,12,82,13,12,0,25,14,13,4,82,15,14,0,1,54,240,30,134,17,0,0,208,147,5,0,15,54,0,0,32,18,17,0,121,18,9,0,0,19,4,0,25,20,19,40,82,21,20,0,25,22,21,9,1,54,4,0,83,22,54,0,137,53,0,0,139,0,0,0,0,23,5,0,25,24,23,12,82,25,24,0,25,26,25,4,82,28,26,0,1,54,252,30,134,29,0,0,208,147,5,0,28,54,0,0,32,30,29,0,121,30,10,0,0,31,4,0,25,32,31,40,82,33,32,0,25,34,33,9,1,54,2,0,83,34,54,0,137,53,0,0,139,0,0,0,119,0,17,0,0,35,5,0,25,36,35,12,82,37,36,0,25,39,37,4,82,40,39,0,134,41,0,0,28,103,6,0,40,0,0,0,58,42,41,0,0,43,4,0,25,44,43,40,82,45,44,0,25,46,45,16,89,46,42,0,137,53,0,0,139,0,0,0,139,0,0,0,140,2,56,0,0,0,0,0,1,49,0,0,136,51,0,0,0,50,51,0,136,51,0,0,25,51,51,32,137,51,0,0,130,51,0,0,136,52,0,0,49,51,51,52,112,143,4,0,135,51,0,0,25,47,50,8,0,2,0,0,0,3,1,0,134,14,0,0,104,85,6,0,0,46,14,0,0,25,3,0,25,36,25,12,82,40,36,0,25,41,40,4,82,42,41,0,0,43,3,0,25,44,43,12,82,4,44,0,82,5,4,0,134,6,0,0,240,9,6,0,42,5,0,0,85,47,6,0,0,7,46,0,1,52,205,33,1,53,9,0,1,54,9,0,1,55,4,0,134,51,0,0,152,211,5,0,7,52,53,54,47,55,0,0,1,51,215,33,1,55,13,0,134,8,0,0,240,9,6,0,51,55,0,0,85,47,8,0,0,9,46,0,1,51,229,33,1,54,9,0,1,53,9,0,1,52,4,0,134,55,0,0,152,211,5,0,9,51,54,53,47,52,0,0,0,10,46,0,134,11,0,0,36,87,4,0,10,0,0,0,0,45,11,0,0,12,46,0,134,55,0,0,184,57,5,0,12,0,0,0,0,13,2,0,25,15,13,36,82,16,15,0,0,17,3,0,25,18,17,20,1,55,4,0,134,19,0,0,68,71,4,0,16,18,55,0,82,20,19,0,0,48,20,0,0,21,48,0,1,55,0,0,14,22,21,55,120,22,7,0,0,39,45,0,134,55,0,0,148,105,6,0,39,0,0,0,137,50,0,0,139,0,0,0,0,23,2,0,25,24,23,44,82,26,24,0,0,27,48,0,82,28,27,0,0,29,3,0,25,30,29,16,82,31,30,0,25,32,31,4,82,33,32,0,0,34,45,0,25,35,34,4,82,37,35,0,1,55,35,0,135,38,87,0,55,26,28,33,37,0,0,0,0,39,45,0,134,55,0,0,148,105,6,0,39,0,0,0,137,50,0,0,139,0,0,0,140,1,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,127,21,0,0,114,21,0,0,127,21,0,0,102,22,0,1,107,21,1,22,127,22,0,0,102,21,0,2,107,22,2,21,127,21,0,0,102,22,0,3,107,21,3,22,127,22,0,0,88,1,22,0,127,22,0,0,114,22,0,0,127,22,0,0,102,21,0,1,107,22,1,21,127,21,0,0,102,22,0,2,107,21,2,22,127,22,0,0,102,21,0,3,107,22,3,21,127,21,0,0,88,2,21,0,65,11,1,2,25,12,0,4,127,21,0,0,114,21,12,0,127,21,0,0,102,22,12,1,107,21,1,22,127,22,0,0,102,21,12,2,107,22,2,21,127,21,0,0,102,22,12,3,107,21,3,22,127,22,0,0,88,13,22,0,25,14,0,4,127,22,0,0,114,22,14,0,127,22,0,0,102,21,14,1,107,22,1,21,127,21,0,0,102,22,14,2,107,21,2,22,127,22,0,0,102,21,14,3,107,22,3,21,127,21,0,0,88,15,21,0,65,16,13,15,63,17,11,16,25,18,0,8,127,21,0,0,114,21,18,0,127,21,0,0,102,22,18,1,107,21,1,22,127,22,0,0,102,21,18,2,107,22,2,21,127,21,0,0,102,22,18,3,107,21,3,22,127,22,0,0,88,3,22,0,25,4,0,8,127,22,0,0,114,22,4,0,127,22,0,0,102,21,4,1,107,22,1,21,127,21,0,0,102,22,4,2,107,21,2,22,127,22,0,0,102,21,4,3,107,22,3,21,127,21,0,0,88,5,21,0,65,6,3,5,63,7,17,6,58,8,7,0,135,9,67,0,8,0,0,0,58,10,9,0,139,10,0,0,140,1,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,127,21,0,0,114,21,0,0,127,21,0,0,102,22,0,1,107,21,1,22,127,22,0,0,102,21,0,2,107,22,2,21,127,21,0,0,102,22,0,3,107,21,3,22,127,22,0,0,88,1,22,0,127,22,0,0,114,22,0,0,127,22,0,0,102,21,0,1,107,22,1,21,127,21,0,0,102,22,0,2,107,21,2,22,127,22,0,0,102,21,0,3,107,22,3,21,127,21,0,0,88,2,21,0,65,11,1,2,25,12,0,4,127,21,0,0,114,21,12,0,127,21,0,0,102,22,12,1,107,21,1,22,127,22,0,0,102,21,12,2,107,22,2,21,127,21,0,0,102,22,12,3,107,21,3,22,127,22,0,0,88,13,22,0,25,14,0,4,127,22,0,0,114,22,14,0,127,22,0,0,102,21,14,1,107,22,1,21,127,21,0,0,102,22,14,2,107,21,2,22,127,22,0,0,102,21,14,3,107,22,3,21,127,21,0,0,88,15,21,0,65,16,13,15,63,17,11,16,25,18,0,8,127,21,0,0,114,21,18,0,127,21,0,0,102,22,18,1,107,21,1,22,127,22,0,0,102,21,18,2,107,22,2,21,127,21,0,0,102,22,18,3,107,21,3,22,127,22,0,0,88,3,22,0,25,4,0,8,127,22,0,0,114,22,4,0,127,22,0,0,102,21,4,1,107,22,1,21,127,21,0,0,102,22,4,2,107,21,2,22,127,22,0,0,102,21,4,3,107,22,3,21,127,21,0,0,88,5,21,0,65,6,3,5,63,7,17,6,58,8,7,0,135,9,67,0,8,0,0,0,58,10,9,0,139,10,0,0,140,2,53,0,0,0,0,0,1,49,0,0,136,51,0,0,0,50,51,0,136,51,0,0,25,51,51,16,137,51,0,0,130,51,0,0,136,52,0,0,49,51,51,52,44,148,4,0,135,51,0,0,0,2,0,0,0,3,1,0,0,14,3,0,25,25,14,12,82,36,25,0,134,42,0,0,36,87,4,0,36,0,0,0,0,47,42,0,0,43,3,0,25,44,43,20,78,45,44,0,41,51,45,24,42,51,51,24,33,46,51,0,0,4,2,0,120,46,20,0,25,29,4,44,82,30,29,0,0,31,3,0,25,32,31,16,82,33,32,0,25,34,33,4,82,35,34,0,0,37,47,0,25,38,37,4,82,39,38,0,1,51,37,0,135,40,88,0,51,30,35,39,0,41,47,0,134,51,0,0,148,105,6,0,41,0,0,0,137,50,0,0,139,0,0,0,25,5,4,36,82,6,5,0,0,7,3,0,25,8,7,24,1,51,4,0,134,9,0,0,68,71,4,0,6,8,51,0,82,10,9,0,0,48,10,0,0,11,48,0,1,51,0,0,14,12,11,51,120,12,7,0,0,41,47,0,134,51,0,0,148,105,6,0,41,0,0,0,137,50,0,0,139,0,0,0,0,13,2,0,25,15,13,44,82,16,15,0,0,17,48,0,82,18,17,0,0,19,3,0,25,20,19,16,82,21,20,0,25,22,21,4,82,23,22,0,0,24,47,0,25,26,24,4,82,27,26,0,1,51,36,0,135,28,87,0,51,16,18,23,27,0,0,0,0,41,47,0,134,51,0,0,148,105,6,0,41,0,0,0,137,50,0,0,139,0,0,0,140,2,47,0,0,0,0,0,1,43,0,0,136,45,0,0,0,44,45,0,136,45,0,0,25,45,45,32,137,45,0,0,130,45,0,0,136,46,0,0,49,45,45,46,156,149,4,0,135,45,0,0,25,42,44,8,0,2,0,0,85,42,1,0,82,28,42,0,0,3,28,0,1,45,0,0,25,14,45,4,0,37,14,0,26,32,37,1,3,20,3,32,1,45,0,0,25,21,45,4,0,40,21,0,26,39,40,1,40,45,39,255,0,38,45,0,19,45,20,38,0,22,45,0,0,23,22,0,82,24,23,0,25,30,23,4,85,42,30,0,0,27,24,0,0,25,27,0,1,45,0,0,14,26,25,45,120,26,2,0,119,0,28,0,0,4,2,0,25,5,4,52,0,6,27,0,134,45,0,0,76,13,6,0,5,6,0,0,82,29,42,0,0,7,29,0,1,45,0,0,25,8,45,4,0,33,8,0,26,41,33,1,3,9,7,41,1,45,0,0,25,10,45,4,0,36,10,0,26,35,36,1,40,45,35,255,0,34,45,0,19,45,9,34,0,11,45,0,0,12,11,0,82,13,12,0,25,31,12,4,85,42,31,0,0,27,13,0,119,0,225,255,0,15,2,0,1,45,36,1,3,16,15,45,82,17,16,0,0,18,2,0,25,19,18,52,134,45,0,0,124,37,6,0,17,19,0,0,137,44,0,0,139,0,0,0,140,1,51,0,0,0,0,0,1,47,0,0,136,49,0,0,0,48,49,0,136,49,0,0,25,49,49,32,137,49,0,0,130,49,0,0,136,50,0,0,49,49,49,50,216,150,4,0,135,49,0,0,25,45,48,16,25,41,48,12,25,46,48,8,25,42,48,4,0,43,48,0,0,1,0,0,134,2,0,0,64,165,5,0,0,44,2,0,0,13,44,0,0,24,1,0,85,24,13,0,134,35,0,0,152,153,5,0,85,45,35,0,1,49,0,0,85,41,49,0,0,36,44,0,25,37,36,4,82,38,37,0,1,50,4,0,134,49,0,0,216,19,4,0,38,41,50,45,134,39,0,0,116,97,5,0,85,46,39,0,1,49,1,0,85,42,49,0,0,40,44,0,25,3,40,4,82,4,3,0,1,50,4,0,134,49,0,0,216,19,4,0,4,42,50,46,1,49,0,0,85,43,49,0,0,5,44,0,82,6,5,0,0,7,1,0,25,8,7,8,82,9,8,0,25,10,9,4,1,50,4,0,134,49,0,0,216,19,4,0,6,43,50,10,0,11,1,0,25,12,11,8,82,14,12,0,25,15,14,4,82,16,15,0,25,17,16,20,82,18,17,0,25,19,18,1,85,17,19,0,1,49,2,0,85,43,49,0,0,20,44,0,82,21,20,0,0,22,1,0,25,23,22,28,82,25,23,0,25,26,25,12,1,50,4,0,134,49,0,0,216,19,4,0,21,43,50,26,0,27,1,0,25,28,27,28,82,29,28,0,25,30,29,12,82,31,30,0,25,32,31,20,82,33,32,0,25,34,33,1,85,32,34,0,137,48,0,0,139,0,0,0,140,1,47,0,0,0,0,0,1,43,0,0,136,45,0,0,0,44,45,0,136,45,0,0,25,45,45,32,137,45,0,0,130,45,0,0,136,46,0,0,49,45,45,46,76,152,4,0,135,45,0,0,25,42,44,16,0,41,44,0,0,1,0,0,0,2,1,0,25,13,2,32,134,24,0,0,188,53,6,0,13,0,0,0,33,34,24,0,0,35,1,0,120,34,12,0,25,36,35,32,25,37,36,4,82,38,37,0,26,39,38,4,0,40,39,0,0,3,40,0,134,45,0,0,64,108,5,0,3,0,0,0,137,44,0,0,139,0,0,0,25,4,35,56,82,45,4,0,85,41,45,0,106,46,4,4,109,41,4,46,0,5,1,0,25,6,5,40,82,7,6,0,25,8,7,8,78,9,8,0,1,46,255,0,19,46,9,46,0,10,46,0,32,11,10,3,121,11,7,0,0,12,1,0,25,14,12,40,82,15,14,0,25,16,15,12,88,17,16,0,89,41,17,0,0,18,1,0,25,19,18,40,82,20,19,0,25,21,20,9,78,22,21,0,1,46,255,0,19,46,22,46,0,23,46,0,32,25,23,3,121,25,8,0,0,26,1,0,25,27,26,40,82,28,27,0,25,29,28,16,88,30,29,0,25,31,41,4,89,31,30,0,0,32,1,0,82,46,41,0,85,42,46,0,106,45,41,4,109,42,4,45,134,45,0,0,68,187,5,0,32,42,0,0,0,33,1,0,134,45,0,0,176,109,6,0,33,0,0,0,137,44,0,0,139,0,0,0,140,5,57,0,0,0,0,0,1,53,0,0,136,55,0,0,0,54,55,0,136,55,0,0,25,55,55,32,137,55,0,0,130,55,0,0,136,56,0,0,49,55,55,56,168,153,4,0,135,55,0,0,25,51,54,4,0,5,0,0,0,6,1,0,0,17,2,0,0,28,3,0,0,39,4,0,0,45,5,0,1,55,24,1,3,46,45,55,82,47,46,0,0,48,6,0,0,49,17,0,134,7,0,0,140,117,4,0,47,48,49,0,33,8,7,0,121,8,25,0,0,9,5,0,1,55,24,1,3,10,9,55,82,11,10,0,0,12,6,0,0,13,17,0,134,14,0,0,68,71,4,0,11,12,13,0,82,15,14,0,0,50,15,0,0,16,50,0,134,55,0,0,128,226,5,0,16,0,0,0,0,18,5,0,1,55,24,1,3,19,18,55,82,20,19,0,0,21,6,0,0,22,17,0,134,55,0,0,200,79,4,0,20,21,22,0,1,55,8,0,1,56,0,0,134,23,0,0,168,171,5,0,55,56,0,0,85,51,23,0,82,24,51,0,134,56,0,0,196,72,6,0,24,0,0,0,134,25,0,0,44,178,5,0,0,52,25,0,0,26,52,0,25,27,26,8,82,29,51,0,134,56,0,0,160,45,6,0,27,29,0,0,0,30,28,0,0,31,52,0,25,32,31,24,85,32,30,0,0,33,5,0,0,34,52,0,25,35,34,16,85,35,33,0,0,36,39,0,0,37,52,0,25,38,37,20,85,38,36,0,0,40,5,0,1,56,24,1,3,41,40,56,82,42,41,0,0,43,6,0,0,44,17,0,134,56,0,0,216,19,4,0,42,43,44,51,137,54,0,0,139,0,0,0,140,2,38,0,0,0,0,0,1,33,0,0,136,35,0,0,0,34,35,0,136,35,0,0,25,35,35,32,137,35,0,0,130,35,0,0,136,36,0,0,49,35,35,36,40,155,4,0,135,35,0,0,25,32,34,24,25,31,34,16,0,3,34,0,0,2,0,0,0,14,2,0,1,35,216,0,3,23,14,35,82,35,1,0,85,23,35,0,106,36,1,4,109,23,4,36,0,24,2,0,1,36,224,0,3,25,24,36,82,36,1,0,85,25,36,0,106,35,1,4,109,25,4,35,0,26,2,0,1,35,240,0,3,27,26,35,59,35,0,0,89,3,35,0,25,28,3,4,59,35,0,0,89,28,35,0,82,35,3,0,85,27,35,0,106,36,3,4,109,27,4,36,0,29,2,0,82,4,29,0,32,30,4,5,121,30,9,0,0,5,2,0,82,36,1,0,85,31,36,0,106,35,1,4,109,31,4,35,134,35,0,0,40,186,5,0,5,31,0,0,0,6,2,0,1,35,196,0,3,7,6,35,82,8,7,0,1,35,0,0,14,9,8,35,121,9,14,0,0,10,2,0,1,35,196,0,3,11,10,35,82,12,11,0,0,13,2,0,82,35,1,0,85,32,35,0,106,36,1,4,109,32,4,36,38,35,12,63,1,37,0,0,135,36,19,0,35,13,37,32,0,15,2,0,1,36,28,1,3,16,15,36,82,17,16,0,1,36,0,0,14,18,17,36,120,18,3,0,137,34,0,0,139,0,0,0,0,19,2,0,1,36,28,1,3,20,19,36,82,21,20,0,0,22,2,0,1,35,0,0,134,36,0,0,72,232,4,0,21,22,35,0,137,34,0,0,139,0,0,0,140,5,57,0,0,0,0,0,1,53,0,0,136,55,0,0,0,54,55,0,136,55,0,0,25,55,55,32,137,55,0,0,130,55,0,0,136,56,0,0,49,55,55,56,164,156,4,0,135,55,0,0,25,51,54,4,0,5,0,0,0,6,1,0,0,17,2,0,0,28,3,0,0,39,4,0,0,45,5,0,25,46,45,40,82,47,46,0,0,48,6,0,0,49,17,0,134,7,0,0,140,117,4,0,47,48,49,0,33,8,7,0,121,8,23,0,0,9,5,0,25,10,9,40,82,11,10,0,0,12,6,0,0,13,17,0,134,14,0,0,68,71,4,0,11,12,13,0,82,15,14,0,0,50,15,0,0,16,50,0,134,55,0,0,220,225,5,0,16,0,0,0,0,18,5,0,25,19,18,40,82,20,19,0,0,21,6,0,0,22,17,0,134,55,0,0,200,79,4,0,20,21,22,0,1,55,8,0,1,56,0,0,134,23,0,0,168,171,5,0,55,56,0,0,85,51,23,0,82,24,51,0,134,56,0,0,104,72,6,0,24,0,0,0,134,25,0,0,44,178,5,0,0,52,25,0,0,26,52,0,25,27,26,8,82,29,51,0,134,56,0,0,64,45,6,0,27,29,0,0,0,30,28,0,0,31,52,0,25,32,31,24,85,32,30,0,0,33,5,0,0,34,52,0,25,35,34,16,85,35,33,0,0,36,39,0,0,37,52,0,25,38,37,20,85,38,36,0,0,40,5,0,25,41,40,40,82,42,41,0,0,43,6,0,0,44,17,0,134,56,0,0,216,19,4,0,42,43,44,51,137,54,0,0,139,0,0,0,140,2,58,0,0,0,0,0,1,54,0,0,136,56,0,0,0,55,56,0,136,56,0,0,25,56,56,16,137,56,0,0,130,56,0,0,136,57,0,0,49,56,56,57,20,158,4,0,135,56,0,0,0,2,0,0,58,3,1,0,59,53,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,47,36,0,58,48,3,0,64,49,47,48,58,52,49,0,58,50,52,0,58,51,50,0,62,56,0,0,187,189,215,217,223,124,27,62,74,4,51,56,121,4,50,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,52,0,64,10,8,9,58,53,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,56,2,0,66,16,15,56,58,17,53,0,66,18,17,16,58,53,18,0,58,19,53,0,59,56,1,0,71,20,19,56,58,21,53,0,121,20,12,0,58,22,53,0,65,23,21,22,58,24,53,0,65,26,23,24,58,27,53,0,65,28,26,27,61,56,0,0,0,0,0,63,65,29,28,56,58,53,29,0,119,0,19,0,59,56,2,0,64,30,21,56,58,53,30,0,58,31,53,0,58,32,53,0,65,33,31,32,58,34,53,0,65,35,33,34,58,37,53,0,65,38,35,37,59,56,2,0,64,39,38,56,61,56,0,0,0,0,0,191,65,40,56,39,58,53,40,0,119,0,2,0,59,53,1,0,58,41,52,0,0,42,2,0,25,43,42,32,25,44,43,36,89,44,41,0,0,45,2,0,58,46,53,0,134,56,0,0,88,224,3,0,45,46,0,0,137,55,0,0,139,0,0,0,140,2,58,0,0,0,0,0,1,54,0,0,136,56,0,0,0,55,56,0,136,56,0,0,25,56,56,16,137,56,0,0,130,56,0,0,136,57,0,0,49,56,56,57,132,159,4,0,135,56,0,0,0,2,0,0,58,3,1,0,59,53,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,47,36,0,58,48,3,0,64,49,47,48,58,52,49,0,58,50,52,0,58,51,50,0,62,56,0,0,187,189,215,217,223,124,27,62,74,4,51,56,121,4,50,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,52,0,64,10,8,9,58,53,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,56,2,0,66,16,15,56,58,17,53,0,66,18,17,16,58,53,18,0,58,19,53,0,59,56,1,0,71,20,19,56,58,21,53,0,121,20,12,0,58,22,53,0,65,23,21,22,58,24,53,0,65,26,23,24,58,27,53,0,65,28,26,27,61,56,0,0,0,0,0,63,65,29,28,56,58,53,29,0,119,0,19,0,59,56,2,0,64,30,21,56,58,53,30,0,58,31,53,0,58,32,53,0,65,33,31,32,58,34,53,0,65,35,33,34,58,37,53,0,65,38,35,37,59,56,2,0,64,39,38,56,61,56,0,0,0,0,0,191,65,40,56,39,58,53,40,0,119,0,2,0,59,53,1,0,58,41,52,0,0,42,2,0,25,43,42,32,25,44,43,36,89,44,41,0,0,45,2,0,58,46,53,0,134,56,0,0,164,226,3,0,45,46,0,0,137,55,0,0,139,0,0,0,140,1,45,0,0,0,0,0,2,42,0,0,0,16,0,0,1,40,0,0,136,43,0,0,0,41,43,0,136,43,0,0,25,43,43,16,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,252,160,4,0,135,43,0,0,0,1,0,0,0,2,1,0,2,43,0,0,49,181,124,7,5,13,2,43,43,43,13,27,0,24,43,0,1,43,208,3,41,44,24,2,3,31,43,44,82,32,31,0,0,37,32,0,1,43,64,0,134,44,0,0,196,195,5,0,43,0,0,0,0,33,37,0,27,44,33,28,25,34,44,68,134,35,0,0,0,0,6,0,34,0,0,0,0,39,35,0,0,36,39,0,33,3,36,0,121,3,20,0,0,4,1,0,0,5,37,0,27,44,5,28,25,6,44,68,25,7,6,24,85,7,4,0,0,8,1,0,16,9,8,42,0,10,1,0,0,11,37,0,121,9,5,0,134,44,0,0,140,197,4,0,10,11,0,0,119,0,5,0,134,44,0,0,132,13,5,0,10,11,0,0,119,0,1,0,1,43,64,0,134,44,0,0,144,96,6,0,43,0,0,0,1,43,64,0,134,44,0,0,196,195,5,0,43,0,0,0,1,43,60,0,134,44,0,0,196,195,5,0,43,0,0,0,0,12,37,0,27,44,12,28,25,14,44,68,134,15,0,0,0,0,6,0,14,0,0,0,0,39,15,0,0,16,39,0,33,17,16,0,120,17,2,0,119,0,10,0,1,43,60,0,134,44,0,0,144,96,6,0,43,0,0,0,1,43,64,0,134,44,0,0,144,96,6,0,43,0,0,0,119,0,192,255,0,18,37,0,27,44,18,28,25,19,44,68,134,20,0,0,204,237,5,0,19,0,0,0,0,38,20,0,0,21,38,0,25,22,21,16,82,23,22,0,25,25,23,8,82,26,25,0,82,27,26,0,25,28,27,1,85,26,28,0,1,43,60,0,134,44,0,0,144,96,6,0,43,0,0,0,1,43,64,0,134,44,0,0,144,96,6,0,43,0,0,0,0,29,38,0,25,30,29,24,137,41,0,0,139,30,0,0,140,2,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,127,19,0,0,114,19,0,0,127,19,0,0,102,20,0,1,107,19,1,20,127,20,0,0,102,19,0,2,107,20,2,19,127,19,0,0,102,20,0,3,107,19,3,20,127,20,0,0,88,2,20,0,127,20,0,0,114,20,1,0,127,20,0,0,102,19,1,1,107,20,1,19,127,19,0,0,102,20,1,2,107,19,2,20,127,20,0,0,102,19,1,3,107,20,3,19,127,19,0,0,88,3,19,0,65,9,2,3,25,10,0,4,127,19,0,0,114,19,10,0,127,19,0,0,102,20,10,1,107,19,1,20,127,20,0,0,102,19,10,2,107,20,2,19,127,19,0,0,102,20,10,3,107,19,3,20,127,20,0,0,88,11,20,0,25,12,1,4,127,20,0,0,114,20,12,0,127,20,0,0,102,19,12,1,107,20,1,19,127,19,0,0,102,20,12,2,107,19,2,20,127,20,0,0,102,19,12,3,107,20,3,19,127,19,0,0,88,13,19,0,65,14,11,13,63,15,9,14,25,16,0,8,127,19,0,0,114,19,16,0,127,19,0,0,102,20,16,1,107,19,1,20,127,20,0,0,102,19,16,2,107,20,2,19,127,19,0,0,102,20,16,3,107,19,3,20,127,20,0,0,88,4,20,0,25,5,1,8,127,20,0,0,114,20,5,0,127,20,0,0,102,19,5,1,107,20,1,19,127,19,0,0,102,20,5,2,107,19,2,20,127,20,0,0,102,19,5,3,107,20,3,19,127,19,0,0,88,6,19,0,65,7,4,6,63,8,15,7,139,8,0,0,140,1,41,0,0,0,0,0,1,32,0,0,136,36,0,0,0,33,36,0,136,36,0,0,1,37,16,1,3,36,36,37,137,36,0,0,130,36,0,0,136,37,0,0,49,36,36,37,72,164,4,0,135,36,0,0,25,28,33,72,25,30,33,8,1,36,200,0,3,29,33,36,1,36,136,0,3,27,33,36,0,1,0,0,1,36,140,4,82,2,36,0,76,36,2,0,58,13,36,0,1,36,144,4,82,20,36,0,76,36,20,0,58,21,36,0,66,22,13,21,61,37,0,0,219,15,73,63,59,38,100,0,60,39,0,0,160,134,1,0,134,36,0,0,12,107,3,0,29,37,22,38,39,0,0,0,1,36,140,4,82,23,36,0,28,36,23,2,38,36,36,255,0,24,36,0,76,36,24,0,58,25,36,0,1,36,144,4,82,26,36,0,28,36,26,2,38,36,36,255,0,3,36,0,76,36,3,0,58,4,36,0,1,36,144,4,82,5,36,0,28,36,5,2,38,36,36,255,0,6,36,0,76,36,6,0,58,7,36,0,61,36,0,0,219,15,201,62,135,8,24,0,36,0,0,0,66,9,7,8,1,36,140,4,82,10,36,0,28,36,10,2,38,36,36,255,0,11,36,0,76,36,11,0,58,12,36,0,1,36,144,4,82,14,36,0,28,36,14,2,38,36,36,255,0,15,36,0,76,36,15,0,58,16,36,0,59,39,0,0,59,38,0,0,59,37,1,0,59,40,0,0,134,36,0,0,20,63,2,0,27,25,4,9,12,16,39,38,37,40,0,0,0,31,30,0,0,34,29,0,25,35,31,64,82,36,34,0,85,31,36,0,25,31,31,4,25,34,34,4,54,36,31,35,124,165,4,0,0,31,28,0,0,34,27,0,25,35,31,64,82,36,34,0,85,31,36,0,25,31,31,4,25,34,34,4,54,36,31,35,160,165,4,0,134,17,0,0,236,122,5,0,30,28,0,0,0,18,1,0,25,19,18,8,85,19,17,0,137,33,0,0,139,0,0,0,140,2,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,127,19,0,0,114,19,0,0,127,19,0,0,102,20,0,1,107,19,1,20,127,20,0,0,102,19,0,2,107,20,2,19,127,19,0,0,102,20,0,3,107,19,3,20,127,20,0,0,88,2,20,0,127,20,0,0,114,20,1,0,127,20,0,0,102,19,1,1,107,20,1,19,127,19,0,0,102,20,1,2,107,19,2,20,127,20,0,0,102,19,1,3,107,20,3,19,127,19,0,0,88,3,19,0,65,9,2,3,25,10,0,4,127,19,0,0,114,19,10,0,127,19,0,0,102,20,10,1,107,19,1,20,127,20,0,0,102,19,10,2,107,20,2,19,127,19,0,0,102,20,10,3,107,19,3,20,127,20,0,0,88,11,20,0,25,12,1,4,127,20,0,0,114,20,12,0,127,20,0,0,102,19,12,1,107,20,1,19,127,19,0,0,102,20,12,2,107,19,2,20,127,20,0,0,102,19,12,3,107,20,3,19,127,19,0,0,88,13,19,0,65,14,11,13,63,15,9,14,25,16,0,8,127,19,0,0,114,19,16,0,127,19,0,0,102,20,16,1,107,19,1,20,127,20,0,0,102,19,16,2,107,20,2,19,127,19,0,0,102,20,16,3,107,19,3,20,127,20,0,0,88,4,20,0,25,5,1,8,127,20,0,0,114,20,5,0,127,20,0,0,102,19,5,1,107,20,1,19,127,19,0,0,102,20,5,2,107,19,2,20,127,20,0,0,102,19,5,3,107,20,3,19,127,19,0,0,88,6,19,0,65,7,4,6,63,8,15,7,139,8,0,0,140,2,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,127,14,0,0,114,14,1,0,127,14,0,0,102,15,1,1,107,14,1,15,127,15,0,0,102,14,1,2,107,15,2,14,127,14,0,0,102,15,1,3,107,14,3,15,127,15,0,0,88,2,15,0,68,3,2,0,127,15,0,0,89,15,3,0,127,15,0,0,114,0,15,0,127,14,0,0,102,14,14,1,107,0,1,14,127,15,0,0,102,15,15,2,107,0,2,15,127,14,0,0,102,14,14,3,107,0,3,14,25,4,0,4,25,5,1,4,127,14,0,0,114,14,5,0,127,14,0,0,102,15,5,1,107,14,1,15,127,15,0,0,102,14,5,2,107,15,2,14,127,14,0,0,102,15,5,3,107,14,3,15,127,15,0,0,88,6,15,0,68,7,6,0,127,15,0,0,89,15,7,0,127,15,0,0,114,4,15,0,127,14,0,0,102,14,14,1,107,4,1,14,127,15,0,0,102,15,15,2,107,4,2,15,127,14,0,0,102,14,14,3,107,4,3,14,25,8,0,8,25,9,1,8,127,14,0,0,114,14,9,0,127,14,0,0,102,15,9,1,107,14,1,15,127,15,0,0,102,14,9,2,107,15,2,14,127,14,0,0,102,15,9,3,107,14,3,15,127,15,0,0,88,10,15,0,68,11,10,0,127,15,0,0,89,15,11,0,127,15,0,0,114,8,15,0,127,14,0,0,102,14,14,1,107,8,1,14,127,15,0,0,102,15,15,2,107,8,2,15,127,14,0,0,102,14,14,3,107,8,3,14,139,0,0,0,140,2,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,127,14,0,0,114,14,1,0,127,14,0,0,102,15,1,1,107,14,1,15,127,15,0,0,102,14,1,2,107,15,2,14,127,14,0,0,102,15,1,3,107,14,3,15,127,15,0,0,88,2,15,0,68,3,2,0,127,15,0,0,89,15,3,0,127,15,0,0,114,0,15,0,127,14,0,0,102,14,14,1,107,0,1,14,127,15,0,0,102,15,15,2,107,0,2,15,127,14,0,0,102,14,14,3,107,0,3,14,25,4,0,4,25,5,1,4,127,14,0,0,114,14,5,0,127,14,0,0,102,15,5,1,107,14,1,15,127,15,0,0,102,14,5,2,107,15,2,14,127,14,0,0,102,15,5,3,107,14,3,15,127,15,0,0,88,6,15,0,68,7,6,0,127,15,0,0,89,15,7,0,127,15,0,0,114,4,15,0,127,14,0,0,102,14,14,1,107,4,1,14,127,15,0,0,102,15,15,2,107,4,2,15,127,14,0,0,102,14,14,3,107,4,3,14,25,8,0,8,25,9,1,8,127,14,0,0,114,14,9,0,127,14,0,0,102,15,9,1,107,14,1,15,127,15,0,0,102,14,9,2,107,15,2,14,127,14,0,0,102,15,9,3,107,14,3,15,127,15,0,0,88,10,15,0,68,11,10,0,127,15,0,0,89,15,11,0,127,15,0,0,114,8,15,0,127,14,0,0,102,14,14,1,107,8,1,14,127,15,0,0,102,15,15,2,107,8,2,15,127,14,0,0,102,14,14,3,107,8,3,14,139,0,0,0,140,2,55,0,0,0,0,0,1,51,0,0,136,53,0,0,0,52,53,0,136,53,0,0,25,53,53,16,137,53,0,0,130,53,0,0,136,54,0,0,49,53,53,54,88,170,4,0,135,53,0,0,0,2,0,0,58,3,1,0,59,50,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,44,36,0,58,45,3,0,64,46,44,45,58,49,46,0,58,47,49,0,58,48,47,0,62,53,0,0,187,189,215,217,223,124,27,62,74,4,48,53,121,4,53,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,49,0,64,10,8,9,58,50,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,53,2,0,66,16,15,53,58,17,50,0,66,18,17,16,58,50,18,0,58,19,50,0,59,53,1,0,71,20,19,53,58,21,50,0,59,53,1,0,64,22,21,53,121,20,13,0,58,23,22,0,59,53,10,0,65,24,53,23,59,53,2,0,135,26,89,0,53,24,0,0,58,27,26,0,61,53,0,0,0,0,0,63,65,28,53,27,58,50,28,0,119,0,19,0,58,50,22,0,58,29,50,0,58,30,29,0,59,53,246,255,65,31,53,30,59,53,2,0,135,32,89,0,53,31,0,0,58,33,32,0,68,34,33,0,59,53,2,0,63,35,34,53,61,53,0,0,0,0,0,63,65,37,53,35,58,50,37,0,119,0,2,0,59,50,1,0,58,38,49,0,0,39,2,0,25,40,39,32,25,41,40,36,89,41,38,0,0,42,2,0,58,43,50,0,134,53,0,0,88,224,3,0,42,43,0,0,137,52,0,0,139,0,0,0,140,1,23,0,0,0,0,0,1,17,0,0,136,21,0,0,0,18,21,0,136,21,0,0,25,21,21,32,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,212,171,4,0,135,21,0,0,25,2,18,8,0,1,0,0,1,21,36,0,1,22,33,0,134,7,0,0,168,171,5,0,21,22,0,0,0,15,7,0,0,8,15,0,127,22,0,0,59,21,0,0,89,22,21,0,127,21,0,0,114,2,21,0,127,22,0,0,102,22,22,1,107,2,1,22,127,21,0,0,102,21,21,2,107,2,2,21,127,22,0,0,102,22,22,3,107,2,3,22,25,9,2,4,127,22,0,0,59,21,0,0,89,22,21,0,127,21,0,0,114,9,21,0,127,22,0,0,102,22,22,1,107,9,1,22,127,21,0,0,102,21,21,2,107,9,2,21,127,22,0,0,102,22,22,3,107,9,3,22,25,10,2,8,127,22,0,0,59,21,0,0,89,22,21,0,127,21,0,0,114,10,21,0,127,22,0,0,102,22,22,1,107,10,1,22,127,21,0,0,102,21,21,2,107,10,2,21,127,22,0,0,102,22,22,3,107,10,3,22,25,11,2,12,127,22,0,0,59,21,0,0,89,22,21,0,127,21,0,0,114,11,21,0,127,22,0,0,102,22,22,1,107,11,1,22,127,21,0,0,102,21,21,2,107,11,2,21,127,22,0,0,102,22,22,3,107,11,3,22,0,16,8,0,0,19,2,0,25,20,16,16,78,22,19,0,83,16,22,0,25,16,16,1,25,19,19,1,54,22,16,20,240,172,4,0,0,12,15,0,25,13,12,32,1,22,0,0,83,13,22,0,0,14,15,0,25,3,14,33,1,22,0,0,83,3,22,0,0,4,15,0,25,5,4,16,134,22,0,0,44,86,6,0,5,0,0,0,0,6,15,0,137,18,0,0,139,6,0,0,140,2,55,0,0,0,0,0,1,51,0,0,136,53,0,0,0,52,53,0,136,53,0,0,25,53,53,16,137,53,0,0,130,53,0,0,136,54,0,0,49,53,53,54,124,173,4,0,135,53,0,0,0,2,0,0,58,3,1,0,59,50,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,44,36,0,58,45,3,0,64,46,44,45,58,49,46,0,58,47,49,0,58,48,47,0,62,53,0,0,187,189,215,217,223,124,27,62,74,4,48,53,121,4,53,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,49,0,64,10,8,9,58,50,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,53,2,0,66,16,15,53,58,17,50,0,66,18,17,16,58,50,18,0,58,19,50,0,59,53,1,0,71,20,19,53,58,21,50,0,59,53,1,0,64,22,21,53,121,20,13,0,58,23,22,0,59,53,10,0,65,24,53,23,59,53,2,0,135,26,89,0,53,24,0,0,58,27,26,0,61,53,0,0,0,0,0,63,65,28,53,27,58,50,28,0,119,0,19,0,58,50,22,0,58,29,50,0,58,30,29,0,59,53,246,255,65,31,53,30,59,53,2,0,135,32,89,0,53,31,0,0,58,33,32,0,68,34,33,0,59,53,2,0,63,35,34,53,61,53,0,0,0,0,0,63,65,37,53,35,58,50,37,0,119,0,2,0,59,50,1,0,58,38,49,0,0,39,2,0,25,40,39,32,25,41,40,36,89,41,38,0,0,42,2,0,58,43,50,0,134,53,0,0,164,226,3,0,42,43,0,0,137,52,0,0,139,0,0,0,140,2,56,0,0,0,0,0,1,52,0,0,136,54,0,0,0,53,54,0,136,54,0,0,25,54,54,16,137,54,0,0,130,54,0,0,136,55,0,0,49,54,54,55,248,174,4,0,135,54,0,0,0,2,0,0,58,3,1,0,59,51,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,45,36,0,58,46,3,0,64,47,45,46,58,50,47,0,58,48,50,0,58,49,48,0,62,54,0,0,187,189,215,217,223,124,27,62,74,4,49,54,121,4,47,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,50,0,64,10,8,9,58,51,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,54,2,0,66,16,15,54,58,17,51,0,66,18,17,16,58,51,18,0,58,19,51,0,59,54,1,0,71,20,19,54,58,21,51,0,121,20,12,0,58,22,51,0,65,23,21,22,58,24,51,0,65,26,23,24,58,27,26,0,61,54,0,0,0,0,0,63,65,28,27,54,58,29,28,0,58,51,29,0,119,0,16,0,59,54,2,0,64,30,21,54,58,51,30,0,58,31,51,0,58,32,51,0,65,33,31,32,58,34,51,0,65,35,33,34,59,54,2,0,63,37,35,54,59,54,2,0,66,38,37,54,58,51,38,0,119,0,2,0,59,51,1,0,58,39,50,0,0,40,2,0], eb + 296960);
  HEAPU8.set([25,41,40,32,25,42,41,36,89,42,39,0,0,43,2,0,58,44,51,0,134,54,0,0,88,224,3,0,43,44,0,0,137,53,0,0,139,0,0,0,140,1,51,0,0,0,0,0,1,47,0,0,136,49,0,0,0,48,49,0,136,49,0,0,25,49,49,32,137,49,0,0,130,49,0,0,136,50,0,0,49,49,49,50,92,176,4,0,135,49,0,0,0,1,0,0,0,2,1,0,0,45,2,0,1,43,0,0,0,13,43,0,35,24,13,2,120,24,2,0,119,0,13,0,0,35,45,0,82,37,35,0,134,49,0,0,204,99,4,0,37,0,0,0,0,38,45,0,25,39,38,4,0,45,39,0,0,40,43,0,25,41,40,1,0,43,41,0,119,0,241,255,0,3,1,0,25,4,3,8,0,42,4,0,1,43,0,0,0,5,43,0,35,6,5,2,120,6,2,0,119,0,13,0,0,7,42,0,82,8,7,0,134,49,0,0,244,80,6,0,8,0,0,0,0,9,42,0,25,10,9,4,0,42,10,0,0,11,43,0,25,12,11,1,0,43,12,0,119,0,241,255,0,14,1,0,25,15,14,16,0,46,15,0,1,43,0,0,0,16,43,0,35,17,16,3,120,17,2,0,119,0,13,0,0,18,46,0,82,19,18,0,134,49,0,0,244,196,5,0,19,0,0,0,0,20,46,0,25,21,20,4,0,46,21,0,0,22,43,0,25,23,22,1,0,43,23,0,119,0,241,255,0,25,1,0,25,26,25,28,0,44,26,0,1,43,0,0,0,27,43,0,35,28,27,1,120,28,2,0,119,0,13,0,0,29,44,0,82,30,29,0,134,49,0,0,40,80,6,0,30,0,0,0,0,31,44,0,25,32,31,4,0,44,32,0,0,33,43,0,25,34,33,1,0,43,34,0,119,0,241,255,0,36,1,0,134,49,0,0,216,166,5,0,36,0,0,0,137,48,0,0,139,0,0,0,140,2,56,0,0,0,0,0,1,52,0,0,136,54,0,0,0,53,54,0,136,54,0,0,25,54,54,16,137,54,0,0,130,54,0,0,136,55,0,0,49,54,54,55,232,177,4,0,135,54,0,0,0,2,0,0,58,3,1,0,59,51,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,45,36,0,58,46,3,0,64,47,45,46,58,50,47,0,58,48,50,0,58,49,48,0,62,54,0,0,187,189,215,217,223,124,27,62,74,4,49,54,121,4,47,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,50,0,64,10,8,9,58,51,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,54,2,0,66,16,15,54,58,17,51,0,66,18,17,16,58,51,18,0,58,19,51,0,59,54,1,0,71,20,19,54,58,21,51,0,121,20,12,0,58,22,51,0,65,23,21,22,58,24,51,0,65,26,23,24,58,27,26,0,61,54,0,0,0,0,0,63,65,28,27,54,58,29,28,0,58,51,29,0,119,0,16,0,59,54,2,0,64,30,21,54,58,51,30,0,58,31,51,0,58,32,51,0,65,33,31,32,58,34,51,0,65,35,33,34,59,54,2,0,63,37,35,54,59,54,2,0,66,38,37,54,58,51,38,0,119,0,2,0,59,51,1,0,58,39,50,0,0,40,2,0,25,41,40,32,25,42,41,36,89,42,39,0,0,43,2,0,58,44,51,0,134,54,0,0,164,226,3,0,43,44,0,0,137,53,0,0,139,0,0,0,140,4,30,0,0,0,0,0,1,26,0,0,136,28,0,0,0,27,28,0,136,28,0,0,25,28,28,16,137,28,0,0,130,28,0,0,136,29,0,0,49,28,28,29,76,179,4,0,135,28,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,19,3,0,0,20,5,0,25,21,20,12,82,22,21,0,25,23,22,4,82,24,23,0,134,25,0,0,220,101,6,0,24,0,0,0,58,6,25,0,0,7,4,0,1,28,169,0,3,8,7,28,25,9,8,12,127,28,0,0,89,28,6,0,127,28,0,0,114,9,28,0,127,29,0,0,102,29,29,1,107,9,1,29,127,28,0,0,102,28,28,2,107,9,2,28,127,29,0,0,102,29,29,3,107,9,3,29,0,10,4,0,1,29,169,0,3,11,10,29,25,12,11,8,127,29,0,0,89,29,6,0,127,29,0,0,114,12,29,0,127,28,0,0,102,28,28,1,107,12,1,28,127,29,0,0,102,29,29,2,107,12,2,29,127,28,0,0,102,28,28,3,107,12,3,28,0,13,4,0,1,28,169,0,3,14,13,28,25,15,14,4,127,28,0,0,89,28,6,0,127,28,0,0,114,15,28,0,127,29,0,0,102,29,29,1,107,15,1,29,127,28,0,0,102,28,28,2,107,15,2,28,127,29,0,0,102,29,29,3,107,15,3,29,0,17,4,0,1,29,169,0,3,18,17,29,127,29,0,0,89,29,6,0,127,29,0,0,114,18,29,0,127,28,0,0,102,28,28,1,107,18,1,28,127,29,0,0,102,29,29,2,107,18,2,29,127,28,0,0,102,28,28,3,107,18,3,28,137,27,0,0,139,0,0,0,140,0,28,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,32,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,200,180,4,0,135,21,0,0,25,17,20,8,0,16,20,0,1,15,128,2,0,1,15,0,41,21,1,4,0,7,21,0,28,21,7,9,38,21,21,255,0,8,21,0,0,18,8,0,135,9,90,0,33,10,9,1,121,10,9,0,1,22,215,10,134,21,0,0,44,77,6,0,22,16,0,0,1,0,0,0,0,6,0,0,137,20,0,0,139,6,0,0,0,11,18,0,0,12,15,0,1,21,8,0,1,22,8,0,1,23,8,0,1,24,8,0,1,25,16,0,1,26,8,0,2,27,0,0,1,0,1,0,135,13,91,0,11,12,21,22,23,24,25,26,27,0,0,0,33,14,13,1,121,14,10,0,1,26,234,10,134,27,0,0,44,77,6,0,26,17,0,0,1,0,0,0,0,6,0,0,137,20,0,0,139,6,0,0,119,0,82,0,0,2,18,0,1,27,140,4,85,27,2,0,0,3,15,0,1,27,144,4,85,27,3,0,1,27,140,4,82,4,27,0,1,27,144,4,82,5,27,0,1,26,0,0,1,25,0,0,135,27,82,0,26,25,4,5,1,25,24,0,134,27,0,0,88,76,6,0,25,0,0,0,1,25,32,0,1,26,0,0,134,27,0,0,216,85,6,0,25,26,0,0,1,26,3,11,1,25,0,0,1,24,1,0,1,23,6,0,135,27,92,0,26,25,24,23,1,23,3,11,1,24,0,0,1,25,1,0,1,26,7,0,135,27,93,0,23,24,25,26,1,26,3,11,1,25,0,0,1,24,1,0,1,23,8,0,135,27,94,0,26,25,24,23,1,23,3,11,1,24,0,0,1,25,1,0,1,26,9,0,135,27,95,0,23,24,25,26,1,26,3,11,1,25,0,0,1,24,1,0,1,23,9,0,135,27,96,0,26,25,24,23,1,23,3,11,1,24,0,0,1,25,1,0,1,26,10,0,135,27,97,0,23,24,25,26,1,26,3,11,1,25,0,0,1,24,1,0,1,23,11,0,135,27,98,0,26,25,24,23,1,23,3,11,1,24,0,0,1,25,1,0,1,26,12,0,135,27,99,0,23,24,25,26,1,26,3,11,1,25,0,0,1,24,1,0,1,23,13,0,135,27,100,0,26,25,24,23,1,0,1,0,0,6,0,0,137,20,0,0,139,6,0,0,1,27,0,0,139,27,0,0,140,4,50,0,0,0,0,0,2,47,0,0,255,0,0,0,1,45,0,0,136,48,0,0,0,46,48,0,136,48,0,0,25,48,48,32,137,48,0,0,130,48,0,0,136,49,0,0,49,48,48,49,8,183,4,0,135,48,0,0,0,6,0,0,0,17,1,0,0,28,2,0,0,34,3,0,0,35,6,0,82,36,35,0,0,37,17,0,0,38,28,0,134,39,0,0,68,71,4,0,36,37,38,0,82,7,39,0,0,43,7,0,0,8,43,0,1,48,0,0,14,9,8,48,120,9,20,0,0,10,34,0,19,48,10,47,0,11,48,0,26,4,11,1,35,44,4,2,120,44,3,0,1,45,9,0,119,0,38,0,134,12,0,0,144,83,6,0,0,40,12,0,0,13,6,0,0,14,17,0,0,15,28,0,0,16,40,0,134,48,0,0,52,2,6,0,13,14,15,16,119,0,225,255,0,18,43,0,78,19,18,0,19,48,19,47,0,20,48,0,32,21,20,11,121,21,3,0,1,45,6,0,119,0,19,0,0,25,34,0,19,48,25,47,0,26,48,0,32,42,26,2,120,42,3,0,1,45,9,0,119,0,12,0,134,27,0,0,144,83,6,0,0,41,27,0,0,29,6,0,0,30,17,0,0,31,28,0,0,32,41,0,134,48,0,0,52,2,6,0,29,30,31,32,119,0,199,255,32,48,45,6,121,48,9,0,0,22,43,0,25,23,22,8,82,24,23,0,0,5,24,0,0,33,5,0,137,46,0,0,139,33,0,0,119,0,7,0,32,48,45,9,121,48,5,0,1,5,0,0,0,33,5,0,137,46,0,0,139,33,0,0,1,48,0,0,139,48,0,0,140,2,51,0,0,0,0,0,2,48,0,0,255,255,0,0,1,46,0,0,136,49,0,0,0,47,49,0,136,49,0,0,25,49,49,32,137,49,0,0,130,49,0,0,136,50,0,0,49,49,49,50,132,184,4,0,135,49,0,0,0,2,0,0,0,3,1,0,1,49,12,0,1,50,61,0,134,14,0,0,168,171,5,0,49,50,0,0,0,45,14,0,0,25,2,0,0,36,3,0,1,50,4,19,134,38,0,0,24,138,5,0,25,50,36,0,0,43,38,0,0,39,43,0,134,50,0,0,212,0,6,0,39,0,0,0,0,40,2,0,0,41,3,0,134,42,0,0,236,58,6,0,40,41,0,0,0,44,42,0,0,4,45,0,0,5,44,0,25,6,5,4,82,7,6,0,1,50,3,0,135,8,27,0,50,4,7,0,0,9,45,0,85,9,8,0,0,10,45,0,82,11,10,0,1,50,4,0,135,12,26,0,50,11,0,0,19,50,12,48,0,13,50,0,0,15,45,0,25,16,15,8,84,16,13,0,0,17,45,0,25,18,17,8,80,19,18,0,19,50,19,48,0,20,50,0,32,21,20,0,120,21,2,0,119,0,15,0,1,49,16,0,135,50,101,0,49,0,0,0,0,22,45,0,82,23,22,0,1,50,4,0,135,24,26,0,50,23,0,0,19,50,24,48,0,26,50,0,0,27,45,0,25,28,27,8,84,28,26,0,119,0,235,255,0,29,45,0,82,30,29,0,1,50,5,0,135,31,26,0,50,30,0,0,19,50,31,48,0,32,50,0,0,33,45,0,25,34,33,10,84,34,32,0,0,35,44,0,134,50,0,0,148,105,6,0,35,0,0,0,0,37,45,0,137,47,0,0,139,37,0,0,140,3,42,0,0,0,0,0,1,38,0,0,136,40,0,0,0,39,40,0,136,40,0,0,25,40,40,32,137,40,0,0,130,40,0,0,136,41,0,0,49,40,40,41,4,186,4,0,135,40,0,0,25,26,39,8,0,30,39,0,0,3,0,0,58,4,1,0,58,15,2,0,1,40,40,22,78,31,40,0,41,40,31,24,42,40,40,24,33,32,40,0,0,33,3,0,1,40,0,0,14,34,33,40,19,40,32,34,0,37,40,0,120,37,3,0,137,39,0,0,139,0,0,0,1,40,41,22,78,35,40,0,1,40,255,0,19,40,35,40,0,5,40,0,32,6,5,0,121,6,52,0,1,40,41,22,1,41,1,0,83,40,41,0,134,7,0,0,32,8,6,0,0,36,7,0,0,8,36,0,25,9,8,8,0,10,3,0,1,41,88,1,3,11,10,41,134,41,0,0,224,44,6,0,9,11,0,0,0,12,36,0,134,13,0,0,228,111,6,0,25,14,13,16,134,41,0,0,224,44,6,0,12,14,0,0,0,16,3,0,0,17,36,0,25,18,17,16,85,18,16,0,0,19,36,0,25,20,19,20,1,41,3,0,83,20,41,0,0,21,36,0,25,22,21,24,58,23,4,0,89,26,23,0,25,24,26,4,58,25,15,0,89,24,25,0,82,41,26,0,85,22,41,0,106,40,26,4,109,22,4,40,0,27,36,0,25,28,27,32,59,40,0,0,89,30,40,0,25,29,30,4,59,40,0,0,89,29,40,0,82,40,30,0,85,28,40,0,106,41,30,4,109,28,4,41,1,41,41,22,1,40,0,0,83,41,40,0,1,40,40,22,1,41,0,0,83,40,41,0,137,39,0,0,139,0,0,0,140,3,42,0,0,0,0,0,1,38,0,0,136,40,0,0,0,39,40,0,136,40,0,0,25,40,40,32,137,40,0,0,130,40,0,0,136,41,0,0,49,40,40,41,136,187,4,0,135,40,0,0,25,26,39,8,0,30,39,0,0,3,0,0,58,4,1,0,58,15,2,0,1,40,40,22,78,31,40,0,41,40,31,24,42,40,40,24,33,32,40,0,0,33,3,0,1,40,0,0,14,34,33,40,19,40,32,34,0,37,40,0,120,37,3,0,137,39,0,0,139,0,0,0,1,40,41,22,78,35,40,0,1,40,255,0,19,40,35,40,0,5,40,0,32,6,5,0,121,6,52,0,1,40,41,22,1,41,1,0,83,40,41,0,134,7,0,0,32,8,6,0,0,36,7,0,0,8,36,0,25,9,8,8,0,10,3,0,1,41,88,1,3,11,10,41,134,41,0,0,224,44,6,0,9,11,0,0,0,12,36,0,134,13,0,0,228,111,6,0,25,14,13,16,134,41,0,0,224,44,6,0,12,14,0,0,0,16,3,0,0,17,36,0,25,18,17,16,85,18,16,0,0,19,36,0,25,20,19,20,1,41,2,0,83,20,41,0,0,21,36,0,25,22,21,24,58,23,4,0,89,26,23,0,25,24,26,4,58,25,15,0,89,24,25,0,82,41,26,0,85,22,41,0,106,40,26,4,109,22,4,40,0,27,36,0,25,28,27,32,59,40,0,0,89,30,40,0,25,29,30,4,59,40,0,0,89,29,40,0,82,40,30,0,85,28,40,0,106,41,30,4,109,28,4,41,1,41,41,22,1,40,0,0,83,41,40,0,1,40,40,22,1,41,0,0,83,40,41,0,137,39,0,0,139,0,0,0,140,1,37,0,0,0,0,0,1,33,0,0,136,35,0,0,0,34,35,0,0,1,0,0,78,7,1,0,41,35,7,24,42,35,35,24,0,8,35,0,134,16,0,0,160,107,6,0,8,0,0,0,32,17,16,0,25,18,1,1,121,17,4,0,0,2,1,0,0,5,18,0,119,0,3,0,0,1,18,0,119,0,242,255,78,19,2,0,41,35,19,24,42,35,35,24,0,20,35,0,1,35,43,0,1,36,3,0,138,20,35,36,100,189,4,0,84,189,4,0,112,189,4,0,0,3,2,0,0,22,19,0,1,32,0,0,119,0,7,0,1,31,0,0,1,33,5,0,119,0,4,0,1,31,1,0,1,33,5,0,119,0,1,0,32,35,33,5,121,35,5,0,78,6,5,0,0,3,5,0,0,22,6,0,0,32,31,0,41,35,22,24,42,35,35,24,0,21,35,0,26,27,21,48,35,25,27,10,121,25,20,0,0,4,3,0,0,28,27,0,1,30,0,0,27,23,30,10,25,9,4,1,4,10,23,28,78,11,9,0,41,35,11,24,42,35,35,24,0,12,35,0,26,26,12,48,35,24,26,10,121,24,5,0,0,4,9,0,0,28,26,0,0,30,10,0,119,0,243,255,0,29,10,0,119,0,2,0,1,29,0,0,33,13,32,0,1,35,0,0,4,14,35,29,125,15,13,29,14,0,0,0,139,15,0,0,140,1,41,0,0,0,0,0,1,37,0,0,136,39,0,0,0,38,39,0,136,39,0,0,25,39,39,16,137,39,0,0,130,39,0,0,136,40,0,0,49,39,39,40,72,190,4,0,135,39,0,0,0,36,38,0,0,2,0,0,0,13,2,0,1,39,56,1,3,24,13,39,82,29,24,0,25,30,29,12,82,31,30,0,0,35,31,0,0,32,35,0,1,39,0,0,14,33,32,39,120,33,2,0,119,0,21,0,0,34,35,0,0,3,34,0,0,4,2,0,1,39,56,1,3,5,4,39,82,6,5,0,25,7,6,8,82,8,7,0,16,9,3,8,120,9,2,0,119,0,10,0,0,10,35,0,82,11,10,0,134,39,0,0,124,164,5,0,11,0,0,0,0,12,35,0,25,14,12,4,0,35,14,0,119,0,232,255,0,15,2,0,1,39,56,1,3,16,15,39,82,17,16,0,1,40,0,0,134,39,0,0,180,61,5,0,17,40,0,0,0,18,2,0,1,39,60,1,3,19,18,39,82,20,19,0,1,39,0,0,1,40,2,0,138,20,39,40,76,191,4,0,96,191,4,0,0,25,2,0,1,39,60,1,3,26,25,39,82,27,26,0,85,36,27,0,1,40,52,16,134,39,0,0,44,77,6,0,40,36,0,0,1,1,0,0,0,28,1,0,137,38,0,0,139,28,0,0,119,0,15,0,0,23,2,0,134,39,0,0,20,173,5,0,23,0,0,0,119,0,10,0,0,21,2,0,134,39,0,0,20,173,5,0,21,0,0,0,0,22,2,0,134,39,0,0,136,231,5,0,22,0,0,0,119,0,1,0,1,1,1,0,0,28,1,0,137,38,0,0,139,28,0,0,140,0,48,0,0,0,0,0,1,44,0,0,136,46,0,0,0,45,46,0,136,46,0,0,25,46,46,16,137,46,0,0,130,46,0,0,136,47,0,0,49,46,46,47,200,191,4,0,135,46,0,0,1,46,24,0,1,47,60,0,134,0,0,0,168,171,5,0,46,47,0,0,0,42,0,0,1,47,140,0,1,46,15,0,134,1,0,0,168,171,5,0,47,46,0,0,0,12,42,0,25,23,12,4,85,23,1,0,1,46,18,0,1,47,15,0,134,34,0,0,168,171,5,0,46,47,0,0,0,37,42,0,85,37,34,0,1,47,4,0,1,46,0,0,134,38,0,0,224,168,5,0,47,46,0,0,0,39,42,0,25,40,39,8,85,40,38,0,0,41,42,0,82,2,41,0,0,43,2,0,0,3,43,0,1,46,255,255,83,3,46,0,0,4,43,0,25,5,4,1,1,46,10,0,83,5,46,0,0,6,43,0,25,7,6,2,1,46,0,0,84,7,46,0,0,8,43,0,25,9,8,4,1,46,0,0,83,9,46,0,0,10,43,0,25,11,10,6,1,46,255,255,83,11,46,0,0,13,43,0,25,14,13,6,25,15,14,1,1,46,10,0,83,15,46,0,0,16,43,0,25,17,16,6,25,18,17,2,1,46,64,0,84,18,46,0,0,19,43,0,25,20,19,6,25,21,20,4,1,46,0,0,83,21,46,0,0,22,43,0,25,24,22,12,1,46,255,255,83,24,46,0,0,25,43,0,25,26,25,12,25,27,26,1,1,46,2,0,83,27,46,0,0,28,43,0,25,29,28,12,25,30,29,2,1,46,128,0,84,30,46,0,0,31,43,0,25,32,31,12,25,33,32,4,1,46,0,0,83,33,46,0,0,35,42,0,1,47,140,0,134,46,0,0,192,36,6,0,35,47,0,0,0,36,42,0,137,45,0,0,139,36,0,0,140,2,51,0,0,0,0,0,1,47,0,0,136,49,0,0,0,48,49,0,136,49,0,0,25,49,49,16,137,49,0,0,130,49,0,0,136,50,0,0,49,49,49,50,112,193,4,0,135,49,0,0,0,2,0,0,58,3,1,0,59,46,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,40,36,0,58,41,3,0,64,42,40,41,58,45,42,0,58,43,45,0,58,44,43,0,62,49,0,0,187,189,215,217,223,124,27,62,74,4,44,49,121,4,44,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,45,0,64,10,8,9,58,46,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,49,2,0,66,16,15,49,58,17,46,0,66,18,17,16,58,46,18,0,58,19,46,0,59,49,1,0,71,20,19,49,58,21,46,0,121,20,8,0,58,22,46,0,65,23,21,22,61,49,0,0,0,0,0,63,65,24,23,49,58,46,24,0,119,0,17,0,59,49,1,0,64,26,21,49,58,46,26,0,58,27,46,0,58,28,46,0,59,49,2,0,64,29,28,49,65,30,27,29,59,49,1,0,64,31,30,49,61,49,0,0,0,0,0,191,65,32,49,31,58,46,32,0,119,0,2,0,59,46,1,0,58,33,45,0,0,34,2,0,25,35,34,32,25,37,35,36,89,37,33,0,0,38,2,0,58,39,46,0,134,49,0,0,88,224,3,0,38,39,0,0,137,48,0,0,139,0,0,0,140,2,51,0,0,0,0,0,1,47,0,0,136,49,0,0,0,48,49,0,136,49,0,0,25,49,49,16,137,49,0,0,130,49,0,0,136,50,0,0,49,49,49,50,200,194,4,0,135,49,0,0,0,2,0,0,58,3,1,0,59,46,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,40,36,0,58,41,3,0,64,42,40,41,58,45,42,0,58,43,45,0,58,44,43,0,62,49,0,0,187,189,215,217,223,124,27,62,74,4,44,49,121,4,44,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,45,0,64,10,8,9,58,46,10,0,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,59,49,2,0,66,16,15,49,58,17,46,0,66,18,17,16,58,46,18,0,58,19,46,0,59,49,1,0,71,20,19,49,58,21,46,0,121,20,8,0,58,22,46,0,65,23,21,22,61,49,0,0,0,0,0,63,65,24,23,49,58,46,24,0,119,0,17,0,59,49,1,0,64,26,21,49,58,46,26,0,58,27,46,0,58,28,46,0,59,49,2,0,64,29,28,49,65,30,27,29,59,49,1,0,64,31,30,49,61,49,0,0,0,0,0,191,65,32,49,31,58,46,32,0,119,0,2,0,59,46,1,0,58,33,45,0,0,34,2,0,25,35,34,32,25,37,35,36,89,37,33,0,0,38,2,0,58,39,46,0,134,49,0,0,164,226,3,0,38,39,0,0,137,48,0,0,139,0,0,0,140,1,45,0,0,0,0,0,1,41,0,0,136,43,0,0,0,42,43,0,136,43,0,0,25,43,43,32,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,32,196,4,0,135,43,0,0,25,39,42,4,0,37,42,0,0,1,0,0,1,43,16,0,1,44,38,0,134,2,0,0,168,171,5,0,43,44,0,0,0,40,2,0,1,44,4,0,1,43,1,0,134,13,0,0,224,168,5,0,44,43,0,0,0,24,40,0,25,31,24,8,85,31,13,0,0,32,40,0,25,33,32,8,82,34,33,0,1,44,10,0,134,43,0,0,252,88,6,0,34,44,0,0,1,38,0,0,0,35,38,0,34,36,35,10,120,36,2,0,119,0,17,0,1,43,4,0,1,44,0,0,134,3,0,0,224,168,5,0,43,44,0,0,85,39,3,0,0,4,40,0,25,5,4,8,82,6,5,0,134,44,0,0,88,242,4,0,6,39,0,0,0,7,38,0,25,8,7,1,0,38,8,0,119,0,237,255,1,44,4,0,1,43,1,0,134,9,0,0,224,168,5,0,44,43,0,0,0,10,40,0,25,11,10,12,85,11,9,0,0,12,40,0,25,14,12,12,82,15,14,0,1,44,10,0,134,43,0,0,252,88,6,0,15,44,0,0,1,38,0,0,0,16,38,0,34,17,16,10,120,17,2,0,119,0,17,0,0,18,1,0,1,43,0,0,134,19,0,0,224,168,5,0,18,43,0,0,85,37,19,0,0,20,40,0,25,21,20,12,82,22,21,0,134,43,0,0,88,242,4,0,22,37,0,0,0,23,38,0,25,25,23,1,0,38,25,0,119,0,237,255,0,26,40,0,25,27,26,4,1,43,0,0,85,27,43,0,0,28,1,0,0,29,40,0,84,29,28,0,0,30,40,0,137,42,0,0,139,30,0,0,140,2,49,0,0,0,0,0,1,45,0,0,136,47,0,0,0,46,47,0,136,47,0,0,25,47,47,32,137,47,0,0,130,47,0,0,136,48,0,0,49,47,47,48,192,197,4,0,135,47,0,0,0,2,0,0,0,3,1,0,1,47,0,16,135,14,32,0,47,0,0,0,0,43,14,0,0,25,2,0,1,47,0,16,7,47,47,25,38,47,47,255,0,33,47,0,0,42,33,0,1,47,4,0,135,34,32,0,47,0,0,0,0,39,34,0,0,35,39,0,1,47,0,0,85,35,47,0,1,47,16,0,135,36,32,0,47,0,0,0,0,44,36,0,0,37,43,0,0,38,44,0,25,4,38,12,85,4,37,0,0,5,39,0,0,6,44,0,25,7,6,8,85,7,5,0,1,48,60,0,134,47,0,0,196,195,5,0,48,0,0,0,0,8,44,0,0,9,3,0,27,47,9,28,25,10,47,68,25,11,10,8,134,47,0,0,212,34,6,0,8,11,0,0,1,48,60,0,134,47,0,0,144,96,6,0,48,0,0,0,0,12,42,0,26,13,12,1,0,41,13,0,0,15,41,0,1,47,0,0,17,16,47,15,120,16,2,0,119,0,34,0,0,17,43,0,0,18,41,0,0,19,2,0,5,20,18,19,3,21,17,20,0,40,21,0,0,22,40,0,25,23,22,8,1,47,0,0,85,23,47,0,0,24,44,0,0,26,40,0,25,27,26,16,85,27,24,0,1,48,60,0,134,47,0,0,196,195,5,0,48,0,0,0,0,28,40,0,0,29,3,0,27,47,29,28,25,30,47,68,134,47,0,0,84,183,5,0,28,30,0,0,1,48,60,0,134,47,0,0,144,96,6,0,48,0,0,0,0,31,41,0,26,32,31,1,0,41,32,0,119,0,219,255,137,46,0,0,139,0,0,0,140,4,37,0,0,0,0,0,1,31,0,0,136,35,0,0,0,32,35,0,136,35,0,0,1,36,128,0,3,35,35,36,137,35,0,0,130,35,0,0,136,36,0,0,49,35,35,36,96,199,4,0,135,35,0,0,25,28,32,112,0,29,32,0,0,30,29,0,1,33,128,6,25,34,30,112,82,35,33,0,85,30,35,0,25,30,30,4,25,33,33,4,54,35,30,34,116,199,4,0,26,8,1,1,2,35,0,0,254,255,255,127,16,9,35,8,121,9,13,0,32,20,1,0,121,20,5,0,0,6,28,0,1,7,1,0,1,31,4,0,119,0,10,0,134,21,0,0,80,88,6,0,1,35,75,0,85,21,35,0,1,5,255,255,119,0,4,0,0,6,0,0,0,7,1,0,1,31,4,0,32,35,31,4,121,35,35,0,0,22,6,0,1,35,254,255,4,23,35,22,16,24,23,7,125,4,24,23,7,0,0,0,25,25,29,48,85,25,4,0,25,26,29,20,85,26,6,0,25,27,29,44,85,27,6,0,3,10,6,4,25,11,29,16,85,11,10,0,25,12,29,28,85,12,10,0,134,13,0,0,176,46,4,0,29,2,3,0,32,14,4,0,121,14,3,0,0,5,13,0,119,0,11,0,82,15,26,0,82,16,11,0,13,17,15,16,41,35,17,31,42,35,35,31,0,18,35,0,3,19,15,18,1,35,0,0,83,19,35,0,0,5,13,0,137,32,0,0,139,5,0,0,140,3,43,0,0,0,0,0,2,40,0,0,255,0,0,0,1,38,0,0,136,41,0,0,0,39,41,0,1,41,0,0,16,19,41,1,1,41,255,255,16,30,41,0,32,31,1,0,19,41,31,30,0,32,41,0,20,41,19,32,0,33,41,0,121,33,45,0,0,5,2,0,0,34,0,0,0,35,1,0,1,41,10,0,1,42,0,0,134,36,0,0,228,59,6,0,34,35,41,42,128,42,0,0,0,9,42,0,39,42,36,48,0,10,42,0,19,42,10,40,0,11,42,0,26,12,5,1,83,12,11,0,1,42,10,0,1,41,0,0,134,13,0,0,4,111,6,0,34,35,42,41,128,41,0,0,0,14,41,0,1,41,9,0,16,15,41,35,1,41,255,255,16,16,41,34,32,17,35,9,19,41,17,16,0,18,41,0,20,41,15,18,0,20,41,0,121,20,5,0,0,5,12,0,0,34,13,0,0,35,14,0,119,0,223,255,0,8,12,0,0,28,13,0,0,29,14,0,119,0,1,0,0,3,8,0,0,4,28,0,119,0,3,0,0,3,2,0,0,4,0,0,32,21,4,0,121,21,3,0,0,6,3,0,119,0,22,0,0,7,3,0,0,37,4,0,31,41,37,10,38,41,41,255,0,22,41,0,39,41,22,48,0,23,41,0,19,41,23,40,0,24,41,0,26,25,7,1,83,25,24,0,29,41,37,10,38,41,41,255,0,26,41,0,35,27,37,10,121,27,3,0,0,6,25,0,119,0,4,0,0,7,25,0,0,37,26,0,119,0,238,255,139,6,0,0,140,6,43,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,32,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,12,202,4,0,135,41,0,0,0,37,40,0,0,6,0,0,0,7,1,0,0,18,2,0,0,29,3,0,0,31,4,0,0,32,5,0,134,33,0,0,100,174,5,0,0,38,33,0,0,34,38,0,25,35,34,12,82,36,35,0,134,41,0,0,184,57,5,0,36,0,0,0,1,41,0,0,85,37,41,0,0,8,31,0,0,9,32,0,134,10,0,0,96,99,3,0,8,9,37,0,0,11,38,0,25,12,11,12,85,12,10,0,0,13,38,0,25,14,13,16,82,15,14,0,0,16,18,0,0,17,29,0,134,41,0,0,128,39,6,0,15,16,17,0,0,19,7,0,1,41,0,0,17,20,41,19,0,21,38,0,25,22,21,20,121,20,15,0,1,41,1,0,83,22,41,0,0,23,7,0,0,24,38,0,25,25,24,24,85,25,23,0,0,28,6,0,0,30,38,0,134,41,0,0,240,243,5,0,28,30,0,0,137,40,0,0,139,0,0,0,119,0,14,0,1,41,0,0,83,22,41,0,0,26,38,0,25,27,26,24,1,41,255,255,85,27,41,0,0,28,6,0,0,30,38,0,134,41,0,0,240,243,5,0,28,30,0,0,137,40,0,0,139,0,0,0,139,0,0,0,140,4,45,0,0,0,0,0,2,41,0,0,255,0,0,0,2,42,0,0,181,31,0,0,1,39,0,0,136,43,0,0,0,40,43,0,136,43,0,0,25,43,43,32,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,96,203,4,0,135,43,0,0,0,6,0,0,0,17,1,0,0,28,2,0,0,30,3,0,0,31,6,0,82,32,31,0,0,33,17,0,0,34,28,0,134,35,0,0,68,71,4,0,32,33,34,0,82,7,35,0,0,37,7,0,0,8,37,0,1,43,0,0,14,9,8,43,120,9,18,0,0,10,30,0,19,43,10,41,0,11,43,0,26,4,11,1,35,38,4,2,120,38,3,0,1,39,9,0,119,0,34,0,0,12,6,0,0,13,17,0,0,14,28,0,1,44,0,0,134,43,0,0,104,199,5,0,12,13,14,42,44,0,0,0,119,0,227,255,0,15,37,0,78,16,15,0,19,43,16,41,0,18,43,0,32,19,18,9,121,19,3,0,1,39,6,0,119,0,17,0,0,23,30,0,19,43,23,41,0,24,43,0,32,36,24,2,120,36,3,0,1,39,9,0,119,0,10,0,0,25,6,0,0,26,17,0,0,27,28,0,1,44,0,0,134,43,0,0,104,199,5,0,25,26,27,42,44,0,0,0,119,0,203,255,32,43,39,6,121,43,9,0,0,20,37,0,25,21,20,8,82,22,21,0,0,5,22,0,0,29,5,0,137,40,0,0,139,29,0,0,119,0,7,0,32,43,39,9,121,43,5,0,1,5,0,0,0,29,5,0,137,40,0,0,139,29,0,0,1,43,0,0,139,43,0,0,140,1,42,0,0,0,0,0,1,38,0,0,136,40,0,0,0,39,40,0,136,40,0,0,25,40,40,16,137,40,0,0,130,40,0,0,136,41,0,0,49,40,40,41,196,204,4,0,135,40,0,0,0,1,0,0,0,2,1,0,82,13,2,0,134,40,0,0,148,105,6,0,13,0,0,0,0,24,1,0,25,29,24,4,82,30,29,0,134,40,0,0,148,105,6,0,30,0,0,0,0,31,1,0,25,32,31,8,134,33,0,0,108,49,6,0,32,0,0,0,33,34,33,0,120,34,17,0,0,3,1,0,25,4,3,8,25,5,4,4,82,6,5,0,0,37,6,0,1,40,0,0,14,7,6,40,120,7,2,0,119,0,8,0,0,8,37,0,0,35,8,0,0,9,35,0,134,40,0,0,124,254,5,0,9,0,0,0,119,0,234,255,0,10,1,0,25,11,10,16,134,12,0,0,108,49,6,0,11,0,0,0,33,14,12,0,121,14,3,0,1,38,8,0,119,0,19,0,0,15,1,0,25,16,15,16,25,17,16,4,82,18,17,0,0,37,18,0,1,40,0,0,14,19,18,40,120,19,3,0,1,38,8,0,119,0,9,0,0,20,37,0,26,21,20,24,0,36,21,0,0,22,36,0,134,40,0,0,144,204,4,0,22,0,0,0,119,0,230,255,32,40,38,8,121,40,16,0,0,23,1,0,25,25,23,24,134,40,0,0,40,60,6,0,25,0,0,0,0,26,1,0,25,27,26,32,1,40,0,0,85,27,40,0,0,28,1,0,134,40,0,0,216,166,5,0,28,0,0,0,137,39,0,0,139,0,0,0,139,0,0,0,140,1,24,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,16,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,56,206,4,0,135,22,0,0,0,1,0,0,0,2,1,0,25,12,2,8,80,13,12,0,41,22,13,16,42,22,22,16,0,14,22,0,1,22,0,0,1,23,12,0,138,14,22,23,148,206,4,0,168,206,4,0,188,206,4,0,208,206,4,0,228,206,4,0,248,206,4,0,12,207,4,0,32,207,4,0,52,207,4,0,72,207,4,0,92,207,4,0,112,207,4,0,119,0,61,0,0,15,1,0,134,22,0,0,248,87,6,0,15,0,0,0,119,0,56,0,0,16,1,0,134,22,0,0,76,87,6,0,16,0,0,0,119,0,51,0,0,17,1,0,134,22,0,0,28,158,5,0,17,0,0,0,119,0,46,0,0,18,1,0,134,22,0,0,220,183,5,0,18,0,0,0,119,0,41,0,0,19,1,0,134,22,0,0,144,108,6,0,19,0,0,0,119,0,36,0,0,3,1,0,134,22,0,0,80,108,6,0,3,0,0,0,119,0,31,0,0,4,1,0,134,22,0,0,204,21,6,0,4,0,0,0,119,0,26,0,0,5,1,0,134,22,0,0,144,86,6,0,5,0,0,0,119,0,21,0,0,6,1,0,134,22,0,0,16,108,6,0,6,0,0,0,119,0,16,0,0,7,1,0,134,22,0,0,156,16,6,0,7,0,0,0,119,0,11,0,0,8,1,0,134,22,0,0,188,15,6,0,8,0,0,0,119,0,6,0,0,9,1,0,134,22,0,0,24,232,5,0,9,0,0,0,119,0,1,0,0,10,1,0,134,22,0,0,72,61,6,0,10,0,0,0,0,11,1,0,134,22,0,0,216,166,5,0,11,0,0,0,137,21,0,0,139,0,0,0,140,2,24,0,0,0,0,0,1,18,0,0,136,22,0,0,0,19,22,0,136,22,0,0,25,22,22,16,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,224,207,4,0,135,22,0,0,0,2,0,0,0,3,2,0,1,22,128,0,3,9,3,22,0,17,9,0,0,20,1,0,25,21,17,12,78,22,20,0,83,17,22,0,25,17,17,1,25,20,20,1,54,22,17,21,252,207,4,0,0,10,2,0,25,11,10,4,82,12,11,0,127,22,0,0,114,22,1,0,127,22,0,0,102,23,1,1,107,22,1,23,127,23,0,0,102,22,1,2,107,23,2,22,127,22,0,0,102,23,1,3,107,22,3,23,127,23,0,0,88,13,23,0,58,14,13,0,25,15,1,4,127,23,0,0,114,23,15,0,127,23,0,0,102,22,15,1,107,23,1,22,127,22,0,0,102,23,15,2,107,22,2,23,127,23,0,0,102,22,15,3,107,23,3,22,127,22,0,0,88,16,22,0,58,4,16,0,25,5,1,8,127,22,0,0,114,22,5,0,127,22,0,0,102,23,5,1,107,22,1,23,127,23,0,0,102,22,5,2,107,23,2,22,127,22,0,0,102,23,5,3,107,22,3,23,127,23,0,0,88,6,23,0,58,7,6,0,1,23,12,0,135,8,102,0,23,12,14,4,7,0,0,0,137,19,0,0,139,0,0,0,140,1,44,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,32,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,28,209,4,0,135,41,0,0,0,1,0,0,1,41,0,0,134,2,0,0,148,94,6,0,41,0,0,0,0,38,2,0,0,13,38,0,1,42,203,31,1,43,1,0,134,41,0,0,128,39,6,0,13,42,43,0,1,37,0,0,0,24,1,0,82,29,24,0,25,30,29,12,82,31,30,0,0,35,31,0,0,32,35,0,1,41,0,0,14,33,32,41,120,33,3,0,1,39,7,0,119,0,45,0,0,34,35,0,0,3,34,0,0,4,1,0,82,5,4,0,25,6,5,8,82,7,6,0,16,8,3,7,120,8,3,0,1,39,7,0,119,0,35,0,0,9,35,0,82,10,9,0,134,11,0,0,12,85,2,0,10,0,0,0,0,36,11,0,0,12,38,0,0,14,36,0,134,41,0,0,40,14,6,0,12,14,0,0,0,15,36,0,134,41,0,0,148,105,6,0,15,0,0,0,0,16,37,0,25,17,16,1,0,37,17,0,0,18,37,0,0,19,1,0,82,20,19,0,82,21,20,0,14,22,18,21,121,22,7,0,0,23,38,0,1,43,199,31,1,42,1,0,134,41,0,0,128,39,6,0,23,43,42,0,0,25,35,0,25,26,25,4,0,35,26,0,119,0,207,255,32,41,39,7,121,41,10,0,0,27,38,0,1,42,205,31,1,43,1,0,134,41,0,0,128,39,6,0,27,42,43,0,0,28,38,0,137,40,0,0,139,28,0,0,1,41,0,0,139,41,0,0,140,1,43,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,16,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,148,210,4,0,135,41,0,0,0,1,0,0,0,2,1,0,25,13,2,32,78,24,13,0,1,41,255,0,19,41,24,41,0,31,41,0,1,41,1,0,17,32,41,31,121,32,7,0,0,33,1,0,25,34,33,32,1,41,2,0,83,34,41,0,137,40,0,0,139,0,0,0,0,35,1,0,134,36,0,0,24,54,6,0,35,0,0,0,33,3,36,0,120,3,21,0,0,4,1,0,25,5,4,4,82,6,5,0,0,38,6,0,1,41,0,0,14,7,6,41,120,7,2,0,119,0,13,0,0,8,38,0,26,9,8,8,0,37,9,0,0,10,38,0,134,41,0,0,196,18,6,0,10,0,0,0,0,11,37,0,134,41,0,0,96,210,4,0,11,0,0,0,119,0,231,255,0,12,1,0,25,14,12,8,134,41,0,0,196,18,6,0,14,0,0,0,0,15,1,0,25,16,15,24,82,17,16,0,1,41,0,0,14,18,17,41,121,18,17,0,0,19,1,0,25,20,19,28,82,21,20,0,1,41,0,0,14,22,21,41,121,22,11,0,0,23,1,0,25,25,23,28,82,26,25,0,0,27,1,0,25,28,27,24,82,29,28,0,1,42,255,0,19,42,26,42,135,41,9,0,42,29,0,0,0,30,1,0,134,41,0,0,216,166,5,0,30,0,0,0,137,40,0,0,139,0,0,0,140,3,40,0,0,0,0,0,1,36,0,0,136,38,0,0,0,37,38,0,136,38,0,0,25,38,38,32,137,38,0,0,130,38,0,0,136,39,0,0,49,38,38,39,244,211,4,0,135,38,0,0,25,26,37,8,0,28,37,0,0,3,0,0,58,4,1,0,58,15,2,0,1,38,40,22,78,29,38,0,1,38,255,0,19,38,29,38,0,30,38,0,32,31,30,0,0,32,3,0,1,38,0,0,14,33,32,38,19,38,31,33,0,35,38,0,120,35,3,0,137,37,0,0,139,0,0,0,1,38,40,22,1,39,1,0,83,38,39,0,134,5,0,0,32,8,6,0,0,34,5,0,0,6,34,0,25,7,6,8,0,8,3,0,1,39,88,1,3,9,8,39,134,39,0,0,224,44,6,0,7,9,0,0,0,10,34,0,134,11,0,0,228,111,6,0,25,12,11,16,134,39,0,0,224,44,6,0,10,12,0,0,0,13,3,0,0,14,34,0,25,16,14,16,85,16,13,0,0,17,34,0,25,18,17,20,1,39,0,0,83,18,39,0,0,19,34,0,25,20,19,24,58,21,4,0,89,26,21,0,25,22,26,4,58,23,15,0,89,22,23,0,82,39,26,0,85,20,39,0,106,38,26,4,109,20,4,38,0,24,34,0,25,25,24,32,59,38,0,0,89,28,38,0,25,27,28,4,59,38,0,0,89,27,38,0,82,38,28,0,85,25,38,0,106,39,28,4,109,25,4,39,137,37,0,0,139,0,0,0,140,4,46,0,0,0,0,0,1,42,0,0,136,44,0,0,0,43,44,0,136,44,0,0,25,44,44,32,137,44,0,0,130,44,0,0,136,45,0,0,49,44,44,45,72,213,4,0,135,44,0,0,25,5,43,12,0,4,0,0,85,5,1,0,0,16,2,0,0,27,3,0,0,35,4,0,25,36,35,12,1,44,1,0,83,36,44,0,0,37,4,0,82,38,37,0,0,41,38,0,82,39,5,0,0,40,41,0,27,44,39,6,3,6,40,44,25,7,6,4,78,8,7,0,41,44,8,24,42,44,44,24,0,9,44,0,32,10,9,0,121,10,7,0,0,11,4,0,25,12,11,8,82,13,12,0,134,44,0,0,88,242,4,0,13,5,0,0,0,14,4,0,25,15,14,4,82,17,15,0,82,18,5,0,0,19,41,0,27,44,18,6,3,20,19,44,25,21,20,2,80,22,21,0,41,44,22,16,42,44,44,16,0,23,44,0,3,24,17,23,0,25,16,0,0,26,27,0,134,44,0,0,160,232,5,0,24,25,26,0,82,28,5,0,0,29,41,0,27,44,28,6,3,30,29,44,25,31,30,4,1,44,3,0,83,31,44,0,82,32,5,0,0,33,41,0,27,44,32,6,3,34,33,44,1,44,255,255,83,34,44,0,137,43,0,0,139,0,0,0,140,4,44,0,0,0,0,0,1,40,0,0,136,42,0,0,0,41,42,0,136,42,0,0,25,42,42,16,137,42,0,0,130,42,0,0,136,43,0,0,49,42,42,43,116,214,4,0,135,42,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,27,3,0,0,34,5,0,25,35,34,12,82,36,35,0,25,37,36,4,82,38,37,0,1,42,212,31,134,39,0,0,208,147,5,0,38,42,0,0,32,6,39,0,120,6,41,0,0,7,5,0,25,8,7,12,82,9,8,0,25,10,9,4,82,11,10,0,1,42,112,31,134,12,0,0,208,147,5,0,11,42,0,0,32,13,12,0,120,13,30,0,0,14,5,0,25,15,14,12,82,17,15,0,25,18,17,4,82,19,18,0,1,42,121,31,134,20,0,0,208,147,5,0,19,42,0,0,32,21,20,0,120,21,19,0,0,22,5,0,25,23,22,12,82,24,23,0,25,25,24,4,82,26,25,0,1,42,117,31,134,28,0,0,208,147,5,0,26,42,0,0,32,29,28,0,120,29,8,0,0,32,4,0,1,42,192,0,3,33,32,42,1,42,0,0,83,33,42,0,137,41,0,0,139,0,0,0,0,30,4,0,1,42,192,0,3,31,30,42,1,42,1,0,83,31,42,0,137,41,0,0,139,0,0,0,140,2,43,0,0,0,0,0,1,36,0,0,136,38,0,0,0,37,38,0,136,38,0,0,25,38,38,32,137,38,0,0,130,38,0,0,136,39,0,0,49,38,38,39,160,215,4,0,135,38,0,0,0,2,0,0,0,3,1,0,134,14,0,0,44,129,5,0,0,35,14,0,134,25,0,0,120,91,6,0,0,33,25,0,0,27,3,0,25,28,27,12,82,29,28,0,25,30,29,4,82,31,30,0,1,38,225,31,134,32,0,0,208,147,5,0,31,38,0,0,32,4,32,0,121,4,65,0,134,5,0,0,76,106,5,0,0,34,5,0,0,6,35,0,1,39,176,12], eb + 307200);
  HEAPU8.set([1,40,7,0,1,41,184,12,1,42,10,0,134,38,0,0,104,199,5,0,6,39,40,41,42,0,0,0,0,7,34,0,25,8,7,12,82,9,8,0,1,42,184,12,1,41,10,0,134,38,0,0,128,39,6,0,9,42,41,0,0,10,34,0,25,11,10,16,82,12,11,0,1,41,195,12,1,42,6,0,134,38,0,0,128,39,6,0,12,41,42,0,0,13,34,0,25,15,13,20,1,38,30,0,85,15,38,0,0,16,34,0,25,17,16,24,1,38,2,0,85,17,38,0,0,18,34,0,25,19,18,32,82,20,19,0,1,42,39,14,1,41,8,0,134,38,0,0,128,39,6,0,20,42,41,0,0,21,34,0,25,22,21,36,82,23,22,0,1,41,24,14,1,42,10,0,134,38,0,0,128,39,6,0,23,41,42,0,0,24,33,0,0,26,34,0,134,38,0,0,200,244,5,0,24,26,0,0,1,42,2,0,134,38,0,0,120,97,6,0,42,0,0,0,137,37,0,0,139,0,0,0,119,0,7,0,1,42,0,0,134,38,0,0,120,97,6,0,42,0,0,0,137,37,0,0,139,0,0,0,139,0,0,0,140,4,46,0,0,0,0,0,1,42,0,0,136,44,0,0,0,43,44,0,136,44,0,0,25,44,44,32,137,44,0,0,130,44,0,0,136,45,0,0,49,44,44,45,60,217,4,0,135,44,0,0,0,4,1,0,0,5,3,0,0,16,4,0,25,27,16,4,82,32,27,0,1,44,27,0,135,33,26,0,44,32,0,0,0,38,33,0,0,34,4,0,25,35,34,4,82,36,35,0,1,44,28,0,135,37,26,0,44,36,0,0,0,39,37,0,0,6,5,0,25,7,6,4,82,8,7,0,1,44,27,0,135,9,26,0,44,8,0,0,0,40,9,0,0,10,5,0,25,11,10,4,82,12,11,0,1,44,28,0,135,13,26,0,44,12,0,0,0,41,13,0,88,14,2,0,0,15,40,0,76,44,15,0,58,17,44,0,63,18,14,17,0,19,38,0,76,44,19,0,58,20,44,0,64,21,18,20,89,0,21,0,25,22,0,4,25,23,2,4,88,24,23,0,0,25,41,0,76,44,25,0,58,26,44,0,63,28,24,26,0,29,39,0,76,44,29,0,58,30,44,0,64,31,28,30,89,22,31,0,137,43,0,0,139,0,0,0,140,2,44,0,0,0,0,0,1,40,0,0,136,42,0,0,0,41,42,0,136,42,0,0,25,42,42,32,137,42,0,0,130,42,0,0,136,43,0,0,49,42,42,43,72,218,4,0,135,42,0,0,25,39,41,16,0,2,0,0,0,3,1,0,85,39,39,0,25,14,39,4,85,14,39,0,0,25,2,0,134,29,0,0,0,0,6,0,25,0,0,0,33,30,29,0,40,42,30,1,0,31,42,0,120,31,2,0,119,0,19,0,0,32,2,0,134,33,0,0,204,237,5,0,32,0,0,0,0,37,33,0,0,34,37,0,0,35,34,0,0,4,35,0,25,5,4,4,85,5,39,0,0,6,35,0,0,7,35,0,25,8,7,4,82,9,8,0,134,42,0,0,84,183,5,0,6,9,0,0,119,0,230,255,134,10,0,0,0,0,6,0,39,0,0,0,33,11,10,0,40,42,11,1,0,12,42,0,120,12,2,0,119,0,26,0,134,13,0,0,204,237,5,0,39,0,0,0,0,38,13,0,0,15,38,0,25,16,15,16,82,17,16,0,0,18,3,0,14,19,17,18,120,19,2,0,119,0,238,255,0,20,38,0,0,36,20,0,0,21,2,0,0,22,36,0,25,23,22,4,85,23,21,0,0,24,36,0,0,26,36,0,25,27,26,4,82,28,27,0,134,42,0,0,84,183,5,0,24,28,0,0,119,0,224,255,137,41,0,0,139,0,0,0,140,2,47,0,0,0,0,0,1,43,0,0,136,45,0,0,0,44,45,0,136,45,0,0,25,45,45,32,137,45,0,0,130,45,0,0,136,46,0,0,49,45,45,46,140,219,4,0,135,45,0,0,0,3,0,0,0,14,1,0,0,25,14,0,134,32,0,0,160,148,5,0,25,0,0,0,0,14,32,0,0,33,3,0,1,45,0,0,14,34,33,45,120,34,9,0,0,35,14,0,134,36,0,0,192,160,4,0,35,0,0,0,0,2,36,0,0,31,2,0,137,44,0,0,139,31,0,0,0,37,3,0,26,4,37,24,0,40,4,0,0,5,40,0,0,38,5,0,0,6,38,0,25,7,6,4,82,8,7,0,25,9,8,24,82,10,9,0,0,42,10,0,0,11,42,0,0,12,14,0,18,13,12,11,121,13,7,0,0,15,3,0,0,2,15,0,0,31,2,0,137,44,0,0,139,31,0,0,119,0,30,0,0,16,14,0,134,17,0,0,192,160,4,0,16,0,0,0,0,39,17,0,0,18,39,0,0,19,3,0,0,20,42,0,134,45,0,0,160,232,5,0,18,19,20,0,0,21,39,0,26,22,21,24,0,41,22,0,0,23,40,0,25,24,23,8,82,26,24,0,0,27,41,0,25,28,27,8,85,28,26,0,0,29,3,0,134,45,0,0,216,166,5,0,29,0,0,0,0,30,39,0,0,2,30,0,0,31,2,0,137,44,0,0,139,31,0,0,1,45,0,0,139,45,0,0,140,3,39,0,0,0,0,0,1,35,0,0,136,37,0,0,0,36,37,0,136,37,0,0,25,37,37,32,137,37,0,0,130,37,0,0,136,38,0,0,49,37,37,38,220,220,4,0,135,37,0,0,25,26,36,8,0,27,36,0,0,3,0,0,58,4,1,0,58,15,2,0,1,37,40,22,78,28,37,0,41,37,28,24,42,37,37,24,33,29,37,0,0,30,3,0,1,37,0,0,14,31,30,37,19,37,29,31,0,34,37,0,120,34,3,0,137,36,0,0,139,0,0,0,134,32,0,0,32,8,6,0,0,33,32,0,0,5,33,0,25,6,5,8,0,7,3,0,1,37,88,1,3,8,7,37,134,37,0,0,224,44,6,0,6,8,0,0,0,9,33,0,134,10,0,0,228,111,6,0,25,11,10,16,134,37,0,0,224,44,6,0,9,11,0,0,0,12,3,0,0,13,33,0,25,14,13,16,85,14,12,0,0,16,33,0,25,17,16,20,1,37,1,0,83,17,37,0,0,18,33,0,25,19,18,24,58,20,4,0,89,26,20,0,25,21,26,4,58,22,15,0,89,21,22,0,82,37,26,0,85,19,37,0,106,38,26,4,109,19,4,38,0,23,33,0,25,24,23,32,59,38,0,0,89,27,38,0,25,25,27,4,59,38,0,0,89,25,38,0,82,38,27,0,85,24,38,0,106,37,27,4,109,24,4,37,137,36,0,0,139,0,0,0,140,2,46,0,0,0,0,0,1,41,0,0,136,43,0,0,0,42,43,0,136,43,0,0,25,43,43,32,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,32,222,4,0,135,43,0,0,0,2,0,0,0,3,1,0,134,14,0,0,120,91,6,0,0,40,14,0,0,25,2,0,25,32,25,44,82,33,32,0,0,38,33,0,0,34,38,0,25,35,34,24,82,36,35,0,25,37,36,4,82,4,37,0,0,5,3,0,25,6,5,12,82,7,6,0,25,8,7,4,82,9,8,0,134,10,0,0,208,147,5,0,4,9,0,0,32,11,10,0,120,11,3,0,137,42,0,0,139,0,0,0,0,12,3,0,25,13,12,16,82,15,13,0,0,16,38,0,25,17,16,12,85,17,15,0,134,18,0,0,100,174,5,0,0,39,18,0,0,19,39,0,25,20,19,20,1,43,1,0,83,20,43,0,0,21,38,0,25,22,21,12,82,23,22,0,0,24,39,0,25,26,24,24,85,26,23,0,0,27,39,0,25,28,27,16,82,29,28,0,1,44,118,12,1,45,38,0,134,43,0,0,128,39,6,0,29,44,45,0,0,30,40,0,0,31,39,0,134,43,0,0,200,244,5,0,30,31,0,0,137,42,0,0,139,0,0,0,140,5,36,0,0,0,0,0,2,31,0,0,0,1,0,0,2,32,0,0,255,0,0,0,2,33,0,0,0,255,255,255,1,29,0,0,136,34,0,0,0,30,34,0,136,34,0,0,3,34,34,31,137,34,0,0,130,34,0,0,136,35,0,0,49,34,34,35,92,223,4,0,135,34,0,0,0,28,30,0,2,34,0,0,0,32,1,0,19,34,4,34,0,8,34,0,32,9,8,0,15,19,3,2,19,34,19,9,0,27,34,0,121,27,46,0,4,20,2,3,16,21,31,20,125,22,21,31,20,0,0,0,135,34,103,0,28,1,22,0,16,23,32,20,82,24,0,0,38,34,24,32,0,25,34,0,32,26,25,0,121,23,28,0,4,10,2,3,0,6,20,0,0,17,24,0,0,18,26,0,121,18,7,0,134,34,0,0,68,94,4,0,28,31,0,0,82,7,0,0,0,14,7,0,119,0,2,0,0,14,17,0,4,11,6,31,16,12,32,11,38,34,14,32,0,13,34,0,32,15,13,0,121,12,5,0,0,6,11,0,0,17,14,0,0,18,15,0,119,0,239,255,19,34,10,32,0,16,34,0,121,15,9,0,0,5,16,0,119,0,4,0,121,26,6,0,0,5,20,0,119,0,1,0,134,34,0,0,68,94,4,0,28,5,0,0,137,30,0,0,139,0,0,0,140,3,45,0,0,0,0,0,1,41,0,0,136,43,0,0,0,42,43,0,136,43,0,0,25,43,43,32,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,116,224,4,0,135,43,0,0,0,3,0,0,0,4,1,0,0,15,2,0,1,40,0,0,0,26,3,0,25,31,26,8,25,32,31,4,82,33,32,0,0,38,33,0,0,34,38,0,0,35,3,0,25,36,35,8,14,5,34,36,120,5,2,0,119,0,25,0,0,6,38,0,0,37,6,0,0,7,37,0,25,8,7,8,82,9,8,0,25,10,9,4,82,11,10,0,1,43,141,31,134,12,0,0,208,147,5,0,11,43,0,0,32,13,12,0,121,13,7,0,0,14,37,0,25,16,14,12,82,17,16,0,25,18,17,4,82,19,18,0,0,40,19,0,0,20,38,0,25,21,20,4,82,22,21,0,0,38,22,0,119,0,227,255,134,23,0,0,36,25,6,0,0,39,23,0,0,24,39,0,0,25,40,0,1,43,0,0,14,27,25,43,0,28,40,0,1,43,181,31,125,29,27,28,43,0,0,0,134,43,0,0,240,6,4,0,24,29,0,0,0,30,39,0,137,42,0,0,139,30,0,0,140,2,48,0,0,0,0,0,1,44,0,0,136,46,0,0,0,45,46,0,136,46,0,0,25,46,46,16,137,46,0,0,130,46,0,0,136,47,0,0,49,46,46,47,136,225,4,0,135,46,0,0,0,2,0,0,58,3,1,0,59,43,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,37,36,0,58,38,3,0,64,39,37,38,58,42,39,0,58,40,42,0,58,41,40,0,62,46,0,0,187,189,215,217,223,124,27,62,74,4,41,46,121,4,30,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,42,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,43,16,0,58,17,43,0,59,46,1,0,64,18,17,46,58,43,18,0,58,19,43,0,58,20,43,0,65,21,19,20,58,22,43,0,65,23,21,22,58,24,43,0,65,26,23,24,58,27,43,0,65,28,26,27,59,46,1,0,63,29,28,46,58,43,29,0,119,0,2,0,59,43,1,0,58,30,42,0,0,31,2,0,25,32,31,32,25,33,32,36,89,33,30,0,0,34,2,0,58,35,43,0,134,46,0,0,88,224,3,0,34,35,0,0,137,45,0,0,139,0,0,0,140,5,46,0,0,0,0,0,1,42,0,0,136,44,0,0,0,43,44,0,136,44,0,0,25,44,44,32,137,44,0,0,130,44,0,0,136,45,0,0,49,44,44,45,168,226,4,0,135,44,0,0,0,5,0,0,0,6,1,0,0,17,2,0,0,28,3,0,0,35,4,0,1,44,0,0,134,36,0,0,20,222,5,0,44,0,0,0,0,41,36,0,0,37,41,0,0,38,5,0,25,39,38,4,82,40,39,0,0,7,6,0,134,44,0,0,76,111,5,0,37,40,7,0,0,8,41,0,0,9,28,0,0,10,35,0,134,44,0,0,76,111,5,0,8,9,10,0,0,11,41,0,0,12,5,0,25,13,12,4,82,14,13,0,0,15,6,0,3,16,14,15,0,18,17,0,3,19,16,18,0,20,5,0,82,21,20,0,0,22,6,0,0,23,17,0,3,24,22,23,4,25,21,24,134,44,0,0,76,111,5,0,11,19,25,0,0,26,5,0,1,44,0,0,85,26,44,0,0,27,5,0,0,29,41,0,25,30,29,4,82,31,30,0,0,32,41,0,82,33,32,0,134,44,0,0,76,111,5,0,27,31,33,0,0,34,41,0,134,44,0,0,4,84,6,0,34,0,0,0,137,43,0,0,139,0,0,0,140,2,48,0,0,0,0,0,1,44,0,0,136,46,0,0,0,45,46,0,136,46,0,0,25,46,46,16,137,46,0,0,130,46,0,0,136,47,0,0,49,46,46,47,200,227,4,0,135,46,0,0,0,2,0,0,58,3,1,0,59,43,0,0,0,14,2,0,25,25,14,32,25,36,25,36,88,37,36,0,58,38,3,0,64,39,37,38,58,42,39,0,58,40,42,0,58,41,40,0,62,46,0,0,187,189,215,217,223,124,27,62,74,4,41,46,121,4,30,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,42,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,43,16,0,58,17,43,0,59,46,1,0,64,18,17,46,58,43,18,0,58,19,43,0,58,20,43,0,65,21,19,20,58,22,43,0,65,23,21,22,58,24,43,0,65,26,23,24,58,27,43,0,65,28,26,27,59,46,1,0,63,29,28,46,58,43,29,0,119,0,2,0,59,43,1,0,58,30,42,0,0,31,2,0,25,32,31,32,25,33,32,36,89,33,30,0,0,34,2,0,58,35,43,0,134,46,0,0,164,226,3,0,34,35,0,0,137,45,0,0,139,0,0,0,140,3,38,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,136,36,0,0,25,36,36,32,137,36,0,0,130,36,0,0,136,37,0,0,49,36,36,37,232,228,4,0,135,36,0,0,0,4,0,0,0,15,1,0,0,23,2,0,0,24,23,0,33,25,24,0,121,25,53,0,0,26,4,0,0,27,15,0,13,28,26,27,120,28,49,0,0,29,4,0,0,31,29,0,0,5,15,0,0,33,5,0,0,6,31,0,0,30,6,0,0,7,33,0,0,32,7,0,0,8,23,0,33,9,8,0,120,9,3,0,1,34,9,0,119,0,23,0,0,10,30,0,25,11,10,1,0,30,11,0,78,12,10,0,41,36,12,24,42,36,36,24,0,13,36,0,0,14,32,0,25,16,14,1,0,32,16,0,78,17,14,0,41,36,17,24,42,36,36,24,0,18,36,0,14,19,13,18,121,19,3,0,1,34,7,0,119,0,5,0,0,20,23,0,26,21,20,1,0,23,21,0,119,0,230,255,32,36,34,7,121,36,6,0,1,3,1,0,0,22,3,0,137,35,0,0,139,22,0,0,119,0,7,0,32,36,34,9,121,36,5,0,1,3,0,0,0,22,3,0,137,35,0,0,139,22,0,0,1,3,0,0,0,22,3,0,137,35,0,0,139,22,0,0,140,2,40,0,0,0,0,0,1,36,0,0,136,38,0,0,0,37,38,0,136,38,0,0,25,38,38,16,137,38,0,0,130,38,0,0,136,39,0,0,49,38,38,39,20,230,4,0,135,38,0,0,0,2,0,0,0,3,1,0,0,14,2,0,25,25,14,12,82,30,25,0,0,31,3,0,13,32,30,31,121,32,3,0,137,37,0,0,139,0,0,0,0,33,2,0,25,34,33,12,82,35,34,0,1,38,0,0,17,4,38,35,121,4,9,0,0,5,2,0,25,6,5,12,82,7,6,0,1,38,104,4,41,39,7,2,3,8,38,39,1,39,0,0,85,8,39,0,0,9,3,0,1,39,104,4,41,38,9,2,3,10,39,38,82,11,10,0,1,38,0,0,14,12,11,38,121,12,9,0,0,13,3,0,1,38,104,4,41,39,13,2,3,15,38,39,82,16,15,0,25,17,16,12,1,39,255,255,85,17,39,0,0,18,3,0,0,19,2,0,25,20,19,12,85,20,18,0,0,21,3,0,2,39,0,0,192,132,0,0,3,22,39,21,135,39,78,0,22,0,0,0,0,23,2,0,25,24,23,8,82,26,24,0,1,38,225,13,135,39,79,0,38,26,0,0,0,27,2,0,0,28,3,0,1,39,104,4,41,38,28,2,3,29,39,38,85,29,27,0,137,37,0,0,139,0,0,0,140,1,38,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,136,36,0,0,25,36,36,16,137,36,0,0,130,36,0,0,136,37,0,0,49,36,36,37,72,231,4,0,135,36,0,0,0,1,0,0,0,2,1,0,82,13,2,0,33,24,13,0,121,24,13,0,0,27,1,0,1,36,96,4,82,28,36,0,13,29,27,28,121,29,4,0,1,36,96,4,1,37,0,0,85,36,37,0,0,30,1,0,82,31,30,0,135,37,104,0,31,0,0,0,0,32,1,0,25,3,32,4,82,4,3,0,25,5,4,12,82,6,5,0,0,33,6,0,0,7,33,0,1,37,0,0,14,8,7,37,120,8,3,0,1,34,9,0,119,0,21,0,0,9,33,0,0,10,9,0,0,11,1,0,25,12,11,4,82,14,12,0,25,15,14,8,82,16,15,0,16,17,10,16,120,17,3,0,1,34,9,0,119,0,10,0,0,18,33,0,82,19,18,0,134,37,0,0,84,89,6,0,19,0,0,0,0,20,33,0,25,21,20,4,0,33,21,0,119,0,231,255,32,37,34,9,121,37,13,0,0,22,1,0,25,23,22,4,82,25,23,0,134,37,0,0,180,1,6,0,25,0,0,0,0,26,1,0,134,37,0,0,216,166,5,0,26,0,0,0,137,35,0,0,139,0,0,0,139,0,0,0,140,3,38,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,136,36,0,0,25,36,36,16,137,36,0,0,130,36,0,0,136,37,0,0,49,36,36,37,124,232,4,0,135,36,0,0,0,3,0,0,0,4,1,0,0,15,2,0,0,26,3,0,0,33,26,0,0,27,33,0,1,36,0,0,14,28,27,36,120,28,3,0,1,34,8,0,119,0,40,0,0,29,33,0,25,30,29,32,1,36,1,0,83,30,36,0,0,31,33,0,25,32,31,20,82,5,32,0,1,36,0,0,14,6,5,36,121,6,12,0,0,7,33,0,25,8,7,20,82,9,8,0,0,10,33,0,25,11,10,24,82,12,11,0,0,13,4,0,0,14,15,0,38,37,9,63,135,36,19,0,37,12,13,14,0,16,33,0,25,17,16,32,78,18,17,0,1,36,255,0,19,36,18,36,0,19,36,0,1,36,1,0,15,20,36,19,0,21,33,0,25,22,21,32,1,36,0,0,83,22,36,0,0,23,33,0,120,20,5,0,25,24,23,16,82,25,24,0,0,33,25,0,119,0,212,255,32,36,34,8,121,36,3,0,137,35,0,0,139,0,0,0,134,36,0,0,96,210,4,0,23,0,0,0,137,35,0,0,139,0,0,0,140,2,47,0,0,0,0,0,1,43,0,0,136,45,0,0,0,44,45,0,136,45,0,0,25,45,45,16,137,45,0,0,130,45,0,0,136,46,0,0,49,45,45,46,156,233,4,0,135,45,0,0,0,2,0,0,58,3,1,0,59,42,0,0,0,14,2,0,25,25,14,32,25,35,25,36,88,36,35,0,58,37,3,0,64,38,36,37,58,41,38,0,58,39,41,0,58,40,39,0,62,45,0,0,187,189,215,217,223,124,27,62,74,4,40,45,121,4,29,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,41,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,42,16,0,58,17,42,0,59,45,1,0,64,18,17,45,58,42,18,0,58,19,42,0,58,20,42,0,65,21,19,20,58,22,42,0,65,23,21,22,58,24,42,0,65,26,23,24,59,45,1,0,64,27,26,45,68,28,27,0,58,42,28,0,119,0,2,0,59,42,1,0,58,29,41,0,0,30,2,0,25,31,30,32,25,32,31,36,89,32,29,0,0,33,2,0,58,34,42,0,134,45,0,0,88,224,3,0,33,34,0,0,137,44,0,0,139,0,0,0,140,2,39,0,0,0,0,0,1,35,0,0,136,37,0,0,0,36,37,0,136,37,0,0,25,37,37,16,137,37,0,0,130,37,0,0,136,38,0,0,49,37,37,38,184,234,4,0,135,37,0,0,0,2,0,0,0,3,1,0,0,14,3,0,25,25,14,16,134,29,0,0,96,53,6,0,25,0,0,0,33,30,29,0,121,30,3,0,1,35,4,0,119,0,22,0,0,31,3,0,25,32,31,32,82,33,32,0,1,37,0,0,14,34,33,37,121,34,15,0,0,4,3,0,25,5,4,16,134,37,0,0,228,17,6,0,5,0,0,0,0,6,3,0,25,7,6,32,82,8,7,0,0,9,3,0,1,38,255,0,19,38,8,38,135,37,9,0,38,9,0,0,119,0,2,0,1,35,4,0,32,37,35,4,121,37,6,0,0,10,3,0,25,11,10,16,134,37,0,0,228,17,6,0,11,0,0,0,0,12,3,0,25,13,12,16,0,15,2,0,25,16,15,8,134,37,0,0,64,45,6,0,13,16,0,0,0,17,2,0,0,18,3,0,25,19,18,24,85,19,17,0,0,20,3,0,25,21,20,28,82,22,21,0,1,37,0,0,14,23,22,37,120,23,3,0,137,36,0,0,139,0,0,0,0,24,3,0,25,26,24,28,82,27,26,0,0,28,3,0,1,38,255,0,19,38,27,38,135,37,9,0,38,28,0,0,137,36,0,0,139,0,0,0,140,2,47,0,0,0,0,0,1,43,0,0,136,45,0,0,0,44,45,0,136,45,0,0,25,45,45,16,137,45,0,0,130,45,0,0,136,46,0,0,49,45,45,46,252,235,4,0,135,45,0,0,0,2,0,0,58,3,1,0,59,42,0,0,0,14,2,0,25,25,14,32,25,35,25,36,88,36,35,0,58,37,3,0,64,38,36,37,58,41,38,0,58,39,41,0,58,40,39,0,62,45,0,0,187,189,215,217,223,124,27,62,74,4,40,45,121,4,29,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,41,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,42,16,0,58,17,42,0,59,45,1,0,64,18,17,45,58,42,18,0,58,19,42,0,58,20,42,0,65,21,19,20,58,22,42,0,65,23,21,22,58,24,42,0,65,26,23,24,59,45,1,0,64,27,26,45,68,28,27,0,58,42,28,0,119,0,2,0,59,42,1,0,58,29,41,0,0,30,2,0,25,31,30,32,25,32,31,36,89,32,29,0,0,33,2,0,58,34,42,0,134,45,0,0,164,226,3,0,33,34,0,0,137,44,0,0,139,0,0,0,140,2,44,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,32,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,24,237,4,0,135,41,0,0,0,2,0,0,0,3,1,0,0,14,2,0,25,25,14,44,82,29,25,0,0,35,29,0,134,30,0,0,120,91,6,0,0,37,30,0,134,31,0,0,100,221,5,0,0,36,31,0,0,32,36,0,25,33,32,24,1,41,2,0,83,33,41,0,0,34,36,0,25,4,34,20,1,41,255,255,85,4,41,0,0,5,3,0,25,6,5,12,82,7,6,0,1,41,85,12,1,42,9,0,1,43,2,0,134,8,0,0,28,203,4,0,7,41,42,43,0,38,8,0,0,9,36,0,25,10,9,12,82,11,10,0,0,12,38,0,25,13,12,4,82,15,13,0,0,16,38,0,82,17,16,0,134,43,0,0,128,39,6,0,11,15,17,0,0,18,35,0,25,19,18,24,82,20,19,0,0,21,38,0,25,22,21,4,82,23,22,0,0,24,38,0,82,26,24,0,134,43,0,0,128,39,6,0,20,23,26,0,0,27,37,0,0,28,36,0,134,43,0,0,200,244,5,0,27,28,0,0,137,40,0,0,139,0,0,0,140,5,41,0,0,0,0,0,1,37,0,0,136,39,0,0,0,38,39,0,136,39,0,0,25,39,39,32,137,39,0,0,130,39,0,0,136,40,0,0,49,39,39,40,56,238,4,0,135,39,0,0,0,5,0,0,0,6,1,0,0,17,2,0,0,28,3,0,0,30,4,0,1,39,48,0,1,40,128,0,134,31,0,0,168,171,5,0,39,40,0,0,0,36,31,0,0,32,5,0,0,33,6,0,134,34,0,0,240,9,6,0,32,33,0,0,0,35,36,0,85,35,34,0,0,7,28,0,0,8,30,0,134,9,0,0,240,9,6,0,7,8,0,0,0,10,36,0,25,11,10,8,85,11,9,0,0,12,17,0,0,13,36,0,25,14,13,4,84,14,12,0,0,15,36,0,25,16,15,12,134,40,0,0,248,70,6,0,16,0,0,0,0,18,36,0,25,19,18,20,134,40,0,0,248,70,6,0,19,0,0,0,0,20,36,0,25,21,20,28,134,40,0,0,248,70,6,0,21,0,0,0,0,22,36,0,25,23,22,40,1,39,0,0,134,40,0,0,108,84,6,0,23,39,0,0,1,40,4,0,134,24,0,0,236,195,4,0,40,0,0,0,0,25,36,0,25,26,25,36,85,26,24,0,0,27,36,0,134,40,0,0,100,170,5,0,27,0,0,0,0,29,36,0,137,38,0,0,139,29,0,0,140,1,35,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,16,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,112,239,4,0,135,31,0,0,0,1,0,0,134,31,0,0,180,98,6,0,1,31,104,4,82,2,31,0,0,28,2,0,1,31,16,0,1,32,46,0,134,13,0,0,168,171,5,0,31,32,0,0,0,27,13,0,0,20,27,0,25,21,20,8,1,31,1,0,135,32,77,0,31,21,0,0,2,31,0,0,192,132,0,0,135,32,78,0,31,0,0,0,0,22,27,0,25,23,22,8,82,24,23,0,1,31,225,13,135,32,79,0,31,24,0,0,0,25,1,0,134,32,0,0,164,87,6,0,25,0,0,0,1,31,225,13,1,33,2,40,2,34,0,0,47,129,0,0,135,32,81,0,31,33,34,0,1,34,225,13,1,33,3,40,2,31,0,0,47,129,0,0,135,32,81,0,34,33,31,0,1,31,225,13,1,33,1,40,1,34,1,38,135,32,81,0,31,33,34,0,1,34,225,13,1,33,0,40,1,31,1,38,135,32,81,0,34,33,31,0,0,26,1,0,134,3,0,0,200,92,6,0,26,0,0,0,0,4,27,0,84,4,3,0,0,5,1,0,134,6,0,0,124,92,6,0,5,0,0,0,0,7,27,0,25,8,7,2,84,8,6,0,0,9,27,0,25,10,9,4,1,32,0,0,84,10,32,0,0,11,27,0,25,12,11,12,1,32,255,255,85,12,32,0,0,14,28,0,1,32,0,0,14,15,14,32,120,15,4,0,0,19,27,0,137,30,0,0,139,19,0,0,0,16,28,0,25,17,16,8,82,18,17,0,1,31,225,13,135,32,79,0,31,18,0,0,0,19,27,0,137,30,0,0,139,19,0,0,140,0,31,0,0,0,0,0,1,27,0,0,136,29,0,0,0,28,29,0,136,29,0,0,25,29,29,16,137,29,0,0,130,29,0,0,136,30,0,0,49,29,29,30,12,241,4,0,135,29,0,0,1,29,248,5,82,0,29,0,1,29,0,0,14,1,0,29,120,1,3,0,137,28,0,0,139,0,0,0,1,29,248,5,82,12,29,0,134,29,0,0,52,67,4,0,12,0,0,0,1,29,252,5,82,18,29,0,134,29,0,0,52,67,4,0,18,0,0,0,1,29,0,6,82,19,29,0,134,29,0,0,52,67,4,0,19,0,0,0,1,29,4,0,1,30,1,0,134,20,0,0,224,168,5,0,29,30,0,0,0,26,20,0,1,30,244,5,82,21,30,0,0,22,26,0,134,30,0,0,36,105,4,0,21,22,0,0,0,23,26,0,25,24,23,12,82,2,24,0,0,25,2,0,0,3,25,0,1,30,0,0,14,4,3,30,120,4,2,0,119,0,18,0,0,5,25,0,0,6,5,0,0,7,26,0,25,8,7,8,82,9,8,0,16,10,6,9,120,10,2,0,119,0,10,0,0,11,25,0,82,13,11,0,134,30,0,0,68,105,6,0,13,0,0,0,0,14,25,0,25,15,14,4,0,25,15,0,119,0,235,255,0,16,26,0,134,30,0,0,180,1,6,0,16,0,0,0,1,30,244,5,82,17,30,0,134,30,0,0,52,67,4,0,17,0,0,0,1,30,248,5,1,29,0,0,85,30,29,0,1,29,252,5,1,30,0,0,85,29,30,0,1,30,0,6,1,29,0,0,85,30,29,0,1,29,244,5,1,30,0,0,85,29,30,0,137,28,0,0,139,0,0,0,140,2,45,0,0,0,0,0,1,41,0,0,136,43,0,0,0,42,43,0,136,43,0,0,25,43,43,16,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,140,242,4,0,135,43,0,0,0,2,0,0,0,3,1,0,0,14,2,0,0,25,2,0,82,35,25,0,25,36,35,1,134,43,0,0,20,212,5,0,14,36,0,0,0,37,2,0,25,38,37,12,82,39,38,0,0,40,2,0,82,4,40,0,0,5,2,0,25,6,5,4,80,7,6,0,2,43,0,0,255,255,0,0,19,43,7,43,0,8,43,0,5,9,4,8,3,10,39,9,0,11,3,0,0,12,2,0,25,13,12,4,80,15,13,0,2,43,0,0,255,255,0,0,19,43,15,43,0,16,43,0,134,43,0,0,160,232,5,0,10,11,16,0,0,17,2,0,82,18,17,0,25,19,18,1,85,17,19,0,0,20,2,0,25,21,20,12,82,22,21,0,0,23,22,0,0,24,2,0,25,26,24,4,80,27,26,0,2,43,0,0,255,255,0,0,19,43,27,43,0,28,43,0,0,29,2,0,82,30,29,0,5,31,28,30,3,32,23,31,0,33,2,0,25,34,33,8,85,34,32,0,137,42,0,0,139,0,0,0,140,2,45,0,0,0,0,0,1,41,0,0,136,43,0,0,0,42,43,0,136,43,0,0,25,43,43,16,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,168,243,4,0,135,43,0,0,0,2,0,0,58,3,1,0,59,40,0,0,0,14,2,0,25,25,14,32,25,33,25,36,88,34,33,0,58,35,3,0,64,36,34,35,58,39,36,0,58,37,39,0,58,38,37,0,62,43,0,0,187,189,215,217,223,124,27,62,74,4,38,43,121,4,28,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,39,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,40,16,0,58,17,40,0,59,43,1,0,64,18,17,43,58,40,18,0,58,19,40,0,58,20,40,0,65,21,19,20,58,22,21,0,59,43,1,0,64,23,43,22,135,24,67,0,23,0,0,0,58,26,24,0,58,40,26,0,119,0,2,0,59,40,1,0,58,27,39,0,0,28,2,0,25,29,28,32,25,30,29,36,89,30,27,0,0,31,2,0,58,32,40,0,134,43,0,0,88,224,3,0,31,32,0,0,137,42,0,0,139,0,0,0,140,2,45,0,0,0,0,0,1,41,0,0,136,43,0,0,0,42,43,0,136,43,0,0,25,43,43,16,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,192,244,4,0,135,43,0,0,0,2,0,0,58,3,1,0,59,40,0,0,0,14,2,0,25,25,14,32,25,33,25,36,88,34,33,0,58,35,3,0,64,36,34,35,58,39,36,0,58,37,39,0,58,38,37,0,62,43,0,0,187,189,215,217,223,124,27,62,74,4,38,43,121,4,28,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,39,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,40,16,0,58,17,40,0,59,43,1,0,64,18,17,43,58,40,18,0,58,19,40,0,58,20,40,0,65,21,19,20,58,22,21,0,59,43,1,0,64,23,43,22,135,24,67,0,23,0,0,0,58,26,24,0,58,40,26,0,119,0,2,0,59,40,1,0,58,27,39,0,0,28,2,0,25,29,28,32,25,30,29,36,89,30,27,0,0,31,2,0,58,32,40,0,134,43,0,0,164,226,3,0,31,32,0,0,137,42,0,0,139,0,0,0,140,2,45,0,0,0,0,0,1,41,0,0,136,43,0,0,0,42,43,0,136,43,0,0,25,43,43,16,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,216,245,4,0,135,43,0,0,0,2,0,0,58,3,1,0,59,40,0,0,0,14,2,0,25,25,14,32,25,33,25,36,88,34,33,0,58,35,3,0,64,36,34,35,58,39,36,0,58,37,39,0,58,38,37,0,62,43,0,0,187,189,215,217,223,124,27,62,74,4,38,43,121,4,27,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,39,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,40,16,0,58,17,40,0,58,18,40,0,65,19,17,18,58,20,19,0,59,43,1,0,64,21,43,20,135,22,67,0,21,0,0,0,58,23,22,0,59,43,1,0,64,24,23,43,68,26,24,0,58,40,26,0,119,0,2,0,59,40,1,0,58,27,39,0,0,28,2,0,25,29,28,32,25,30,29,36,89,30,27,0,0,31,2,0,58,32,40,0,134,43,0,0,88,224,3,0,31,32,0,0,137,42,0,0,139,0,0,0,140,2,44,0,0,0,0,0,1,40,0,0,136,42,0,0,0,41,42,0,136,42,0,0,25,42,42,16,137,42,0,0,130,42,0,0,136,43,0,0,49,42,42,43,236,246,4,0,135,42,0,0,0,2,0,0,58,3,1,0,59,39,0,0,0,14,2,0,25,25,14,32,25,32,25,36,88,33,32,0,58,34,3,0,64,35,33,34,58,38,35,0,58,36,38,0,58,37,36,0,62,42,0,0,187,189,215,217,223,124,27,62,74,4,37,42,121,4,30,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,38,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,39,16,0,58,17,39,0,58,18,17,0,62,42,0,0,24,45,68,84,251,33,9,64,65,19,18,42,61,42,0,0,0,0,0,63,65,20,19,42,135,21,86,0,20,0,0,0,68,22,21,0,59,42,1,0,63,23,22,42,58,24,23,0,58,39,24,0,119,0,2,0,59,39,1,0,58,26,38,0,0,27,2,0,25,28,27,32,25,29,28,36,89,29,26,0,0,30,2,0,58,31,39,0,134,42,0,0,88,224,3,0,30,31,0,0,137,41,0,0,139,0,0,0,140,2,45,0,0,0,0,0,1,41,0,0,136,43,0,0,0,42,43,0,136,43,0,0,25,43,43,16,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,12,248,4,0,135,43,0,0,0,2,0,0,58,3,1,0,59,40,0,0,0,14,2,0,25,25,14,32,25,33,25,36,88,34,33,0,58,35,3,0,64,36,34,35,58,39,36,0,58,37,39,0,58,38,37,0,62,43,0,0,187,189,215,217,223,124,27,62,74,4,38,43,121,4,27,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,39,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,40,16,0,58,17,40,0,58,18,40,0,65,19,17,18,58,20,19,0,59,43,1,0,64,21,43,20,135,22,67,0,21,0,0,0,58,23,22,0,59,43,1,0,64,24,23,43,68,26,24,0,58,40,26,0,119,0,2,0,59,40,1,0,58,27,39,0,0,28,2,0,25,29,28,32,25,30,29,36,89,30,27,0,0,31,2,0,58,32,40,0,134,43,0,0,164,226,3,0,31,32,0,0,137,42,0,0,139,0,0,0,140,3,32,0,0,0,0,0,1,28,0,0,136,30,0,0,0,29,30,0,32,6,2,0,121,6,3,0,1,3,0,0,119,0,56,0,78,7,0,0,41,30,7,24,42,30,30,24,32,15,30,0,121,15,4,0,1,11,0,0,0,26,1,0,119,0,39,0,0,5,2,0,0,19,7,0,0,23,0,0,0,27,1,0,26,4,5,1,78,16,27,0,41,30,16,24,42,30,30,24,33,17,30,0,33,18,4,0,19,30,18,17,0,24,30,0,41,30,19,24,42,30,30,24,41,31,16,24,42,31,31,24,13,20,30,31,19,31,20,24,0,25,31,0,120,25,4,0,0,11,19,0,0,26,27,0,119,0,16,0,25,21,23,1,25,22,27,1,78,8,21,0,41,31,8,24,42,31,31,24,32,9,31,0,121,9,4,0,1,11,0,0,0,26,22,0,119,0,6,0,0,5,4,0,0,19,8,0,0,23,21,0,0,27,22,0,119,0,223,255,1,31,255,0,19,31,11,31,0,10,31,0,78,12,26,0,1,31,255,0,19,31,12,31,0,13,31,0,4,14,10,13,0,3,14,0,139,3,0,0,140,2,45,0,0,0,0,0,1,41,0,0,136,43,0,0,0,42,43,0,136,43,0,0,25,43,43,16,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,36,250,4,0,135,43,0,0,0,2,0,0,58,3,1,0,59,40,0,0,0,14,2,0,25,25,14,32,25,33,25,36,88,34,33,0,58,35,3,0,64,36,34,35,58,39,36,0,58,37,39,0,58,38,37,0,62,43,0,0,187,189,215,217,223,124,27,62,74,4,38,43,121,4,24,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,39,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,40,16,0,58,17,40,0,58,18,40,0,65,19,17,18,58,20,40,0,65,21,19,20,58,22,40,0,65,23,21,22,58,24,40,0,65,26,23,24,58,40,26,0,119,0,2,0,59,40,1,0,58,27,39,0,0,28,2,0,25,29,28,32,25,30,29,36,89,30,27,0,0,31,2,0,58,32,40,0,134,43,0,0,88,224,3,0,31,32,0,0,137,42,0,0,139,0,0,0,140,2,44,0,0,0,0,0,1,40,0,0,136,42,0,0,0,41,42,0,136,42,0,0,25,42,42,16,137,42,0,0,130,42,0,0,136,43,0,0,49,42,42,43,44,251,4,0,135,42,0,0,0,2,0,0,58,3,1,0,59,39,0,0,0,14,2,0,25,25,14,32,25,32,25,36,88,33,32,0,58,34,3,0,64,35,33,34,58,38,35,0,58,36,38,0,58,37,36,0,62,42,0,0,187,189,215,217,223,124,27,62,74,4,37,42,121,4,30,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,38,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,39,16,0,58,17,39,0,58,18,17,0,62,42,0,0,24,45,68,84,251,33,9,64,65,19,18,42,61,42,0,0,0,0,0,63,65,20,19,42,135,21,86,0,20,0,0,0,68,22,21,0,59,42,1,0,63,23,22,42,58,24,23,0,58,39,24,0,119,0,2,0,59,39,1,0,58,26,38,0,0,27,2,0,25,28,27,32,25,29,28,36,89,29,26,0,0,30,2,0,58,31,39,0,134,42,0,0,164,226,3,0,30,31,0,0,137,41,0,0,139,0,0,0,140,4,39,0,0,0,0,0,1,35,0,0,136,37,0,0,0,36,37,0,136,37,0,0,25,37,37,32,137,37,0,0,130,37,0,0,136,38,0,0,49,37,37,38,76,252,4,0,135,37,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,26,3,0,0,27,16,0,0,34,27,0,0,28,34,0,1,37,0,0,14,29,28,37,120,29,3,0,1,35,6,0,119,0,27,0,0,30,34,0,25,31,30,12,82,32,31,0,0,6,5,0,25,7,6,12,82,8,7,0,25,9,8,4,82,10,9,0,0,11,5,0,25,12,11,12,82,13,12,0,82,14,13,0,134,15,0,0,68,71,4,0,32,10,14,0,82,17,15,0,0,33,17,0,0,18,33,0,1,37,0,0,14,19,18,37,120,19,6,0,0,23,34,0,25,24,23,24,82,25,24,0,0,34,25,0,119,0,225,255,32,37,35,6,121,37,3,0,137,36,0,0,139,0,0,0,0,20,33,0,0,21,4,0,1,37,28,1,3,22,21,37,85,22,20,0,137,36,0,0,139,0,0,0,140,2,45,0,0,0,0,0,1,41,0,0,136,43,0,0,0,42,43,0,136,43,0,0,25,43,43,16,137,43,0,0,130,43,0,0,136,44,0,0,49,43,43,44,68,253,4,0,135,43,0,0,0,2,0,0,58,3,1,0,59,40,0,0,0,14,2,0,25,25,14,32,25,33,25,36,88,34,33,0,58,35,3,0,64,36,34,35,58,39,36,0,58,37,39,0,58,38,37,0,62,43,0,0,187,189,215,217,223,124,27,62,74,4,38,43,121,4,24,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,39,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,40,16,0,58,17,40,0,58,18,40,0,65,19,17,18,58,20,40,0,65,21,19,20,58,22,40,0,65,23,21,22,58,24,40,0,65,26,23,24,58,40,26,0,119,0,2,0,59,40,1,0,58,27,39,0,0,28,2,0,25,29,28,32,25,30,29,36,89,30,27,0,0,31,2,0,58,32,40,0,134,43,0,0,164,226,3,0,31,32,0,0,137,42,0,0,139,0,0,0,140,2,44,0,0,0,0,0,1,40,0,0,136,42,0,0,0,41,42,0,136,42,0,0,25,42,42,16,137,42,0,0,130,42,0,0,136,43,0,0,49,42,42,43,76,254,4,0,135,42,0,0,0,2,0,0,58,3,1,0,59,39,0,0,0,14,2,0,25,25,14,32,25,32,25,36,88,33,32,0,58,34,3,0,64,35,33,34,58,38,35,0,58,36,38,0,58,37,36,0,62,42,0,0,187,189,215,217,223,124,27,62,74,4,37,42,121,4,26,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,38,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,39,16,0,58,17,39,0,59,42,1,0,64,18,17,42,58,39,18,0,58,19,39,0,58,20,39,0,65,21,19,20,58,22,39,0,65,23,21,22,59,42,1,0,63,24,23,42,58,39,24,0,119,0,2,0,59,39,1,0,58,26,38,0,0,27,2,0,25,28,27,32,25,29,28,36,89,29,26,0,0,30,2,0,58,31,39,0,134,42,0,0,88,224,3,0,30,31,0,0,137,41,0,0,139,0,0,0,140,2,43,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,16,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,92,255,4,0,135,41,0,0,0,2,0,0,58,3,1,0,59,38,0,0,0,14,2,0,25,25,14,32,25,31,25,36,88,32,31,0,58,33,3,0,64,34,32,33,58,37,34,0,58,35,37,0,58,36,35,0,62,41,0,0,187,189,215,217,223,124,27,62,74,4,36,41,121,4,29,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,37,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,38,16,0,58,17,38,0,58,18,17,0,62,41,0,0,24,45,68,84,251,33,9,64,65,19,18,41,135,20,86,0,19,0,0,0,59,41,1,0,64,21,20,41,61,41,0,0,0,0,0,191], eb + 317440);
  HEAPU8.set([65,22,41,21,58,23,22,0,58,38,23,0,119,0,2,0,59,38,1,0,58,24,37,0,0,26,2,0,25,27,26,32,25,28,27,36,89,28,24,0,0,29,2,0,58,30,38,0,134,41,0,0,88,224,3,0,29,30,0,0,137,40,0,0,139,0,0,0,140,2,44,0,0,0,0,0,1,40,0,0,136,42,0,0,0,41,42,0,136,42,0,0,25,42,42,16,137,42,0,0,130,42,0,0,136,43,0,0,49,42,42,43,120,0,5,0,135,42,0,0,0,2,0,0,58,3,1,0,59,39,0,0,0,14,2,0,25,25,14,32,25,32,25,36,88,33,32,0,58,34,3,0,64,35,33,34,58,38,35,0,58,36,38,0,58,37,36,0,62,42,0,0,187,189,215,217,223,124,27,62,74,4,37,42,121,4,26,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,38,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,39,16,0,58,17,39,0,59,42,1,0,64,18,17,42,58,39,18,0,58,19,39,0,58,20,39,0,65,21,19,20,58,22,39,0,65,23,21,22,59,42,1,0,63,24,23,42,58,39,24,0,119,0,2,0,59,39,1,0,58,26,38,0,0,27,2,0,25,28,27,32,25,29,28,36,89,29,26,0,0,30,2,0,58,31,39,0,134,42,0,0,164,226,3,0,30,31,0,0,137,41,0,0,139,0,0,0,140,2,43,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,16,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,136,1,5,0,135,41,0,0,0,2,0,0,58,3,1,0,59,38,0,0,0,14,2,0,25,25,14,32,25,31,25,36,88,32,31,0,58,33,3,0,64,34,32,33,58,37,34,0,58,35,37,0,58,36,35,0,62,41,0,0,187,189,215,217,223,124,27,62,74,4,36,41,121,4,29,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,37,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,38,16,0,58,17,38,0,58,18,17,0,62,41,0,0,24,45,68,84,251,33,9,64,65,19,18,41,135,20,86,0,19,0,0,0,59,41,1,0,64,21,20,41,61,41,0,0,0,0,0,191,65,22,41,21,58,23,22,0,58,38,23,0,119,0,2,0,59,38,1,0,58,24,37,0,0,26,2,0,25,27,26,32,25,28,27,36,89,28,24,0,0,29,2,0,58,30,38,0,134,41,0,0,164,226,3,0,29,30,0,0,137,40,0,0,139,0,0,0,140,2,43,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,16,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,164,2,5,0,135,41,0,0,0,2,0,0,58,3,1,0,59,38,0,0,0,14,2,0,25,25,14,32,25,31,25,36,88,32,31,0,58,33,3,0,64,34,32,33,58,37,34,0,58,35,37,0,58,36,35,0,62,41,0,0,187,189,215,217,223,124,27,62,74,4,36,41,121,4,26,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,37,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,38,16,0,58,17,38,0,58,18,17,0,59,41,246,255,65,19,41,18,59,41,2,0,135,20,89,0,41,19,0,0,58,21,20,0,68,22,21,0,59,41,1,0,63,23,22,41,58,38,23,0,119,0,2,0,59,38,1,0,58,24,37,0,0,26,2,0,25,27,26,32,25,28,27,36,89,28,24,0,0,29,2,0,58,30,38,0,134,41,0,0,88,224,3,0,29,30,0,0,137,40,0,0,139,0,0,0,140,0,33,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,16,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,180,3,5,0,135,31,0,0,1,31,4,0,1,32,1,0,134,0,0,0,224,168,5,0,31,32,0,0,0,27,0,0,1,32,100,4,82,1,32,0,0,12,27,0,134,32,0,0,36,105,4,0,1,12,0,0,0,19,27,0,25,20,19,12,82,21,20,0,0,26,21,0,0,22,26,0,1,32,0,0,14,23,22,32,120,23,2,0,119,0,18,0,0,24,26,0,0,25,24,0,0,2,27,0,25,3,2,8,82,4,3,0,16,5,25,4,120,5,2,0,119,0,10,0,0,6,26,0,82,7,6,0,134,32,0,0,48,146,5,0,7,0,0,0,0,8,26,0,25,9,8,4,0,26,9,0,119,0,235,255,0,10,27,0,134,32,0,0,180,1,6,0,10,0,0,0,1,32,100,4,82,11,32,0,134,32,0,0,52,67,4,0,11,0,0,0,1,32,100,4,1,31,0,0,85,32,31,0,1,28,0,0,0,13,28,0,35,14,13,8,120,14,2,0,119,0,11,0,0,15,28,0,1,31,104,4,41,32,15,2,3,16,31,32,1,32,0,0,85,16,32,0,0,17,28,0,25,18,17,1,0,28,18,0,119,0,243,255,1,32,136,4,1,31,0,0,85,32,31,0,137,30,0,0,139,0,0,0,140,0,27,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,16,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,0,5,5,0,135,25,0,0,1,25,12,0,82,0,25,0,1,25,0,0,14,1,0,25,120,1,3,0,137,24,0,0,139,0,0,0,134,12,0,0,228,111,6,0,61,26,0,0,137,136,136,60,134,25,0,0,120,5,6,0,12,26,0,0,1,21,0,0,1,25,16,0,82,14,25,0,33,15,14,0,120,15,3,0,137,24,0,0,139,0,0,0,1,25,20,0,82,16,25,0,1,25,0,0,14,17,16,25,120,17,5,0,134,18,0,0,0,167,2,0,1,25,20,0,85,25,18,0,1,26,32,0,134,25,0,0,92,196,5,0,26,0,0,0,1,25,24,0,134,19,0,0,76,59,6,0,25,0,0,0,33,20,19,0,120,20,8,0,1,25,28,0,82,2,25,0,0,21,2,0,0,3,21,0,134,25,0,0,60,70,6,0,3,0,0,0,1,26,32,0,134,25,0,0,196,97,6,0,26,0,0,0,0,4,21,0,1,25,0,0,14,5,4,25,120,5,2,0,119,0,16,0,0,6,21,0,0,22,6,0,1,25,20,0,82,7,25,0,0,8,22,0,25,9,8,8,134,25,0,0,80,242,5,0,7,9,0,0,0,10,22,0,134,25,0,0,216,166,5,0,10,0,0,0,1,21,0,0,119,0,216,255,1,25,20,0,82,11,25,0,134,25,0,0,184,79,6,0,11,0,0,0,1,25,20,0,82,13,25,0,134,25,0,0,72,128,5,0,13,0,0,0,135,25,105,0,137,24,0,0,139,0,0,0,140,2,43,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,16,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,132,6,5,0,135,41,0,0,0,2,0,0,58,3,1,0,59,38,0,0,0,14,2,0,25,25,14,32,25,31,25,36,88,32,31,0,58,33,3,0,64,34,32,33,58,37,34,0,58,35,37,0,58,36,35,0,62,41,0,0,187,189,215,217,223,124,27,62,74,4,36,41,121,4,26,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,37,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,38,16,0,58,17,38,0,58,18,17,0,59,41,246,255,65,19,41,18,59,41,2,0,135,20,89,0,41,19,0,0,58,21,20,0,68,22,21,0,59,41,1,0,63,23,22,41,58,38,23,0,119,0,2,0,59,38,1,0,58,24,37,0,0,26,2,0,25,27,26,32,25,28,27,36,89,28,24,0,0,29,2,0,58,30,38,0,134,41,0,0,164,226,3,0,29,30,0,0,137,40,0,0,139,0,0,0,140,2,38,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,136,36,0,0,25,36,36,16,137,36,0,0,130,36,0,0,136,37,0,0,49,36,36,37,148,7,5,0,135,36,0,0,0,2,0,0,0,3,1,0,0,14,2,0,25,25,14,4,82,28,25,0,33,29,28,0,121,29,7,0,0,30,2,0,25,31,30,4,82,32,31,0,1,36,6,0,135,33,26,0,36,32,0,0,0,4,3,0,0,5,2,0,25,6,5,4,85,6,4,0,0,7,2,0,25,8,7,24,82,9,8,0,1,36,0,0,14,10,9,36,120,10,3,0,137,35,0,0,139,0,0,0,0,11,2,0,25,12,11,24,82,13,12,0,25,15,13,4,82,16,15,0,33,17,16,0,120,17,3,0,137,35,0,0,139,0,0,0,0,18,2,0,25,19,18,24,82,20,19,0,25,21,20,4,82,22,21,0,0,23,2,0,25,24,23,4,82,26,24,0,1,36,26,0,135,27,27,0,36,22,26,0,137,35,0,0,139,0,0,0,140,2,42,0,0,0,0,0,1,38,0,0,136,40,0,0,0,39,40,0,136,40,0,0,25,40,40,16,137,40,0,0,130,40,0,0,136,41,0,0,49,40,40,41,132,8,5,0,135,40,0,0,0,2,0,0,58,3,1,0,59,37,0,0,0,14,2,0,25,25,14,32,25,30,25,36,88,31,30,0,58,32,3,0,64,33,31,32,58,36,33,0,58,34,36,0,58,35,34,0,62,40,0,0,187,189,215,217,223,124,27,62,74,4,35,40,121,4,27,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,36,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,37,16,0,58,17,37,0,58,18,17,0,62,40,0,0,24,45,68,84,251,33,9,64,65,19,18,40,61,40,0,0,0,0,0,63,65,20,19,40,135,21,85,0,20,0,0,0,58,22,21,0,58,37,22,0,119,0,2,0,59,37,1,0,58,23,36,0,0,24,2,0,25,26,24,32,25,27,26,36,89,27,23,0,0,28,2,0,58,29,37,0,134,40,0,0,88,224,3,0,28,29,0,0,137,39,0,0,139,0,0,0,140,2,43,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,16,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,152,9,5,0,135,41,0,0,0,2,0,0,58,3,1,0,59,38,0,0,0,14,2,0,25,25,14,32,25,31,25,36,88,32,31,0,58,33,3,0,64,34,32,33,58,37,34,0,58,35,37,0,58,36,35,0,62,41,0,0,187,189,215,217,223,124,27,62,74,4,36,41,121,4,22,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,37,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,38,16,0,58,17,38,0,58,18,38,0,65,19,17,18,58,20,38,0,65,21,19,20,58,22,38,0,65,23,21,22,58,38,23,0,119,0,2,0,59,38,1,0,58,24,37,0,0,26,2,0,25,27,26,32,25,28,27,36,89,28,24,0,0,29,2,0,58,30,38,0,134,41,0,0,88,224,3,0,29,30,0,0,137,40,0,0,139,0,0,0,140,2,42,0,0,0,0,0,1,38,0,0,136,40,0,0,0,39,40,0,136,40,0,0,25,40,40,16,137,40,0,0,130,40,0,0,136,41,0,0,49,40,40,41,152,10,5,0,135,40,0,0,0,2,0,0,58,3,1,0,59,37,0,0,0,14,2,0,25,25,14,32,25,30,25,36,88,31,30,0,58,32,3,0,64,33,31,32,58,36,33,0,58,34,36,0,58,35,34,0,62,40,0,0,187,189,215,217,223,124,27,62,74,4,35,40,121,4,27,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,36,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,37,16,0,58,17,37,0,58,18,17,0,62,40,0,0,24,45,68,84,251,33,9,64,65,19,18,40,61,40,0,0,0,0,0,63,65,20,19,40,135,21,85,0,20,0,0,0,58,22,21,0,58,37,22,0,119,0,2,0,59,37,1,0,58,23,36,0,0,24,2,0,25,26,24,32,25,27,26,36,89,27,23,0,0,28,2,0,58,29,37,0,134,40,0,0,164,226,3,0,28,29,0,0,137,39,0,0,139,0,0,0,140,2,43,0,0,0,0,0,1,39,0,0,136,41,0,0,0,40,41,0,136,41,0,0,25,41,41,16,137,41,0,0,130,41,0,0,136,42,0,0,49,41,41,42,172,11,5,0,135,41,0,0,0,2,0,0,58,3,1,0,59,38,0,0,0,14,2,0,25,25,14,32,25,31,25,36,88,32,31,0,58,33,3,0,64,34,32,33,58,37,34,0,58,35,37,0,58,36,35,0,62,41,0,0,187,189,215,217,223,124,27,62,74,4,36,41,121,4,22,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,37,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,38,16,0,58,17,38,0,58,18,38,0,65,19,17,18,58,20,38,0,65,21,19,20,58,22,38,0,65,23,21,22,58,38,23,0,119,0,2,0,59,38,1,0,58,24,37,0,0,26,2,0,25,27,26,32,25,28,27,36,89,28,24,0,0,29,2,0,58,30,38,0,134,41,0,0,164,226,3,0,29,30,0,0,137,40,0,0,139,0,0,0,140,2,42,0,0,0,0,0,1,38,0,0,136,40,0,0,0,39,40,0,136,40,0,0,25,40,40,16,137,40,0,0,130,40,0,0,136,41,0,0,49,40,40,41,172,12,5,0,135,40,0,0,0,2,0,0,58,3,1,0,59,37,0,0,0,14,2,0,25,25,14,32,25,30,25,36,88,31,30,0,58,32,3,0,64,33,31,32,58,36,33,0,58,34,36,0,58,35,34,0,62,40,0,0,187,189,215,217,223,124,27,62,74,4,35,40,121,4,25,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,36,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,37,16,0,58,17,37,0,59,40,1,0,64,18,17,40,58,19,18,0,59,40,10,0,65,20,40,19,59,40,2,0,135,21,89,0,40,20,0,0,58,22,21,0,58,37,22,0,119,0,2,0,59,37,1,0,58,23,36,0,0,24,2,0,25,26,24,32,25,27,26,36,89,27,23,0,0,28,2,0,58,29,37,0,134,40,0,0,88,224,3,0,28,29,0,0,137,39,0,0,139,0,0,0,140,2,37,0,0,0,0,0,1,33,0,0,136,35,0,0,0,34,35,0,136,35,0,0,25,35,35,32,137,35,0,0,130,35,0,0,136,36,0,0,49,35,35,36,184,13,5,0,135,35,0,0,0,2,0,0,0,3,1,0,0,14,2,0,25,23,14,8,135,24,32,0,23,0,0,0,0,31,24,0,1,35,16,0,135,25,32,0,35,0,0,0,0,32,25,0,0,26,31,0,0,27,32,0,25,28,27,12,85,28,26,0,1,35,4,0,135,29,32,0,35,0,0,0,0,4,32,0,25,5,4,8,85,5,29,0,0,6,32,0,25,7,6,8,82,8,7,0,1,35,0,0,85,8,35,0,1,36,60,0,134,35,0,0,196,195,5,0,36,0,0,0,0,9,32,0,0,10,3,0,27,35,10,28,25,11,35,68,25,12,11,8,134,35,0,0,212,34,6,0,9,12,0,0,1,36,60,0,134,35,0,0,144,96,6,0,36,0,0,0,0,13,31,0,0,30,13,0,0,15,32,0,0,16,30,0,25,17,16,16,85,17,15,0,0,18,30,0,25,19,18,8,1,35,0,0,85,19,35,0,1,36,60,0,134,35,0,0,196,195,5,0,36,0,0,0,0,20,30,0,0,21,3,0,27,35,21,28,25,22,35,68,134,35,0,0,84,183,5,0,20,22,0,0,1,36,60,0,134,35,0,0,144,96,6,0,36,0,0,0,137,34,0,0,139,0,0,0,140,2,42,0,0,0,0,0,1,38,0,0,136,40,0,0,0,39,40,0,136,40,0,0,25,40,40,16,137,40,0,0,130,40,0,0,136,41,0,0,49,40,40,41,0,15,5,0,135,40,0,0,0,2,0,0,58,3,1,0,59,37,0,0,0,14,2,0,25,25,14,32,25,30,25,36,88,31,30,0,58,32,3,0,64,33,31,32,58,36,33,0,58,34,36,0,58,35,34,0,62,40,0,0,187,189,215,217,223,124,27,62,74,4,35,40,121,4,25,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,36,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,37,16,0,58,17,37,0,59,40,1,0,64,18,17,40,58,19,18,0,59,40,10,0,65,20,40,19,59,40,2,0,135,21,89,0,40,20,0,0,58,22,21,0,58,37,22,0,119,0,2,0,59,37,1,0,58,23,36,0,0,24,2,0,25,26,24,32,25,27,26,36,89,27,23,0,0,28,2,0,58,29,37,0,134,40,0,0,164,226,3,0,28,29,0,0,137,39,0,0,139,0,0,0,140,1,26,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,12,16,5,0,135,24,0,0,0,2,0,0,0,13,2,0,1,24,52,1,3,15,13,24,82,16,15,0,1,25,0,0,134,24,0,0,180,61,5,0,16,25,0,0,0,17,2,0,1,24,60,1,3,18,17,24,82,19,18,0,1,24,0,0,1,25,2,0,138,19,24,25,92,16,5,0,136,16,5,0,1,22,5,0,119,0,32,0,0,7,2,0,1,24,0,0,134,8,0,0,100,109,5,0,7,24,0,0,33,9,8,0,121,9,3,0,1,22,5,0,119,0,23,0,1,22,6,0,119,0,21,0,0,20,2,0,1,24,0,0,134,21,0,0,100,109,5,0,20,24,0,0,33,3,21,0,121,3,12,0,0,4,2,0,1,24,2,0,134,5,0,0,100,109,5,0,4,24,0,0,33,6,5,0,121,6,3,0,1,22,5,0,119,0,5,0,1,22,6,0,119,0,3,0,1,22,6,0,119,0,1,0,32,24,22,5,121,24,6,0,1,1,1,0,0,14,1,0,137,23,0,0,139,14,0,0,119,0,15,0,32,24,22,6,121,24,13,0,0,10,2,0,1,24,52,1,3,11,10,24,82,12,11,0,1,25,0,0,134,24,0,0,180,61,5,0,12,25,0,0,1,1,0,0,0,14,1,0,137,23,0,0,139,14,0,0,1,24,0,0,139,24,0,0,140,1,32,0,0,0,0,0,1,28,0,0,136,30,0,0,0,29,30,0,25,2,0,76,82,3,2,0,1,30,255,255,15,14,30,3,121,14,4,0,134,30,0,0,196,122,6,0,0,0,0,0,82,21,0,0,38,30,21,1,0,22,30,0,33,23,22,0,120,23,30,0,1,31,68,6,135,30,35,0,31,0,0,0,25,24,0,52,82,25,24,0,1,30,0,0,13,26,25,30,0,27,25,0,25,1,0,56,120,26,4,0,82,4,1,0,25,5,25,56,85,5,4,0,82,6,1,0,1,30,0,0,13,7,6,30,0,8,6,0,120,7,3,0,25,9,6,52,85,9,27,0,1,30,64,6,82,10,30,0,13,11,10,0,121,11,3,0,1,30,64,6,85,30,8,0,1,31,68,6,135,30,36,0,31,0,0,0,134,12,0,0,68,129,4,0,0,0,0,0,25,13,0,12,82,15,13,0,38,30,15,3,135,16,106,0,30,0,0,0,20,30,16,12,0,17,30,0,25,18,0,92,82,19,18,0,1,30,0,0,13,20,19,30,120,20,3,0,135,30,22,0,19,0,0,0,120,23,3,0,135,30,22,0,0,0,0,0,139,17,0,0,140,2,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,32,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,120,18,5,0,135,21,0,0,25,16,20,16,0,15,20,0,78,3,1,0,41,21,3,24,42,21,21,24,0,4,21,0,1,21,4,45,1,22,4,0,134,14,0,0,224,221,3,0,21,4,22,0,1,22,0,0,13,6,14,22,121,6,7,0,134,7,0,0,80,88,6,0,1,22,22,0,85,7,22,0,1,2,0,0,119,0,37,0,134,8,0,0,96,115,5,0,1,0,0,0,2,22,0,0,0,128,0,0,20,22,8,22,0,9,22,0,85,15,0,0,25,17,15,4,85,17,9,0,25,18,15,8,1,22,182,1,85,18,22,0,1,22,5,0,135,10,107,0,22,15,0,0,134,11,0,0,156,93,6,0,10,0,0,0,34,12,11,0,121,12,3,0,1,2,0,0,119,0,14,0,134,13,0,0,124,186,3,0,11,1,0,0,1,22,0,0,13,5,13,22,121,5,7,0,85,16,11,0,1,21,6,0,135,22,108,0,21,16,0,0,1,2,0,0,119,0,2,0,0,2,13,0,137,20,0,0,139,2,0,0,140,1,34,0,0,0,0,0,2,31,0,0,52,1,0,0,1,29,0,0,136,32,0,0,0,30,32,0,136,32,0,0,25,32,32,32,137,32,0,0,130,32,0,0,136,33,0,0,49,32,32,33,156,19,5,0,135,32,0,0,0,2,0,0,0,13,2,0,0,28,13,0,0,19,28,0,1,32,32,1,3,20,19,32,134,21,0,0,188,53,6,0,20,0,0,0,33,22,21,0,0,23,28,0,120,22,3,0,1,29,3,0,119,0,19,0,3,7,23,31,134,8,0,0,188,53,6,0,7,0,0,0,33,9,8,0,121,9,3,0,1,29,6,0,119,0,11,0,0,10,28,0,3,11,10,31,25,12,11,4,82,14,12,0,0,27,14,0,0,15,27,0,25,16,15,16,82,17,16,0,0,28,17,0,119,0,228,255,32,32,29,3,121,32,14,0,1,32,32,1,3,24,23,32,25,25,24,4,82,3,25,0,0,26,3,0,0,4,26,0,25,5,4,16,82,6,5,0,0,1,6,0,0,18,1,0,137,30,0,0,139,18,0,0,119,0,7,0,32,32,29,6,121,32,5,0,1,1,0,0,0,18,1,0,137,30,0,0,139,18,0,0,1,32,0,0,139,32,0,0,140,4,41,0,0,0,0,0,1,37,0,0,136,39,0,0,0,38,39,0,136,39,0,0,25,39,39,32,137,39,0,0,130,39,0,0,136,40,0,0,49,39,39,40,172,20,5,0,135,39,0,0,0,30,38,0,0,14,0,0,0,25,1,0,0,31,30,0,0,32,31,0,85,32,2,0,25,33,31,4,0,34,33,0,85,34,3,0,0,35,30,0,0,4,35,0,82,5,4,0,25,6,35,4,0,7,6,0,82,8,7,0,0,9,14,0,25,10,9,16,0,11,10,0,0,12,11,0,85,12,5,0,25,13,11,4,0,15,13,0,85,15,8,0,0,16,14,0,134,17,0,0,80,249,5,0,16,0,0,0,0,36,17,0,0,18,14,0,134,39,0,0,4,171,5,0,18,0,0,0,0,19,36,0,0,20,30,0,0,21,20,0,82,22,21,0,25,23,20,4,0,24,23,0,82,26,24,0,0,27,25,0,0,28,14,0,134,29,0,0,68,248,5,0,28,0,0,0,135,39,109,0,19,22,27,29,137,38,0,0,139,0,0,0,140,1,34,0,0,0,0,0,2,31,0,0,32,1,0,0,1,29,0,0,136,32,0,0,0,30,32,0,136,32,0,0,25,32,32,32,137,32,0,0,130,32,0,0,136,33,0,0,49,32,32,33,168,21,5,0,135,32,0,0,0,2,0,0,0,13,2,0,0,28,13,0,0,19,28,0,1,32,52,1,3,20,19,32,134,21,0,0,188,53,6,0,20,0,0,0,33,22,21,0,0,23,28,0,120,22,3,0,1,29,3,0,119,0,19,0,3,7,23,31,134,8,0,0,188,53,6,0,7,0,0,0,33,9,8,0,121,9,3,0,1,29,6,0,119,0,11,0,0,10,28,0,3,11,10,31,25,12,11,4,82,14,12,0,0,27,14,0,0,15,27,0,25,16,15,16,82,17,16,0,0,28,17,0,119,0,228,255,32,32,29,3,121,32,14,0,1,32,52,1,3,24,23,32,25,25,24,4,82,3,25,0,0,26,3,0,0,4,26,0,25,5,4,16,82,6,5,0,0,1,6,0,0,18,1,0,137,30,0,0,139,18,0,0,119,0,7,0,32,32,29,6,121,32,5,0,1,1,0,0,0,18,1,0,137,30,0,0,139,18,0,0,1,32,0,0,139,32,0,0,140,2,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,184,22,5,0,135,15,0,0,0,2,1,0,0,3,2,0,88,5,3,0,127,15,0,0,89,15,5,0,127,15,0,0,114,0,15,0,127,16,0,0,102,16,16,1,107,0,1,16,127,15,0,0,102,15,15,2,107,0,2,15,127,16,0,0,102,16,16,3,107,0,3,16,25,6,0,4,0,7,2,0,25,8,7,4,88,9,8,0,127,16,0,0,89,16,9,0,127,16,0,0,114,6,16,0,127,15,0,0,102,15,15,1,107,6,1,15,127,16,0,0,102,16,16,2,107,6,2,16,127,15,0,0,102,15,15,3,107,6,3,15,25,10,0,8,0,11,2,0,25,12,11,8,88,4,12,0,127,15,0,0,89,15,4,0,127,15,0,0,114,10,15,0,127,16,0,0,102,16,16,1,107,10,1,16,127,15,0,0,102,15,15,2,107,10,2,15,127,16,0,0,102,16,16,3,107,10,3,16,137,14,0,0,139,0,0,0,140,2,33,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,16,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,188,23,5,0,135,31,0,0,25,28,30,4,0,2,0,0,0,3,1,0,134,31,0,0,180,98,6,0,1,31,100,4,82,14,31,0,0,20,2,0,0,21,2,0,135,22,4,0,21,0,0,0,134,23,0,0,68,71,4,0,14,20,22,0,82,24,23,0,85,28,24,0,82,25,28,0,1,31,0,0,14,26,25,31,121,26,4,0,82,19,28,0,137,30,0,0,139,19,0,0,0,4,2,0,0,5,3,0,134,6,0,0,72,184,4,0,4,5,0,0,0,27,6,0,0,7,27,0,134,8,0,0,60,239,4,0,7,0,0,0,85,28,8,0,0,9,27,0,134,31,0,0,144,80,6,0,9,0,0,0,1,31,100,4,82,10,31,0,0,11,2,0,0,12,2,0,135,13,4,0,12,0,0,0,134,31,0,0,216,19,4,0,10,11,13,28,82,15,28,0,25,16,15,4,80,17,16,0,25,31,17,1,41,31,31,16,42,31,31,16,0,18,31,0,84,16,18,0,82,19,28,0,137,30,0,0,139,19,0,0,140,2,41,0,0,0,0,0,1,37,0,0,136,39,0,0,0,38,39,0,136,39,0,0,25,39,39,16,137,39,0,0,130,39,0,0,136,40,0,0,49,39,39,40,216,24,5,0,135,39,0,0,0,2,0,0,58,3,1,0,59,36,0,0,0,14,2,0,25,25,14,32,25,29,25,36,88,30,29,0,58,31,3,0,64,32,30,31,58,35,32,0,58,33,35,0,58,34,33,0,62,39,0,0,187,189,215,217,223,124,27,62,74,4,34,39,121,4,20,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,35,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,36,16,0,58,17,36,0,58,18,36,0,65,19,17,18,58,20,36,0,65,21,19,20,58,36,21,0,119,0,2,0,59,36,1,0,58,22,35,0,0,23,2,0,25,24,23,32,25,26,24,36,89,26,22,0,0,27,2,0,58,28,36,0,134,39,0,0,88,224,3,0,27,28,0,0,137,38,0,0,139,0,0,0,140,2,41,0,0,0,0,0,1,37,0,0,136,39,0,0,0,38,39,0,136,39,0,0,25,39,39,16,137,39,0,0,130,39,0,0,136,40,0,0,49,39,39,40,208,25,5,0,135,39,0,0,0,2,0,0,58,3,1,0,59,36,0,0,0,14,2,0,25,25,14,32,25,29,25,36,88,30,29,0,58,31,3,0,64,32,30,31,58,35,32,0,58,33,35,0,58,34,33,0,62,39,0,0,187,189,215,217,223,124,27,62,74,4,34,39,121,4,20,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,35,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,36,16,0,58,17,36,0,58,18,36,0,65,19,17,18,58,20,36,0,65,21,19,20,58,36,21,0,119,0,2,0,59,36,1,0,58,22,35,0,0,23,2,0,25,24,23,32,25,26,24,36,89,26,22,0,0,27,2,0,58,28,36,0,134,39,0,0,164,226,3,0,27,28,0,0,137,38,0,0,139,0,0,0,140,1,29,0,0,0,0,0,1,15,0,0,136,19,0,0,0,16,19,0,136,19,0,0,1,20,16,1,3,19,19,20,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,204,26,5,0,135,19,0,0,25,11,16,72,25,13,16,8,1,19,200,0,3,12,16,19,1,19,136,0,3,10,16,19,0,1,0,0,1,19,140,4,82,2,19,0,76,19,2,0,58,3,19,0,1,19,144,4,82,4,19,0,76,19,4,0,58,5,19,0,59,20,0,0,59,21,0,0,59,22,0,0,59,23,2,0,134,19,0,0,192,78,3,0,12,20,3,21,5,22,23,0,59,23,0,0,59,22,0,0,59,21,1,0,59,20,0,0,59,24,0,0,59,25,0,0,59,26,0,0,59,27,1,0,59,28,0,0,134,19,0,0,20,63,2,0,10,23,22,21,20,24,25,26,27,28,0,0,0,14,13,0,0,17,12,0,25,18,14,64,82,19,17,0,85,14,19,0,25,14,14,4,25,17,17,4,54,19,14,18,108,27,5,0,0,14,11,0,0,17,10,0,25,18,14,64,82,19,17,0,85,14,19,0,25,14,14,4,25,17,17,4,54,19,14,18,144,27,5,0,134,6,0,0,236,122,5,0,13,11,0,0,0,7,1,0,25,8,7,8,25,9,8,4,85,9,6,0,137,16,0,0,139,0,0,0,140,6,37,0,0,0,0,0,1,33,0,0,136,35,0,0,0,34,35,0,136,35,0,0,25,35,35,32,137,35,0,0,130,35,0,0,136,36,0,0,49,35,35,36,0,28,5,0,135,35,0,0,0,32,34,0,0,6,0,0,0,7,1,0,0,18,2,0,0,25,3,0,0,26,4,0,0,27,5,0,0,28,6,0,82,29,28,0,0,30,7,0,0,31,18,0,134,8,0,0,68,71,4,0,29,30,31,0,82,9,8,0,85,32,9,0,82,10,32,0,1,35,0,0,14,11,10,35,121,11,6,0,82,17,32,0,134,35,0,0,52,235,3,0,17,0,0,0,119,0,11,0,134,12,0,0,20,83,6,0,85,32,12,0,0,13,6,0,82,14,13,0,0,15,7,0,0,16,18,0,134,35,0,0,216,19,4,0,14,15,16,32,0,19,25,0,82,20,32,0,83,20,19,0,82,21,32,0,25,22,21,8,0,23,26,0,0,24,27,0,134,35,0,0,160,232,5,0,22,23,24,0,137,34,0,0,139,0,0,0,140,4,35,0,0,0,0,0,1,31,0,0,136,33,0,0,0,32,33,0,136,33,0,0,25,33,33,16,137,33,0,0,130,33,0,0,136,34,0,0,49,33,33,34,240,28,5,0,135,33,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,24,3,0,0,25,5,0,25,26,25,12,82,27,26,0,25,28,27,4,82,29,28,0,1,33,212,31,134,30,0,0,208,147,5,0,29,33,0,0,32,6,30,0,120,6,30,0,0,7,5,0,25,8,7,12,82,9,8,0,25,10,9,4,82,11,10,0,1,33,112,31,134,12,0,0,208,147,5,0,11,33,0,0,32,13,12,0,120,13,19,0,0,14,5,0,25,15,14,12,82,17,15,0,25,18,17,4,82,19,18,0,1,33,121,31,134,20,0,0,208,147,5,0,19,33,0,0,32,21,20,0,120,21,8,0,0,23,4,0,1,34,0,0,134,33,0,0,8,231,5,0,23,34,0,0,137,32,0,0,139,0,0,0,0,22,4,0,1,34,1,0,134,33,0,0,8,231,5,0,22,34,0,0,137,32,0,0,139,0,0,0,140,1,34,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,32,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,240,29,5,0,135,31,0,0,25,2,30,8,25,13,30,4,0,21,30,0,0,1,0,0,1,31,28,0,1,32,26,0,134,22,0,0,168,171,5,0,31,32,0,0,0,28,22,0,0,23,28,0,134,32,0,0,172,38,6,0,23,0,0,0,0,24,28,0,25,25,24,8,1,32,27,0,85,25,32,0,0,26,1,0,0,27,28,0,25,3,27,16,85,3,26,0,1,32,0,0,134,4,0,0,148,94,6,0,32,0,0,0,0,5,28,0,25,6,5,24,85,6,4,0,1,32,4,0,134,7,0,0,236,195,4,0,32,0,0,0,0,8,28,0,25,9,8,20,85,9,7,0,0,10,28,0,25,11,10,20,82,12,11,0,1,32,28,0,85,2,32,0,1,31,202,12,1,33,9,0,134,32,0,0,216,19,4,0,12,31,33,2,0,14,28,0,25,15,14,20,82,16,15,0,1,32,29,0,85,13,32,0,1,33,212,12,1,31,16,0,134,32,0,0,216,19,4,0,16,33,31,13,0,17,28,0,25,18,17,20,82,19,18,0,1,32,30,0,85,21,32,0,1,31,229,12,1,33,26,0,134,32,0,0,216,19,4,0,19,31,33,21,0,20,28,0,137,30,0,0,139,20,0,0,140,2,40,0,0,0,0,0,1,36,0,0,136,38,0,0,0,37,38,0,136,38,0,0,25,38,38,16,137,38,0,0,130,38,0,0,136,39,0,0,49,38,38,39,56,31,5,0,135,38,0,0,0,2,0,0,58,3,1,0,59,35,0,0,0,14,2,0,25,25,14,32,25,28,25,36,88,29,28,0,58,30,3,0,64,31,29,30,58,34,31,0,58,32,34,0,58,33,32,0,62,38,0,0,187,189,215,217,223,124,27,62,74,4,33,38,121,4,20,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,34,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,35,16,0,58,17,35,0,58,18,35,0,59,38,2,0,64,19,38,18,65,20,17,19,58,35,20,0,119,0,2,0,59,35,1,0,58,21,34,0,0,22,2,0,25,23,22,32,25,24,23,36,89,24,21,0,0,26,2,0,58,27,35,0,134,38,0,0,88,224,3,0,26,27,0,0,137,37,0,0,139,0,0,0,140,2,40,0,0,0,0,0,1,36,0,0,136,38,0,0,0,37,38,0,136,38,0,0,25,38,38,16,137,38,0,0,130,38,0,0,136,39,0,0,49,38,38,39,48,32,5,0,135,38,0,0,0,2,0,0,58,3,1,0,59,35,0,0,0,14,2,0,25,25,14,32,25,28,25,36,88,29,28,0,58,30,3,0,64,31,29,30,58,34,31,0,58,32,34,0,58,33,32,0,62,38,0,0,187,189,215,217,223,124,27,62,74,4,33,38,121,4,20,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,34,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,35,16,0,58,17,35,0,58,18,35,0,59,38,2,0,64,19,38,18,65,20,17,19,58,35,20,0,119,0,2,0,59,35,1,0,58,21,34,0,0,22,2,0,25,23,22,32,25,24,23,36,89,24,21,0,0,26,2,0,58,27,35,0,134,38,0,0,164,226,3,0,26,27,0,0,137,37,0,0,139,0,0,0,140,4,35,0,0,0,0,0,1,31,0,0,136,33,0,0,0,32,33,0,136,33,0,0,25,33,33,32,137,33,0,0,130,33,0,0,136,34,0,0,49,33,33,34,40,33,5,0,135,33,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,22,3,0,0,23,16,0,0,29,23,0,0,24,29,0,1,33,0,0,14,25,24,33,120,25,3,0,1,31,6,0,119,0,24,0,0,26,29,0,0,27,5,0,25,28,27,12,82,6,28,0,25,7,6,4,82,8,7,0,0,9,5,0,25,10,9,12,82,11,10,0,82,12,11,0,134,13,0,0,76,48,5,0,26,8,12,0,0,30,13,0,0,14,30,0,1,33,0,0,14,15,14,33,120,15,6,0,0,19,29,0,25,20,19,24,82,21,20,0,0,29,21,0,119,0,228,255,32,33,31,6,121,33,3,0,137,32,0,0,139,0,0,0,0,17,4,0,0,18,30,0,134,33,0,0,124,114,5,0,17,18,0,0,137,32,0,0,139,0,0,0,140,4,35,0,0,0,0,0,1,31,0,0,136,33,0,0,0,32,33,0,136,33,0,0,25,33,33,32,137,33,0,0,130,33,0,0,136,34,0,0,49,33,33,34,20,34,5,0,135,33,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,22,3,0,0,23,16,0,0,29,23,0,0,24,29,0,1,33,0,0,14,25,24,33,120,25,3,0,1,31,6,0,119,0,24,0,0,26,29,0,0,27,5,0,25,28,27,12,82,6,28,0,25,7,6,4,82,8,7,0,0,9,5,0,25,10,9,12,82,11,10,0,82,12,11,0,134,13,0,0,76,48,5,0,26,8,12,0,0,30,13,0,0,14,30,0,1,33,0,0,14,15,14,33,120,15,6,0,0,19,29,0,25,20,19,24,82,21,20,0,0,29,21,0,119,0,228,255,32,33,31,6,121,33,3,0,137,32,0,0,139,0,0,0,0,17,4,0,0,18,30,0,134,33,0,0,108,116,5,0,17,18,0,0,137,32,0,0,139,0,0,0,140,2,29,0,0,0,0,0,1,25,0,0,136,27,0,0,0,26,27,0,1,27,255,3,15,5,27,1,121,5,27,0,62,27,0,0,0,0,0,0,0,0,224,127,65,6,0,27,1,27,255,3,4,16,1,27,1,27,255,3,15,17,27,16,121,17,15,0,62,27,0,0,0,0,0,0,0,0,224,127,65,18,6,27,1,27,254,7,4,19,1,27,1,27,255,3,15,20,27,19,1,27,255,3,125,2,20,27,19,0,0,0,0,3,2,0,58,24,18,0,119,0,35,0,0,3,16,0,58,24,6,0,119,0,32,0,1,27,2,252,15,21,1,27,121,21,27,0,62,27,0,0,0,0,0,0,0,0,16,0,65,22,0,27,1,27,254,3,3,23,1,27,1,27,2,252,15,7,23,27,121,7,15,0,62,27,0,0,0,0,0,0,0,0,16,0,65,8,22,27,1,27,252,7,3,9,1,27,1,27,2,252,15,10,9,27,1,27,2,252,125,4,10,27,9,0,0,0,0,3,4,0,58,24,8,0,119,0,6,0,0,3,23,0,58,24,22,0,119,0,3,0,0,3,1,0,58,24,0,0,1,27,255,3,3,11,3,27,1,27,0,0,1,28,52,0,135,12,1,0,11,27,28,0,128,28,0,0,0,13,28,0,127,28,0,0,85,28,12,0,127,28,0,0,109,28,4,13,127,28,0,0,86,14,28,0,65,15,24,14,139,15,0,0,140,2,34,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,32,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,68,36,5,0,135,31,0,0,0,2,0,0,0,3,1,0,134,14,0,0,44,129,5,0,0,28,14,0,1,27,0,0,134,18,0,0,4,113,6,0,0,26,18,0,0,19,26,0,1,31,255,0,19,31,19,31,0,20,31,0,32,25,20,2,120,25,3,0,137,30,0,0,139,0,0,0,0,21,3,0,25,22,21,12,82,23,22,0,25,24,23,4,82,4,24,0,1,31,240,31,134,5,0,0,208,147,5,0,4,31,0,0,32,6,5,0,121,6,32,0,1,32,3,0,134,31,0,0,120,97,6,0,32,0,0,0,0,7,3,0,25,8,7,20,82,9,8,0,1,31,157,12,1,32,18,0,1,33,2,0,134,10,0,0,28,203,4,0,9,31,32,33,0,27,10,0,0,11,28,0,0,12,27,0,25,13,12,4,82,15,13,0,0,16,27,0,82,17,16,0,1,32,193,13,1,31,9,0,134,33,0,0,104,199,5,0,11,32,31,15,17,0,0,0,134,33,0,0,240,228,3,0,137,30,0,0,139,0,0,0,119,0,7,0,1,31,0,0,134,33,0,0,120,97,6,0,31,0,0,0,137,30,0,0,139,0,0,0,139,0,0,0,140,1,23,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,1,14,0,0,1,22,133,36,3,3,22,14,78,6,3,0,1,22,255,0,19,22,6,22,0,7,22,0,13,8,7,0,121,8,4,0,0,15,14,0,1,20,2,0,119,0,10,0,25,9,14,1,32,10,9,87,121,10,5,0,1,16,87,0,1,18,221,36,1,20,5,0,119,0,3,0,0,14,9,0,119,0,237,255,32,22,20,2,121,22,8,0,32,2,15,0,121,2,3,0,1,17,221,36,119,0,4,0,0,16,15,0,1,18,221,36,1,20,5,0,32,22,20,5,121,22,22,0,1,20,0,0,0,19,18,0,78,11,19,0,41,22,11,24,42,22,22,24,32,12,22,0,25,13,19,1,121,12,3,0,0,1,13,0,119,0,3,0,0,19,13,0,119,0,247,255,26,4,16,1,32,5,4,0,121,5,3,0,0,17,1,0,119,0,5,0,0,16,4,0,0,18,1,0,1,20,5,0,119,0,236,255,139,17,0,0,140,2,34,0,0,0,0,0,1,30,0,0,136,32,0,0,0,31,32,0,136,32,0,0,25,32,32,16,137,32,0,0,130,32,0,0,136,33,0,0,49,32,32,33,108,38,5,0,135,32,0,0,0,2,0,0,0,3,1,0,0,14,2,0,25,21,14,32,134,22,0,0,188,53,6,0,21,0,0,0,33,23,22,0,121,23,11,0,134,24,0,0,180,76,6,0,0,28,24,0,0,25,28,0,25,26,25,4,0,27,2,0,25,4,27,32,134,32,0,0,160,45,6,0,26,4,0,0,0,5,2,0,25,6,5,32,25,7,6,4,82,8,7,0,26,9,8,4,0,29,9,0,0,10,29,0,78,11,10,0,1,32,255,0,19,32,11,32,0,12,32,0,0,13,3,0,1,32,255,0,19,32,13,32,0,15,32,0,14,16,12,15,120,16,6,0,0,19,3,0,0,20,29,0,83,20,19,0,137,31,0,0,139,0,0,0,0,17,2,0,25,18,17,44,1,32,3,0,85,18,32,0,0,19,3,0,0,20,29,0,83,20,19,0,137,31,0,0,139,0,0,0,140,2,33,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,32,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,104,39,5,0,135,31,0,0,0,3,0,0,0,14,1,0,0,20,3,0,25,21,20,8,25,22,21,4,82,23,22,0,0,28,23,0,0,24,28,0,0,25,3,0,25,26,25,8,14,4,24,26,120,4,3,0,1,29,6,0,119,0,21,0,0,5,28,0,0,27,5,0,0,6,27,0,25,7,6,8,82,8,7,0,25,9,8,4,82,10,9,0,0,11,14,0,134,12,0,0,208,147,5,0,10,11,0,0,32,13,12,0,121,13,3,0,1,29,4,0,119,0,6,0,0,16,28,0,25,17,16,4,82,18,17,0,0,28,18,0,119,0,230,255,32,31,29,4,121,31,7,0,0,15,27,0,0,2,15,0], eb + 327680);
  HEAPU8.set([0,19,2,0,137,30,0,0,139,19,0,0,119,0,7,0,32,31,29,6,121,31,5,0,1,2,0,0,0,19,2,0,137,30,0,0,139,19,0,0,1,31,0,0,139,31,0,0,140,2,39,0,0,0,0,0,1,35,0,0,136,37,0,0,0,36,37,0,136,37,0,0,25,37,37,16,137,37,0,0,130,37,0,0,136,38,0,0,49,37,37,38,100,40,5,0,135,37,0,0,0,2,0,0,58,3,1,0,59,34,0,0,0,14,2,0,25,25,14,32,25,27,25,36,88,28,27,0,58,29,3,0,64,30,28,29,58,33,30,0,58,31,33,0,58,32,31,0,62,37,0,0,187,189,215,217,223,124,27,62,74,4,32,37,121,4,18,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,33,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,34,16,0,58,17,34,0,58,18,34,0,65,19,17,18,58,34,19,0,119,0,2,0,59,34,1,0,58,20,33,0,0,21,2,0,25,22,21,32,25,23,22,36,89,23,20,0,0,24,2,0,58,26,34,0,134,37,0,0,88,224,3,0,24,26,0,0,137,36,0,0,139,0,0,0,140,4,35,0,0,0,0,0,1,31,0,0,136,33,0,0,0,32,33,0,136,33,0,0,25,33,33,16,137,33,0,0,130,33,0,0,136,34,0,0,49,33,33,34,84,41,5,0,135,33,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,24,3,0,0,25,4,0,25,26,25,24,82,27,26,0,1,33,0,0,14,28,27,33,121,28,17,0,0,29,4,0,25,30,29,28,82,6,30,0,1,33,0,0,14,7,6,33,121,7,11,0,0,8,4,0,25,9,8,28,82,10,9,0,0,11,4,0,25,12,11,24,82,13,12,0,1,34,255,0,19,34,10,34,135,33,9,0,34,13,0,0,0,14,16,0,0,15,4,0,25,17,15,24,85,17,14,0,0,18,24,0,0,19,4,0,25,20,19,28,85,20,18,0,0,21,5,0,0,22,4,0,25,23,22,20,85,23,21,0,137,32,0,0,139,0,0,0,140,2,39,0,0,0,0,0,1,35,0,0,136,37,0,0,0,36,37,0,136,37,0,0,25,37,37,16,137,37,0,0,130,37,0,0,136,38,0,0,49,37,37,38,40,42,5,0,135,37,0,0,0,2,0,0,58,3,1,0,59,34,0,0,0,14,2,0,25,25,14,32,25,27,25,36,88,28,27,0,58,29,3,0,64,30,28,29,58,33,30,0,58,31,33,0,58,32,31,0,62,37,0,0,187,189,215,217,223,124,27,62,74,4,32,37,121,4,18,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,33,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,34,16,0,58,17,34,0,58,18,34,0,65,19,17,18,58,34,19,0,119,0,2,0,59,34,1,0,58,20,33,0,0,21,2,0,25,22,21,32,25,23,22,36,89,23,20,0,0,24,2,0,58,26,34,0,134,37,0,0,164,226,3,0,24,26,0,0,137,36,0,0,139,0,0,0,140,2,32,0,0,0,0,0,1,28,0,0,136,30,0,0,0,29,30,0,136,30,0,0,1,31,32,16,3,30,30,31,137,30,0,0,130,30,0,0,136,31,0,0,49,30,30,31,28,43,5,0,135,30,0,0,0,27,29,0,25,23,29,32,0,3,0,0,0,14,1,0,0,16,3,0,0,17,14,0,1,30,4,19,134,18,0,0,24,138,5,0,16,30,17,0,0,25,18,0,0,19,25,0,25,20,19,4,82,21,20,0,1,30,0,0,14,22,21,30,120,22,15,0,0,4,3,0,85,27,4,0,1,31,77,14,134,30,0,0,44,77,6,0,31,27,0,0,0,5,25,0,134,30,0,0,212,0,6,0,5,0,0,0,1,2,0,0,0,15,2,0,137,29,0,0,139,15,0,0,1,30,0,0,134,6,0,0,148,94,6,0,30,0,0,0,0,26,6,0,1,24,0,0,0,7,25,0,1,30,0,16,134,8,0,0,40,4,6,0,7,30,23,0,0,24,8,0,33,9,8,0,120,9,2,0,119,0,7,0,0,10,26,0,0,11,24,0,134,30,0,0,128,39,6,0,10,23,11,0,119,0,242,255,0,12,25,0,134,30,0,0,212,0,6,0,12,0,0,0,0,13,26,0,0,2,13,0,0,15,2,0,137,29,0,0,139,15,0,0,140,2,33,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,16,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,68,44,5,0,135,31,0,0,0,2,0,0,0,3,1,0,0,14,3,0,25,20,14,48,134,21,0,0,96,53,6,0,20,0,0,0,33,22,21,0,120,22,15,0,0,23,3,0,25,24,23,48,25,25,24,4,82,26,25,0,0,27,26,0,0,4,3,0,25,5,4,48,134,31,0,0,228,17,6,0,5,0,0,0,0,6,27,0,134,31,0,0,120,189,3,0,6,0,0,0,0,7,2,0,134,8,0,0,96,53,6,0,7,0,0,0,33,9,8,0,121,9,9,0,0,17,3,0,25,18,17,48,0,19,2,0,134,31,0,0,64,45,6,0,18,19,0,0,137,30,0,0,139,0,0,0,0,10,2,0,25,11,10,4,82,12,11,0,26,13,12,48,0,28,13,0,0,15,2,0,134,31,0,0,228,17,6,0,15,0,0,0,0,16,28,0,134,31,0,0,228,94,6,0,16,0,0,0,0,17,3,0,25,18,17,48,0,19,2,0,134,31,0,0,64,45,6,0,18,19,0,0,137,30,0,0,139,0,0,0,140,1,33,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,16,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,96,45,5,0,135,31,0,0,0,1,0,0,0,2,1,0,25,13,2,16,134,20,0,0,44,55,6,0,13,0,0,0,33,21,20,0,120,21,18,0,0,22,1,0,25,23,22,16,25,24,23,4,82,25,24,0,0,28,25,0,1,31,0,0,14,26,25,31,120,26,2,0,119,0,9,0,0,3,28,0,26,4,3,8,0,27,4,0,0,5,27,0,134,31,0,0,44,45,5,0,5,0,0,0,119,0,233,255,0,6,1,0,25,7,6,8,134,31,0,0,0,67,6,0,7,0,0,0,0,8,1,0,134,31,0,0,0,67,6,0,8,0,0,0,0,9,1,0,25,10,9,24,78,11,10,0,1,31,255,0,19,31,11,31,0,12,31,0,32,14,12,22,120,14,7,0,0,19,1,0,134,31,0,0,216,166,5,0,19,0,0,0,137,30,0,0,139,0,0,0,0,15,1,0,25,16,15,32,25,17,16,12,82,18,17,0,134,31,0,0,180,1,6,0,18,0,0,0,0,19,1,0,134,31,0,0,216,166,5,0,19,0,0,0,137,30,0,0,139,0,0,0,140,1,33,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,16,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,136,46,5,0,135,31,0,0,0,1,0,0,0,2,1,0,25,13,2,16,134,20,0,0,136,55,6,0,13,0,0,0,33,21,20,0,120,21,18,0,0,22,1,0,25,23,22,16,25,24,23,4,82,25,24,0,0,28,25,0,1,31,0,0,14,26,25,31,120,26,2,0,119,0,9,0,0,3,28,0,26,4,3,8,0,27,4,0,0,5,27,0,134,31,0,0,84,46,5,0,5,0,0,0,119,0,233,255,0,6,1,0,25,7,6,8,134,31,0,0,96,67,6,0,7,0,0,0,0,8,1,0,134,31,0,0,96,67,6,0,8,0,0,0,0,9,1,0,25,10,9,24,78,11,10,0,1,31,255,0,19,31,11,31,0,12,31,0,32,14,12,22,120,14,7,0,0,19,1,0,134,31,0,0,216,166,5,0,19,0,0,0,137,30,0,0,139,0,0,0,0,15,1,0,25,16,15,32,25,17,16,12,82,18,17,0,134,31,0,0,180,1,6,0,18,0,0,0,0,19,1,0,134,31,0,0,216,166,5,0,19,0,0,0,137,30,0,0,139,0,0,0,140,4,35,0,0,0,0,0,1,31,0,0,136,33,0,0,0,32,33,0,136,33,0,0,25,33,33,32,137,33,0,0,130,33,0,0,136,34,0,0,49,33,33,34,176,47,5,0,135,33,0,0,0,29,32,0,0,4,0,0,0,5,1,0,0,16,2,0,0,22,3,0,0,23,5,0,25,24,23,12,82,25,24,0,25,26,25,4,82,27,26,0,134,28,0,0,140,101,6,0,27,0,0,0,58,6,28,0,0,7,4,0,25,8,7,88,25,9,8,4,89,9,6,0,0,10,4,0,25,11,10,88,89,11,6,0,0,12,4,0,25,13,12,88,88,14,13,0,58,15,14,0,0,17,4,0,25,18,17,88,25,19,18,4,88,20,19,0,58,21,20,0,87,29,15,0,25,30,29,8,87,30,21,0,1,34,155,30,134,33,0,0,44,77,6,0,34,29,0,0,137,32,0,0,139,0,0,0,140,3,36,0,0,0,0,0,1,32,0,0,136,34,0,0,0,33,34,0,136,34,0,0,25,34,34,32,137,34,0,0,130,34,0,0,136,35,0,0,49,34,34,35,128,48,5,0,135,34,0,0,0,4,0,0,0,15,1,0,0,23,2,0,0,24,4,0,25,25,24,8,82,26,25,0,0,27,15,0,0,28,23,0,134,29,0,0,140,117,4,0,26,27,28,0,33,5,29,0,121,5,28,0,0,6,4,0,25,7,6,8,82,8,7,0,0,9,15,0,0,10,23,0,134,11,0,0,68,71,4,0,8,9,10,0,82,12,11,0,0,30,12,0,0,13,30,0,134,14,0,0,116,54,6,0,13,0,0,0,33,16,14,0,120,16,12,0,0,17,30,0,25,18,17,4,82,19,18,0,1,34,0,1,4,20,19,34,0,31,20,0,0,21,31,0,0,3,21,0,0,22,3,0,137,33,0,0,139,22,0,0,1,3,0,0,0,22,3,0,137,33,0,0,139,22,0,0,140,1,33,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,16,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,100,49,5,0,135,31,0,0,25,28,30,4,0,26,30,0,0,1,0,0,134,2,0,0,64,165,5,0,0,27,2,0,134,13,0,0,152,153,5,0,85,28,13,0,1,31,0,0,85,26,31,0,0,19,27,0,25,20,19,4,82,21,20,0,1,32,4,0,134,31,0,0,216,19,4,0,21,26,32,28,1,31,0,0,85,26,31,0,0,22,27,0,82,23,22,0,0,24,1,0,25,25,24,8,25,3,25,4,82,4,3,0,25,5,4,4,1,32,4,0,134,31,0,0,216,19,4,0,23,26,32,5,0,6,1,0,25,7,6,8,25,8,7,4,82,9,8,0,25,10,9,4,82,11,10,0,25,12,11,20,82,14,12,0,25,15,14,1,85,12,15,0,0,16,27,0,0,17,1,0,25,18,17,4,85,18,16,0,137,30,0,0,139,0,0,0,140,1,32,0,0,0,0,0,1,26,0,0,136,28,0,0,0,27,28,0,25,2,0,74,78,3,2,0,41,28,3,24,42,28,28,24,0,14,28,0,1,28,255,0,3,19,14,28,20,28,19,14,0,20,28,0,1,28,255,0,19,28,20,28,0,21,28,0,83,2,21,0,25,22,0,20,82,23,22,0,25,24,0,44,82,25,24,0,16,4,25,23,121,4,9,0,25,5,0,36,82,6,5,0,1,29,255,0,19,29,6,29,1,30,0,0,1,31,0,0,135,28,5,0,29,0,30,31,25,7,0,16,1,28,0,0,85,7,28,0,25,8,0,28,1,28,0,0,85,8,28,0,1,28,0,0,85,22,28,0,82,9,0,0,38,28,9,20,0,10,28,0,32,11,10,0,121,11,8,0,82,16,24,0,25,17,0,8,85,17,16,0,25,18,0,4,85,18,16,0,1,1,0,0,119,0,11,0,38,28,9,4,0,12,28,0,32,13,12,0,121,13,3,0,1,1,255,255,119,0,5,0,39,28,9,32,0,15,28,0,85,0,15,0,1,1,255,255,139,1,0,0,140,5,35,0,0,0,0,0,1,31,0,0,136,33,0,0,0,32,33,0,136,33,0,0,25,33,33,32,137,33,0,0,130,33,0,0,136,34,0,0,49,33,33,34,80,51,5,0,135,33,0,0,0,5,0,0,0,6,1,0,0,17,2,0,0,23,3,0,0,24,4,0,0,25,6,0,34,26,25,0,121,26,3,0,137,32,0,0,139,0,0,0,0,27,6,0,0,28,5,0,82,29,28,0,17,7,29,27,121,7,3,0,137,32,0,0,139,0,0,0,1,30,0,0,0,8,6,0,33,9,8,0,120,9,2,0,119,0,8,0,0,10,6,0,26,11,10,1,0,6,11,0,0,12,30,0,25,13,12,4,0,30,13,0,119,0,246,255,0,14,5,0,25,15,14,12,82,16,15,0,0,18,30,0,0,19,17,0,3,20,18,19,0,21,23,0,0,22,24,0,134,33,0,0,20,213,4,0,16,20,21,22,137,32,0,0,139,0,0,0,140,1,32,0,0,0,0,0,1,28,0,0,136,30,0,0,0,29,30,0,136,30,0,0,25,30,30,16,137,30,0,0,130,30,0,0,136,31,0,0,49,30,30,31,44,52,5,0,135,30,0,0,0,1,0,0,0,2,1,0,82,13,2,0,134,30,0,0,184,60,5,0,13,0,0,0,0,20,1,0,25,21,20,12,82,22,21,0,25,23,22,12,82,24,23,0,0,27,24,0,0,25,27,0,1,30,0,0,14,26,25,30,120,26,2,0,119,0,20,0,0,3,27,0,0,4,3,0,0,5,1,0,25,6,5,12,82,7,6,0,25,8,7,8,82,9,8,0,16,10,4,9,120,10,2,0,119,0,10,0,0,11,27,0,82,12,11,0,134,30,0,0,48,146,5,0,12,0,0,0,0,14,27,0,25,15,14,4,0,27,15,0,119,0,233,255,0,16,1,0,25,17,16,12,82,18,17,0,134,30,0,0,180,1,6,0,18,0,0,0,0,19,1,0,134,30,0,0,216,166,5,0,19,0,0,0,137,29,0,0,139,0,0,0,140,2,29,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,32,53,5,0,135,24,0,0,0,2,0,0,0,3,1,0,1,24,80,4,82,14,24,0,0,15,2,0,14,16,14,15,121,16,22,0,0,17,2,0,1,24,80,4,85,24,17,0,1,24,80,4,82,18,24,0,82,19,18,0,2,25,0,0,64,141,0,0,135,24,69,0,25,19,0,0,1,24,140,4,82,20,24,0,1,24,144,4,82,21,24,0,1,25,0,0,1,26,0,0,135,24,82,0,25,26,20,21,1,24,171,15,1,26,0,0,83,24,26,0,1,26,80,4,82,4,26,0,25,5,4,4,78,6,5,0,41,26,6,24,42,26,26,24,0,7,26,0,0,8,3,0,1,26,255,0,19,26,8,26,0,9,26,0,14,10,7,9,120,10,3,0,137,23,0,0,139,0,0,0,0,11,3,0,1,26,80,4,82,12,26,0,25,13,12,4,83,13,11,0,1,24,113,11,135,26,10,0,24,0,0,0,1,24,3,2,135,26,110,0,24,0,0,0,59,24,1,0,59,25,0,0,59,27,0,0,59,28,1,0,135,26,111,0,24,25,27,28,1,28,0,65,135,26,15,0,28,0,0,0,137,23,0,0,139,0,0,0,140,2,36,0,0,0,0,0,1,32,0,0,136,34,0,0,0,33,34,0,136,34,0,0,25,34,34,16,137,34,0,0,130,34,0,0,136,35,0,0,49,34,34,35,88,54,5,0,135,34,0,0,0,2,0,0,58,3,1,0,59,31,0,0,0,14,2,0,25,23,14,32,25,24,23,36,88,25,24,0,58,26,3,0,64,27,25,26,58,30,27,0,58,28,30,0,58,29,28,0,62,34,0,0,187,189,215,217,223,124,27,62,74,4,29,34,121,4,14,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,30,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,31,16,0,119,0,2,0,59,31,1,0,58,17,30,0,0,18,2,0,25,19,18,32,25,20,19,36,89,20,17,0,0,21,2,0,58,22,31,0,134,34,0,0,88,224,3,0,21,22,0,0,137,33,0,0,139,0,0,0,140,1,28,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,25,2,0,20,82,3,2,0,25,14,0,28,82,15,14,0,16,16,15,3,121,16,17,0,25,17,0,36,82,18,17,0,1,25,255,0,19,25,18,25,1,26,0,0,1,27,0,0,135,24,5,0,25,0,26,27,82,19,2,0,1,24,0,0,13,20,19,24,121,20,3,0,1,1,255,255,119,0,4,0,1,22,3,0,119,0,2,0,1,22,3,0,32,24,22,3,121,24,29,0,25,21,0,4,82,4,21,0,25,5,0,8,82,6,5,0,16,7,4,6,121,7,11,0,25,8,0,40,82,9,8,0,0,10,4,0,0,11,6,0,4,12,10,11,1,25,255,0,19,25,9,25,1,27,1,0,135,24,5,0,25,0,12,27,25,13,0,16,1,24,0,0,85,13,24,0,1,24,0,0,85,14,24,0,1,24,0,0,85,2,24,0,1,24,0,0,85,5,24,0,1,24,0,0,85,21,24,0,1,1,0,0,139,1,0,0,140,1,28,0,0,0,0,0,1,24,0,0,136,26,0,0,0,25,26,0,136,26,0,0,25,26,26,16,137,26,0,0,130,26,0,0,136,27,0,0,49,26,26,27,36,56,5,0,135,26,0,0,0,1,0,0,0,2,1,0,82,13,2,0,25,16,13,12,82,17,16,0,0,23,17,0,0,18,23,0,1,26,0,0,14,19,18,26,120,19,3,0,1,24,5,0,119,0,25,0,0,20,23,0,0,21,20,0,0,22,1,0,82,3,22,0,25,4,3,8,82,5,4,0,16,6,21,5,120,6,3,0,1,24,5,0,119,0,15,0,0,7,23,0,82,8,7,0,134,26,0,0,40,58,6,0,8,0,0,0,0,9,23,0,82,10,9,0,134,26,0,0,108,107,5,0,10,0,0,0,0,11,23,0,25,12,11,4,0,23,12,0,119,0,227,255,32,26,24,5,121,26,7,0,0,14,1,0,25,15,14,4,1,26,0,0,85,15,26,0,137,25,0,0,139,0,0,0,139,0,0,0,140,2,36,0,0,0,0,0,1,32,0,0,136,34,0,0,0,33,34,0,136,34,0,0,25,34,34,16,137,34,0,0,130,34,0,0,136,35,0,0,49,34,34,35,12,57,5,0,135,34,0,0,0,2,0,0,58,3,1,0,59,31,0,0,0,14,2,0,25,23,14,32,25,24,23,36,88,25,24,0,58,26,3,0,64,27,25,26,58,30,27,0,58,28,30,0,58,29,28,0,62,34,0,0,187,189,215,217,223,124,27,62,74,4,29,34,121,4,14,0,0,5,2,0,25,6,5,32,25,7,6,32,88,8,7,0,58,9,30,0,64,10,8,9,0,11,2,0,25,12,11,32,25,13,12,32,88,15,13,0,66,16,10,15,58,31,16,0,119,0,2,0,59,31,1,0,58,17,30,0,0,18,2,0,25,19,18,32,25,20,19,36,89,20,17,0,0,21,2,0,58,22,31,0,134,34,0,0,164,226,3,0,21,22,0,0,137,33,0,0,139,0,0,0,140,1,31,0,0,0,0,0,1,27,0,0,136,29,0,0,0,28,29,0,136,29,0,0,25,29,29,16,137,29,0,0,130,29,0,0,136,30,0,0,49,29,29,30,236,57,5,0,135,29,0,0,0,1,0,0,1,29,4,0,1,30,1,0,134,2,0,0,224,168,5,0,29,30,0,0,0,26,2,0,0,13,1,0,82,18,13,0,0,19,26,0,134,30,0,0,36,105,4,0,18,19,0,0,0,20,26,0,25,21,20,12,82,22,21,0,0,25,22,0,0,23,25,0,1,30,0,0,14,24,23,30,120,24,2,0,119,0,18,0,0,3,25,0,0,4,3,0,0,5,26,0,25,6,5,8,82,7,6,0,16,8,4,7,120,8,2,0,119,0,10,0,0,9,25,0,82,10,9,0,134,30,0,0,144,95,6,0,10,0,0,0,0,11,25,0,25,12,11,4,0,25,12,0,119,0,235,255,0,14,26,0,134,30,0,0,180,1,6,0,14,0,0,0,0,15,1,0,82,16,15,0,134,30,0,0,52,67,4,0,16,0,0,0,0,17,1,0,134,30,0,0,216,166,5,0,17,0,0,0,137,28,0,0,139,0,0,0,140,1,31,0,0,0,0,0,1,26,0,0,136,28,0,0,0,27,28,0,136,28,0,0,25,28,28,32,137,28,0,0,130,28,0,0,136,29,0,0,49,28,28,29,248,58,5,0,135,28,0,0,25,2,27,8,25,13,27,4,0,1,0,0,1,28,24,0,1,29,19,0,134,17,0,0,168,171,5,0,28,29,0,0,0,25,17,0,0,18,25,0,134,29,0,0,172,38,6,0,18,0,0,0,0,19,25,0,25,20,19,8,1,29,21,0,85,20,29,0,0,21,1,0,0,22,25,0,25,23,22,16,85,23,21,0,1,29,4,0,134,3,0,0,236,195,4,0,29,0,0,0,0,4,25,0,25,5,4,20,85,5,3,0,0,6,25,0,25,7,6,20,82,8,7,0,1,29,22,0,85,2,29,0,1,28,58,12,1,30,26,0,134,29,0,0,216,19,4,0,8,28,30,2,0,9,25,0,25,10,9,20,82,11,10,0,1,29,23,0,85,13,29,0,1,30,202,12,1,28,9,0,134,29,0,0,216,19,4,0,11,30,28,13,134,12,0,0,120,91,6,0,0,24,12,0,0,14,24,0,0,15,25,0,134,29,0,0,72,237,5,0,14,15,0,0,0,16,25,0,137,27,0,0,139,16,0,0,140,3,31,0,0,0,0,0,1,27,0,0,136,29,0,0,0,28,29,0,136,29,0,0,25,29,29,16,137,29,0,0,130,29,0,0,136,30,0,0,49,29,29,30,24,60,5,0,135,29,0,0,25,3,28,12,85,3,0,0,0,4,1,0,0,15,2,0,0,19,4,0,25,20,19,28,82,21,20,0,25,22,21,1,85,20,22,0,82,23,3,0,1,29,160,31,134,24,0,0,0,76,6,0,23,29,0,0,0,26,24,0,0,25,26,0,1,29,0,0,14,5,25,29,120,5,4,0,137,28,0,0,1,29,0,0,139,29,0,0,0,6,4,0,25,7,6,16,82,8,7,0,0,9,26,0,25,10,9,12,82,11,10,0,25,12,11,4,82,13,12,0,0,14,26,0,25,16,14,12,82,17,16,0,82,18,17,0,134,29,0,0,216,19,4,0,8,13,18,3,137,28,0,0,1,29,0,0,139,29,0,0,140,1,29,0,0,0,0,0,1,25,0,0,136,27,0,0,0,26,27,0,136,27,0,0,25,27,27,16,137,27,0,0,130,27,0,0,136,28,0,0,49,27,27,28,236,60,5,0,135,27,0,0,0,1,0,0,0,2,1,0,25,13,2,4,1,28,1,0,135,27,112,0,28,13,0,0,0,17,1,0,82,18,17,0,25,19,18,12,82,20,19,0,0,24,20,0,0,21,24,0,1,27,0,0,14,22,21,27,120,22,3,0,1,25,5,0,119,0,20,0,0,23,24,0,0,3,23,0,0,4,1,0,82,5,4,0,25,6,5,8,82,7,6,0,16,8,3,7,120,8,3,0,1,25,5,0,119,0,10,0,0,9,24,0,82,10,9,0,134,27,0,0,52,224,5,0,10,0,0,0,0,11,24,0,25,12,11,4,0,24,12,0,119,0,232,255,32,27,25,5,121,27,12,0,0,14,1,0,82,15,14,0,134,27,0,0,180,1,6,0,15,0,0,0,0,16,1,0,134,27,0,0,216,166,5,0,16,0,0,0,137,26,0,0,139,0,0,0,139,0,0,0,140,2,36,0,0,0,0,0,1,32,0,0,136,34,0,0,0,33,34,0,136,34,0,0,25,34,34,16,137,34,0,0,130,34,0,0,136,35,0,0,49,34,34,35,232,61,5,0,135,34,0,0,0,2,0,0,0,3,1,0,0,14,2,0,25,25,14,12,82,26,25,0,0,27,3,0,0,28,2,0,25,29,28,4,80,30,29,0,2,34,0,0,255,255,0,0,19,34,30,34,0,31,34,0,5,4,27,31,134,5,0,0,88,219,4,0,26,4,0,0,0,6,2,0,25,7,6,12,85,7,5,0,0,8,3,0,0,9,2,0,85,9,8,0,0,10,2,0,25,11,10,12,82,12,11,0,0,13,12,0,0,15,2,0,25,16,15,4,80,17,16,0,2,34,0,0,255,255,0,0,19,34,17,34,0,18,34,0,0,19,2,0,82,20,19,0,5,21,18,20,3,22,13,21,0,23,2,0,25,24,23,8,85,24,22,0,137,33,0,0,139,0,0,0,140,5,29,0,0,0,0,0,1,25,0,0,136,27,0,0,0,26,27,0,136,27,0,0,25,27,27,112,137,27,0,0,130,27,0,0,136,28,0,0,49,27,27,28,200,62,5,0,135,27,0,0,0,24,26,0,1,27,0,0,85,24,27,0,25,16,24,4,85,16,0,0,25,17,24,44,85,17,0,0,1,27,0,0,15,18,0,27,2,27,0,0,255,255,255,127,3,19,0,27,1,27,255,255,125,5,18,27,19,0,0,0,25,20,24,8,85,20,5,0,25,21,24,76,1,27,255,255,85,21,27,0,1,28,0,0,134,27,0,0,132,184,5,0,24,28,0,0,1,27,1,0,134,22,0,0,180,26,2,0,24,2,27,3,4,0,0,0,128,27,0,0,0,23,27,0,1,27,0,0,13,6,1,27,120,6,11,0,25,7,24,108,82,8,7,0,82,9,16,0,82,10,20,0,0,11,9,0,0,12,10,0,3,13,11,8,4,14,13,12,3,15,0,14,85,1,15,0,129,23,0,0,137,26,0,0,139,22,0,0,140,2,27,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,16,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,184,63,5,0,135,25,0,0,0,2,0,0,58,3,1,0,1,22,255,255,0,13,2,0,25,14,13,32,134,15,0,0,168,52,6,0,14,0,0,0,33,16,15,0,120,16,13,0,0,17,2,0,25,18,17,32,25,19,18,4,82,20,19,0,26,4,20,4,0,21,4,0,0,5,21,0,78,6,5,0,1,25,255,0,19,25,6,25,0,7,25,0,0,22,7,0,0,8,22,0,1,25,1,0,1,26,2,0,138,8,25,26,52,64,5,0,84,64,5,0,137,24,0,0,139,0,0,0,119,0,17,0,0,11,2,0,58,12,3,0,134,25,0,0,32,161,1,0,11,12,0,0,137,24,0,0,139,0,0,0,119,0,9,0,0,9,2,0,58,10,3,0,134,25,0,0,56,183,1,0,9,10,0,0,137,24,0,0,139,0,0,0,119,0,1,0,139,0,0,0,140,2,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,127,21,0,0,87,21,0,0,127,21,0,0,82,4,21,0,127,21,0,0,106,5,21,4,1,21,52,0,135,10,3,0,4,5,21,0,128,21,0,0,0,11,21,0,1,21,255,7,19,21,10,21,0,12,21,0,1,21,0,0,1,22,0,8,138,12,21,22,28,97,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0,208,96,5,0], eb + 337920);
  HEAPU8.seteb + 348160);
  HEAPU8.set([59,21,0,0,89,0,21,0,25,2,0,4,59,21,0,0,89,2,21,0,82,21,0,0,85,16,21,0,106,20,0,4,109,16,4,20,0,3,17,0,25,4,3,12,59,20,0,0,89,1,20,0,25,5,1,4,59,20,0,0,89,5,20,0,82,20,1,0,85,4,20,0,106,21,1,4,109,4,4,21,0,6,17,0,25,7,6,2,1,21,0,0,83,7,21,0,0,8,17,0,137,19,0,0,139,8,0,0,140,3,31,0,0,0,0,0,1,27,0,0,136,29,0,0,0,28,29,0,136,29,0,0,25,29,29,16,137,29,0,0,130,29,0,0,136,30,0,0,49,29,29,30,160,120,5,0,135,29,0,0,0,3,0,0,0,4,1,0,0,15,2,0,0,19,3,0,1,29,24,1,3,20,19,29,82,21,20,0,0,22,4,0,0,23,15,0,134,24,0,0,140,117,4,0,21,22,23,0,33,25,24,0,120,25,3,0,137,28,0,0,139,0,0,0,0,5,3,0,1,29,24,1,3,6,5,29,82,7,6,0,0,8,4,0,0,9,15,0,134,10,0,0,68,71,4,0,7,8,9,0,82,11,10,0,0,26,11,0,0,12,26,0,134,29,0,0,128,226,5,0,12,0,0,0,0,13,3,0,1,29,24,1,3,14,13,29,82,16,14,0,0,17,4,0,0,18,15,0,134,29,0,0,200,79,4,0,16,17,18,0,137,28,0,0,139,0,0,0,140,7,32,0,0,0,0,0,1,28,0,0,136,30,0,0,0,29,30,0,136,30,0,0,25,30,30,32,137,30,0,0,130,30,0,0,136,31,0,0,49,30,30,31,124,121,5,0,135,30,0,0,0,7,0,0,0,8,1,0,0,19,2,0,0,20,3,0,0,21,4,0,0,22,5,0,0,23,6,0,0,24,19,0,0,25,20,0,1,30,0,0,134,26,0,0,240,112,5,0,30,24,25,0,0,27,26,0,0,9,27,0,0,10,21,0,0,11,22,0,1,31,0,0,134,30,0,0,120,20,5,0,9,10,11,31,0,12,8,0,0,13,27,0,134,30,0,0,12,255,5,0,12,13,0,0,0,14,27,0,0,15,7,0,1,30,64,1,3,16,15,30,82,17,16,0,0,18,23,0,134,30,0,0,208,252,3,0,14,17,18,0,137,29,0,0,139,0,0,0,140,1,26,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,68,122,5,0,135,24,0,0,0,1,0,0,0,2,1,0,82,13,2,0,25,14,13,12,82,15,14,0,0,21,15,0,0,16,21,0,1,24,0,0,14,17,16,24,120,17,3,0,1,22,5,0,119,0,20,0,0,18,21,0,0,19,18,0,0,20,1,0,82,3,20,0,25,4,3,8,82,5,4,0,16,6,19,5,120,6,3,0,1,22,5,0,119,0,10,0,0,7,21,0,82,8,7,0,134,24,0,0,52,224,5,0,8,0,0,0,0,9,21,0,25,10,9,4,0,21,10,0,119,0,232,255,32,24,22,5,121,24,9,0,0,11,1,0,82,12,11,0,1,25,0,0,134,24,0,0,180,61,5,0,12,25,0,0,137,23,0,0,139,0,0,0,139,0,0,0,140,2,27,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,32,123,5,0,135,24,0,0,1,24,8,0,1,25,48,0,134,2,0,0,168,171,5,0,24,25,0,0,0,21,2,0,134,3,0,0,148,191,4,0,0,13,21,0,25,14,13,4,85,14,3,0,0,15,21,0,25,16,15,4,82,17,16,0,25,18,17,20,82,19,18,0,25,20,19,1,85,18,20,0,0,4,21,0,1,25,1,0,83,4,25,0,0,5,21,0,25,6,5,4,82,7,6,0,1,24,0,0,1,26,64,0,134,25,0,0,20,213,4,0,7,24,0,26,0,8,21,0,25,9,8,4,82,10,9,0,1,26,1,0,1,24,64,0,134,25,0,0,20,213,4,0,10,26,1,24,0,11,21,0,134,25,0,0,32,92,6,0,11,0,0,0,0,12,21,0,137,23,0,0,139,12,0,0,140,0,27,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,16,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,4,124,5,0,135,25,0,0,1,25,52,0,1,26,117,0,134,0,0,0,168,171,5,0,25,26,0,0,0,22,0,0,0,1,22,0,25,12,1,44,1,26,0,0,85,12,26,0,0,15,22,0,25,16,15,48,1,26,0,0,85,16,26,0,0,17,22,0,25,18,17,24,1,26,0,0,85,18,26,0,0,19,22,0,25,20,19,28,1,26,0,0,85,20,26,0,0,21,22,0,25,2,21,32,1,26,0,0,85,2,26,0,0,3,22,0,25,4,3,36,1,26,0,0,85,4,26,0,0,5,22,0,25,6,5,16,134,26,0,0,104,72,6,0,6,0,0,0,0,7,22,0,25,8,7,8,134,26,0,0,104,72,6,0,8,0,0,0,0,9,22,0,134,26,0,0,104,72,6,0,9,0,0,0,1,26,4,0,134,10,0,0,236,195,4,0,26,0,0,0,0,11,22,0,25,13,11,40,85,13,10,0,0,14,22,0,137,24,0,0,139,14,0,0,140,3,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,80,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,16,125,5,0,135,19,0,0,0,14,18,0,25,13,18,12,25,3,0,36,1,19,133,0,85,3,19,0,82,4,0,0,38,19,4,64,0,5,19,0,32,6,5,0,121,6,17,0,25,7,0,60,82,8,7,0,85,14,8,0,25,15,14,4,1,19,1,84,85,15,19,0,25,16,14,8,85,16,13,0,1,19,54,0,135,9,34,0,19,14,0,0,32,10,9,0,120,10,4,0,25,11,0,75,1,19,255,255,83,11,19,0,134,12,0,0,116,180,3,0,0,1,2,0,137,18,0,0,139,12,0,0,140,1,27,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,16,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,192,125,5,0,135,25,0,0,0,1,0,0,0,2,1,0,82,13,2,0,25,15,13,12,82,16,15,0,0,22,16,0,0,17,22,0,1,25,0,0,14,18,17,25,120,18,2,0,119,0,19,0,0,19,22,0,0,20,19,0,0,21,1,0,82,3,21,0,25,4,3,8,82,5,4,0,16,6,20,5,120,6,2,0,119,0,10,0,0,7,22,0,82,8,7,0,134,25,0,0,248,51,5,0,8,0,0,0,0,9,22,0,25,10,9,4,0,22,10,0,119,0,234,255,0,11,1,0,82,12,11,0,134,25,0,0,180,1,6,0,12,0,0,0,0,14,1,0,134,25,0,0,216,166,5,0,14,0,0,0,137,24,0,0,139,0,0,0,140,3,30,0,0,0,0,0,1,26,0,0,136,28,0,0,0,27,28,0,136,28,0,0,25,28,28,16,137,28,0,0,130,28,0,0,136,29,0,0,49,28,28,29,148,126,5,0,135,28,0,0,0,3,0,0,0,4,1,0,0,15,2,0,1,28,24,0,1,29,15,0,134,18,0,0,168,171,5,0,28,29,0,0,0,25,18,0,0,19,25,0,25,20,19,8,1,29,2,0,83,20,29,0,0,21,3,0,0,22,25,0,25,23,22,8,25,24,23,4,85,24,21,0,0,5,4,0,0,6,25,0,25,7,6,8,25,8,7,4,25,9,8,4,85,9,5,0,0,10,15,0,1,29,255,0,19,29,10,29,0,11,29,0,0,12,25,0,25,13,12,8,25,14,13,4,25,16,14,8,83,16,11,0,1,28,32,0,134,29,0,0,92,196,5,0,28,0,0,0,0,17,25,0,1,28,24,0,134,29,0,0,140,58,6,0,17,28,0,0,1,28,32,0,134,29,0,0,196,97,6,0,28,0,0,0,137,27,0,0,139,0,0,0,140,3,30,0,0,0,0,0,1,26,0,0,136,28,0,0,0,27,28,0,136,28,0,0,25,28,28,16,137,28,0,0,130,28,0,0,136,29,0,0,49,28,28,29,136,127,5,0,135,28,0,0,0,3,0,0,0,4,1,0,0,15,2,0,1,28,24,0,1,29,15,0,134,18,0,0,168,171,5,0,28,29,0,0,0,25,18,0,0,19,25,0,25,20,19,8,1,29,1,0,83,20,29,0,0,21,3,0,0,22,25,0,25,23,22,8,25,24,23,4,85,24,21,0,0,5,4,0,0,6,25,0,25,7,6,8,25,8,7,4,25,9,8,4,85,9,5,0,0,10,15,0,1,29,255,0,19,29,10,29,0,11,29,0,0,12,25,0,25,13,12,8,25,14,13,4,25,16,14,8,83,16,11,0,1,28,32,0,134,29,0,0,92,196,5,0,28,0,0,0,0,17,25,0,1,28,24,0,134,29,0,0,140,58,6,0,17,28,0,0,1,28,32,0,134,29,0,0,196,97,6,0,28,0,0,0,137,27,0,0,139,0,0,0,140,1,27,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,16,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,124,128,5,0,135,25,0,0,0,1,0,0,0,2,1,0,25,13,2,16,82,16,13,0,0,17,1,0,25,18,17,32,78,19,18,0,134,25,0,0,236,52,5,0,16,19,0,0,1,25,36,0,82,20,25,0,0,21,1,0,25,22,21,32,78,3,22,0,134,25,0,0,4,242,2,0,20,3,0,0,134,25,0,0,36,148,6,0,0,4,1,0,25,5,4,32,78,6,5,0,25,25,6,1,41,25,25,24,42,25,25,24,0,7,25,0,83,5,7,0,0,8,1,0,25,9,8,32,78,10,9,0,1,25,255,0,19,25,10,25,0,11,25,0,32,12,11,3,120,12,3,0,137,24,0,0,139,0,0,0,0,14,1,0,25,15,14,32,1,25,0,0,83,15,25,0,137,24,0,0,139,0,0,0,140,0,20,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,1,15,44,0,82,0,15,0,1,15,0,0,14,1,0,15,121,1,4,0,1,15,44,0,82,4,15,0,139,4,0,0,134,5,0,0,104,85,6,0,1,15,44,0,85,15,5,0,1,15,44,0,82,6,15,0,1,16,210,13,1,17,12,0,1,18,2,14,1,19,21,0,134,15,0,0,104,199,5,0,6,16,17,18,19,0,0,0,1,15,44,0,82,7,15,0,1,19,223,13,1,18,7,0,1,17,24,14,1,16,10,0,134,15,0,0,104,199,5,0,7,19,18,17,16,0,0,0,1,15,44,0,82,8,15,0,1,16,231,13,1,17,8,0,1,18,35,14,1,19,3,0,134,15,0,0,104,199,5,0,8,16,17,18,19,0,0,0,1,15,44,0,82,9,15,0,1,19,151,35,1,18,4,0,1,17,39,14,1,16,8,0,134,15,0,0,104,199,5,0,9,19,18,17,16,0,0,0,1,15,44,0,82,10,15,0,1,16,118,35,1,17,10,0,1,18,30,0,134,15,0,0,160,189,5,0,10,16,17,18,1,15,44,0,82,11,15,0,1,18,240,13,1,17,8,0,1,16,0,0,134,15,0,0,160,189,5,0,11,18,17,16,1,15,44,0,82,12,15,0,1,16,249,13,1,17,8,0,1,18,48,14,1,19,3,0,134,15,0,0,104,199,5,0,12,16,17,18,19,0,0,0,1,15,44,0,82,2,15,0,1,19,52,14,1,18,11,0,1,17,0,0,134,15,0,0,160,189,5,0,2,19,18,17,1,15,44,0,82,3,15,0,1,17,64,14,1,18,11,0,1,19,0,0,134,15,0,0,160,189,5,0,3,17,18,19,1,15,44,0,82,4,15,0,139,4,0,0,140,4,20,0,0,0,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,0,4,14,0,42,15,1,31,34,17,1,0,1,18,255,255,1,19,0,0,125,16,17,18,19,0,0,0,41,16,16,1,20,15,15,16,0,5,15,0,34,16,1,0,1,19,255,255,1,18,0,0,125,15,16,19,18,0,0,0,42,15,15,31,34,19,1,0,1,16,255,255,1,17,0,0,125,18,19,16,17,0,0,0,41,18,18,1,20,15,15,18,0,6,15,0,42,15,3,31,34,17,3,0,1,16,255,255,1,19,0,0,125,18,17,16,19,0,0,0,41,18,18,1,20,15,15,18,0,7,15,0,34,18,3,0,1,19,255,255,1,16,0,0,125,15,18,19,16,0,0,0,42,15,15,31,34,19,3,0,1,18,255,255,1,17,0,0,125,16,19,18,17,0,0,0,41,16,16,1,20,15,15,16,0,8,15,0,21,15,5,0,21,16,6,1,134,9,0,0,112,110,6,0,15,16,5,6,128,16,0,0,0,10,16,0,21,16,7,2,21,15,8,3,134,11,0,0,112,110,6,0,16,15,7,8,128,16,0,0,134,15,0,0,192,20,3,0,9,10,11,16,4,0,0,0,82,15,4,0,21,15,15,5,106,16,4,4,21,16,16,6,134,12,0,0,112,110,6,0,15,16,5,6,128,16,0,0,0,13,16,0,137,14,0,0,129,13,0,0,139,12,0,0,140,2,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,32,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,68,132,5,0,135,8,0,0,25,5,7,16,0,4,7,0,82,8,1,0,85,4,8,0,106,9,1,4,109,4,4,9,106,8,1,8,109,4,8,8,106,9,1,12,109,4,12,9,134,2,0,0,64,61,4,0,4,0,0,0,59,9,1,0,66,3,9,2,82,9,1,0,85,5,9,0,106,8,1,4,109,5,4,8,106,9,1,8,109,5,8,9,106,8,1,12,109,5,12,8,134,8,0,0,68,34,4,0,0,5,3,0,137,7,0,0,139,0,0,0,140,2,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,32,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,232,132,5,0,135,8,0,0,25,5,7,16,0,4,7,0,82,8,1,0,85,4,8,0,106,9,1,4,109,4,4,9,106,8,1,8,109,4,8,8,106,9,1,12,109,4,12,9,134,2,0,0,60,63,4,0,4,0,0,0,59,9,1,0,66,3,9,2,82,9,1,0,85,5,9,0,106,8,1,4,109,5,4,8,106,9,1,8,109,5,8,9,106,8,1,12,109,5,12,8,134,8,0,0,92,36,4,0,0,5,3,0,137,7,0,0,139,0,0,0,140,2,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,32,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,140,133,5,0,135,8,0,0,25,5,7,16,0,4,7,0,82,8,1,0,85,4,8,0,106,9,1,4,109,4,4,9,106,8,1,8,109,4,8,8,106,9,1,12,109,4,12,9,134,2,0,0,56,65,4,0,4,0,0,0,59,9,1,0,66,3,9,2,82,9,1,0,85,5,9,0,106,8,1,4,109,5,4,8,106,9,1,8,109,5,8,9,106,8,1,12,109,5,12,8,134,8,0,0,116,38,4,0,0,5,3,0,137,7,0,0,139,0,0,0,140,3,27,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,32,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,48,134,5,0,135,24,0,0,25,20,23,4,0,3,0,0,0,4,1,0,0,12,2,0,1,24,0,0,85,20,24,0,134,13,0,0,0,181,5,0,0,21,13,0,0,14,21,0,25,15,14,12,82,16,15,0,1,25,240,31,1,26,7,0,134,24,0,0,128,39,6,0,16,25,26,0,0,17,21,0,25,18,17,20,82,19,18,0,134,24,0,0,184,57,5,0,19,0,0,0,0,5,4,0,0,6,12,0,134,7,0,0,96,99,3,0,5,6,20,0,0,8,21,0,25,9,8,20,85,9,7,0,0,10,3,0,0,11,21,0,134,24,0,0,240,243,5,0,10,11,0,0,137,23,0,0,139,0,0,0,140,2,29,0,0,0,0,0,1,25,0,0,136,27,0,0,0,26,27,0,136,27,0,0,25,27,27,16,137,27,0,0,130,27,0,0,136,28,0,0,49,27,27,28,252,134,5,0,135,27,0,0,0,2,0,0,0,3,1,0,0,14,2,0,25,18,14,44,82,19,18,0,0,20,3,0,25,21,20,24,78,22,21,0,1,27,255,0,19,27,22,27,0,23,27,0,0,24,3,0,25,4,24,12,82,5,4,0,25,6,5,4,82,7,6,0,0,8,3,0,25,9,8,16,82,10,9,0,25,11,10,4,82,12,11,0,0,13,3,0,25,15,13,20,82,16,15,0,1,27,33,0,135,17,37,0,27,19,23,7,12,16,0,0,137,26,0,0,139,0,0,0,140,1,26,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,25,2,0,74,78,3,2,0,41,25,3,24,42,25,25,24,0,14,25,0,1,25,255,0,3,16,14,25,20,25,16,14,0,17,25,0,1,25,255,0,19,25,17,25,0,18,25,0,83,2,18,0,82,19,0,0,38,25,19,8,0,20,25,0,32,21,20,0,121,21,21,0,25,4,0,8,1,25,0,0,85,4,25,0,25,5,0,4,1,25,0,0,85,5,25,0,25,6,0,44,82,7,6,0,25,8,0,28,85,8,7,0,25,9,0,20,85,9,7,0,0,10,7,0,25,11,0,48,82,12,11,0,3,13,10,12,25,15,0,16,85,15,13,0,1,1,0,0,119,0,5,0,39,25,19,32,0,22,25,0,85,0,22,0,1,1,255,255,139,1,0,0,140,0,26,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,104,136,5,0,135,24,0,0,1,24,24,0,1,25,60,0,134,0,0,0,168,171,5,0,24,25,0,0,0,20,0,0,1,25,64,0,1,24,15,0,134,1,0,0,168,171,5,0,25,24,0,0,0,12,20,0,25,13,12,4,85,13,1,0,1,24,6,0,1,25,15,0,134,14,0,0,168,171,5,0,24,25,0,0,0,15,20,0,85,15,14,0,1,25,4,0,1,24,0,0,134,16,0,0,224,168,5,0,25,24,0,0,0,17,20,0,25,18,17,8,85,18,16,0,0,19,20,0,82,2,19,0,0,21,2,0,0,3,21,0,1,24,255,255,83,3,24,0,0,4,21,0,25,5,4,1,1,24,10,0,83,5,24,0,0,6,21,0,25,7,6,2,1,24,0,0,84,7,24,0,0,8,21,0,25,9,8,4,1,24,0,0,83,9,24,0,0,10,20,0,1,25,64,0,134,24,0,0,192,36,6,0,10,25,0,0,0,11,20,0,137,23,0,0,139,11,0,0,140,1,27,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,16,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,120,137,5,0,135,25,0,0,0,1,0,0,0,2,1,0,82,13,2,0,25,15,13,12,82,16,15,0,0,22,16,0,0,17,22,0,1,25,0,0,14,18,17,25,120,18,2,0,119,0,19,0,0,19,22,0,0,20,19,0,0,21,1,0,82,3,21,0,25,4,3,8,82,5,4,0,16,6,20,5,120,6,2,0,119,0,10,0,0,7,22,0,82,8,7,0,134,25,0,0,144,95,6,0,8,0,0,0,0,9,22,0,25,10,9,4,0,22,10,0,119,0,234,255,0,11,1,0,82,12,11,0,134,25,0,0,180,1,6,0,12,0,0,0,0,14,1,0,134,25,0,0,216,166,5,0,14,0,0,0,137,24,0,0,139,0,0,0,140,3,32,0,0,0,0,0,1,28,0,0,136,30,0,0,0,29,30,0,136,30,0,0,25,30,30,32,137,30,0,0,130,30,0,0,136,31,0,0,49,30,30,31,76,138,5,0,135,30,0,0,0,3,0,0,0,4,1,0,0,15,2,0,0,17,3,0,135,18,4,0,17,0,0,0,0,25,18,0,0,19,3,0,0,20,25,0,134,21,0,0,148,113,4,0,19,20,0,0,0,24,21,0,0,22,3,0,0,23,25,0,134,5,0,0,140,127,4,0,22,23,0,0,0,27,5,0,1,30,8,0,1,31,40,0,134,6,0,0,168,171,5,0,30,31,0,0,0,26,6,0,0,7,15,0,0,8,26,0,85,8,7,0,0,9,26,0,0,10,24,0,0,11,27,0,0,12,4,0,134,31,0,0,24,88,3,0,9,10,11,12,0,13,27,0,134,31,0,0,148,105,6,0,13,0,0,0,0,14,24,0,134,31,0,0,148,105,6,0,14,0,0,0,0,16,26,0,137,29,0,0,139,16,0,0,140,0,26,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,56,139,5,0,135,24,0,0,1,24,24,0,1,25,60,0,134,0,0,0,168,171,5,0,24,25,0,0,0,20,0,0,1,25,4,0,1,24,15,0,134,1,0,0,168,171,5,0,25,24,0,0,0,12,20,0,25,13,12,4,85,13,1,0,1,24,6,0,1,25,15,0,134,14,0,0,168,171,5,0,24,25,0,0,0,15,20,0,85,15,14,0,1,25,4,0,1,24,0,0,134,16,0,0,224,168,5,0,25,24,0,0,0,17,20,0,25,18,17,8,85,18,16,0,0,19,20,0,82,2,19,0,0,21,2,0,0,3,21,0,1,24,255,255,83,3,24,0,0,4,21,0,25,5,4,1,1,24,0,0,83,5,24,0,0,6,21,0,25,7,6,2,1,24,0,0,84,7,24,0,0,8,21,0,25,9,8,4,1,24,0,0,83,9,24,0,0,10,20,0,1,25,4,0,134,24,0,0,192,36,6,0,10,25,0,0,0,11,20,0,137,23,0,0,139,11,0,0,140,4,24,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,16,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,72,140,5,0,135,22,0,0,0,4,0,0,0,5,1,0,0,12,2,0,0,13,3,0,0,14,5,0,25,15,14,12,82,16,15,0,25,17,16,4,82,18,17,0,134,19,0,0,124,102,6,0,18,0,0,0,58,6,19,0,0,7,4,0,25,8,7,40,82,9,8,0,25,10,9,36,25,11,10,8,127,22,0,0,89,22,6,0,127,22,0,0,114,11,22,0,127,23,0,0,102,23,23,1,107,11,1,23,127,22,0,0,102,22,22,2,107,11,2,22,127,23,0,0,102,23,23,3,107,11,3,23,137,21,0,0,139,0,0,0,140,4,24,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,16,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,0,141,5,0,135,22,0,0,0,4,0,0,0,5,1,0,0,12,2,0,0,13,3,0,0,14,5,0,25,15,14,12,82,16,15,0,25,17,16,4,82,18,17,0,134,19,0,0,124,102,6,0,18,0,0,0,58,6,19,0,0,7,4,0,25,8,7,40,82,9,8,0,25,10,9,36,25,11,10,4,127,22,0,0,89,22,6,0,127,22,0,0,114,11,22,0,127,23,0,0,102,23,23,1,107,11,1,23,127,22,0,0,102,22,22,2,107,11,2,22,127,23,0,0,102,23,23,3,107,11,3,23,137,21,0,0,139,0,0,0,140,4,24,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,16,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,184,141,5,0,135,22,0,0,0,4,0,0,0,5,1,0,0,12,2,0,0,13,3,0,0,14,5,0,25,15,14,12,82,16,15,0,25,17,16,4,82,18,17,0,134,19,0,0,124,102,6,0,18,0,0,0,58,6,19,0,0,7,4,0,25,8,7,40,82,9,8,0,25,10,9,36,25,11,10,12,127,22,0,0,89,22,6,0,127,22,0,0,114,11,22,0,127,23,0,0,102,23,23,1,107,11,1,23,127,22,0,0,102,22,22,2,107,11,2,22,127,23,0,0,102,23,23,3,107,11,3,23,137,21,0,0,139,0,0,0,140,4,24,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,16,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,112,142,5,0,135,22,0,0,0,4,0,0,0,5,1,0,0,12,2,0,0,13,3,0,0,14,5,0,25,15,14,12,82,16,15,0,25,17,16,4,82,18,17,0,134,19,0,0,204,102,6,0,18,0,0,0,58,6,19,0,0,7,4,0,25,8,7,40,82,9,8,0,25,10,9,20,25,11,10,8,127,22,0,0,89,22,6,0,127,22,0,0,114,11,22,0,127,23,0,0,102,23,23,1,107,11,1,23,127,22,0,0,102,22,22,2,107,11,2,22,127,23,0,0,102,23,23,3,107,11,3,23,137,21,0,0,139,0,0,0,140,5,32,0,0,0,0,0,1,27,0,0,136,29,0,0,0,28,29,0,136,29,0,0,25,29,29,32,137,29,0,0,130,29,0,0,136,30,0,0,49,29,29,30,40,143,5,0,135,29,0,0,25,21,28,8,0,26,28,0,0,15,0,0,0,19,1,0,0,20,2,0,0,22,21,0,0,23,22,0,85,23,3,0,25,24,22,4,0,25,24,0,85,25,4,0,0,5,21,0,0,6,5,0,82,7,6,0,25,8,5,4,0,9,8,0,82,10,9,0,0,11,26,0,0,12,11,0,85,12,7,0,25,13,11,4,0,14,13,0,85,14,10,0,0,16,15,0,0,17,19,0,0,18,20,0,1,30,5,0,1,31,8,0,134,29,0,0,204,27,5,0,16,17,18,30,26,31,0,0,137,28,0,0,139,0,0,0,140,4,24,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,16,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,228,143,5,0,135,22,0,0,0,4,0,0,0,5,1,0,0,12,2,0,0,13,3,0,0,14,5,0,25,15,14,12,82,16,15,0,25,17,16,4,82,18,17,0,134,19,0,0,204,102,6,0,18,0,0,0,58,6,19,0,0,7,4,0,25,8,7,40,82,9,8,0,25,10,9,20,25,11,10,4,127,22,0,0,89,22,6,0,127,22,0,0,114,11,22,0,127,23,0,0,102,23,23,1,107,11,1,23,127,22,0,0,102,22,22,2,107,11,2,22,127,23,0,0,102,23,23,3,107,11,3,23,137,21,0,0,139,0,0,0,140,4,24,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,16,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,156,144,5,0,135,22,0,0,0,4,0,0,0,5,1,0,0,12,2,0,0,13,3,0,0,14,5,0,25,15,14,12,82,16,15,0,25,17,16,4,82,18,17,0,134,19,0,0,204,102,6,0,18,0,0,0,58,6,19,0,0,7,4,0,25,8,7,40,82,9,8,0,25,10,9,20,25,11,10,12,127,22,0,0,89,22,6,0,127,22,0,0,114,11,22,0,127,23,0,0,102,23,23,1,107,11,1,23,127,22,0,0,102,22,22,2,107,11,2,22,127,23,0,0,102,23,23,3,107,11,3,23,137,21,0,0,139,0,0,0,140,2,26,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,84,145,5,0,135,24,0,0,0,2,0,0,0,3,1,0,0,12,2,0,0,20,12,0,0,13,20,0,25,14,13,16,82,15,14,0,0,21,15,0,0,16,3,0,25,17,16,8,80,18,17,0,41,24,18,16,42,24,24,16,0,19,24,0,1,24,1,0,1,25,11,0,138,19,24,25,200,145,5,0,196,145,5,0,224,145,5,0,196,145,5,0,196,145,5,0,196,145,5,0,248,145,5,0,196,145,5,0,196,145,5,0,196,145,5,0,16,146,5,0,119,0,25,0,0,4,21,0,0,5,3,0,134,24,0,0,108,215,4,0,4,5,0,0,119,0,19,0,0,6,21,0,0,7,3,0,134,24,0,0,16,36,5,0,6,7,0,0,119,0,13,0,0,8,21,0,0,9,3,0,134,24,0,0,236,221,4,0,8,9,0,0,119,0,7,0,0,10,21,0,0,11,3,0,134,24,0,0,104,102,5,0,10,11,0,0,119,0,1,0,137,23,0,0,139,0,0,0,140,1,26,0,0,0,0,0,1,22,0,0,136,24,0,0,0,23,24,0,136,24,0,0,25,24,24,16,137,24,0,0,130,24,0,0,136,25,0,0,49,24,24,25,100,146,5,0,135,24,0,0,0,1,0,0,0,2,1,0,25,13,2,4,80,15,13,0,26,24,15,1,41,24,24,16,42,24,24,16,0,16,24,0,84,13,16,0,0,17,1,0,25,18,17,4,80,19,18,0,41,24,19,16,42,24,24,16,0,20,24,0,36,21,20,0,120,21,3,0,137,23,0,0,139,0,0,0,0,3,1,0,25,4,3,12,82,5,4,0,1,24,0,0,17,6,24,5,121,6,9,0,0,7,1,0,25,8,7,12,82,9,8,0,1,24,104,4,41,25,9,2,3,10,24,25,1,25,0,0,85,10,25,0,0,11,1,0,25,12,11,8,1,24,1,0,135,25,117,0,24,12,0,0,0,14,1,0,134,25,0,0,216,166,5,0,14,0,0,0,137,23,0,0,139,0,0,0,140,3,27,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,16,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,72,147,5,0,135,25,0,0,0,3,0,0,0,4,1,0,0,14,2,0,0,15,3,0,1,25,160,31,134,16,0,0,0,76,6,0,15,25,0,0,0,22,16,0,0,17,22,0,1,25,0,0,14,18,17,25,120,18,4,0,137,24,0,0,1,25,0,0,139,25,0,0,0,19,22,0,25,20,19,12,82,21,20,0,25,5,21,4,82,6,5,0,0,7,22,0,25,8,7,12,82,9,8,0,82,10,9,0,134,11,0,0,44,214,5,0,6,10,0,0,0,12,4,0,25,13,12,20,85,13,11,0,137,24,0,0,1,25,0,0,139,25,0,0,140,2,25,0,0,0,0,0,1,21,0,0,136,23,0,0,0,22,23,0,78,6,0,0,78,7,1,0,41,23,6,24,42,23,23,24,41,24,7,24,42,24,24,24,14,11,23,24,41,24,6,24,42,24,24,24,32,12,24,0,20,24,12,11,0,20,24,0,121,20,4,0,0,4,6,0,0,5,7,0,119,0,24,0,0,2,0,0,0,3,1,0,25,13,2,1,25,14,3,1,78,15,13,0,78,16,14,0,41,24,15,24,42,24,24,24,41,23,16,24,42,23,23,24,14,17,24,23,41,23,15,24,42,23,23,24,32,18,23,0,20,23,18,17,0,19,23,0,121,19,4,0,0,4,15,0,0,5,16,0,119,0,4,0,0,2,13,0,0,3,14,0,119,0,236,255,1,23,255,0,19,23,4,23,0,8,23,0,1,23,255,0,19,23,5,23,0,9,23,0,4,10,8,9,139,10,0,0,140,1,33,0,0,0,0,0,1,29,0,0,136,31,0,0,0,30,31,0,136,31,0,0,25,31,31,16,137,31,0,0,130,31,0,0,136,32,0,0,49,31,31,32,212,148,5,0,135,31,0,0,0,1,0,0,0,2,1,0,25,13,2,24,0,1,13,0,0,22,1,0,26,23,22,1,0,1,23,0,0,24,1,0,43,31,24,1,0,25,31,0,0,26,1,0,20,31,26,25,0,27,31,0,0,1,27,0,0,28,1,0,43,31,28,2,0,3,31,0,0,4,1,0,20,31,4,3,0,5,31,0,0,1,5,0,0,6,1,0,43,31,6,4,0,7,31,0,0,8,1,0,20,31,8,7,0,9,31,0,0,1,9,0,0,10,1,0,43,31,10,8,0,11,31,0,0,12,1,0,20,31,12,11,0,14,31,0,0,1,14,0,0,15,1,0,43,31,15,16,0,16,31,0,0,17,1,0,20,31,17,16,0,18,31,0,0,1,18,0,0,19,1,0,25,20,19,1,0,1,20,0,0,21,1,0,137,30,0,0,139,21,0,0,140,3,28,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,64,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,200,149,5,0,135,25,0,0,25,22,24,8,0,14,24,0,25,21,24,24,0,13,0,0,0,15,14,0,0,16,15,0,85,16,1,0,25,17,15,4,0,18,17,0,85,18,2,0,0,19,14,0,0,20,19,0,82,3,20,0,25,4,19,4,0,5,4,0,82,6,5,0,0,7,22,0,0,8,7,0,85,8,3,0,25,9,7,4,0,10,9,0,85,10,6,0,1,26,40,0,1,27,61,15,134,25,0,0,160,69,6,0,21,26,27,22,0,11,13,0,135,12,4,0,21,0,0,0,134,25,0,0,76,111,5,0,11,21,12,0,137,24,0,0,139,0,0,0,140,1,25,0,0,0,0,0,1,21,0,0,136,23,0,0,0,22,23,0,136,23,0,0,25,23,23,16,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,136,150,5,0,135,23,0,0,0,1,0,0,0,2,1,0,1,23,8,1,3,13,2,23,82,14,13,0,1,23,0,0,14,15,14,23,121,15,20,0,0,16,1,0,1,23,12,1,3,17,16,23,82,18,17,0,1,23,0,0,14,19,18,23,121,19,13,0,0,20,1,0,1,23,12,1,3,3,20,23,82,4,3,0,0,5,1,0,1,23,8,1,3,6,5,23,82,7,6,0,1,24,255,0,19,24,4,24,135,23,9,0,24,7,0,0,134,8,0,0,120,119,5,0,0,9,1,0,1,23,8,1,3,10,9,23,85,10,8,0,0,11,1,0,1,23,12,1,3,12,11,23,1,23,122,0,85,12,23,0,137,22,0,0,139,0,0,0,140,3,28,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,64,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,92,151,5,0,135,25,0,0,25,22,24,8,0,14,24,0,25,21,24,24,0,13,0,0,0,15,14,0,0,16,15,0,85,16,1,0,25,17,15,4,0,18,17,0,85,18,2,0,0,19,14,0,0,20,19,0,82,3,20,0,25,4,19,4,0,5,4,0,82,6,5,0,0,7,22,0,0,8,7,0,85,8,3,0,25,9,7,4,0,10,9,0,85,10,6,0,1,26,40,0,1,27,56,15,134,25,0,0,160,69,6,0,21,26,27,22,0,11,13,0,135,12,4,0,21,0,0,0,134,25,0,0,76,111,5,0,11,21,12,0,137,24,0,0,139,0,0,0,140,4,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,16,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,28,152,5,0,135,21,0,0,0,4,0,0,0,5,1,0,0,11,2,0,0,12,3,0,0,13,5,0,25,14,13,12,82,15,14,0,25,16,15,4,82,17,16,0,134,18,0,0,124,102,6,0,17,0,0,0,58,6,18,0,0,7,4,0,25,8,7,40,82,9,8,0,25,10,9,36,127,21,0,0,89,21,6,0,127,21,0,0,114,10,21,0,127,22,0,0,102,22,22,1,107,10,1,22,127,21,0,0,102,21,21,2,107,10,2,21,127,22,0,0,102,22,22,3,107,10,3,22,137,20,0,0,139,0,0,0,140,0,22,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,208,152,5,0,135,19,0,0,1,20,5,0,134,19,0,0,68,95,6,0,20,0,0,0,134,0,0,0,36,25,6,0,1,19,12,0,85,19,0,0,1,19,12,0,82,1,19,0,1,20,0,0,134,19,0,0,56,38,5,0,1,20,0,0,1,19,12,0,82,7,19,0,1,20,1,0,134,19,0,0,8,231,5,0,7,20,0,0,134,8,0,0,236,158,5,0,0,15,8,0,0,9,15,0,1,20,84,9,1,21,0,0,134,19,0,0,176,160,2,0,9,20,21,0,0,10,15,0,25,11,10,4,82,12,11,0,1,19,248,0,4,13,12,19,0,16,13,0,1,19,12,0,82,14,19,0,0,2,16,0,134,19,0,0,224,123,3,0,14,2,0,0,1,19,12,0,82,3,19,0,25,4,3,4,82,5,4,0,1,19,0,0,135,6,26,0,19,5,0,0,137,18,0,0,139,0,0,0,140,0,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,204,153,5,0,135,19,0,0,1,19,228,5,82,0,19,0,1,19,0,0,14,1,0,19,121,1,5,0,1,19,228,5,82,6,19,0,137,18,0,0,139,6,0,0,1,20,57,0,134,19,0,0,68,216,5,0,20,0,0,0,134,7,0,0,172,112,6,0,0,16,7,0,134,8,0,0,216,112,6,0,0,15,8,0,0,9,16,0,25,10,9,4,82,11,10,0,0,12,15,0,25,13,12,4,82,14,13,0,134,2,0,0,108,2,4,0,11,14,0,0,1,19,228,5,85,19,2,0,0,3,16,0,134,19,0,0,148,105,6,0,3,0,0,0,0,4,15,0,134,19,0,0,148,105,6,0,4,0,0,0,1,19,228,5,82,5,19,0,134,19,0,0,116,118,5,0,5,0,0,0,1,19,228,5,82,6,19,0,137,18,0,0,139,6,0,0,140,4,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,16,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,188,154,5,0,135,21,0,0,0,4,0,0,0,5,1,0,0,11,2,0,0,12,3,0,0,13,5,0,25,14,13,12,82,15,14,0,25,16,15,4,82,17,16,0,134,18,0,0,204,102,6,0,17,0,0,0,58,6,18,0,0,7,4,0,25,8,7,40,82,9,8,0,25,10,9,20,127,21,0,0,89,21,6,0,127,21,0,0,114,10,21,0,127,22,0,0,102,22,22,1,107,10,1,22,127,21,0,0,102,21,21,2,107,10,2,21,127,22,0,0,102,22,22,3,107,10,3,22,137,20,0,0,139,0,0,0,140,2,28,0,0,0,0,0,1,24,0,0,136,26,0,0,0,25,26,0,136,26,0,0,25,26,26,32,137,26,0,0,130,26,0,0,136,27,0,0,49,26,26,27,112,155,5,0,135,26,0,0,0,2,0,0,0,3,1,0,1,21,5,21,1,22,0,0,0,13,22,0,0,14,3,0,16,15,13,14,0,16,21,0,120,15,2,0,119,0,18,0,41,26,16,5,0,17,26,0,0,18,21,0,3,19,17,18,0,20,22,0,0,4,2,0,3,5,4,20,78,6,5,0,41,26,6,24,42,26,26,24,0,7,26,0,3,8,19,7,0,21,8,0,0,9,22,0,25,10,9,1,0,22,10,0,119,0,234,255,31,26,16,10,38,26,26,255,0,11,26,0,0,23,11,0,0,12,23,0,137,25,0,0,139,12,0,0,140,4,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,16,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,44,156,5,0,135,20,0,0,0,4,0,0,0,5,1,0,0,10,2,0,0,11,3,0,0,12,5,0,25,13,12,12,82,14,13,0,25,15,14,4,82,16,15,0,134,17,0,0,44,102,6,0,16,0,0,0,58,6,17,0,0,7,4,0,1,20,128,0,3,8,7,20,25,9,8,8,127,20,0,0,89,20,6,0,127,20,0,0,114,9,20,0,127,21,0,0,102,21,21,1,107,9,1,21,127,20,0,0,102,20,20,2,107,9,2,20,127,21,0,0,102,21,21,3,107,9,3,21,137,19,0,0,139,0,0,0,140,4,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,16,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,224,156,5,0,135,20,0,0,0,4,0,0,0,5,1,0,0,10,2,0,0,11,3,0,0,12,5,0,25,13,12,12,82,14,13,0,25,15,14,4,82,16,15,0,134,17,0,0,44,102,6,0,16,0,0,0,58,6,17,0,0,7,4,0,1,20,128,0,3,8,7,20,25,9,8,4,127,20,0,0,89,20,6,0,127,20,0,0,114,9,20,0,127,21,0,0,102,21,21,1,107,9,1,21,127,20,0,0,102,20,20,2,107,9,2,20,127,21,0,0,102,21,21,3,107,9,3,21,137,19,0,0,139,0,0,0,140,3,24,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,32,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,148,157,5,0,135,22,0,0,0,3,0,0,0,4,1,0,0,10,2,0,0,11,4,0,135,12,4,0,11,0,0,0,0,19,12,0,0,13,10,0,135,14,4,0,13,0,0,0,0,18,14,0,0,15,19,0,0,16,18,0,13,17,15,16,0,5,3,0,0,6,4,0,0,7,19,0,0,8,10,0,0,9,18,0,121,17,8,0,134,22,0,0,36,153,3,0,5,6,7,8,9,0,0,0,137,21,0,0,139,0,0,0,119,0,7,0,134,22,0,0,60,219,3,0,5,6,7,8,9,0,0,0,137,21,0,0,139,0,0,0,139,0,0,0,140,1,24,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,16,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,80,158,5,0,135,22,0,0,0,1,0,0,0,2,1,0,25,12,2,12,82,13,12,0,134,22,0,0,148,105,6,0,13,0,0,0,0,14,1,0,25,15,14,16,82,16,15,0,134,22,0,0,148,105,6,0,16,0,0,0,0,17,1,0,25,18,17,28,82,19,18,0,134,22,0,0,148,105,6,0,19,0,0,0,0,3,1,0,25,4,3,32,82,5,4,0,134,22,0,0,148,105,6,0,5,0,0,0,0,6,1,0,25,7,6,36,82,8,7,0,134,22,0,0,148,105,6,0,8,0,0,0,0,9,1,0,25,10,9,40,82,11,10,0,134,22,0,0,148,105,6,0,11,0,0,0,137,21,0,0,139,0,0,0,140,0,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,16,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,32,159,5,0,135,21,0,0,134,21,0,0,84,92,3,0,1,21,32,0,1,22,69,0,134,0,0,0,168,171,5,0,21,22,0,0,0,18,0,0,0,1,18,0,134,22,0,0,216,73,6,0,1,0,0,0,1,22,4,0,134,10,0,0,236,195,4,0,22,0,0,0,0,11,18,0,25,12,11,8,85,12,10,0,1,22,4,0,134,13,0,0,236,195,4,0,22,0,0,0,0,14,18,0,25,15,14,12,85,15,13,0,1,22,4,0,134,16,0,0,236,195,4,0,22,0,0,0,0,17,18,0,25,2,17,16,85,2,16,0,0,3,18,0,25,4,3,20,1,22,0,0,85,4,22,0,0,5,18,0,25,6,5,28,1,22,0,0,85,6,22,0,0,7,18,0,25,8,7,24,1,22,0,0,85,8,22,0,0,9,18,0,137,20,0,0,139,9,0,0,140,4,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0], eb + 358400);
  HEAPU8.set([130,19,0,0,136,20,0,0,49,19,19,20,20,160,5,0,135,19,0,0,0,4,0,0,0,5,1,0,0,9,2,0,0,10,3,0,0,11,5,0,25,12,11,12,82,13,12,0,25,14,13,4,82,15,14,0,134,16,0,0,44,102,6,0,15,0,0,0,58,6,16,0,0,7,4,0,1,19,128,0,3,8,7,19,127,19,0,0,89,19,6,0,127,19,0,0,114,8,19,0,127,20,0,0,102,20,20,1,107,8,1,20,127,19,0,0,102,19,19,2,107,8,2,19,127,20,0,0,102,20,20,3,107,8,3,20,137,18,0,0,139,0,0,0,140,1,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,196,160,5,0,135,19,0,0,0,1,0,0,0,2,1,0,25,7,2,8,134,8,0,0,44,55,6,0,7,0,0,0,33,9,8,0,121,9,3,0,1,17,5,0,119,0,19,0,0,10,1,0,25,11,10,8,25,12,11,4,82,13,12,0,0,16,13,0,1,19,0,0,14,14,13,19,120,14,3,0,1,17,5,0,119,0,9,0,0,3,16,0,26,4,3,8,0,15,4,0,0,5,15,0,134,19,0,0,44,45,5,0,5,0,0,0,119,0,230,255,32,19,17,5,121,19,7,0,0,6,1,0,134,19,0,0,20,20,6,0,6,0,0,0,137,18,0,0,139,0,0,0,139,0,0,0,140,1,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,140,161,5,0,135,19,0,0,0,1,0,0,0,2,1,0,25,7,2,8,134,8,0,0,136,55,6,0,7,0,0,0,33,9,8,0,121,9,3,0,1,17,5,0,119,0,19,0,0,10,1,0,25,11,10,8,25,12,11,4,82,13,12,0,0,16,13,0,1,19,0,0,14,14,13,19,120,14,3,0,1,17,5,0,119,0,9,0,0,3,16,0,26,4,3,8,0,15,4,0,0,5,15,0,134,19,0,0,84,46,5,0,5,0,0,0,119,0,230,255,32,19,17,5,121,19,7,0,0,6,1,0,134,19,0,0,132,20,6,0,6,0,0,0,137,18,0,0,139,0,0,0,139,0,0,0,140,2,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,32,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,84,162,5,0,135,8,0,0,25,5,7,12,0,4,7,0,82,8,1,0,85,4,8,0,106,9,1,4,109,4,4,9,106,8,1,8,109,4,8,8,134,2,0,0,240,144,4,0,4,0,0,0,59,8,1,0,66,3,8,2,82,8,1,0,85,5,8,0,106,9,1,4,109,5,4,9,106,8,1,8,109,5,8,8,134,8,0,0,76,124,4,0,0,5,3,0,137,7,0,0,139,0,0,0,140,2,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,32,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,232,162,5,0,135,8,0,0,25,5,7,12,0,4,7,0,82,8,1,0,85,4,8,0,106,9,1,4,109,4,4,9,106,8,1,8,109,4,8,8,134,2,0,0,116,146,4,0,4,0,0,0,59,8,1,0,66,3,8,2,82,8,1,0,85,5,8,0,106,9,1,4,109,5,4,9,106,8,1,8,109,5,8,8,134,8,0,0,236,125,4,0,0,5,3,0,137,7,0,0,139,0,0,0,140,4,20,0,0,0,0,0,42,15,1,31,34,17,1,0,1,18,255,255,1,19,0,0,125,16,17,18,19,0,0,0,41,16,16,1,20,15,15,16,0,4,15,0,34,16,1,0,1,19,255,255,1,18,0,0,125,15,16,19,18,0,0,0,42,15,15,31,34,19,1,0,1,16,255,255,1,17,0,0,125,18,19,16,17,0,0,0,41,18,18,1,20,15,15,18,0,5,15,0,42,15,3,31,34,17,3,0,1,16,255,255,1,19,0,0,125,18,17,16,19,0,0,0,41,18,18,1,20,15,15,18,0,6,15,0,34,18,3,0,1,19,255,255,1,16,0,0,125,15,18,19,16,0,0,0,42,15,15,31,34,19,3,0,1,18,255,255,1,17,0,0,125,16,19,18,17,0,0,0,41,16,16,1,20,15,15,16,0,7,15,0,21,15,4,0,21,16,5,1,134,8,0,0,112,110,6,0,15,16,4,5,128,16,0,0,0,9,16,0,21,16,6,2,21,15,7,3,134,10,0,0,112,110,6,0,16,15,6,7,21,15,6,4,0,11,15,0,21,15,7,5,0,12,15,0,128,15,0,0,1,16,0,0,134,13,0,0,192,20,3,0,8,9,10,15,16,0,0,0,21,16,13,11,128,15,0,0,21,15,15,12,134,14,0,0,112,110,6,0,16,15,11,12,139,14,0,0,140,1,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,16,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,176,164,5,0,135,21,0,0,0,1,0,0,0,2,1,0,25,11,2,20,82,12,11,0,26,13,12,1,85,11,13,0,0,14,1,0,25,15,14,20,82,16,15,0,36,17,16,0,120,17,3,0,137,20,0,0,139,0,0,0,0,18,1,0,82,3,18,0,134,21,0,0,216,166,5,0,3,0,0,0,0,4,1,0,25,5,4,4,82,6,5,0,134,21,0,0,216,166,5,0,6,0,0,0,0,7,1,0,25,8,7,8,82,9,8,0,134,21,0,0,180,1,6,0,9,0,0,0,0,10,1,0,134,21,0,0,216,166,5,0,10,0,0,0,137,20,0,0,139,0,0,0,140,0,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,16,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,116,165,5,0,135,20,0,0,1,20,48,0,1,21,54,0,134,0,0,0,168,171,5,0,20,21,0,0,0,17,0,0,1,21,4,0,134,1,0,0,236,195,4,0,21,0,0,0,0,9,17,0,85,9,1,0,1,21,4,0,134,10,0,0,236,195,4,0,21,0,0,0,0,11,17,0,25,12,11,4,85,12,10,0,0,13,17,0,25,14,13,8,134,21,0,0,72,75,6,0,14,0,0,0,0,15,17,0,25,16,15,16,134,21,0,0,72,75,6,0,16,0,0,0,0,2,17,0,25,3,2,24,134,21,0,0,72,75,6,0,3,0,0,0,0,4,17,0,25,5,4,32,134,21,0,0,72,75,6,0,5,0,0,0,0,6,17,0,25,7,6,40,134,21,0,0,72,75,6,0,7,0,0,0,0,8,17,0,137,19,0,0,139,8,0,0,140,3,27,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,16,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,100,166,5,0,135,25,0,0,0,3,0,0,0,4,1,0,0,15,2,0,0,16,3,0,0,17,3,0,82,18,17,0,0,19,15,0,3,20,18,19,134,25,0,0,12,5,6,0,16,20,0,0,0,21,3,0,25,22,21,4,82,5,22,0,0,6,3,0,82,7,6,0,3,8,5,7,0,9,4,0,0,10,15,0,134,25,0,0,160,232,5,0,8,9,10,0,0,11,15,0,0,12,3,0,82,13,12,0,3,14,13,11,85,12,14,0,137,24,0,0,139,0,0,0,140,1,24,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,16,137,22,0,0,130,22,0,0,136,23,0,0,49,22,22,23,12,167,5,0,135,22,0,0,0,1,0,0,0,2,1,0,26,10,2,24,0,19,10,0,1,23,60,0,134,22,0,0,196,195,5,0,23,0,0,0,0,11,19,0,25,12,11,16,82,13,12,0,25,14,13,8,82,15,14,0,82,16,15,0,26,17,16,1,85,15,17,0,0,3,19,0,25,4,3,8,1,22,0,0,85,4,22,0,0,5,19,0,0,18,5,0,0,6,18,0,0,7,18,0,25,8,7,4,82,9,8,0,134,22,0,0,84,183,5,0,6,9,0,0,1,23,60,0,134,22,0,0,144,96,6,0,23,0,0,0,137,21,0,0,139,0,0,0,140,4,27,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,32,137,25,0,0,130,25,0,0,136,26,0,0,49,25,25,26,204,167,5,0,135,25,0,0,0,4,0,0,0,5,1,0,0,14,2,0,0,15,3,0,0,16,4,0,82,17,16,0,0,22,17,0,0,18,14,0,0,19,4,0,25,20,19,4,82,21,20,0,0,6,5,0,0,7,22,0,27,25,6,6,3,8,7,25,25,9,8,2,80,10,9,0,41,25,10,16,42,25,25,16,0,11,25,0,3,12,21,11,0,13,15,0,134,25,0,0,160,232,5,0,18,12,13,0,137,24,0,0,139,0,0,0,140,3,23,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,16,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,108,168,5,0,135,20,0,0,0,3,0,0,0,4,1,0,0,9,2,0,134,10,0,0,0,181,5,0,0,17,10,0,0,11,17,0,25,12,11,12,82,13,12,0,1,21,248,31,1,22,4,0,134,20,0,0,128,39,6,0,13,21,22,0,0,14,17,0,25,15,14,16,82,16,15,0,0,5,4,0,0,6,9,0,134,20,0,0,128,39,6,0,16,5,6,0,0,7,3,0,0,8,17,0,134,20,0,0,240,243,5,0,7,8,0,0,137,19,0,0,139,0,0,0,140,2,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,16,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,20,169,5,0,135,21,0,0,0,2,0,0,0,3,1,0,1,21,16,0,1,22,41,0,134,10,0,0,168,171,5,0,21,22,0,0,0,18,10,0,0,11,18,0,25,12,11,12,1,22,0,0,85,12,22,0,0,13,18,0,25,14,13,8,1,22,0,0,85,14,22,0,0,15,18,0,1,22,0,0,85,15,22,0,0,16,2,0,0,17,18,0,25,4,17,4,84,4,16,0,0,5,3,0,0,6,18,0,25,7,6,6,83,7,5,0,0,8,18,0,1,21,1,0,134,22,0,0,20,212,5,0,8,21,0,0,0,9,18,0,137,20,0,0,139,9,0,0,140,1,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,212,169,5,0,135,16,0,0,0,13,15,0,25,2,0,8,82,3,2,0,1,16,0,0,13,5,3,16,121,5,10,0,134,6,0,0,32,50,5,0,0,0,0,0,32,7,6,0,121,7,3,0,1,14,3,0,119,0,4,0,1,1,255,255,119,0,2,0,1,14,3,0,32,16,14,3,121,16,17,0,25,8,0,32,82,9,8,0,1,16,255,0,19,16,9,16,1,17,1,0,135,10,5,0,16,0,13,17,32,11,10,1,121,11,7,0,78,12,13,0,1,16,255,0,19,16,12,16,0,4,16,0,0,1,4,0,119,0,2,0,1,1,255,255,137,15,0,0,139,1,0,0,140,1,23,0,0,0,0,0,1,19,0,0,136,21,0,0,0,20,21,0,136,21,0,0,25,21,21,16,137,21,0,0,130,21,0,0,136,22,0,0,49,21,21,22,152,170,5,0,135,21,0,0,0,1,0,0,0,2,1,0,0,11,1,0,82,12,11,0,25,13,12,4,82,14,13,0,0,15,1,0,25,16,15,4,80,17,16,0,2,21,0,0,255,255,0,0,19,21,17,21,0,18,21,0,0,3,1,0,25,4,3,8,82,5,4,0,25,6,5,4,82,7,6,0,1,21,29,0,135,8,87,0,21,2,14,18,7,0,0,0,0,9,1,0,25,10,9,44,85,10,8,0,137,20,0,0,139,0,0,0,140,1,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,56,171,5,0,135,19,0,0,0,1,0,0,0,2,1,0,25,8,2,12,82,9,8,0,1,19,236,5,82,10,19,0,14,11,9,10,120,11,3,0,137,18,0,0,139,0,0,0,0,12,1,0,25,13,12,12,82,14,13,0,1,19,236,5,85,19,14,0,0,15,1,0,134,3,0,0,80,249,5,0,15,0,0,0,0,16,3,0,0,4,16,0,0,5,1,0,25,6,5,12,82,7,6,0,135,19,118,0,4,7,0,0,137,18,0,0,139,0,0,0,140,2,22,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,220,171,5,0,135,19,0,0,0,2,0,0,0,3,1,0,1,19,212,14,78,7,19,0,41,19,7,24,42,19,19,24,33,8,19,0,120,8,14,0,1,20,60,0,1,21,0,0,134,19,0,0,192,84,6,0,20,21,0,0,1,21,64,0,1,20,0,0,134,19,0,0,192,84,6,0,21,20,0,0,1,19,212,14,1,20,1,0,83,19,20,0,0,9,2,0,134,10,0,0,160,148,5,0,9,0,0,0,134,11,0,0,192,160,4,0,10,0,0,0,0,16,11,0,0,12,16,0,26,13,12,24,0,15,13,0,0,14,3,0,0,4,15,0,25,5,4,8,85,5,14,0,0,6,16,0,137,18,0,0,139,6,0,0,140,4,19,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,5,4,2,1,25,5,3,76,82,7,5,0,1,18,255,255,15,8,18,7,121,8,16,0,134,10,0,0,196,122,6,0,3,0,0,0,32,15,10,0,134,11,0,0,68,94,4,0,0,4,3,0,121,15,3,0,0,12,11,0,119,0,10,0,134,18,0,0,172,122,6,0,3,0,0,0,0,12,11,0,119,0,5,0,134,9,0,0,68,94,4,0,0,4,3,0,0,12,9,0,13,13,12,4,121,13,3,0,0,6,2,0,119,0,5,0,7,18,12,1,38,18,18,255,0,14,18,0,0,6,14,0,139,6,0,0,140,1,17,0,0,0,0,0,1,10,0,0,136,14,0,0,0,11,14,0,136,14,0,0,25,14,14,80,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,72,173,5,0,135,14,0,0,0,8,11,0,25,7,11,8,0,1,0,0,134,2,0,0,52,136,5,0,85,8,2,0,0,9,7,0,1,12,132,14,25,13,9,64,78,14,12,0,83,9,14,0,25,9,9,1,25,12,12,1,54,14,9,13,108,173,5,0,82,3,8,0,1,15,0,0,1,16,64,0,134,14,0,0,20,213,4,0,3,15,7,16,0,4,1,0,1,14,56,1,3,5,4,14,82,6,5,0,134,14,0,0,88,242,4,0,6,8,0,0,137,11,0,0,139,0,0,0,140,2,22,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,244,173,5,0,135,19,0,0,25,3,18,4,0,2,0,0,89,3,1,0,0,8,2,0,1,19,60,1,3,9,8,19,82,10,9,0,32,11,10,1,120,11,3,0,137,18,0,0,139,0,0,0,0,12,2,0,1,19,56,1,3,13,12,19,82,14,13,0,25,15,14,12,82,4,15,0,25,5,4,4,82,6,5,0,0,16,6,0,0,7,16,0,1,20,0,0,1,21,4,0,134,19,0,0,20,213,4,0,7,20,3,21,137,18,0,0,139,0,0,0,140,0,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,152,174,5,0,135,18,0,0,1,18,28,0,1,19,127,0,134,0,0,0,168,171,5,0,18,19,0,0,0,15,0,0,0,1,15,0,134,19,0,0,84,71,6,0,1,0,0,0,0,7,15,0,25,8,7,8,1,19,11,0,84,8,19,0,0,9,15,0,25,10,9,24,1,19,255,255,85,10,19,0,0,11,15,0,25,12,11,20,1,19,0,0,83,12,19,0,134,13,0,0,104,85,6,0,0,14,15,0,25,2,14,12,85,2,13,0,1,19,0,0,134,3,0,0,148,94,6,0,19,0,0,0,0,4,15,0,25,5,4,16,85,5,3,0,0,6,15,0,137,17,0,0,139,6,0,0,140,1,19,0,0,0,0,0,1,15,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,16,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,96,175,5,0,135,17,0,0,0,1,0,0,0,2,1,0,25,5,2,40,134,6,0,0,228,55,6,0,5,0,0,0,33,7,6,0,121,7,3,0,1,15,5,0,119,0,18,0,0,8,1,0,25,9,8,40,25,10,9,4,82,11,10,0,0,13,11,0,1,17,0,0,14,12,11,17,120,12,3,0,1,15,5,0,119,0,8,0,0,3,13,0,0,14,3,0,0,4,14,0,134,17,0,0,88,161,5,0,4,0,0,0,119,0,231,255,32,17,15,5,121,17,3,0,137,16,0,0,139,0,0,0,139,0,0,0,140,0,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,20,176,5,0,135,18,0,0,1,18,36,0,1,19,130,0,134,0,0,0,168,171,5,0,18,19,0,0,0,15,0,0,1,19,0,0,134,1,0,0,148,94,6,0,19,0,0,0,0,7,15,0,85,7,1,0,1,19,0,0,134,8,0,0,148,94,6,0,19,0,0,0,0,9,15,0,25,10,9,4,85,10,8,0,0,11,15,0,25,12,11,8,134,19,0,0,156,70,6,0,12,0,0,0,0,13,15,0,25,14,13,16,134,19,0,0,156,70,6,0,14,0,0,0,0,2,15,0,25,3,2,24,134,19,0,0,156,70,6,0,3,0,0,0,0,4,15,0,25,5,4,32,1,19,0,0,85,5,19,0,0,6,15,0,137,17,0,0,139,6,0,0,140,3,25,0,0,0,0,0,1,21,0,0,136,23,0,0,0,22,23,0,136,23,0,0,25,23,23,16,137,23,0,0,130,23,0,0,136,24,0,0,49,23,23,24,236,176,5,0,135,23,0,0,0,3,0,0,0,4,1,0,0,13,2,0,0,14,3,0,25,15,14,12,82,16,15,0,0,17,3,0,25,18,17,4,80,19,18,0,2,23,0,0,255,255,0,0,19,23,19,23,0,20,23,0,0,5,4,0,5,6,20,5,3,7,16,6,0,8,13,0,0,9,3,0,25,10,9,4,80,11,10,0,2,23,0,0,255,255,0,0,19,23,11,23,0,12,23,0,134,23,0,0,160,232,5,0,7,8,12,0,137,22,0,0,139,0,0,0,140,0,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,148,177,5,0,135,18,0,0,1,18,36,0,1,19,115,0,134,0,0,0,168,171,5,0,18,19,0,0,0,15,0,0,0,1,15,0,134,19,0,0,32,73,6,0,1,0,0,0,0,7,15,0,25,8,7,8,134,19,0,0,32,73,6,0,8,0,0,0,0,9,15,0,25,10,9,16,1,19,0,0,85,10,19,0,0,11,15,0,25,12,11,20,1,19,0,0,85,12,19,0,0,13,15,0,25,14,13,24,1,19,0,0,85,14,19,0,0,2,15,0,25,3,2,28,1,19,0,0,85,3,19,0,0,4,15,0,25,5,4,32,1,19,0,0,83,5,19,0,0,6,15,0,137,17,0,0,139,6,0,0,140,0,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,96,178,5,0,135,18,0,0,1,18,28,0,1,19,66,0,134,0,0,0,168,171,5,0,18,19,0,0,0,15,0,0,0,1,15,0,134,19,0,0,52,74,6,0,1,0,0,0,0,6,15,0,25,7,6,8,134,19,0,0,52,74,6,0,7,0,0,0,0,8,15,0,25,9,8,16,1,19,0,0,85,9,19,0,0,10,15,0,25,11,10,20,1,19,0,0,85,11,19,0,0,12,15,0,25,13,12,24,1,19,0,0,85,13,19,0,134,2,0,0,228,111,6,0,0,14,2,0,0,3,15,0,0,4,14,0,134,19,0,0,192,46,6,0,3,4,0,0,0,5,15,0,137,17,0,0,139,5,0,0,140,1,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,44,179,5,0,135,15,0,0,0,2,0,0,0,5,2,0,1,15,22,30,1,16,4,0,134,6,0,0,236,248,4,0,5,15,16,0,32,7,6,0,121,7,3,0,1,1,0,0,119,0,23,0,0,8,2,0,1,16,27,30,1,15,6,0,134,9,0,0,236,248,4,0,8,16,15,0,32,10,9,0,121,10,3,0,1,1,1,0,119,0,13,0,0,11,2,0,1,15,34,30,1,16,3,0,134,12,0,0,236,248,4,0,11,15,16,0,32,3,12,0,121,3,3,0,1,1,2,0,119,0,3,0,1,1,255,255,119,0,1,0,0,4,1,0,137,14,0,0,139,4,0,0,140,1,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,240,179,5,0,135,18,0,0,0,1,0,0,0,2,1,0,0,15,2,0,1,14,0,0,0,6,14,0,35,7,6,2,120,7,2,0,119,0,18,0,0,8,15,0,82,9,8,0,0,10,1,0,25,11,10,32,78,12,11,0,61,19,0,0,137,136,136,60,134,18,0,0,220,111,4,0,9,19,12,0,0,13,15,0,25,3,13,4,0,15,3,0,0,4,14,0,25,5,4,1,0,14,5,0,119,0,236,255,137,17,0,0,139,0,0,0,140,4,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,144,180,5,0,135,19,0,0,0,4,0,0,0,5,1,0,0,9,2,0,0,10,3,0,0,11,5,0,25,12,11,12,82,13,12,0,25,14,13,4,82,15,14,0,1,19,212,31,134,16,0,0,208,147,5,0,15,19,0,0,32,6,16,0,0,7,4,0,1,19,168,0,3,8,7,19,121,6,6,0,1,19,1,0,83,8,19,0,137,18,0,0,139,0,0,0,119,0,5,0,1,19,0,0,83,8,19,0,137,18,0,0,139,0,0,0,139,0,0,0,140,0,19,0,0,0,0,0,1,15,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,16,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,52,181,5,0,135,17,0,0,1,17,24,0,1,18,127,0,134,0,0,0,168,171,5,0,17,18,0,0,0,14,0,0,0,1,14,0,134,18,0,0,84,71,6,0,1,0,0,0,0,6,14,0,25,7,6,8,1,18,3,0,84,7,18,0,1,18,0,0,134,8,0,0,148,94,6,0,18,0,0,0,0,9,14,0,25,10,9,12,85,10,8,0,1,18,0,0,134,11,0,0,148,94,6,0,18,0,0,0,0,12,14,0,25,13,12,16,85,13,11,0,134,2,0,0,104,85,6,0,0,3,14,0,25,4,3,20,85,4,2,0,0,5,14,0,137,16,0,0,139,5,0,0,140,2,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,248,181,5,0,135,16,0,0,0,2,0,0,0,3,2,0,25,6,3,72,82,16,1,0,85,6,16,0,106,17,1,4,109,6,4,17,0,7,2,0,25,8,7,4,82,9,8,0,88,10,1,0,58,11,10,0,25,12,1,4,88,13,12,0,58,4,13,0,1,17,9,0,135,5,119,0,17,9,11,4,137,15,0,0,139,0,0,0,140,2,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,124,182,5,0,135,19,0,0,0,2,0,0,0,3,1,0,0,9,2,0,25,10,9,44,82,11,10,0,0,12,3,0,25,13,12,12,82,14,13,0,25,15,14,4,82,16,15,0,0,4,3,0,25,5,4,16,80,6,5,0,41,19,6,16,42,19,19,16,0,7,19,0,1,19,30,0,135,8,88,0,19,11,16,7,137,18,0,0,139,0,0,0,140,2,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,4,183,5,0,135,8,0,0,25,5,7,8,0,4,7,0,82,8,1,0,85,4,8,0,106,9,1,4,109,4,4,9,134,2,0,0,164,9,6,0,4,0,0,0,59,9,1,0,66,3,9,2,82,9,1,0,85,5,9,0,106,8,1,4,109,5,4,8,134,8,0,0,24,234,5,0,0,5,3,0,137,7,0,0,139,0,0,0,140,2,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,16,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,136,183,5,0,135,20,0,0,0,2,0,0,0,3,1,0,0,9,3,0,25,10,9,4,82,11,10,0,0,17,11,0,0,12,17,0,82,13,12,0,0,14,2,0,85,14,13,0,0,15,2,0,0,16,17,0,85,16,15,0,0,4,3,0,25,5,4,4,82,6,5,0,0,7,2,0,25,8,7,4,85,8,6,0,137,19,0,0,139,0,0,0,140,1,19,0,0,0,0,0,1,15,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,16,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,16,184,5,0,135,17,0,0,0,1,0,0,0,2,1,0,25,7,2,12,82,8,7,0,134,17,0,0,148,105,6,0,8,0,0,0,0,9,1,0,25,10,9,16,82,11,10,0,134,17,0,0,148,105,6,0,11,0,0,0,0,12,1,0,25,13,12,20,82,14,13,0,1,17,0,0,14,3,14,17,120,3,3,0,137,16,0,0,139,0,0,0,0,4,1,0,25,5,4,20,82,6,5,0,134,17,0,0,184,57,5,0,6,0,0,0,137,16,0,0,139,0,0,0,140,2,20,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,25,2,0,104,85,2,1,0,25,3,0,8,82,8,3,0,25,9,0,4,82,10,9,0,0,11,8,0,0,12,10,0,4,13,11,12,25,14,0,108,85,14,13,0,33,15,1,0,15,4,1,13,19,19,15,4,0,16,19,0,121,16,5,0,3,5,10,1,25,6,0,100,85,6,5,0,119,0,3,0,25,7,0,100,85,7,11,0,139,0,0,0,140,2,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,40,185,5,0,135,16,0,0,0,2,0,0,0,3,2,0,1,16,144,0,3,6,3,16,82,16,1,0,85,6,16,0,106,17,1,4,109,6,4,17,0,7,2,0,25,8,7,4,82,9,8,0,88,10,1,0,58,11,10,0,25,12,1,4,88,13,12,0,58,4,13,0,1,17,18,0,135,5,119,0,17,9,11,4,137,15,0,0,139,0,0,0,140,0,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,176,185,5,0,135,16,0,0,0,13,15,0,1,17,0,13,134,16,0,0,44,77,6,0,17,13,0,0,134,0,0,0,208,123,5,0,0,12,0,0,0,1,12,0,25,4,1,28,1,16,31,0,85,4,16,0,0,5,12,0,25,6,5,32,1,16,32,0,85,6,16,0,0,7,12,0,134,8,0,0,160,171,4,0,7,0,0,0,0,9,12,0,25,10,9,44,85,10,8,0,0,11,12,0,25,2,11,48,1,16,33,0,85,2,16,0,0,3,12,0,137,15,0,0,139,3,0,0,140,2,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,92,186,5,0,135,16,0,0,0,2,0,0,0,3,2,0,1,16,8,1,3,5,3,16,82,6,5,0,0,13,6,0,0,7,13,0,1,16,1,0,83,7,16,0,0,8,13,0,25,9,8,1,1,16,0,0,83,9,16,0,0,10,13,0,25,11,10,2,1,16,1,0,83,11,16,0,0,12,13,0,25,4,12,20,82,16,1,0,85,4,16,0,106,17,1,4,109,4,4,17,137,15,0,0,139,0,0,0,140,2,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,244,186,5,0,135,16,0,0,0,2,0,0,0,3,2,0,25,6,3,88,82,16,1,0,85,6,16,0,106,17,1,4,109,6,4,17,0,7,2,0,25,8,7,4,82,9,8,0,88,10,1,0,58,11,10,0,25,12,1,4,88,13,12,0,58,4,13,0,1,17,11,0,135,5,119,0,17,9,11,4,137,15,0,0,139,0,0,0,140,2,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,120,187,5,0,135,16,0,0,0,2,0,0,0,3,2,0,25,6,3,56,82,16,1,0,85,6,16,0,106,17,1,4,109,6,4,17,0,7,2,0,25,8,7,4,82,9,8,0,88,10,1,0,58,11,10,0,25,12,1,4,88,13,12,0,58,4,13,0,1,17,10,0,135,5,119,0,17,9,11,4,137,15,0,0,139,0,0,0,140,2,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,252,187,5,0,135,15,0,0,0,12,14,0,0,2,0,0,0,3,1,0,0,4,2,0,82,5,4,0,82,6,5,0,0,7,3,0,16,8,6,7,120,8,2,0,119,0,10,0,134,9,0,0,164,217,5,0,85,12,9,0,0,10,2,0,82,11,10,0,134,15,0,0,88,242,4,0,11,12,0,0,119,0,241,255,137,14,0,0,139,0,0,0,140,1,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,132,188,5,0,135,16,0,0,0,2,15,0,0,1,0,0,1,16,48,0,82,5,16,0,1,16,0,0,14,6,5,16,121,6,6,0,1,16,48,0,82,7,16,0,134,16,0,0,68,137,5,0,7,0,0,0,0,8,1,0,134,9,0,0,232,208,4,0,8,0,0,0,0,13,9,0,0,10,13,0,0,11,13,0,82,12,11,0,1,16,0,0,85,2,16,0,134,3,0,0,232,4,4,0,10,12,2,0,1,16,48,0,85,16,3,0,0,4,13,0,134,16,0,0,148,105,6,0,4,0,0,0,137,15,0,0,139,0,0,0,140,2,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,60,189,5,0,135,19,0,0,0,2,0,0,0,3,1,0,0,6,2,0,0,15,6,0,0,7,15,0,25,8,7,16,82,9,8,0,0,16,9,0,0,10,3,0,25,11,10,8,80,12,11,0,41,19,12,16,42,19,19,16,0,13,19,0,32,14,13,11,120,14,3,0,137,18,0,0,139,0,0,0,0,4,16,0,0,5,3,0,134,19,0,0,52,103,5,0,4,5,0,0,137,18,0,0,139,0,0,0,140,4,22,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,32,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,212,189,5,0,135,19,0,0,0,16,18,0,0,4,0,0,0,5,1,0,0,8,2,0,0,9,3,0,0,10,16,0,0,11,10,0,1,19,0,0,85,11,19,0,25,12,10,4,0,13,12,0,1,19,0,0,85,13,19,0,0,14,9,0,85,16,14,0,0,15,4,0,0,6,5,0,0,7,8,0,1,20,1,0,1,21,8,0,134,19,0,0,204,27,5,0,15,6,7,20,16,21,0,0,137,18,0,0,139,0,0,0,140,4,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,16,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,112,190,5,0,135,20,0,0,0,4,0,0,0,5,1,0,0,10,2,0,0,11,3,0,0,12,5,0,25,13,12,12,82,14,13,0,25,15,14,4,82,16,15,0,134,17,0,0,108,103,6,0,16,0,0,0,58,6,17,0,0,7,4,0,1,20,144,0,3,8,7,20,25,9,8,4,89,9,6,0,137,19,0,0,139,0,0,0,140,2,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,244,190,5,0,135,8,0,0,25,5,7,4,0,2,0,0,0,3,2,0,82,8,1,0,85,5,8,0,106,9,1,4,109,5,4,9,106,8,1,8,109,5,8,8,134,8,0,0,172,207,4,0,3,5,0,0,0,4,2,0,134,8,0,0,180,15,4,0,4,0,0,0,137,7,0,0,139,0,0,0,140,1,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,112,191,5,0,135,16,0,0,0,2,0,0,0,5,2,0,1,16,248,0,3,6,5,16,134,7,0,0,188,53,6,0,6,0,0,0,33,8,7,0,121,8,6,0,1,1,0,0,0,4,1,0,137,15,0,0,139,4,0,0,119,0,12,0,0,9,2,0,1,16,248,0,3,10,9,16,25,11,10,4,82,12,11,0,0,13,12,0,0,3,13,0,0,1,3,0,0,4,1,0,137,15,0,0,139,4,0,0,1,16,0,0,139,16,0,0,140,2,15,0,0,0,0,0,1,8,0,0,136,12,0,0,0,9,12,0,136,12,0,0,25,12,12,80,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,16,192,5,0,135,12,0,0,25,6,9,8,0,2,1,0,0,3,2,0,25,4,3,4,82,5,4,0,1,13,0,0,1,14,64,0,134,12,0,0,152,167,5,0,5,13,6,14,0,7,0,0,0,10,6,0,25,11,7,64,78,12,10,0,83,7,12,0,25,7,7,1,25,10,10,1,54,12,7,11,68,192,5,0,137,9,0,0,139,0,0,0,140,4,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,16,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,152,192,5,0,135,20,0,0,0,4,0,0,0,5,1,0,0,10,2,0,0,11,3,0,0,12,5,0,25,13,12,12,82,14,13,0,25,15,14,4,82,16,15,0,134,17,0,0,156,100,6,0,16,0,0,0,58,6,17,0,0,7,4,0,25,8,7,72,25,9,8,4,89,9,6,0,137,19,0,0,139,0,0,0,140,2,19,0,0,0,0,0,1,15,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,16,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,24,193,5,0,135,17,0,0,0,2,0,0,58,3,1,0,58,7,3,0,0,8,2,0,25,9,8,32,88,10,9,0,64,11,10,7,89,9,11,0,0,12,2,0,25,13,12,32,88,14,13,0,59,17,0,0,72,4,14,17,120,4,3,0,137,16,0,0,139,0,0,0,0,5,2,0,25,6,5,80,1,17,1,0,83,6,17,0,137,16,0,0,139,0,0,0,140,1,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,164,193,5,0,135,16,0,0,0,1,0,0,0,2,1,0,25,6,2,8,82,7,6,0,26,8,7,1,85,6,8,0,0,9,1,0,25,10,9,8,82,11,10,0,36,12,11,0,120,12,3,0,137,15,0,0,139,0,0,0,0,13,1,0,25,3,13,12,82,4,3,0,134,16,0,0,48,146,5,0,4,0,0,0,0,5,1,0,134,16,0,0,216,166,5,0,5,0,0,0,137,15,0,0,139,0,0,0,140,2,19,0,0,0,0,0,1,15,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,16,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,60,194,5,0,135,17,0,0,0,2,0,0,58,3,1,0,58,7,3,0,0,8,2,0,25,9,8,32,88,10,9,0,64,11,10,7,89,9,11,0,0,12,2,0,25,13,12,32,88,14,13,0,59,17,0,0,72,4,14,17,120,4,3,0,137,16,0,0,139,0,0,0,0,5,2,0,25,6,5,80,1,17,1,0,83,6,17,0,137,16,0,0,139,0,0,0,140,1,15,0,0,0,0,0,2,12,0,0,16,39,0,0,1,10,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,208,194,5,0,135,13,0,0,0,1,0,0,1,8,0,0,0,2,8,0,15,3,2,12,120,3,2,0,119,0,13,0,0,4,1,0,82,5,4,0,32,13,5,0,121,13,3,0,1,13,1,0,85,4,13,0,32,9,5,0,120,9,7,0,0,6,8,0,25,7,6,1,0,8,7,0,119,0,241,255,135,13,120,0,119,0,238,255,137,11,0,0,1,13,0,0,139,13,0,0,140,1,15,0,0,0,0,0,2,12,0,0,16,39,0,0,1,10,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,104,195,5,0,135,13,0,0,0,1,0,0,1,8,0,0,0,2,8,0,15,3,2,12,120,3,2,0,119,0,13,0,0,4,1,0,82,5,4,0,32,13,5,0,121,13,3,0,1,13,1,0,85,4,13,0,32,9,5,0,120,9,7,0,0,6,8,0,25,7,6,1,0,8,7,0,119,0,241,255,135,13,120,0,119,0,238,255,137,11,0,0,1,13,0,0,139,13,0,0,140,1,15,0,0,0,0,0,2,12,0,0,16,39,0,0,1,10,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,0,196,5,0,135,13,0,0,0,1,0,0,1,8,0,0,0,2,8,0,15,3,2,12,120,3,2,0,119,0,13,0,0,4,1,0,82,5,4,0,32,13,5,0,121,13,3,0,1,13,1,0,85,4,13,0,32,9,5,0,120,9,7,0,0,6,8,0,25,7,6,1,0,8,7,0,119,0,241,255,135,13,120,0,119,0,238,255,137,11,0,0,1,13,0,0,139,13,0,0,140,1,15,0,0,0,0,0,2,12,0,0,16,39,0,0,1,10,0,0,136,13,0,0,0,11,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,152,196,5,0,135,13,0,0,0,1,0,0,1,8,0,0,0,2,8,0,15,3,2,12,120,3,2,0,119,0,13,0,0,4,1,0,82,5,4,0,32,13,5,0,121,13,3,0,1,13,1,0,85,4,13,0,32,9,5,0,120,9,7,0,0,6,8,0,25,7,6,1,0,8,7,0,119,0,241,255,135,13,120,0,119,0,238,255,137,11,0,0,1,13,0,0,139,13,0,0,140,1,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,40,197,5,0,135,15,0,0,0,1,0,0,0,2,1,0,25,5,2,8,82,6,5,0,1,15,0,0,14,7,6,15,120,7,7,0,0,4,1,0,134,15,0,0,216,166,5,0,4,0,0,0,137,14,0,0,139,0,0,0,0,8,1,0,25,9,8,12,82,10,9,0,0,11,1,0,25,12,11,8,82,3,12,0,1,16,255,0,19,16,10,16,135,15,9,0,16,3,0,0,0,4,1,0,134,15,0,0,216,166,5,0,4,0,0,0,137,14,0,0,139,0,0,0,140,2,15,0,0,0,0,0,1,8,0,0,136,12,0,0,0,9,12,0,136,12,0,0,25,12,12,80,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,208,197,5,0,135,12,0,0,25,6,9,8,0,2,1,0,0,3,2,0,25,4,3,4,82,5,4,0,1,13,1,0,1,14,64,0,134,12,0,0,152,167,5,0,5,13,6,14,0,7,0,0,0,10,6,0,25,11,7,64,78,12,10,0,83,7,12,0,25,7,7,1,25,10,10,1,54,12,7,11,4,198,5,0,137,9,0,0,139,0,0,0,140,1,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,88,198,5,0,135,15,0,0,0,1,0,0,0,2,1,0,134,4,0,0,116,54,6,0,2,0,0,0,33,5,4,0,121,5,7,0,0,3,1,0,134,15,0,0,216,166,5,0,3,0,0,0,137,14,0,0,139,0,0,0,0,6,1,0,25,7,6,4,82,8,7,0,1,15,0,1,4,9,8,15,0,12,9,0,0,10,1,0,134,15,0,0,52,19,6,0,10,0,0,0,0,11,12,0,134,15,0,0,228,94,6,0,11,0,0,0,0,3,1,0,134,15,0,0,216,166,5,0,3,0,0,0,137,14,0,0,139,0,0,0,140,3,19,0,0,0,0,0,1,15,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,32,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,16,199,5,0,135,17,0,0,0,13,16,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,3,0,134,17,0,0,148,4,6,0,6,0,0,0,0,7,3,0,82,8,7,0,0,9,4,0,135,10,121,0,8,9,0,0,0,14,10,0,0,11,5,0,85,13,11,0,0,12,14,0,1,18,1,0,135,17,45,0,12,18,13,0,137,16,0,0,139,0,0,0,140,5,22,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,32,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,156,199,5,0,135,19,0,0,0,16,18,0,0,5,0,0,0,6,1,0,0,8,2,0,0,9,3,0,0,10,4,0,0,11,9,0,0,12,10,0,134,13,0,0,240,9,6,0,11,12,0,0,85,16,13,0,0,14,5,0,0,15,6,0,0,7,8,0,1,20,9,0,1,21,4,0,134,19,0,0,204,27,5,0,14,15,7,20,16,21,0,0,137,18,0,0,139,0,0,0,140,3,19,0,0,0,0,0], eb + 368640);
  HEAPU8.set([1,15,0,0,136,17,0,0,0,16,17,0,136,17,0,0,25,17,17,32,137,17,0,0,130,17,0,0,136,18,0,0,49,17,17,18,44,200,5,0,135,17,0,0,0,13,16,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,3,0,134,17,0,0,148,4,6,0,6,0,0,0,0,7,3,0,82,8,7,0,0,9,4,0,135,10,121,0,8,9,0,0,0,14,10,0,0,11,5,0,85,13,11,0,0,12,14,0,1,18,1,0,135,17,45,0,12,18,13,0,137,16,0,0,139,0,0,0,140,1,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,184,200,5,0,135,15,0,0,0,1,0,0,0,2,1,0,0,12,2,0,1,11,0,0,0,3,11,0,35,4,3,2,120,4,2,0,119,0,15,0,0,5,12,0,82,6,5,0,61,16,0,0,137,136,136,60,134,15,0,0,132,103,4,0,6,16,0,0,0,7,12,0,25,8,7,4,0,12,8,0,0,9,11,0,25,10,9,1,0,11,10,0,119,0,239,255,137,14,0,0,139,0,0,0,140,4,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,76,201,5,0,135,19,0,0,0,4,0,0,0,5,1,0,0,9,2,0,0,10,3,0,0,11,5,0,25,12,11,12,82,13,12,0,25,14,13,4,82,15,14,0,134,16,0,0,108,103,6,0,15,0,0,0,58,6,16,0,0,7,4,0,1,19,144,0,3,8,7,19,89,8,6,0,137,18,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,204,201,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,76,202,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,204,202,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,76,203,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,204,203,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,76,204,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,204,204,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,76,205,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,204,205,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,76,206,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,204,206,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,76,207,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,204,207,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,76,208,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,204,208,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,76,209,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,204,209,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,76,210,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,204,210,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,76,211,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,6,22,0,0,0,0,0,1,18,0,0,136,20,0,0,0,19,20,0,136,20,0,0,25,20,20,32,137,20,0,0,130,20,0,0,136,21,0,0,49,20,20,21,204,211,5,0,135,20,0,0,0,6,0,0,0,7,1,0,0,10,2,0,0,11,3,0,0,12,4,0,0,13,5,0,0,14,6,0,0,15,7,0,0,16,10,0,0,17,11,0,0,8,12,0,0,9,13,0,134,20,0,0,204,27,5,0,14,15,16,17,8,9,0,0,137,19,0,0,139,0,0,0,140,2,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,72,212,5,0,135,18,0,0,0,2,0,0,0,3,1,0,0,8,2,0,25,9,8,12,82,10,9,0,0,11,3,0,0,12,2,0,25,13,12,4,80,14,13,0,2,18,0,0,255,255,0,0,19,18,14,18,0,15,18,0,5,4,11,15,134,5,0,0,88,219,4,0,10,4,0,0,0,6,2,0,25,7,6,12,85,7,5,0,137,17,0,0,139,0,0,0,140,1,16,0,0,0,0,0,1,10,0,0,136,14,0,0,0,11,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,212,212,5,0,135,14,0,0,0,1,0,0,0,2,1,0,25,3,2,28,82,4,3,0,0,5,1,0,25,6,5,32,0,9,4,0,0,12,6,0,25,13,9,16,78,14,12,0,83,9,14,0,25,9,9,1,25,12,12,1,54,14,9,13,248,212,5,0,0,7,1,0,25,8,7,80,1,14,1,0,83,8,14,0,137,11,0,0,139,0,0,0,140,3,20,0,0,0,0,0,1,16,0,0,136,18,0,0,0,17,18,0,136,18,0,0,25,18,18,16,137,18,0,0,130,18,0,0,136,19,0,0,49,18,18,19,92,213,5,0,135,18,0,0,0,3,0,0,0,4,1,0,0,8,2,0,0,9,3,0,0,10,8,0,85,10,9,0,0,11,8,0,0,12,3,0,25,13,12,4,85,13,11,0,0,14,4,0,0,15,3,0,85,15,14,0,0,5,3,0,0,6,4,0,25,7,6,4,85,7,5,0,137,17,0,0,139,0,0,0,140,2,15,0,0,0,0,0,1,9,0,0,136,13,0,0,0,10,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,220,213,5,0,135,13,0,0,0,2,0,0,0,3,2,0,25,4,3,40,82,5,4,0,25,6,5,20,0,8,6,0,0,11,1,0,25,12,8,16,78,13,11,0,83,8,13,0,25,8,8,1,25,11,11,1,54,13,8,12,252,213,5,0,0,7,2,0,134,13,0,0,180,15,4,0,7,0,0,0,137,10,0,0,139,0,0,0,140,2,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,96,214,5,0,135,14,0,0,0,3,0,0,0,4,1,0,1,14,4,6,82,5,14,0,1,14,0,0,14,6,5,14,121,6,13,0,1,14,4,6,82,7,14,0,0,8,3,0,0,9,4,0,38,14,7,7,135,10,122,0,14,8,9,0,0,2,10,0,0,11,2,0,137,13,0,0,139,11,0,0,119,0,5,0,1,2,0,0,0,11,2,0,137,13,0,0,139,11,0,0,1,14,0,0,139,14,0,0,140,4,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,248,214,5,0,135,19,0,0,0,4,0,0,0,5,1,0,0,9,2,0,0,10,3,0,0,11,5,0,25,12,11,12,82,13,12,0,25,14,13,4,82,15,14,0,134,16,0,0,180,104,6,0,15,0,0,0,58,6,16,0,0,7,4,0,25,8,7,112,89,8,6,0,137,18,0,0,139,0,0,0,140,1,16,0,0,0,0,0,1,10,0,0,136,14,0,0,0,11,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,116,215,5,0,135,14,0,0,0,1,0,0,0,2,1,0,25,3,2,28,82,4,3,0,0,5,1,0,25,6,5,32,0,9,4,0,0,12,6,0,25,13,9,16,78,14,12,0,83,9,14,0,25,9,9,1,25,12,12,1,54,14,9,13,152,215,5,0,0,7,1,0,25,8,7,80,1,14,1,0,83,8,14,0,137,11,0,0,139,0,0,0,140,4,21,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,130,19,0,0,136,20,0,0,49,19,19,20,252,215,5,0,135,19,0,0,0,4,0,0,0,5,1,0,0,9,2,0,0,10,3,0,0,11,5,0,25,12,11,12,82,13,12,0,25,14,13,4,82,15,14,0,134,16,0,0,236,100,6,0,15,0,0,0,58,6,16,0,0,7,4,0,25,8,7,72,89,8,6,0,137,18,0,0,139,0,0,0,140,1,15,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,120,216,5,0,135,12,0,0,0,1,0,0,1,12,51,15,78,2,12,0,41,12,2,24,42,12,12,24,33,3,12,0,120,3,9,0,1,13,196,3,1,14,0,0,134,12,0,0,192,84,6,0,13,14,0,0,1,12,51,15,1,14,1,0,83,12,14,0,1,14,12,0,135,4,32,0,14,0,0,0,0,9,4,0,1,12,196,3,134,14,0,0,196,195,5,0,12,0,0,0,0,5,9,0,1,12,200,3,134,14,0,0,160,48,6,0,5,12,0,0,1,12,196,3,134,14,0,0,144,96,6,0,12,0,0,0,0,6,1,0,0,7,9,0,25,8,7,8,85,8,6,0,137,11,0,0,139,0,0,0,140,1,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,68,217,5,0,135,15,0,0,0,2,0,0,0,4,2,0,134,5,0,0,96,53,6,0,4,0,0,0,33,6,5,0,121,6,6,0,1,1,0,0,0,3,1,0,137,14,0,0,139,3,0,0,119,0,11,0,0,7,2,0,25,8,7,4,82,9,8,0,26,10,9,48,0,12,10,0,0,11,12,0,0,1,11,0,0,3,1,0,137,14,0,0,139,3,0,0,1,15,0,0,139,15,0,0,140,0,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,216,217,5,0,135,14,0,0,1,14,16,0,1,15,55,0,134,0,0,0,168,171,5,0,14,15,0,0,0,11,0,0,134,1,0,0,172,22,6,0,0,3,11,0,85,3,1,0,0,4,11,0,25,5,4,4,1,15,0,0,83,5,15,0,0,6,11,0,25,7,6,8,1,15,0,0,85,7,15,0,1,15,4,0,1,14,1,0,134,8,0,0,224,168,5,0,15,14,0,0,0,9,11,0,25,10,9,12,85,10,8,0,0,2,11,0,137,13,0,0,139,2,0,0,140,1,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,128,218,5,0,135,15,0,0,0,1,0,0,0,2,1,0,0,12,2,0,1,11,0,0,0,3,11,0,35,4,3,2,120,4,2,0,119,0,13,0,0,5,12,0,82,6,5,0,134,15,0,0,196,95,4,0,6,0,0,0,0,7,12,0,25,8,7,4,0,12,8,0,0,9,11,0,25,10,9,1,0,11,10,0,119,0,241,255,137,14,0,0,139,0,0,0,140,0,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,12,219,5,0,135,14,0,0,1,14,20,0,1,15,127,0,134,0,0,0,168,171,5,0,14,15,0,0,0,11,0,0,0,1,11,0,134,15,0,0,84,71,6,0,1,0,0,0,0,3,11,0,25,4,3,8,1,15,10,0,84,4,15,0,1,15,0,0,134,5,0,0,148,94,6,0,15,0,0,0,0,6,11,0,25,7,6,12,85,7,5,0,1,15,0,0,134,8,0,0,148,94,6,0,15,0,0,0,0,9,11,0,25,10,9,16,85,10,8,0,0,2,11,0,137,13,0,0,139,2,0,0,140,2,14,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,188,219,5,0,135,10,0,0,1,2,0,0,0,3,0,0,0,4,1,0,1,10,11,11,1,11,6,0,134,5,0,0,240,9,6,0,10,11,0,0,1,11,8,0,85,11,5,0,1,10,18,11,1,12,2,0,134,11,0,0,212,12,6,0,10,12,0,0,134,6,0,0,148,180,4,0,32,7,6,1,120,7,6,0,134,11,0,0,148,88,6,0,137,9,0,0,1,11,0,0,139,11,0,0,1,12,1,0,135,11,23,0,12,0,0,0,1,12,14,0,1,10,0,0,1,13,1,0,135,11,123,0,12,10,13,0,134,11,0,0,148,88,6,0,137,9,0,0,1,11,0,0,139,11,0,0,140,0,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,132,220,5,0,135,15,0,0,134,0,0,0,208,123,5,0,0,12,0,0,0,1,12,0,25,4,1,28,1,15,24,0,85,4,15,0,0,5,12,0,25,6,5,32,1,15,25,0,85,6,15,0,0,7,12,0,134,8,0,0,188,29,5,0,7,0,0,0,0,9,12,0,25,10,9,44,85,10,8,0,0,11,12,0,25,2,11,48,1,15,26,0,85,2,15,0,0,3,12,0,137,14,0,0,139,3,0,0,140,3,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,28,221,5,0,135,16,0,0,0,3,0,0,0,4,1,0,0,6,2,0,0,7,4,0,25,8,7,20,25,9,8,36,82,10,9,0,0,11,4,0,25,12,11,20,25,13,12,40,82,5,13,0,1,17,3,0,134,16,0,0,96,126,5,0,10,5,17,0,137,15,0,0,1,16,0,0,139,16,0,0,140,0,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,152,221,5,0,135,14,0,0,1,14,28,0,1,15,127,0,134,0,0,0,168,171,5,0,14,15,0,0,0,11,0,0,0,1,11,0,134,15,0,0,84,71,6,0,1,0,0,0,0,3,11,0,25,4,3,8,1,15,6,0,84,4,15,0,1,15,0,0,134,5,0,0,148,94,6,0,15,0,0,0,0,6,11,0,25,7,6,12,85,7,5,0,1,15,0,0,134,8,0,0,148,94,6,0,15,0,0,0,0,9,11,0,25,10,9,16,85,10,8,0,0,2,11,0,137,13,0,0,139,2,0,0,140,1,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,72,222,5,0,135,16,0,0,0,1,0,0,1,16,8,0,1,17,39,0,134,2,0,0,168,171,5,0,16,17,0,0,0,13,2,0,0,5,13,0,1,17,0,0,85,5,17,0,0,6,1,0,25,7,6,1,1,17,15,0,134,8,0,0,168,171,5,0,7,17,0,0,0,9,13,0,25,10,9,4,85,10,8,0,0,11,13,0,25,12,11,4,82,3,12,0,1,17,0,0,83,3,17,0,0,4,13,0,137,15,0,0,139,4,0,0,140,3,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,232,222,5,0,135,16,0,0,0,13,15,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,3,0,134,16,0,0,148,4,6,0,6,0,0,0,0,7,3,0,82,8,7,0,0,9,5,0,135,10,121,0,8,9,0,0,85,13,10,0,0,11,4,0,82,12,11,0,134,16,0,0,88,242,4,0,12,13,0,0,137,15,0,0,139,0,0,0,140,3,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,112,223,5,0,135,16,0,0,0,3,0,0,0,4,1,0,0,6,2,0,0,7,4,0,25,8,7,20,25,9,8,36,82,10,9,0,0,11,4,0,25,12,11,20,25,13,12,40,82,5,13,0,1,17,1,0,134,16,0,0,96,126,5,0,10,5,17,0,137,15,0,0,1,16,0,0,139,16,0,0,140,3,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,236,223,5,0,135,16,0,0,0,3,0,0,0,4,1,0,0,6,2,0,0,7,4,0,25,8,7,20,25,9,8,36,82,10,9,0,0,11,4,0,25,12,11,20,25,13,12,40,82,5,13,0,1,17,0,0,134,16,0,0,96,126,5,0,10,5,17,0,137,15,0,0,1,16,0,0,139,16,0,0,140,1,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,104,224,5,0,135,14,0,0,0,1,0,0,0,2,1,0,80,4,2,0,26,14,4,1,41,14,14,16,42,14,14,16,0,5,14,0,84,2,5,0,0,6,1,0,80,7,6,0,41,14,7,16,42,14,14,16,0,8,14,0,36,9,8,0,120,9,3,0,137,13,0,0,139,0,0,0,0,10,1,0,25,11,10,12,1,15,1,0,135,14,124,0,15,11,0,0,0,3,1,0,134,14,0,0,216,166,5,0,3,0,0,0,137,13,0,0,139,0,0,0,140,3,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,12,225,5,0,135,16,0,0,0,3,0,0,0,4,1,0,0,6,2,0,0,7,4,0,25,8,7,20,25,9,8,36,82,10,9,0,0,11,4,0,25,12,11,20,25,13,12,40,82,5,13,0,1,17,2,0,134,16,0,0,96,126,5,0,10,5,17,0,137,15,0,0,1,16,0,0,139,16,0,0,140,3,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,136,225,5,0,135,16,0,0,0,13,15,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,3,0,134,16,0,0,148,4,6,0,6,0,0,0,0,7,3,0,82,8,7,0,0,9,5,0,135,10,121,0,8,9,0,0,85,13,10,0,0,11,4,0,82,12,11,0,134,16,0,0,88,242,4,0,12,13,0,0,137,15,0,0,139,0,0,0,140,1,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,16,226,5,0,135,14,0,0,0,1,0,0,0,2,1,0,134,3,0,0,96,53,6,0,2,0,0,0,33,4,3,0,121,4,7,0,0,10,1,0,134,14,0,0,216,166,5,0,10,0,0,0,137,13,0,0,139,0,0,0,0,5,1,0,25,6,5,4,82,7,6,0,26,8,7,8,0,11,8,0,0,9,11,0,134,14,0,0,44,82,6,0,9,0,0,0,0,10,1,0,134,14,0,0,216,166,5,0,10,0,0,0,137,13,0,0,139,0,0,0,140,1,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,180,226,5,0,135,14,0,0,0,1,0,0,0,2,1,0,134,3,0,0,188,53,6,0,2,0,0,0,33,4,3,0,121,4,7,0,0,10,1,0,134,14,0,0,216,166,5,0,10,0,0,0,137,13,0,0,139,0,0,0,0,5,1,0,25,6,5,4,82,7,6,0,26,8,7,8,0,11,8,0,0,9,11,0,134,14,0,0,44,82,6,0,9,0,0,0,0,10,1,0,134,14,0,0,216,166,5,0,10,0,0,0,137,13,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,7,0,0,136,11,0,0,0,8,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,88,227,5,0,135,11,0,0,0,2,0,0,0,3,2,0,1,11,188,0,3,4,3,11,0,6,4,0,0,9,1,0,25,10,6,16,78,11,9,0,83,6,11,0,25,6,6,1,25,9,9,1,54,11,6,10,116,227,5,0,0,5,2,0,134,11,0,0,56,156,3,0,5,0,0,0,137,8,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,127,12,0,0,87,12,0,0,127,12,0,0,82,2,12,0,127,12,0,0,106,3,12,4,127,12,0,0,87,12,1,0,127,12,0,0,82,4,12,0,127,12,0,0,106,5,12,4,2,12,0,0,255,255,255,127,19,12,3,12,0,6,12,0,2,12,0,0,0,0,0,128,19,12,5,12,0,7,12,0,20,12,7,6,0,8,12,0,127,12,0,0,85,12,2,0,127,12,0,0,109,12,4,8,127,12,0,0,86,9,12,0,139,9,0,0,140,2,18,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,96,228,5,0,135,15,0,0,0,2,0,0,0,3,2,0,25,4,3,4,82,5,4,0,25,6,5,4,82,7,6,0,0,12,7,0,0,8,2,0,25,9,8,4,82,10,9,0,1,16,0,0,1,17,64,0,134,15,0,0,20,213,4,0,10,16,1,17,0,11,2,0,134,15,0,0,32,92,6,0,11,0,0,0,137,14,0,0,139,0,0,0,140,2,18,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,232,228,5,0,135,15,0,0,0,2,0,0,0,3,1,0,134,4,0,0,120,91,6,0,0,12,4,0,134,5,0,0,100,174,5,0,0,11,5,0,0,6,11,0,25,7,6,16,82,8,7,0,1,16,95,12,1,17,22,0,134,15,0,0,128,39,6,0,8,16,17,0,0,9,12,0,0,10,11,0,134,15,0,0,200,244,5,0,9,10,0,0,137,14,0,0,139,0,0,0,140,2,18,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,120,229,5,0,135,15,0,0,0,2,0,0,0,3,2,0,25,4,3,4,82,5,4,0,25,6,5,4,82,7,6,0,0,12,7,0,0,8,2,0,25,9,8,4,82,10,9,0,1,16,1,0,1,17,64,0,134,15,0,0,20,213,4,0,10,16,1,17,0,11,2,0,134,15,0,0,32,92,6,0,11,0,0,0,137,14,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,7,0,0,136,11,0,0,0,8,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,0,230,5,0,135,11,0,0,0,2,0,0,0,3,2,0,25,4,3,108,0,6,4,0,0,9,1,0,25,10,6,12,78,11,9,0,83,6,11,0,25,6,6,1,25,9,9,1,54,11,6,10,24,230,5,0,0,5,2,0,134,11,0,0,56,156,3,0,5,0,0,0,137,8,0,0,139,0,0,0,140,1,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,124,230,5,0,135,12,0,0,0,1,0,0,0,2,1,0,134,12,0,0,20,85,6,0,2,0,0,0,0,3,1,0,134,12,0,0,96,11,6,0,3,0,0,0,0,4,1,0,134,12,0,0,244,10,6,0,4,0,0,0,0,5,1,0,134,12,0,0,28,39,2,0,5,0,0,0,0,6,1,0,134,12,0,0,16,164,4,0,6,0,0,0,0,7,1,0,134,12,0,0,148,26,5,0,7,0,0,0,0,8,1,0,134,12,0,0,164,150,4,0,8,0,0,0,0,9,1,0,134,12,0,0,48,49,5,0,9,0,0,0,137,11,0,0,139,0,0,0,140,2,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,60,231,5,0,135,15,0,0,0,2,0,0,0,3,1,0,0,5,3,0,0,6,2,0,1,15,193,0,3,7,6,15,83,7,5,0,0,8,2,0,25,9,8,4,82,10,9,0,0,11,3,0,1,15,255,0,19,15,11,15,0,12,15,0,1,15,20,0,135,4,27,0,15,10,12,0,137,14,0,0,139,0,0,0,140,1,14,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,188,231,5,0,135,11,0,0,25,8,10,4,0,7,10,0,0,1,0,0,134,2,0,0,4,139,5,0,85,8,2,0,59,11,1,0,89,7,11,0,82,3,8,0,1,12,0,0,1,13,4,0,134,11,0,0,20,213,4,0,3,12,7,13,0,4,1,0,1,11,56,1,3,5,4,11,82,6,5,0,134,11,0,0,88,242,4,0,6,8,0,0,137,10,0,0,139,0,0,0,140,1,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,76,232,5,0,135,14,0,0,0,1,0,0,0,2,1,0,25,4,2,12,82,5,4,0,1,14,0,0,14,6,5,14,121,6,7,0,0,7,1,0,25,8,7,12,82,9,8,0,134,14,0,0,184,57,5,0,9,0,0,0,0,10,1,0,25,11,10,16,82,3,11,0,134,14,0,0,148,105,6,0,3,0,0,0,137,13,0,0,139,0,0,0,140,3,18,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,130,16,0,0,136,17,0,0,49,16,16,17,212,232,5,0,135,16,0,0,0,3,0,0,0,4,1,0,0,6,2,0,0,7,6,0,33,8,7,0,121,8,10,0,0,9,3,0,0,10,4,0,13,11,9,10,120,11,6,0,0,12,3,0,0,13,4,0,0,5,6,0,135,16,76,0,12,13,5,0,137,15,0,0,139,0,0,0,140,2,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,76,233,5,0,135,13,0,0,0,3,12,0,0,2,0,0,85,3,1,0,82,4,3,0,25,5,4,4,80,6,5,0,25,13,6,1,41,13,13,16,42,13,13,16,0,7,13,0,84,5,7,0,0,8,2,0,25,9,8,12,82,10,9,0,134,13,0,0,88,242,4,0,10,3,0,0,137,12,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,7,0,0,136,11,0,0,0,8,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,204,233,5,0,135,11,0,0,0,2,0,0,0,3,2,0,1,11,172,0,3,4,3,11,0,6,4,0,0,9,1,0,25,10,6,12,78,11,9,0,83,6,11,0,25,6,6,1,25,9,9,1,54,11,6,10,232,233,5,0,0,5,2,0,134,11,0,0,56,156,3,0,5,0,0,0,137,8,0,0,139,0,0,0,140,3,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,76,234,5,0,135,14,0,0,58,3,2,0,88,4,1,0,58,5,3,0,65,6,4,5,89,0,6,0,25,7,0,4,25,8,1,4,88,9,8,0,58,10,3,0,65,11,9,10,89,7,11,0,137,13,0,0,139,0,0,0,140,2,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,180,234,5,0,135,15,0,0,0,2,0,0,0,3,1,0,0,5,3,0,0,6,2,0,1,15,192,0,3,7,6,15,83,7,5,0,0,8,2,0,25,9,8,4,82,10,9,0,0,11,3,0,1,15,255,0,19,15,11,15,0,12,15,0,1,15,19,0,135,4,27,0,15,10,12,0,137,14,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,7,0,0,136,11,0,0,0,8,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,52,235,5,0,135,11,0,0,0,2,0,0,0,3,2,0,1,11,140,0,3,4,3,11,0,6,4,0,0,9,1,0,25,10,6,12,78,11,9,0,83,6,11,0,25,6,6,1,25,9,9,1,54,11,6,10,80,235,5,0,0,5,2,0,134,11,0,0,56,156,3,0,5,0,0,0,137,8,0,0,139,0,0,0,140,4,11,0,0,0,0,0,0,4,0,0,0,5,2,0,134,6,0,0,204,11,6,0,4,5,0,0,128,9,0,0,0,7,9,0,5,8,1,5,5,9,3,4,3,9,9,8,3,9,9,7,38,10,7,0,20,9,9,10,129,9,0,0,38,9,6,255,39,9,9,0,139,9,0,0,140,2,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,0,236,5,0,135,15,0,0,0,2,0,0,0,3,1,0,0,5,2,0,0,6,3,0,25,7,6,48,85,7,5,0,0,8,3,0,25,9,8,24,134,15,0,0,128,68,6,0,9,0,0,0,0,10,3,0,25,11,10,24,0,12,2,0,25,4,12,32,134,15,0,0,64,48,6,0,11,4,0,0,137,14,0,0,139,0,0,0,140,3,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,132,236,5,0,135,14,0,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,4,0,25,7,6,52,82,8,7,0,0,9,4,0,25,10,9,56,82,11,10,0,1,15,3,0,134,14,0,0,84,127,5,0,8,11,15,0,137,13,0,0,1,14,0,0,139,14,0,0,140,2,15,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,64,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,248,236,5,0,135,12,0,0,0,9,11,0,25,8,11,16,0,2,0,0,58,3,1,0,58,4,3,0,58,5,4,0,87,9,5,0,1,13,40,0,1,14,66,15,134,12,0,0,160,69,6,0,8,13,14,9,0,6,2,0,135,7,4,0,8,0,0,0,134,12,0,0,76,111,5,0,6,8,7,0,137,11,0,0,139,0,0,0,140,2,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,124,237,5,0,135,13,0,0,0,2,0,0,0,3,1,0,0,4,2,0,25,5,4,40,134,13,0,0,44,195,5,0,5,0,0,0,0,6,3,0,0,7,2,0,25,8,7,28,134,13,0,0,64,40,6,0,6,8,0,0,0,9,2,0,25,10,9,40,134,13,0,0,64,96,6,0,10,0,0,0,137,12,0,0,139,0,0,0,140,1,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,0,238,5,0,135,15,0,0,0,1,0,0,0,2,1,0,25,3,2,4,82,4,3,0,0,11,4,0,0,5,11,0,82,6,5,0,0,12,6,0,0,7,12,0,82,8,7,0,0,9,11,0,85,9,8,0,0,10,12,0,137,14,0,0,139,10,0,0,140,3,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,112,238,5,0,135,14,0,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,4,0,25,7,6,52,82,8,7,0,0,9,4,0,25,10,9,56,82,11,10,0,1,15,1,0,134,14,0,0,84,127,5,0,8,11,15,0,137,13,0,0,1,14,0,0,139,14,0,0,140,3,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,228,238,5,0,135,14,0,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,4,0,25,7,6,52,82,8,7,0,0,9,4,0,25,10,9,56,82,11,10,0,1,15,0,0,134,14,0,0,84,127,5,0,8,11,15,0,137,13,0,0,1,14,0,0,139,14,0,0,140,2,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,88,239,5,0,135,15,0,0,0,2,0,0,0,3,1,0,0,5,3,0,25,6,5,24,134,15,0,0,40,60,6,0,6,0,0,0,0,7,3,0,25,8,7,24,0,9,2,0,25,10,9,16,134,15,0,0,224,39,6,0,8,10,0,0,0,11,2,0,0,12,3,0,25,4,12,32,85,4,11,0,137,14,0,0,139,0,0,0,140,2,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,220,239,5,0,135,15,0,0,0,2,0,0,58,3,1,0,58,5,3,0,0,6,2,0,25,7,6,112,89,7,5,0,0,8,2,0,25,9,8,4,82,10,9,0], eb + 378880);
  HEAPU8.set([58,11,3,0,58,12,11,0,1,15,17,0,135,4,125,0,15,10,12,0,137,14,0,0,139,0,0,0,140,3,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,80,240,5,0,135,14,0,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,4,0,25,7,6,52,82,8,7,0,0,9,4,0,25,10,9,56,82,11,10,0,1,15,2,0,134,14,0,0,84,127,5,0,8,11,15,0,137,13,0,0,1,14,0,0,139,14,0,0,140,1,18,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,196,240,5,0,135,15,0,0,0,1,0,0,0,2,1,0,134,3,0,0,16,217,5,0,2,0,0,0,0,12,3,0,0,4,12,0,134,5,0,0,60,191,5,0,4,0,0,0,0,10,5,0,0,6,10,0,1,15,99,13,1,16,8,0,134,7,0,0,76,245,5,0,6,15,16,0,0,11,7,0,0,8,11,0,0,9,1,0,1,15,34,0,1,17,0,0,134,16,0,0,32,41,5,0,8,15,9,17,137,14,0,0,139,0,0,0,140,1,18,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,100,241,5,0,135,15,0,0,0,1,0,0,0,2,1,0,134,3,0,0,16,217,5,0,2,0,0,0,0,12,3,0,0,4,12,0,134,5,0,0,60,191,5,0,4,0,0,0,0,10,5,0,0,6,10,0,1,15,99,13,1,16,8,0,134,7,0,0,76,245,5,0,6,15,16,0,0,11,7,0,0,8,11,0,0,9,1,0,1,15,18,0,1,17,0,0,134,16,0,0,32,41,5,0,8,15,9,17,137,14,0,0,139,0,0,0,140,2,14,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,64,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,4,242,5,0,135,11,0,0,25,8,10,8,25,7,10,24,0,2,0,0,58,3,1,0,58,4,3,0,87,8,4,0,1,12,40,0,1,13,69,15,134,11,0,0,160,69,6,0,7,12,13,8,0,5,2,0,135,6,4,0,7,0,0,0,134,11,0,0,76,111,5,0,5,7,6,0,137,10,0,0,139,0,0,0,140,2,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,132,242,5,0,135,13,0,0,0,3,0,0,0,4,1,0,0,5,4,0,78,6,5,0,1,13,255,0,19,13,6,13,0,7,13,0,26,2,7,1,35,10,2,2,120,10,3,0,137,12,0,0,139,0,0,0,0,8,3,0,0,9,4,0,134,13,0,0,124,185,2,0,8,9,0,0,137,12,0,0,139,0,0,0,140,0,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,4,243,5,0,135,12,0,0,1,12,16,0,1,13,131,0,134,0,0,0,168,171,5,0,12,13,0,0,0,9,0,0,0,1,9,0,134,13,0,0,156,70,6,0,1,0,0,0,1,13,0,0,134,2,0,0,148,94,6,0,13,0,0,0,0,3,9,0,25,4,3,8,85,4,2,0,1,13,0,0,134,5,0,0,148,94,6,0,13,0,0,0,0,6,9,0,25,7,6,12,85,7,5,0,0,8,9,0,137,11,0,0,139,8,0,0,140,2,14,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,64,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,164,243,5,0,135,11,0,0,0,8,10,0,25,7,10,16,0,2,0,0,0,3,1,0,0,4,3,0,85,8,4,0,1,12,40,0,1,13,52,15,134,11,0,0,160,69,6,0,7,12,13,8,0,5,2,0,135,6,4,0,7,0,0,0,134,11,0,0,76,111,5,0,5,7,6,0,137,10,0,0,139,0,0,0,140,2,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,36,244,5,0,135,13,0,0,0,2,0,0,0,3,1,0,0,4,2,0,25,5,4,40,134,13,0,0,44,195,5,0,5,0,0,0,0,6,3,0,0,7,2,0,25,8,7,20,134,13,0,0,64,40,6,0,6,8,0,0,0,9,2,0,25,10,9,40,134,13,0,0,64,96,6,0,10,0,0,0,137,12,0,0,139,0,0,0,140,3,17,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,25,3,0,16,82,4,3,0,25,5,0,20,82,6,5,0,0,7,4,0,0,8,6,0,4,9,7,8,16,10,2,9,125,13,10,2,9,0,0,0,135,16,76,0,6,1,13,0,82,11,5,0,3,12,11,13,85,5,12,0,139,2,0,0,140,2,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,252,244,5,0,135,13,0,0,0,2,0,0,0,3,1,0,0,4,2,0,25,5,4,40,134,13,0,0,44,195,5,0,5,0,0,0,0,6,3,0,0,7,2,0,25,8,7,12,134,13,0,0,64,40,6,0,6,8,0,0,0,9,2,0,25,10,9,40,134,13,0,0,64,96,6,0,10,0,0,0,137,12,0,0,139,0,0,0,140,3,17,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,136,15,0,0,25,15,15,16,137,15,0,0,130,15,0,0,136,16,0,0,49,15,15,16,128,245,5,0,135,15,0,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,3,0,25,7,6,12,82,8,7,0,0,9,4,0,0,10,5,0,134,11,0,0,68,71,4,0,8,9,10,0,82,12,11,0,137,14,0,0,139,12,0,0,140,2,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,236,245,5,0,135,12,0,0,0,2,0,0,0,3,1,0,0,4,2,0,1,12,0,0,14,5,4,12,121,5,6,0,0,6,2,0,25,7,6,4,82,8,7,0,0,9,8,0,119,0,2,0,1,9,0,0,135,12,126,0,9,0,0,0,137,11,0,0,139,0,0,0,140,0,17,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,96,246,5,0,135,12,0,0,134,0,0,0,208,123,5,0,0,9,0,0,0,1,9,0,134,2,0,0,196,58,5,0,1,0,0,0,0,3,9,0,25,4,3,44,85,4,2,0,0,5,9,0,25,6,5,48,1,12,19,0,85,6,12,0,0,7,9,0,1,13,208,11,1,14,6,0,1,15,255,255,1,16,20,0,134,12,0,0,112,156,4,0,7,13,14,15,16,0,0,0,0,8,9,0,137,11,0,0,139,8,0,0,140,0,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,252,246,5,0,135,11,0,0,134,11,0,0,148,35,6,0,1,11,16,0,1,12,43,0,134,0,0,0,168,171,5,0,11,12,0,0,0,8,0,0,1,12,88,4,82,1,12,0,0,2,8,0,85,2,1,0,0,3,8,0,25,4,3,8,1,12,0,0,85,4,12,0,0,5,8,0,25,6,5,4,1,12,255,255,83,6,12,0,0,7,8,0,137,10,0,0,139,7,0,0,140,3,15,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,88,3,1,0,88,4,2,0,63,5,3,4,89,0,5,0,25,6,0,4,25,7,1,4,88,8,7,0,25,9,2,4,88,10,9,0,63,11,8,10,89,6,11,0,139,0,0,0,140,3,15,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,88,3,1,0,88,4,2,0,63,5,3,4,89,0,5,0,25,6,0,4,25,7,1,4,88,8,7,0,25,9,2,4,88,10,9,0,63,11,8,10,89,6,11,0,139,0,0,0,140,2,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,20,248,5,0,135,8,0,0,0,4,7,0,85,4,0,0,25,5,4,4,85,5,1,0,1,8,39,0,135,2,127,0,8,4,0,0,134,3,0,0,156,93,6,0,2,0,0,0,137,7,0,0,139,3,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,120,248,5,0,135,10,0,0,0,1,0,0,0,2,1,0,25,3,2,6,78,4,3,0,1,10,255,0,19,10,4,10,0,5,10,0,1,10,0,0,1,11,2,0,138,5,10,11,172,248,5,0,184,248,5,0,119,0,7,0,2,7,0,0,228,136,0,0,119,0,4,0,2,7,0,0,232,136,0,0,119,0,1,0,0,6,7,0,137,9,0,0,139,6,0,0,140,1,14,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,4,249,5,0,135,11,0,0,0,1,0,0,134,2,0,0,104,253,5,0,0,8,2,0,0,3,8,0,25,4,3,12,82,5,4,0,1,12,235,31,1,13,4,0,134,11,0,0,128,39,6,0,5,12,13,0,0,6,1,0,0,7,8,0,134,11,0,0,240,243,5,0,6,7,0,0,137,10,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,132,249,5,0,135,10,0,0,0,1,0,0,0,2,1,0,25,3,2,2,78,4,3,0,1,10,255,0,19,10,4,10,0,5,10,0,1,10,0,0,1,11,2,0,138,5,10,11,184,249,5,0,196,249,5,0,119,0,7,0,2,7,0,0,146,136,0,0,119,0,4,0,2,7,0,0,147,136,0,0,119,0,1,0,0,6,7,0,137,9,0,0,139,6,0,0,140,3,15,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,88,3,1,0,88,4,2,0,64,5,3,4,89,0,5,0,25,6,0,4,25,7,1,4,88,8,7,0,25,9,2,4,88,10,9,0,64,11,8,10,89,6,11,0,139,0,0,0,140,3,15,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,88,3,1,0,88,4,2,0,63,5,3,4,89,0,5,0,25,6,0,4,25,7,1,4,88,8,7,0,25,9,2,4,88,10,9,0,63,11,8,10,89,6,11,0,139,0,0,0,140,2,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,152,250,5,0,135,8,0,0,0,4,7,0,85,4,0,0,25,5,4,4,85,5,1,0,1,8,195,0,135,2,128,0,8,4,0,0,134,3,0,0,156,93,6,0,2,0,0,0,137,7,0,0,139,3,0,0,140,1,14,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,252,250,5,0,135,11,0,0,0,1,0,0,134,2,0,0,104,253,5,0,0,8,2,0,0,3,8,0,25,4,3,12,82,5,4,0,1,12,225,31,1,13,9,0,134,11,0,0,128,39,6,0,5,12,13,0,0,6,1,0,0,7,8,0,134,11,0,0,240,243,5,0,6,7,0,0,137,10,0,0,139,0,0,0,140,2,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,124,251,5,0,135,14,0,0,0,2,0,0,0,3,1,0,0,4,2,0,25,5,4,4,82,6,5,0,0,7,3,0,25,8,7,1,134,9,0,0,88,219,4,0,6,8,0,0,0,10,2,0,25,11,10,4,85,11,9,0,137,13,0,0,139,0,0,0,140,1,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,236,251,5,0,135,12,0,0,0,1,0,0,0,2,1,0,134,12,0,0,20,98,6,0,2,0,0,0,0,3,1,0,25,4,3,24,82,5,4,0,134,12,0,0,148,105,6,0,5,0,0,0,0,6,1,0,25,7,6,20,82,8,7,0,134,12,0,0,52,67,4,0,8,0,0,0,0,9,1,0,134,12,0,0,216,166,5,0,9,0,0,0,137,11,0,0,139,0,0,0,140,1,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,124,252,5,0,135,11,0,0,0,1,0,0,0,2,1,0,82,3,2,0,134,11,0,0,48,146,5,0,3,0,0,0,0,4,1,0,25,5,4,8,1,12,1,0,135,11,129,0,12,5,0,0,0,6,1,0,25,7,6,4,1,12,1,0,135,11,130,0,12,7,0,0,0,8,1,0,134,11,0,0,216,166,5,0,8,0,0,0,137,10,0,0,139,0,0,0,140,0,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,8,253,5,0,135,11,0,0,1,11,24,0,1,12,127,0,134,0,0,0,168,171,5,0,11,12,0,0,0,8,0,0,0,1,8,0,134,12,0,0,84,71,6,0,1,0,0,0,0,2,8,0,25,3,2,8,1,12,7,0,84,3,12,0,1,12,0,0,134,4,0,0,148,94,6,0,12,0,0,0,0,5,8,0,25,6,5,12,85,6,4,0,0,7,8,0,137,10,0,0,139,7,0,0,140,0,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,156,253,5,0,135,11,0,0,1,11,16,0,1,12,127,0,134,0,0,0,168,171,5,0,11,12,0,0,0,8,0,0,0,1,8,0,134,12,0,0,84,71,6,0,1,0,0,0,0,2,8,0,25,3,2,8,1,12,1,0,84,3,12,0,1,12,0,0,134,4,0,0,148,94,6,0,12,0,0,0,0,5,8,0,25,6,5,12,85,6,4,0,0,7,8,0,137,10,0,0,139,7,0,0,140,2,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,48,254,5,0,135,14,0,0,0,2,0,0,0,3,1,0,0,4,3,0,25,5,4,8,134,14,0,0,224,65,6,0,5,0,0,0,0,6,3,0,25,7,6,8,0,8,2,0,134,14,0,0,0,46,6,0,7,8,0,0,0,9,2,0,0,10,3,0,25,11,10,16,85,11,9,0,137,13,0,0,139,0,0,0,140,1,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,176,254,5,0,135,12,0,0,0,1,0,0,0,2,1,0,25,3,2,8,82,4,3,0,134,12,0,0,148,105,6,0,4,0,0,0,0,5,1,0,25,6,5,12,82,7,6,0,134,12,0,0,148,105,6,0,7,0,0,0,0,8,1,0,134,12,0,0,40,60,6,0,8,0,0,0,0,9,1,0,134,12,0,0,216,166,5,0,9,0,0,0,137,11,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,64,255,5,0,135,11,0,0,0,3,10,0,0,2,0,0,85,3,1,0,82,4,3,0,80,5,4,0,25,11,5,1,41,11,11,16,42,11,11,16,0,6,11,0,84,4,6,0,0,7,2,0,82,8,7,0,134,11,0,0,88,242,4,0,8,3,0,0,137,10,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,184,255,5,0,135,10,0,0,0,1,0,0,1,10,236,5,1,11,0,0,85,10,11,0,0,2,1,0,1,11,0,0,14,3,2,11,121,3,6,0,0,4,1,0,25,5,4,4,82,6,5,0,0,7,6,0,119,0,2,0,1,7,0,0,135,11,126,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,52,0,6,0,135,13,0,0,0,1,0,0,0,2,1,0,25,3,2,4,82,4,3,0,0,10,4,0,0,5,10,0,0,6,10,0,82,7,6,0,13,8,5,7,38,13,8,1,0,9,13,0,137,12,0,0,139,9,0,0,140,3,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,156,0,6,0,135,13,0,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,3,0,0,7,4,0,0,8,4,0,135,9,4,0,8,0,0,0,0,10,5,0,134,13,0,0,40,146,3,0,6,7,9,10,137,12,0,0,139,0,0,0,140,1,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,8,1,6,0,135,12,0,0,0,1,0,0,0,2,1,0,25,3,2,4,82,4,3,0,1,12,0,0,14,5,4,12,121,5,7,0,0,6,1,0,25,7,6,4,82,8,7,0,134,12,0,0,52,17,5,0,8,0,0,0,0,9,1,0,134,12,0,0,216,166,5,0,9,0,0,0,137,11,0,0,139,0,0,0,140,3,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,136,1,6,0,135,12,0,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,4,0,25,7,6,28,82,8,7,0,26,9,8,1,85,7,9,0,137,11,0,0,1,12,0,0,139,12,0,0,140,1,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,232,1,6,0,135,12,0,0,0,1,0,0,0,2,1,0,25,3,2,12,82,4,3,0,1,12,0,0,14,5,4,12,121,5,7,0,0,6,1,0,25,7,6,12,82,8,7,0,134,12,0,0,216,166,5,0,8,0,0,0,0,9,1,0,134,12,0,0,216,166,5,0,9,0,0,0,137,11,0,0,139,0,0,0,140,4,16,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,104,2,6,0,135,13,0,0,0,7,12,0,0,4,0,0,0,5,1,0,0,6,2,0,85,7,3,0,0,8,4,0,0,9,5,0,0,10,6,0,1,14,11,0,1,15,4,0,134,13,0,0,204,27,5,0,8,9,10,14,7,15,0,0,137,12,0,0,139,0,0,0,140,1,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,220,2,6,0,135,12,0,0,0,1,0,0,1,12,12,0,1,13,129,0,134,2,0,0,168,171,5,0,12,13,0,0,0,9,2,0,1,13,0,0,134,3,0,0,148,94,6,0,13,0,0,0,0,4,9,0,25,5,4,8,85,5,3,0,0,6,1,0,0,7,9,0,85,7,6,0,0,8,9,0,137,11,0,0,139,8,0,0,140,2,15,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,96,3,6,0,135,12,0,0,0,2,0,0,0,3,1,0,0,4,3,0,25,5,4,12,82,6,5,0,1,12,46,12,1,13,11,0,1,14,2,0,134,7,0,0,204,182,4,0,6,12,13,14,0,9,7,0,0,8,9,0,134,14,0,0,80,188,5,0,8,0,0,0,137,11,0,0,139,0,0,0,140,1,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,220,3,6,0,135,12,0,0,0,1,0,0,0,2,1,0,25,3,2,4,82,4,3,0,1,12,0,0,14,5,4,12,121,5,7,0,0,6,1,0,25,7,6,4,82,8,7,0,134,12,0,0,216,166,5,0,8,0,0,0,0,9,1,0,134,12,0,0,216,166,5,0,9,0,0,0,137,11,0,0,139,0,0,0,140,3,16,0,0,0,0,0,1,12,0,0,136,14,0,0,0,13,14,0,136,14,0,0,25,14,14,16,137,14,0,0,130,14,0,0,136,15,0,0,49,14,14,15,92,4,6,0,135,14,0,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,5,0,0,7,4,0,0,8,3,0,25,9,8,4,82,10,9,0,1,14,1,0,134,11,0,0,96,89,4,0,6,14,7,10,137,13,0,0,139,11,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,200,4,6,0,135,10,0,0,0,1,0,0,0,2,1,0,1,10,96,4,82,3,10,0,14,4,2,3,120,4,3,0,137,9,0,0,139,0,0,0,0,5,1,0,1,10,96,4,85,10,5,0,0,6,1,0,82,7,6,0,135,10,131,0,7,0,0,0,137,9,0,0,139,0,0,0,140,2,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,64,5,6,0,135,13,0,0,0,2,0,0,0,3,1,0,0,4,2,0,25,5,4,4,82,6,5,0,0,7,3,0,134,8,0,0,88,219,4,0,6,7,0,0,0,9,2,0,25,10,9,4,85,10,8,0,137,12,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,172,5,6,0,135,11,0,0,0,2,0,0,58,3,1,0,0,4,2,0,134,11,0,0,176,247,3,0,4,0,0,0,0,5,2,0,58,6,3,0,134,11,0,0,32,110,4,0,5,6,0,0,0,7,2,0,58,8,3,0,134,11,0,0,244,237,3,0,7,8,0,0,137,10,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,40,6,6,0,135,10,0,0,0,1,0,0,134,2,0,0,212,252,5,0,0,7,2,0,0,3,7,0,25,4,3,20,1,10,0,0,83,4,10,0,0,5,1,0,0,6,7,0,134,10,0,0,240,243,5,0,5,6,0,0,137,9,0,0,139,0,0,0,140,1,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,152,6,6,0,135,11,0,0,0,1,0,0,0,2,1,0,82,3,2,0,1,11,6,0,135,4,26,0,11,3,0,0,0,5,1,0,25,6,5,8,82,7,6,0,134,11,0,0,148,105,6,0,7,0,0,0,0,8,1,0,134,11,0,0,216,166,5,0,8,0,0,0,137,10,0,0,139,0,0,0,140,3,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,20,7,6,0,135,12,0,0,0,3,0,0,0,4,1,0,0,5,2,0,134,6,0,0,36,25,6,0,0,9,6,0,0,7,9,0,134,12,0,0,236,52,4,0,7,0,0,0,0,8,9,0,137,11,0,0,139,8,0,0,140,3,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,124,7,6,0,135,12,0,0,0,3,0,0,0,4,1,0,0,5,2,0,134,6,0,0,36,25,6,0,0,9,6,0,0,7,9,0,134,12,0,0,140,40,4,0,7,0,0,0,0,8,9,0,137,11,0,0,139,8,0,0,140,1,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,228,7,6,0,135,12,0,0,0,1,0,0,0,2,1,0,25,3,2,44,82,4,3,0,0,9,4,0,134,5,0,0,120,91,6,0,0,8,5,0,0,6,8,0,0,7,9,0,134,12,0,0,72,237,5,0,6,7,0,0,137,11,0,0,139,0,0,0,140,0,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,84,8,6,0,135,10,0,0,1,10,40,0,1,11,114,0,134,0,0,0,168,171,5,0,10,11,0,0,0,7,0,0,0,1,7,0,25,2,1,8,134,11,0,0,124,73,6,0,2,0,0,0,0,3,7,0,134,11,0,0,124,73,6,0,3,0,0,0,0,4,7,0,25,5,4,16,1,11,0,0,85,5,11,0,0,6,7,0,137,9,0,0,139,6,0,0,140,0,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,224,8,6,0,135,10,0,0,1,10,20,0,1,11,116,0,134,0,0,0,168,171,5,0,10,11,0,0,0,7,0,0,0,1,7,0,134,11,0,0,196,72,6,0,1,0,0,0,0,2,7,0,25,3,2,8,134,11,0,0,196,72,6,0,3,0,0,0,0,4,7,0,25,5,4,16,1,11,0,0,85,5,11,0,0,6,7,0,137,9,0,0,139,6,0,0,140,3,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,108,9,6,0,135,13,0,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,4,0,0,7,5,0,0,8,3,0,25,9,8,4,82,10,9,0,1,14,1,0,134,13,0,0,120,172,5,0,6,14,7,10,137,12,0,0,139,0,0,0,140,1,16,0,0,0,0,0,1,13,0,0,136,15,0,0,0,14,15,0,88,1,0,0,88,2,0,0,65,5,1,2,25,6,0,4,88,7,6,0,25,8,0,4,88,9,8,0,65,10,7,9,63,11,5,10,58,12,11,0,135,3,67,0,12,0,0,0,58,4,3,0,139,4,0,0,140,2,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,130,13,0,0,136,14,0,0,49,13,13,14,36,10,6,0,135,13,0,0,0,2,0,0,0,3,1,0,0,4,3,0,134,5,0,0,20,222,5,0,4,0,0,0,0,10,5,0,0,6,10,0,0,7,2,0,0,8,3,0,134,13,0,0,76,111,5,0,6,7,8,0,0,9,10,0,137,12,0,0,139,9,0,0,140,0,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,152,10,6,0,135,10,0,0,1,10,24,0,1,11,67,0,134,0,0,0,168,171,5,0,10,11,0,0,0,7,0,0,0,1,7,0,134,11,0,0,52,74,6,0,1,0,0,0,0,2,7,0,25,3,2,8,134,11,0,0,52,74,6,0,3,0,0,0,0,4,7,0,25,5,4,16,134,11,0,0,52,74,6,0,5,0,0,0,0,6,7,0,137,9,0,0,139,6,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,40,11,6,0,135,10,0,0,0,1,0,0,1,10,140,4,82,2,10,0,1,10,144,4,82,3,10,0,134,4,0,0,92,75,4,0,2,3,0,0,0,5,1,0,25,6,5,16,25,7,6,8,85,7,4,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,148,11,6,0,135,10,0,0,0,1,0,0,1,10,140,4,82,2,10,0,1,10,144,4,82,3,10,0,134,4,0,0,92,75,4,0,2,3,0,0,0,5,1,0,25,6,5,16,25,7,6,4,85,7,4,0,137,9,0,0,139,0,0,0,140,2,11,0,0,0,0,0,2,9,0,0,255,255,0,0,19,9,0,9,0,2,9,0,2,9,0,0,255,255,0,0,19,9,1,9,0,3,9,0,5,4,3,2,43,9,0,16,0,5,9,0,43,9,4,16,5,10,3,5,3,6,9,10,43,10,1,16,0,7,10,0,5,8,7,2,43,10,6,16,5,9,7,5,3,10,10,9,2,9,0,0,255,255,0,0,19,9,6,9,3,9,9,8,43,9,9,16,3,10,10,9,129,10,0,0,3,10,6,8,41,10,10,16,2,9,0,0,255,255,0,0,19,9,4,9,20,10,10,9,39,10,10,0,139,10,0,0,140,2,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,148,12,6,0,135,12,0,0,0,2,0,0,0,3,1,0,0,4,3,0,25,5,4,8,134,12,0,0,0,67,6,0,5,0,0,0,0,6,3,0,25,7,6,8,0,8,2,0,25,9,8,8,134,12,0,0,32,47,6,0,7,9,0,0,137,11,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,8,13,6,0,135,10,0,0,0,2,0,0,0,3,1,0,134,10,0,0,196,106,6,0,1,10,52,0,82,4,10,0,1,10,0,0,85,4,10,0,1,10,52,0,82,5,10,0,0,6,2,0,0,7,3,0,134,10,0,0,128,39,6,0,5,6,7,0,137,9,0,0,139,0,0,0,140,2,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,128,13,6,0,135,12,0,0,0,2,0,0,0,3,1,0,0,4,3,0,25,5,4,8,134,12,0,0,96,67,6,0,5,0,0,0,0,6,3,0,25,7,6,8,0,8,2,0,25,9,8,8,134,12,0,0,128,47,6,0,7,9,0,0,137,11,0,0,139,0,0,0,140,2,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,244,13,6,0,135,12,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,25,6,5,4,82,7,6,0,0,8,3,0,82,9,8,0,134,12,0,0,128,39,6,0,4,7,9,0,137,11,0,0,139,0,0,0,140,2,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,92,14,6,0,135,12,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,25,6,5,4,82,7,6,0,0,8,3,0,82,9,8,0,134,12,0,0,128,39,6,0,4,7,9,0,137,11,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,196,14,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,25,5,4,4,82,6,5,0,0,7,3,0,1,11,22,0,135,8,27,0,11,6,7,0,137,10,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,36,15,6,0,135,8,0,0,0,5,7,0,25,1,0,60,82,2,1,0,85,5,2,0,1,8,6,0,135,3,108,0,8,5,0,0,134,4,0,0,156,93,6,0,3,0,0,0,137,7,0,0,139,4,0,0,140,2,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,136,15,6,0,135,12,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,25,6,5,4,82,7,6,0,0,8,3,0,82,9,8,0,134,12,0,0,128,39,6,0,4,7,9,0,137,11,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,240,15,6,0,135,10,0,0,0,1,0,0,0,2,1,0,25,3,2,12,82,4,3,0,134,10,0,0,148,105,6,0,4,0,0,0,0,5,1,0,25,6,5,16,82,7,6,0,134,10,0,0,148,105,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,96,16,6,0,135,10,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,10,0,0,100,24,6,0,3,6,0,0,0,7,1,0,134,10,0,0,248,70,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,208,16,6,0,135,10,0,0,0,1,0,0,0,2,1,0,25,3,2,12,82,4,3,0,134,10,0,0,148,105,6,0,4,0,0,0,0,5,1,0,25,6,5,16,82,7,6,0,134,10,0,0,148,105,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,2,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,64,17,6,0,135,12,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,25,6,5,4,82,7,6,0,0,8,3,0,82,9,8,0,134,12,0,0,128,39,6,0,4,7,9,0,137,11,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,168,17,6,0,135,10,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,10,0,0,244,27,6,0,3,6,0,0,0,7,1,0,134,10,0,0,176,71,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,24,18,6,0,135,10,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,10,0,0,20,29,6,0,3,6,0,0,0,7,1,0,134,10,0,0,104,72,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,136,18,6,0,135,10,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,10,0,0,116,29,6,0,3,6,0,0,0,7,1,0,134,10,0,0,196,72,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,248,18,6,0,135,10,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,10,0,0,212,29,6,0,3,6,0,0,0,7,1,0,134,10,0,0,32,73,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,104,19,6,0,135,10,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,10,0,0,148,30,6,0,3,6,0,0,0,7,1,0,134,10,0,0,216,73,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,216,19,6,0,135,10,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,10,0,0,244,30,6,0,3,6,0,0,0,7,1,0,134,10,0,0,52,74,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,72,20,6,0,135,10,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,10,0,0,84,31,6,0,3,6,0,0,0,7,1,0,134,10,0,0,144,74,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,184,20,6,0,135,10,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,10,0,0,180,31,6,0,3,6,0,0,0,7,1,0,134,10,0,0,236,74,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,40,21,6,0,135,10,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,10,0,0,116,32,6,0,3,6,0,0,0,7,1,0,134,10,0,0,72,75,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,3,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,130,12,0,0,136,13,0,0,49,12,12,13,152,21,6,0,135,12,0,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,3,0,0,7,4,0,1,12,255,0,19,12,7,12,0,8,12,0,0,9,5,0,135,12,103,0,6,8,9,0,137,11,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,0,22,6,0,135,10,0,0,0,1,0,0,0,2,1,0,25,3,2,12,82,4,3,0,134,10,0,0,148,105,6,0,4,0,0,0,0,5,1,0,25,6,5,16,82,7,6,0,134,10,0,0,148,105,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,112,22,6,0,135,10,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,10,0,0,212,32,6,0,3,6,0,0,0,7,1,0,134,10,0,0,164,75,6,0,7,0,0,0,137,9,0,0,139,0,0,0,140,0,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,224,22,6,0,135,9,0,0,1,9,8,0,1,10,63,0,134,0,0,0,168,171,5,0,9,10,0,0,0,6,0,0,1,10,4,0,1,9,1,0,134,1,0,0,224,168,5,0,10,9,0,0,0,2,6,0,85,2,1,0,0,3,6,0,25,4,3,4,1,10,1,0,135,9,132,0,10,4,0,0,0,5,6,0,137,8,0,0,139,5,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,104,23,6,0,135,10,0,0,0,2,0,0,58,3,1,0,134,4,0,0,120,91,6,0,0,7,4,0,0,5,7,0,134,10,0,0,88,122,4,0,5,0,0,0,0,6,7,0,134,10,0,0,132,177,3,0,6,0,0,0,137,9,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,216,23,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0], eb + 389120);
  HEAPU8.set([139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,56,24,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,152,24,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,248,24,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,0,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,88,25,6,0,135,9,0,0,134,9,0,0,12,104,6,0,1,9,96,1,1,10,118,0,134,0,0,0,168,171,5,0,9,10,0,0,0,6,0,0,0,1,6,0,134,10,0,0,124,57,3,0,1,0,0,0,0,2,6,0,25,3,2,4,1,10,0,0,85,3,10,0,0,4,6,0,134,10,0,0,240,54,4,0,4,0,0,0,0,5,6,0,137,8,0,0,139,5,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,232,25,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,72,26,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,168,26,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,8,27,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,104,27,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,200,27,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,40,28,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,136,28,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,232,28,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,72,29,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,168,29,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,8,30,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,104,30,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,200,30,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,40,31,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,136,31,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,232,31,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,72,32,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,168,32,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,8,33,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,104,33,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,200,33,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,25,5,4,44,82,6,5,0,1,10,34,0,135,7,26,0,10,6,0,0,137,9,0,0,139,0,0,0,140,0,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,36,34,6,0,135,9,0,0,1,9,8,0,1,10,56,0,134,0,0,0,168,171,5,0,9,10,0,0,0,6,0,0,1,10,4,0,1,9,1,0,134,1,0,0,224,168,5,0,10,9,0,0,0,2,6,0,85,2,1,0,0,3,6,0,25,4,3,4,1,9,0,0,85,4,9,0,0,5,6,0,137,8,0,0,139,5,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,168,34,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,85,5,4,0,0,6,3,0,0,7,2,0,25,8,7,4,85,8,6,0,137,10,0,0,139,0,0,0,140,2,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,8,35,6,0,135,11,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,0,6,3,0,25,7,6,4,82,8,7,0,134,11,0,0,24,211,5,0,4,5,8,0,137,10,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,108,35,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,25,5,4,44,82,6,5,0,1,10,32,0,135,7,26,0,10,6,0,0,137,9,0,0,139,0,0,0,140,0,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,200,35,6,0,135,6,0,0,0,3,5,0,1,6,88,4,82,0,6,0,32,1,0,255,120,1,3,0,137,5,0,0,139,0,0,0,2,7,0,0,166,140,0,0,135,6,133,0,7,3,0,0,82,2,3,0,1,6,88,4,85,6,2,0,137,5,0,0,139,0,0,0,140,3,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,60,36,6,0,135,11,0,0,0,3,0,0,0,4,1,0,0,5,2,0,134,6,0,0,36,25,6,0,0,8,6,0,0,7,8,0,137,10,0,0,139,7,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,148,36,6,0,135,10,0,0,0,2,0,0,0,3,2,0,1,10,8,1,3,4,3,10,82,5,4,0,0,7,5,0,0,6,7,0,1,10,0,0,83,6,10,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,244,36,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,25,5,4,16,1,10,0,0,85,5,10,0,0,6,2,0,25,7,6,20,1,10,0,0,85,7,10,0,137,9,0,0,139,0,0,0,140,3,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,88,37,6,0,135,11,0,0,0,3,0,0,0,4,1,0,0,5,2,0,134,6,0,0,36,25,6,0,0,8,6,0,0,7,8,0,137,10,0,0,139,7,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,176,37,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,3,0,134,10,0,0,32,68,6,0,4,0,0,0,0,5,3,0,0,6,2,0,25,7,6,40,134,10,0,0,224,47,6,0,5,7,0,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,28,38,6,0,135,10,0,0,0,2,0,0,0,3,2,0,1,10,8,1,3,4,3,10,82,5,4,0,0,7,5,0,0,6,7,0,1,10,0,0,83,6,10,0,137,9,0,0,139,0,0,0,140,3,12,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,124,38,6,0,135,9,0,0,0,3,0,0,0,4,1,0,0,5,3,0,0,6,4,0,1,10,0,0,1,11,12,0,134,9,0,0,28,51,5,0,5,6,10,2,11,0,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,224,38,6,0,135,9,0,0,0,1,0,0,0,2,1,0,134,9,0,0,248,70,6,0,2,0,0,0,0,3,1,0,25,4,3,8,1,9,0,0,85,4,9,0,0,5,1,0,25,6,5,12,1,9,255,255,85,6,9,0,137,8,0,0,139,0,0,0,140,3,12,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,80,39,6,0,135,9,0,0,0,3,0,0,0,4,1,0,0,5,3,0,0,6,4,0,1,10,3,0,1,11,12,0,134,9,0,0,28,51,5,0,5,6,10,2,11,0,0,0,137,8,0,0,139,0,0,0,140,3,13,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,16,137,11,0,0,130,11,0,0,136,12,0,0,49,11,11,12,180,39,6,0,135,11,0,0,0,3,0,0,0,4,1,0,0,5,2,0,0,6,3,0,0,7,4,0,0,8,5,0,134,11,0,0,76,111,5,0,6,7,8,0,137,10,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,20,40,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,152,201,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,116,40,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,24,202,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,3,12,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,212,40,6,0,135,9,0,0,0,3,0,0,0,4,1,0,0,5,3,0,0,6,4,0,1,10,2,0,1,11,12,0,134,9,0,0,28,51,5,0,5,6,10,2,11,0,0,0,137,8,0,0,139,0,0,0,140,3,12,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,56,41,6,0,135,9,0,0,0,3,0,0,0,4,1,0,0,5,3,0,0,6,4,0,1,10,1,0,1,11,12,0,134,9,0,0,28,51,5,0,5,6,10,2,11,0,0,0,137,8,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,156,41,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,3,0,134,10,0,0,160,66,6,0,4,0,0,0,0,5,3,0,0,6,2,0,25,7,6,8,134,10,0,0,192,46,6,0,5,7,0,0,137,9,0,0,139,0,0,0,140,0,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,8,42,6,0,135,9,0,0,134,0,0,0,208,123,5,0,0,6,0,0,0,1,6,0,25,2,1,28,1,9,16,0,85,2,9,0,0,3,6,0,25,4,3,32,1,9,17,0,85,4,9,0,0,5,6,0,137,8,0,0,139,5,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,116,42,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,152,202,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,212,42,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,24,203,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,52,43,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,152,203,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,148,43,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,24,204,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,244,43,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,152,204,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,84,44,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,24,205,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,180,44,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,152,205,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,20,45,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,24,206,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,116,45,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,152,206,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,212,45,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,24,207,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,52,46,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,152,207,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,148,46,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,24,208,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,244,46,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,152,208,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,84,47,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,24,209,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,180,47,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,152,209,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,20,48,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,24,210,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,116,48,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,152,210,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,212,48,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,24,211,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,52,49,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,3,0,134,10,0,0,40,60,6,0,4,0,0,0,0,5,3,0,0,6,2,0,25,7,6,8,134,10,0,0,224,39,6,0,5,7,0,0,137,9,0,0,139,0,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,160,49,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,252,49,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,88,50,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,180,50,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,16,51,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,108,51,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,200,51,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,36,52,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,128,52,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,220,52,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,56,53,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,148,53,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,240,53,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,76,54,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,168,54,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,4,55,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,96,55,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,188,55,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,24,56,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,116,56,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,208,56,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,44,57,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,136,57,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,228,57,6,0,135,9,0,0,0,1,0,0,0,2,1,0,134,9,0,0,20,98,6,0,2,0,0,0,0,3,1,0,25,4,3,20,82,5,4,0,134,9,0,0,52,67,4,0,5,0,0,0,0,6,1,0,134,9,0,0,216,166,5,0,6,0,0,0,137,8,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,92,58,6,0,135,8,0,0,0,1,0,0,0,2,1,0,82,3,2,0,134,8,0,0,16,122,5,0,3,0,0,0,0,4,1,0,25,5,4,8,1,8,0,0,85,5,8,0,137,7,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,192,58,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,82,6,5,0,0,7,3,0,134,10,0,0,40,213,5,0,4,6,7,0,137,9,0,0,139,0,0,0,140,2,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,32,59,6,0,135,10,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,2,0,135,6,4,0,5,0,0,0,134,7,0,0,148,113,4,0,4,6,0,0,137,9,0,0,139,7,0,0,140,1,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,128,59,6,0,135,10,0,0,0,1,0,0,0,2,1,0,0,3,1,0,25,4,3,4,82,5,4,0,13,6,2,5,38,10,6,1,0,7,10,0,137,9,0,0,139,7,0,0,140,2,14,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,88,2,0,0,88,3,1,0,65,4,2,3,25,5,0,4,88,6,5,0,25,7,1,4,88,8,7,0,65,9,6,8,63,10,4,9,139,10,0,0,140,4,7,0,0,0,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,0,4,5,0,134,6,0,0,192,20,3,0,0,1,2,3,4,0,0,0,137,5,0,0,106,6,4,4,129,6,0,0,82,6,4,0,139,6,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,92,60,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,164,23,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,188,60,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,4,24,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,28,61,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,100,24,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,124,61,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,196,24,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,0,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,220,61,6,0,135,8,0,0,1,8,12,0,1,9,127,0,134,0,0,0,168,171,5,0,8,9,0,0,0,5,0,0,0,1,5,0,134,9,0,0,84,71,6,0,1,0,0,0,0,2,5,0,25,3,2,8,1,9,5,0,84,3,9,0,0,4,5,0,137,7,0,0,139,4,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,84,62,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,180,25,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,180,62,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,20,26,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,20,63,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,116,26,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,116,63,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,212,26,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,212,63,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,52,27,6,0,3,6,0,0,137,8,0,0,139,0,0,0], eb + 399360);
  HEAPU8.set([140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,52,64,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,148,27,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,148,64,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,244,27,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,244,64,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,84,28,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,84,65,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,180,28,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,180,65,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,116,29,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,20,66,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,212,29,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,116,66,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,52,30,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,212,66,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,244,30,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,52,67,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,84,31,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,148,67,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,180,31,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,244,67,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,20,32,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,84,68,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,116,32,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,180,68,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,212,32,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,20,69,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,52,33,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,116,69,6,0,135,8,0,0,0,1,0,0,134,2,0,0,168,61,6,0,0,5,2,0,0,3,1,0,0,4,5,0,134,8,0,0,240,243,5,0,3,4,0,0,137,7,0,0,139,0,0,0,140,4,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,212,69,6,0,135,8,0,0,0,5,7,0,85,5,3,0,134,4,0,0,40,199,4,0,0,1,2,5,137,7,0,0,139,4,0,0,140,4,12,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,130,10,0,0,136,11,0,0,49,10,10,11,36,70,6,0,135,10,0,0,0,4,0,0,0,5,1,0,0,6,2,0,0,7,3,0,137,9,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,112,70,6,0,135,9,0,0,0,1,0,0,0,2,1,0,82,3,2,0,0,4,1,0,25,5,4,4,82,6,5,0,134,9,0,0,116,34,6,0,3,6,0,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,208,70,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,44,71,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,136,71,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,228,71,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,64,72,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,156,72,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,248,72,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,84,73,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,176,73,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,12,74,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,104,74,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,196,74,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,32,75,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,124,75,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,216,75,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,2,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,52,76,6,0,135,9,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,134,6,0,0,52,39,5,0,4,5,0,0,137,8,0,0,139,6,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,16,137,9,0,0,130,9,0,0,136,10,0,0,49,9,9,10,140,76,6,0,135,9,0,0,0,1,0,0,0,2,1,0,0,3,1,0,85,3,2,0,0,4,1,0,0,5,1,0,25,6,5,4,85,6,4,0,137,8,0,0,139,0,0,0,140,0,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,232,76,6,0,135,8,0,0,1,8,12,0,1,9,121,0,134,0,0,0,168,171,5,0,8,9,0,0,0,5,0,0,0,1,5,0,25,2,1,4,134,9,0,0,12,72,6,0,2,0,0,0,0,3,5,0,1,9,3,0,83,3,9,0,0,4,5,0,137,7,0,0,139,4,0,0,140,2,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,96,77,6,0,135,7,0,0,0,4,6,0,85,4,1,0,1,7,84,6,82,2,7,0,134,3,0,0,176,46,4,0,2,0,4,0,137,6,0,0,139,3,0,0,140,1,5,0,0,0,0,0,130,2,1,0,1,3,255,0,19,3,0,3,90,1,2,3,34,2,1,8,121,2,2,0,139,1,0,0,130,2,1,0,42,3,0,8,1,4,255,0,19,3,3,4,90,1,2,3,34,2,1,8,121,2,3,0,25,2,1,8,139,2,0,0,130,2,1,0,42,3,0,16,1,4,255,0,19,3,3,4,90,1,2,3,34,2,1,8,121,2,3,0,25,2,1,16,139,2,0,0,130,2,1,0,43,3,0,24,90,2,2,3,25,2,2,24,139,2,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,56,78,6,0,135,8,0,0,0,1,0,0,0,2,1,0,25,3,2,44,82,4,3,0,1,8,6,0,135,5,26,0,8,4,0,0,137,7,0,0,139,0,0,0,140,0,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,144,78,6,0,135,8,0,0,1,8,8,0,1,9,42,0,134,0,0,0,168,171,5,0,8,9,0,0,0,5,0,0,0,1,5,0,1,9,0,0,85,1,9,0,0,2,5,0,25,3,2,4,1,9,0,0,85,3,9,0,0,4,5,0,137,7,0,0,139,4,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,4,79,6,0,135,8,0,0,0,1,0,0,0,2,1,0,25,3,2,8,134,8,0,0,64,66,6,0,3,0,0,0,0,4,1,0,134,8,0,0,64,66,6,0,4,0,0,0,0,5,1,0,134,8,0,0,216,166,5,0,5,0,0,0,137,7,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,120,79,6,0,135,8,0,0,0,1,0,0,0,2,1,0,134,8,0,0,128,65,6,0,2,0,0,0,0,3,1,0,25,4,3,8,134,8,0,0,128,65,6,0,4,0,0,0,0,5,1,0,134,8,0,0,216,166,5,0,5,0,0,0,137,7,0,0,139,0,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,236,79,6,0,135,7,0,0,0,1,0,0,0,2,1,0,134,7,0,0,188,179,5,0,2,0,0,0,0,3,1,0,134,7,0,0,132,200,5,0,3,0,0,0,0,4,1,0,134,7,0,0,76,218,5,0,4,0,0,0,137,6,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,92,80,6,0,135,8,0,0,0,1,0,0,0,2,1,0,25,3,2,12,82,4,3,0,134,8,0,0,124,164,5,0,4,0,0,0,0,5,1,0,134,8,0,0,216,166,5,0,5,0,0,0,137,7,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,196,80,6,0,135,8,0,0,0,1,0,0,0,2,1,0,82,3,2,0,1,8,6,0,135,4,26,0,8,3,0,0,0,5,1,0,134,8,0,0,216,166,5,0,5,0,0,0,137,7,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,40,81,6,0,135,8,0,0,0,1,0,0,0,2,1,0,25,3,2,4,82,4,3,0,134,8,0,0,124,164,5,0,4,0,0,0,0,5,1,0,134,8,0,0,216,166,5,0,5,0,0,0,137,7,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,144,81,6,0,135,8,0,0,0,1,0,0,0,2,1,0,25,3,2,8,134,8,0,0,192,67,6,0,3,0,0,0,0,4,1,0,134,8,0,0,192,67,6,0,4,0,0,0,0,5,1,0,134,8,0,0,216,166,5,0,5,0,0,0,137,7,0,0,139,0,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,4,82,6,0,135,8,0,0,0,1,0,0,0,2,1,0,0,3,1,0,135,4,4,0,3,0,0,0,134,5,0,0,140,127,4,0,2,4,0,0,137,7,0,0,139,5,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,96,82,6,0,135,8,0,0,0,1,0,0,0,2,1,0,134,8,0,0,160,66,6,0,2,0,0,0,0,3,1,0,25,4,3,8,134,8,0,0,160,66,6,0,4,0,0,0,0,5,1,0,134,8,0,0,216,166,5,0,5,0,0,0,137,7,0,0,139,0,0,0,140,0,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,212,82,6,0,135,7,0,0,1,7,4,0,1,8,50,0,134,0,0,0,168,171,5,0,7,8,0,0,0,4,0,0,1,8,4,0,1,7,1,0,134,1,0,0,224,168,5,0,8,7,0,0,0,2,4,0,85,2,1,0,0,3,4,0,137,6,0,0,139,3,0,0,140,0,10,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,72,83,6,0,135,7,0,0,1,7,16,0,1,8,124,0,134,0,0,0,168,171,5,0,7,8,0,0,0,4,0,0,0,1,4,0,1,7,0,0,1,9,16,0,134,8,0,0,100,21,6,0,1,7,9,0,0,2,4,0,1,8,255,255,83,2,8,0,0,3,4,0,137,6,0,0,139,3,0,0,140,0,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,196,83,6,0,135,7,0,0,1,7,4,0,1,8,126,0,134,0,0,0,168,171,5,0,7,8,0,0,0,4,0,0,1,8,4,0,1,7,1,0,134,1,0,0,224,168,5,0,8,7,0,0,0,2,4,0,85,2,1,0,0,3,4,0,137,6,0,0,139,3,0,0,140,1,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,56,84,6,0,135,8,0,0,0,1,0,0,0,2,1,0,25,3,2,4,82,4,3,0,134,8,0,0,216,166,5,0,4,0,0,0,0,5,1,0,134,8,0,0,216,166,5,0,5,0,0,0,137,7,0,0,139,0,0,0,140,2,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,160,84,6,0,135,7,0,0,0,2,0,0,0,3,1,0,0,4,2,0,1,7,0,0,85,4,7,0,137,6,0,0,1,7,0,0,139,7,0,0,140,2,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,244,84,6,0,135,7,0,0,0,2,0,0,0,3,1,0,0,4,2,0,1,7,0,0,85,4,7,0,137,6,0,0,1,7,0,0,139,7,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,72,85,6,0,135,7,0,0,0,1,0,0,134,2,0,0,200,246,5,0,0,3,1,0,25,4,3,16,85,4,2,0,137,6,0,0,139,0,0,0,140,0,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,156,85,6,0,135,7,0,0,1,7,4,0,1,8,125,0,134,0,0,0,168,171,5,0,7,8,0,0,0,4,0,0,1,8,4,0,134,1,0,0,236,195,4,0,8,0,0,0,0,2,4,0,85,2,1,0,0,3,4,0,137,6,0,0,139,3,0,0,140,2,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,12,86,6,0,135,7,0,0,0,2,0,0,0,3,1,0,0,4,2,0,1,7,0,0,85,4,7,0,137,6,0,0,1,7,0,0,139,7,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,96,86,6,0,135,7,0,0,0,1,0,0,0,2,1,0,134,7,0,0,144,74,6,0,2,0,0,0,0,3,1,0,25,4,3,8,134,7,0,0,144,74,6,0,4,0,0,0,137,6,0,0,139,0,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,196,86,6,0,135,7,0,0,0,1,0,0,0,2,1,0,25,3,2,12,82,4,3,0,134,7,0,0,148,105,6,0,4,0,0,0,137,6,0,0,139,0,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,28,87,6,0,135,7,0,0,0,1,0,0,0,2,1,0,134,7,0,0,236,74,6,0,2,0,0,0,0,3,1,0,25,4,3,8,134,7,0,0,236,74,6,0,4,0,0,0,137,6,0,0,139,0,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,128,87,6,0,135,7,0,0,0,1,0,0,0,2,1,0,25,3,2,12,82,4,3,0,134,7,0,0,148,105,6,0,4,0,0,0,137,6,0,0,139,0,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,216,87,6,0,135,7,0,0,0,1,0,0,0,2,1,0,82,3,2,0,1,7,7,0,135,4,26,0,7,3,0,0,137,6,0,0,139,0,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,44,88,6,0,135,7,0,0,0,1,0,0,0,2,1,0,25,3,2,12,82,4,3,0,134,7,0,0,148,105,6,0,4,0,0,0,137,6,0,0,139,0,0,0,140,0,9,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,1,8,40,6,82,1,8,0,1,8,0,0,13,2,1,8,121,2,3,0,1,0,92,6,119,0,5,0,135,3,134,0,25,4,3,60,82,5,4,0,0,0,5,0,139,0,0,0,140,0,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,1,5,20,0,82,0,5,0,1,5,0,0,14,1,0,5,120,1,3,0,135,5,135,0,139,0,0,0,1,5,20,0,82,2,5,0,134,5,0,0,40,176,4,0,2,0,0,0,134,5,0,0,72,110,5,0,134,5,0,0,180,44,4,0,1,5,20,0,1,6,0,0,85,5,6,0,135,6,135,0,139,0,0,0,140,2,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,48,89,6,0,135,8,0,0,0,2,0,0,0,3,1,0,0,4,2,0,0,5,3,0,134,8,0,0,20,212,5,0,4,5,0,0,137,7,0,0,139,0,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,136,89,6,0,135,7,0,0,0,1,0,0,0,2,1,0,82,3,2,0,134,7,0,0,180,1,6,0,3,0,0,0,0,4,1,0,134,7,0,0,216,166,5,0,4,0,0,0,137,6,0,0,139,0,0,0,140,3,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,236,89,6,0,135,8,0,0,0,3,0,0,0,4,1,0,0,5,2,0,137,7,0,0,139,0,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,52,90,6,0,135,7,0,0,0,1,0,0,0,2,1,0,25,3,2,16,134,7,0,0,144,160,5,0,3,0,0,0,0,4,1,0,134,7,0,0,216,166,5,0,4,0,0,0,137,6,0,0,139,0,0,0,140,3,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,152,90,6,0,135,8,0,0,0,3,0,0,0,4,1,0,0,5,2,0,137,7,0,0,139,0,0,0,140,0,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,224,90,6,0,135,6,0,0,1,6,24,0,1,7,53,0,134,0,0,0,168,171,5,0,6,7,0,0,0,3,0,0,0,1,3,0,134,7,0,0,164,75,6,0,1,0,0,0,0,2,3,0,137,5,0,0,139,2,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,72,91,6,0,135,7,0,0,0,1,0,0,0,2,1,0,25,3,2,4,134,7,0,0,192,64,6,0,3,0,0,0,0,4,1,0,134,7,0,0,216,166,5,0,4,0,0,0,137,6,0,0,139,0,0,0,140,0,11,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,1,6,40,0,82,0,6,0,1,6,0,0,14,1,0,6,120,1,12,0,1,6,153,13,1,7,11,0,1,8,185,34,1,9,165,13,1,10,11,0,134,2,0,0,4,238,4,0,6,7,8,9,10,0,0,0,1,10,40,0,85,10,2,0,1,10,40,0,82,3,10,0,139,3,0,0,140,3,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,16,137,8,0,0,130,8,0,0,136,9,0,0,49,8,8,9,12,92,6,0,135,8,0,0,0,3,0,0,0,4,1,0,0,5,2,0,137,7,0,0,139,0,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,84,92,6,0,135,6,0,0,0,1,0,0,0,2,1,0,1,6,1,0,83,2,6,0,0,3,1,0,134,6,0,0,24,119,4,0,3,0,0,0,137,5,0,0,139,0,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,176,92,6,0,135,7,0,0,0,1,0,0,0,2,1,0,25,3,2,10,80,4,3,0,137,6,0,0,139,4,0,0,140,1,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,130,7,0,0,136,8,0,0,49,7,7,8,252,92,6,0,135,7,0,0,0,1,0,0,0,2,1,0,25,3,2,8,80,4,3,0,137,6,0,0,139,4,0,0,140,2,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,72,93,6,0,135,6,0,0,0,2,0,0,0,3,1,0,137,5,0,0,139,0,0,0,140,2,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,140,93,6,0,135,6,0,0,0,2,0,0,0,3,1,0,137,5,0,0,139,0,0,0,140,1,8,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,1,7,0,240,16,2,7,0,121,2,8,0,1,7,0,0,4,3,7,0,134,4,0,0,80,88,6,0,85,4,3,0,1,1,255,255,119,0,2,0,0,1,0,0,139,1,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,20,94,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,6,0,0,128,68,6,0,2,0,0,0,0,3,1,0,134,6,0,0,216,166,5,0,3,0,0,0,137,5,0,0,139,0,0,0,140,2,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,134,2,0,0,208,77,4,0,0,1,0,0,78,3,2,0,1,9,255,0,19,9,1,9,0,4,9,0,41,9,3,24,42,9,9,24,41,10,4,24,42,10,10,24,13,5,9,10,1,10,0,0,125,6,5,2,10,0,0,0,139,6,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,200,94,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,20,222,5,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,24,95,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,6,0,0,216,222,2,0,2,0,0,0,0,3,1,0,134,6,0,0,216,166,5,0,3,0,0,0,137,5,0,0,139,0,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,120,95,6,0,135,5,0,0,0,1,0,0,0,2,1,0,1,5,4,6,85,5,2,0,137,4,0,0,139,0,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,196,95,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,6,0,0,52,235,3,0,2,0,0,0,0,3,1,0,134,6,0,0,216,166,5,0,3,0,0,0,137,5,0,0,139,0,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,36,96,6,0,135,5,0,0,0,1,0,0,0,2,1,0,1,5,0,0,85,2,5,0,137,4,0,0,1,5,0,0,139,5,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,116,96,6,0,135,5,0,0,0,1,0,0,0,2,1,0,1,5,0,0,85,2,5,0,137,4,0,0,1,5,0,0,139,5,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,196,96,6,0,135,5,0,0,0,1,0,0,0,2,1,0,1,5,0,0,85,2,5,0,137,4,0,0,1,5,0,0,139,5,0,0,140,2,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,20,97,6,0,135,6,0,0,0,2,0,0,0,3,1,0,137,5,0,0,139,0,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,88,97,6,0,135,6,0,0,0,2,5,0,0,1,0,0,0,3,1,0,134,6,0,0,116,201,2,0,2,3,0,0,137,5,0,0,139,0,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,172,97,6,0,135,5,0,0,0,1,0,0,0,2,1,0,1,5,76,14,83,5,2,0,137,4,0,0,139,0,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,248,97,6,0,135,5,0,0,0,1,0,0,0,2,1,0,1,5,0,0,85,2,5,0,137,4,0,0,1,5,0,0,139,5,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,72,98,6,0,135,5,0,0,0,1,0,0,0,2,1,0,134,5,0,0,44,16,6,0,2,0,0,0,137,4,0,0,139,0,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,152,98,6,0,135,5,0,0,0,1,0,0,0,2,1,0,134,5,0,0,4,171,5,0,2,0,0,0,137,4,0,0,139,0,0,0,140,0,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,1,5,100,4,82,0,5,0,1,5,0,0,14,1,0,5,121,1,2,0,139,0,0,0,1,5,4,0,134,2,0,0,236,195,4,0,5,0,0,0,1,5,100,4,85,5,2,0,1,6,47,0,134,5,0,0,68,216,5,0,6,0,0,0,139,0,0,0,140,0,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,1,5,232,5,82,0,5,0,1,5,0,0,14,1,0,5,120,1,2,0,139,0,0,0,1,5,232,5,82,2,5,0,134,5,0,0,20,231,4,0,2,0,0,0,1,5,232,5,1,6,0,0,85,5,6,0,139,0,0,0,140,0,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,1,5,240,5,82,0,5,0,1,5,0,0,14,1,0,5,120,1,2,0,139,0,0,0,1,5,240,5,82,2,5,0,134,5,0,0,164,81,4,0,2,0,0,0,1,5,240,5,1,6,0,0,85,5,6,0,139,0,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,224,99,6,0,135,5,0,0,0,1,0,0,0,2,1,0,134,5,0,0,216,166,5,0,2,0,0,0,137,4,0,0,139,0,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,48,100,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,128,100,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,208,100,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,32,101,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,112,101,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,192,101,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,16,102,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,96,102,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,176,102,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,0,103,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,80,103,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,160,103,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,0,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,1,5,228,5,82,0,5,0,1,5,0,0,14,1,0,5,120,1,2,0,139,0,0,0,1,5,228,5,82,2,5,0,134,5,0,0,20,231,4,0,2,0,0,0,1,5,228,5], eb + 409600);
  HEAPU8.set([1,6,0,0,85,5,6,0,139,0,0,0,140,0,7,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,1,4,36,6,82,0,4,0,33,1,0,0,121,1,2,0,139,0,0,0,1,4,36,6,1,5,1,0,85,4,5,0,1,4,119,0,134,5,0,0,68,216,5,0,4,0,0,0,1,4,8,6,1,6,0,0,135,5,136,0,4,6,0,0,139,0,0,0,140,0,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,1,5,240,5,82,0,5,0,1,5,0,0,14,1,0,5,121,1,2,0,139,0,0,0,1,6,68,0,134,5,0,0,68,216,5,0,6,0,0,0,134,2,0,0,100,10,6,0,1,5,240,5,85,5,2,0,139,0,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,16,137,6,0,0,130,6,0,0,136,7,0,0,49,6,6,7,232,104,6,0,135,6,0,0,0,1,0,0,0,2,1,0,134,3,0,0,36,113,6,0,2,0,0,0,137,5,0,0,139,3,0,0,140,2,8,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,1,7,0,0,13,3,0,7,121,3,3,0,1,2,0,0,119,0,6,0,1,7,0,0,134,4,0,0,116,115,4,0,0,1,7,0,0,2,4,0,139,2,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,120,105,6,0,135,5,0,0,0,1,0,0,0,2,1,0,134,5,0,0,144,204,4,0,2,0,0,0,137,4,0,0,139,0,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,200,105,6,0,135,5,0,0,0,1,0,0,0,2,1,0,134,5,0,0,4,84,6,0,2,0,0,0,137,4,0,0,139,0,0,0,140,2,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,24,106,6,0,135,5,0,0,0,2,0,0,137,4,0,0,139,0,0,0,140,0,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,1,5,52,0,82,0,5,0,1,5,0,0,14,1,0,5,120,1,2,0,139,0,0,0,1,5,52,0,82,2,5,0,134,5,0,0,148,105,6,0,2,0,0,0,1,5,52,0,1,6,0,0,85,5,6,0,139,0,0,0,140,1,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,136,5,0,0,25,5,5,16,137,5,0,0,130,5,0,0,136,6,0,0,49,5,5,6,168,106,6,0,135,5,0,0,0,1,0,0,0,2,1,0,134,5,0,0,216,166,5,0,2,0,0,0,137,4,0,0,139,0,0,0,140,0,7,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,1,5,52,0,82,0,5,0,1,5,0,0,14,1,0,5,121,1,2,0,139,0,0,0,1,6,37,0,134,5,0,0,68,216,5,0,6,0,0,0,1,5,0,0,134,2,0,0,148,94,6,0,5,0,0,0,1,5,52,0,85,5,2,0,139,0,0,0,140,1,6,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,80,107,6,0,135,4,0,0,0,1,0,0,137,3,0,0,139,0,0,0,140,1,6,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,144,107,6,0,135,4,0,0,0,1,0,0,137,3,0,0,1,4,0,0,139,4,0,0,140,1,9,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,32,1,0,32,26,2,0,9,35,3,2,5,20,8,1,3,0,4,8,0,38,8,4,1,0,5,8,0,139,5,0,0,140,3,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,2,7,0,0,0,0,0,128,1,8,0,0,134,3,0,0,148,62,5,0,0,1,2,7,8,0,0,0,128,8,0,0,0,4,8,0,139,3,0,0,140,1,6,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,68,108,6,0,135,4,0,0,0,1,0,0,137,3,0,0,139,0,0,0,140,1,6,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,132,108,6,0,135,4,0,0,0,1,0,0,137,3,0,0,139,0,0,0,140,1,6,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,196,108,6,0,135,4,0,0,0,1,0,0,137,3,0,0,139,0,0,0,140,1,7,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,25,1,0,68,82,2,1,0,32,3,2,0,121,3,4,0,134,6,0,0,172,122,6,0,0,0,0,0,139,0,0,0,140,1,7,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,25,1,0,68,82,2,1,0,32,3,2,0,121,3,4,0,134,6,0,0,172,122,6,0,0,0,0,0,139,0,0,0,140,3,9,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,1,7,255,255,1,8,0,0,134,3,0,0,148,62,5,0,0,1,2,7,8,0,0,0,128,8,0,0,0,4,8,0,139,3,0,0,140,1,6,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,164,109,6,0,135,4,0,0,0,1,0,0,137,3,0,0,139,0,0,0,140,1,6,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,228,109,6,0,135,4,0,0,0,1,0,0,137,3,0,0,139,0,0,0,140,1,6,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,36,110,6,0,135,4,0,0,0,1,0,0,137,3,0,0,139,0,0,0,140,1,6,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,100,110,6,0,135,4,0,0,0,1,0,0,137,3,0,0,139,0,0,0,140,4,8,0,0,0,0,0,4,4,0,2,4,5,1,3,4,6,1,3,16,7,0,2,4,5,6,7,129,5,0,0,139,4,0,0,140,0,6,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,134,5,0,0,196,106,6,0,1,5,52,0,82,0,5,0,25,1,0,4,82,2,1,0,139,2,0,0,140,1,6,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,136,4,0,0,25,4,4,16,137,4,0,0,130,4,0,0,136,5,0,0,49,4,4,5,248,110,6,0,135,4,0,0,0,1,0,0,137,3,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,0,0,134,4,0,0,192,20,3,0,0,1,2,3,5,0,0,0,139,4,0,0,140,4,8,0,0,0,0,0,3,4,0,2,3,6,1,3,16,7,4,0,3,5,6,7,129,5,0,0,139,4,0,0,140,2,5,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,1,4,252,44,139,4,0,0,140,2,6,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,1,5,1,0,134,2,0,0,132,101,5,0,0,1,5,0,139,2,0,0,140,2,2,0,0,0,0,0,137,0,0,0,132,0,0,1,139,0,0,0,140,2,6,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,134,2,0,0,164,227,5,0,0,1,0,0,139,2,0,0,140,2,6,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,134,2,0,0,204,34,5,0,0,1,0,0,139,2,0,0,140,0,4,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,134,3,0,0,100,104,6,0,1,3,240,5,82,0,3,0,139,0,0,0,140,2,6,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,134,2,0,0,120,64,5,0,0,1,0,0,139,2,0,0,140,2,6,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,134,2,0,0,244,44,3,0,0,1,0,0,139,2,0,0,140,0,5,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,1,3,213,18,1,4,0,0,134,0,0,0,96,149,3,0,3,4,0,0,139,0,0,0,140,0,5,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,1,3,166,18,1,4,0,0,134,0,0,0,96,149,3,0,3,4,0,0,139,0,0,0,140,0,5,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,1,3,158,16,1,4,0,0,134,0,0,0,96,149,3,0,3,4,0,0,139,0,0,0,140,0,5,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,1,3,111,16,1,4,0,0,134,0,0,0,96,149,3,0,3,4,0,0,139,0,0,0,140,0,4,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,1,3,76,14,78,0,3,0,139,0,0,0,140,1,5,0,0,0,0,0,1,2,0,0,136,4,0,0,0,3,4,0,1,4,0,0,134,1,0,0,96,111,6,0,0,4,0,0,139,1,0,0,140,0,4,0,0,0,0,0,1,0,0,0,136,2,0,0,0,1,2,0,1,3,8,6,135,2,137,0,3,0,0,0,139,0,0,0,140,0,4,0,0,0,0,0,1,0,0,0,136,2,0,0,0,1,2,0,1,2,73,15,1,3,0,0,83,2,3,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,127,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,126,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,125,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,124,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,123,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,122,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,121,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,120,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,119,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,118,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,117,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,116,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,115,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,114,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,82,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,81,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,80,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,79,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,78,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,77,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,76,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,75,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,74,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,73,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,72,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,71,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,70,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,69,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,68,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,67,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,66,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,65,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,64,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,63,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,62,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,61,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,60,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,59,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,58,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,57,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,56,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,55,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,54,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,53,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,52,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,51,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,50,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,49,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,48,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,47,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,46,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,45,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,44,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,43,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,42,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,41,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,40,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,39,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,38,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,37,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,36,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,35,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,34,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,33,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,32,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,31,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,30,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,29,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,28,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,27,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,26,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,25,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,24,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,23,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,22,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,21,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,20,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,19,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,18,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,17,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,16,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,15,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,14,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,13,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,12,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,11,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,10,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,9,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,8,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,7,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,6,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,5,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,4,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,3,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,2,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,1,0,135,4,138,0,5,0,0,0,139,0,0,0,140,4,6,0,0,0,0,0,1,5,0,0,135,4,138,0,5,0,0,0,139,0,0,0,140,1,4,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,139,0,0,0,140,1,4,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,255,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,254,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,253,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,252,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,251,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,250,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,249,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,248,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,247,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,246,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,245,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,244,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,243,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,242,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,241,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,240,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,239,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,238,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,237,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,236,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,235,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,234,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,233,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,232,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,231,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,230,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,229,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,228,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,227,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,226,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,225,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,224,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,223,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,222,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,221,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,220,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,219,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,218,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,217,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,216,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,215,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,214,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,213,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,212,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,211,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,210,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,209,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,208,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,207,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,206,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,205,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,204,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,203,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,202,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,201,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,200,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,199,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,198,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,197,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,196,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,195,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,194,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,193,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,192,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,191,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,190,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,189,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,188,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,187,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,186,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,185,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,184,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,183,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,182,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,181,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,180,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,179,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,178,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,177,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,176,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,175,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,174,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,173,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,172,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,171,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,170,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,169,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,168,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,167,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,166,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,165,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,164,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,163,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,162,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,161,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,160,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,159,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,158,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,157,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,156,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,155,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,154,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,153,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,152,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,151,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,150,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,149,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,148,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,147,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,146,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,145,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,144,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,143,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,142,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,141,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,140,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,139,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,138,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,137,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,136,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,135,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,134,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,131,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,130,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,129,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,128,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,127,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,126,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,125,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,124,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,123,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,122,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,121,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,120,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,119,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,118,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,117,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,116,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,115,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,114,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,113,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,112,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,111,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,110,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,109,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,108,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,107,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,106,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,105,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,104,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,103,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,102,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,101,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,100,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,99,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,98,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,97,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,96,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,95,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,94,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,93,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,92,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,91,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,90,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,89,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,88,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,87,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,86,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,85,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,84,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,83,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,70,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,69,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,68,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,67,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,66,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,65,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,64,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,63,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,62,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,61,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,60,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,59,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,58,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,57,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,56,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,55,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,54,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,53,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,52,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,51,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,50,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,49,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0], eb + 419840);
  HEAPU8.set([0,0,0,0,1,4,48,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,47,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,46,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,45,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,44,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,43,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,42,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,41,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,40,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,39,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,38,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,37,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,36,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,35,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,34,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,33,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,32,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,31,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,30,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,29,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,28,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,27,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,26,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,25,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,24,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,23,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,22,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,21,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,20,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,19,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,18,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,17,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,16,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,15,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,14,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,5,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,2,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,3,5,0,0,0,0,0,1,4,0,0,135,3,139,0,4,0,0,0,1,3,0,0,139,3,0,0,140,0,3,0,0,0,0,0,1,0,0,0,136,2,0,0,0,1,2,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,63,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,62,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,61,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,60,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,59,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,58,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,57,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,56,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,55,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,54,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,53,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,52,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,51,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,50,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,49,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,48,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,47,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,46,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,45,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,44,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,43,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,42,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,41,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,40,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,39,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,38,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,37,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,36,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,35,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,33,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,32,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,31,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,30,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,29,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,28,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,27,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,26,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,25,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,24,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,23,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,22,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,21,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,20,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,19,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,17,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,16,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,15,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,14,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,13,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,12,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,11,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,10,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,9,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,8,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,7,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,6,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,5,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,4,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,3,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,2,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,1,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,0,0,135,3,140,0,4,0,0,0,139,0,0,0,140,3,5,0,0,0,0,0,1,4,0,0,135,3,141,0,4,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,7,0,135,2,142,0,3,0,0,0,1,2,0,0,139,2,0,0,140,2,4,0,0,0,0,0,1,3,6,0,135,2,142,0,3,0,0,0,1,2,0,0,139,2,0,0,140,2,4,0,0,0,0,0,1,3,4,0,135,2,142,0,3,0,0,0,1,2,0,0,139,2,0,0,140,2,4,0,0,0,0,0,1,3,3,0,135,2,142,0,3,0,0,0,1,2,0,0,139,2,0,0,140,2,4,0,0,0,0,0,1,3,2,0,135,2,142,0,3,0,0,0,1,2,0,0,139,2,0,0,140,2,4,0,0,0,0,0,1,3,1,0,135,2,142,0,3,0,0,0,1,2,0,0,139,2,0,0,140,2,4,0,0,0,0,0,1,3,0,0,135,2,142,0,3,0,0,0,1,2,0,0,139,2,0,0,140,2,4,0,0,0,0,0,1,3,31,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,26,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,25,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,24,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,20,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,19,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,18,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,17,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,16,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,15,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,14,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,13,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,12,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,11,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,10,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,9,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,8,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,7,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,6,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,5,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,4,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,3,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,2,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,1,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,0,0,135,2,143,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,127,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,126,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,125,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,124,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,122,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,121,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,120,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,119,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,118,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,117,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,116,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,115,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,114,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,113,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,112,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,111,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,110,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,109,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,108,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,107,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,106,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,105,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,104,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,103,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,102,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,101,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,100,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,99,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,98,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,97,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,96,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,95,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,94,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,93,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,92,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,91,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,90,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,89,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,88,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,87,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,86,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,85,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,84,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,83,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,82,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,81,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,80,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,79,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,78,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,77,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,76,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,75,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,74,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,73,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,72,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,71,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,70,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,69,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,68,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,67,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,66,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,65,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,64,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,63,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,62,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,61,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,60,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,59,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,58,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,57,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,56,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,55,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,54,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,53,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,52,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,51,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,50,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,49,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,48,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,47,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,46,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,45,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,44,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,43,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,42,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,41,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,40,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,39,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,38,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,37,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,36,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,35,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,34,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,33,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,32,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,31,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,30,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,29,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,28,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,27,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,26,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,25,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,24,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,23,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,22,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,21,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,19,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,18,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,17,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,16,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,15,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,14,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,13,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,12,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,11,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,10,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,9,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,8,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,7,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,6,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,5,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,4,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,3,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,2,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,1,0,135,2,144,0,3,0,0,0,139,0,0,0,140,2,4,0,0,0,0,0,1,3,0,0,135,2,144,0,3,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,3,0,135,1,145,0,2,0,0,0,1,1,0,0,139,1,0,0,140,1,3,0,0,0,0,0,1,2,1,0,135,1,145,0,2,0,0,0,1,1,0,0,139,1,0,0,140,1,3,0,0,0,0,0,1,2,0,0,135,1,145,0,2,0,0,0,1,1,0,0,139,1,0,0,140,1,3,0,0,0,0,0,1,2,255,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,254,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,253,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,252,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,251,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,250,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,249,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,248,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,247,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,246,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,245,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,244,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,243,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,242,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,241,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,240,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,239,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,238,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,237,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,236,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,235,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,234,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,233,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,232,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,231,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,230,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,229,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,228,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,227,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,226,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,225,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,224,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,223,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,222,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,221,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,220,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,219,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,218,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,217,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,216,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,215,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,214,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,213,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,212,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,211,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,210,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,209,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,208,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,207,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,206,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,205,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,204,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,203,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,202,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,201,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,200,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,199,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,198,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,197,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,196,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,195,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,194,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,193,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,192,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,191,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,190,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,189,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,188,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,187,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,186,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,185,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,184,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,183,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,182,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,181,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,180,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,179,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,178,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,177,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,176,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,175,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,174,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,173,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,172,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,171,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,170,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,169,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,168,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,167,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,166,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,165,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,164,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,163,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,162,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,161,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,160,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,159,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,158,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,157,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,156,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,155,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,154,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,153,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,152,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,151,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,150,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,149,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,148,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,147,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,146,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,145,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,144,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,143,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,142,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,141,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,140,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,139,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,138,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,137,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,136,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,133,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,132,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,123,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,119,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,113,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,112,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,111,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,110,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,109,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,108,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,107,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,106,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,105,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,104,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,103,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,102,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,101,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,100,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,99,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,98,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,97,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,96,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,95,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,94,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,93,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,92,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,91,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,90,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,89,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,88,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,87,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,86,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,85,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,84,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,83,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,82,0,135,1,146,0,2,0,0,0], eb + 430080);
  HEAPU8.set([139,0,0,0,140,1,3,0,0,0,0,0,1,2,81,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,80,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,79,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,78,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,77,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,76,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,75,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,74,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,73,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,72,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,71,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,70,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,68,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,58,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,57,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,47,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,37,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,34,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,30,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,29,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,28,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,27,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,23,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,22,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,21,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,20,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,18,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,14,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,13,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,12,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,11,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,10,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,9,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,8,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,7,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,6,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,5,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,4,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,3,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,2,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,1,0,135,1,146,0,2,0,0,0,139,0,0,0,140,1,3,0,0,0,0,0,1,2,0,0,135,1,146,0,2,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,127,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,126,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,125,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,124,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,123,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,122,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,121,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,120,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,118,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,117,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,116,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,115,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,114,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,113,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,112,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,111,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,110,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,109,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,108,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,107,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,106,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,105,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,104,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,103,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,102,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,101,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,100,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,99,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,98,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,97,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,96,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,95,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,94,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,93,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,92,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,91,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,90,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,89,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,88,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,87,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,86,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,85,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,84,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,83,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,82,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,81,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,80,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,79,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,78,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,77,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,76,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,75,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,74,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,73,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,72,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,71,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,69,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,67,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,66,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,65,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,64,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,63,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,62,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,61,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,60,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,59,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,56,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,55,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,54,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,53,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,52,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,51,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,50,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,49,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,48,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,46,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,45,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,44,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,43,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,42,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,41,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,40,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,39,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,38,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,36,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,35,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,34,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,33,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,32,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,31,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,30,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,29,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,28,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,27,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,26,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,25,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,24,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,23,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,22,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,21,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,20,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,19,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,18,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,17,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,16,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,15,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,13,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,12,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,11,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,10,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,9,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,8,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,7,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,6,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,5,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,4,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,3,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,2,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,1,0,135,0,147,0,1,0,0,0,139,0,0,0,140,0,2,0,0,0,0,0,1,1,0,0,135,0,147,0,1,0,0,0,139,0,0,0,0,0,0,0], eb + 440320);

  var relocations = [];
  relocations = relocations.concat([52,144,24096,24164,24256,48208,48304,48324,48328,48332,48452,48572,48576,48580,48620,48788,48844,49012,49016,49020,49024,49028,49032,49204,49284,49500,49504,49508,49512,49528,49608,49684,49736,49824,49828,49832,49968,50068,50156,51328,51636,51688,52032,52096,52620,53280,53284,53288,53376,53456,53472,53576,54792,55384,55840,56076,56100,56356,56484,56548,58712,59384,59808,59832,59920,60020,60560,60760,61504,61636,61828,61996,62220,62440,62572,62664,62928,63048,63148,63228,63276,63436,63728,63732,63736,63740,63744,63748,63752,63756,63760,63764,63768,63772,63776,63780,63784,63788,63792,63796,63800,63804,63808,63812,63816,63820,63824,63828,63832,63836,63840,63844,63848,63852,63856,63860,63864,63868,63872,63876,64160,65304,66300,66476,66768,66832,67032,67036,67040,67044,67048,67052,67056,67060,67064,67068,67072,67076,67080,67084,67088,67092,67096,67100,67104,67108,67112,67116,67120,67124,67128,67132,67136,67140,67144,67148,67152,67156,67160,67164,67168,67172,67176,67180,67184,67188,67192,67196,67200,67204,67208,67212,67216,67220,67224,67228,67232,67236,67240,67244,67248,67252,68660,70068,70696,71360,71692,71864,72240,72360,72392,72760,72936,73168,74852,74924,75000,75116,75304,75360,75752,76096,77020,77024,77028,77032,77036,77040,77044,77048,78740,80300,80312,80676,90812,90868,101004,101072,101168,101276,101352,101624,101760,101848,103632,103656,103728,103792,103976,104280,104640,104772,105332,105392,105524,106188,106248,106380,106840,112496,118028,118112,118140,118412,118468,118676,118716,118764,118824,118860,118984,119000,119352,119728,119868,120008,120052,120128,120284,120328,120404,120420,120776,121148,121288,121640,122008,122148,122188,122316,122332,122380,122420,122496,122536,122552,122904,123280,123420,123760,124132,124276,124336,124476,124544,124624,124760,124868,124872,125084,125088,128864,129024,129100,129104,129108,129112,129176,129180,129184,129188,130368,130524,130600,130604,130608,130612,132012,132136,132292,132368,132372,132376,132380,132452,132456,132460,132464,133880,134036,134112,134116,134120,134124,135392,135516,135632,137844,137968,138012,138096,138100,138104,138140,138260,138380,138444,138460,138520,138612,138648,138776,139076,139456,139760,139968,140404,140624,140816,141132,141644,141908,142172,142436,142700,142964,143240,143504,143768,144032,144308,144572,144684,144856,145320,146128,147268,150080,152912,152944,152948,152952,152956,152960,152964,152968,152972,152976,152980,152984,152988,152992,152996,153000,153004,153008,153012,153016,153020,153024,153716,153800,153936,153960,154060,154208,154292,154428,154508,154644,154724,154860,155044,158064,158252,159848,159980,160168,161764,161896,161964,161984,162944,162968,163096,163172,163236,163240,163244,163248,163252,163256,163260,163264,163268,163416,163652,164296,164708,164728,164900,165060,165064,166056,166396,166772,167112,167344,167632,167636,167640,167644,167700,168672,169380,172280,172496,172584,172624,172640,172688,172724,172760,172816,172872,173368,173404,173440,173544,173612,173660,173724,173780,173872,174356,174692,175004,175256,175776,176052,176316,178604,178960,178996,179044,179092,179428,179464,179712,179748,179916,182692,184012,184368,184628,184888,185000,185336,185384,185704,185904,185952,186508,186584,186920,186968,187288,187488,187536,188092,188196,188276,188404,188504,188568,188588,188692,188964,188984,189060,189080,189200,189220,189304,189344,189416,189500,189660,189664,189668,189672,189676,189680,189684,189688,189692,189696,190868,191468,191748,192032,192316,192600,192648,192696,193112,193136,193364,193540,193604,193716,193848,193920,193944,194088,194280,194376,194380,194384,194388,194392,194396,194400,194404,194408,194412,194416,194420,194424,194428,194432,194436,194440,194444,194448,194452,194456,194460,194464,194468,194472,194476,194480,195892,197500,197596,197600,197604,197608,197612,197616,197620,197624,197628,197632,197636,197640,197644,197648,197652,197656,197660,197664,197668,197672,197676,197680,197684,197688,197692,197696,197700,199100,200532,203436,204984,206532,206596,206648,206728,207312,207348,207408,208068,208104,209724,209816,211372,212084,212572,213232,214524,215700,216812,218008,219224,219612,220308,222092,223020,223336,223340,224056,225184,226312,226452,226624,227424,228364,229240,230156,231092,231560,231596,232004,232236,232240,232244,233156,234068,234892,235856,236652,237500,237984,238288,238412,240972,241664,241668,241672,241676,241680,242096,242856,243500,244392,244548,245156,246012,246852,246960,246964,246968,246972,246976,246980,246984,246988,247776,248620,248860,248864,248868,248872,248876,248880,248884,248888,248892,248896,248900,252776,254088,254280,254384,254532,254676,254868,254972,255120,255260,256108,256524,256804,256864,256908,256912,256916,256920,256924,256928,256932,256936,256940,256944,256948,256952,257576,258260,258788,258920,259204,259424,259556,259840,260068,260336,260340,260344,260348,260688,261372,261456,261460,261464,261468,261472,262120,262516,262576,262688,262740,262812,263444,263964,264548,265096,265736,266208,266464,266468,266472,266476,266480,266720,267268,267784,270960,271496,272032,272568,273100,273648,274144,274196,274672,275056,275204,275588,275736,276252,276768,277224,279392,279900,280432,280904,281480,282612,283096,283640,284080,284496,285496,286704,287132,287736,288260,288364,288368,288372,288376,288380,288384,288388,288392,288696,289104,289504,289904,290380,290824,291264,292280,292680,292816,293116,293508,293696,293700,293704,293708,293712,293716,293720,293724,293728,293732,293736,293740,294008,294424,294840,295692,296084,296476,296860,297320,297704,298096,298488,298856,300068,300436,300752,301124,301472,301856,302236,302604,302972,303348,304192,304528,304564,305744,306124,306436,306548,306928,307284,307680,308036,308416,308992,309372,309756,310144,310600,310604,310608,310848,311052,311056,311232,311656,312000,312344,312760,313176,313224,313860,314200,314556,314928,314976,314980,314984,314988,314992,314996,315000,315004,315008,315012,315016,315020,315352,315408,315668,316044,316396,316736,317036,317336,317748,318016,318340,318676,319000,319316,319596,319872,320160,320448,320736,321036,321344,321652,321940,322224,322548,322832,323120,323432,323844,324228,324512,324792,325072,325348,325636,326172,326436,326724,326972,327236,327508,327792,328064,328348,328620,328952,329340,329612,329852,330128,330384,330660,330916,331184,331512,331780,331852,331856,332400,332692,332964,333216,333488,333748,334032,334280,334532,334720,334756,334840,335080,335336,335664,335912,336160,336396,336956,337508,337760,338012,338252,338464,338708,339004,339288,339584,339880,340088,340316,340808,341028,341272,341584,342044,342276,342500,342768,343056,343268,343520,343744,343984,344096,344100,344272,344276,344280,344284,344288,344292,344296,344300,344304,344308,344312,344316,344320,344324,344328,344332,344336,344340,344344,344348,344352,344356,344360,344364,344368,344372,344376,344380,344384,344388,344392,344396,344400,344404,344408,344412,344416,344420,344424,344428,344432,344436,344440,344444,344448,344452,344456,344460,344464,344468,344472,344476,344480,344484,344488,344492,344496,344500,344504,344508,344512,344516,344520,344524,344528,344532,344536,344540,344544,344548,344552,344556,344560,344564,344568,344572,344576,344580,344584,344588,344592,344596,344600,344604,344608,344612,344616,344620,344624,344628,344632,344636,344640,344644,344648,344652,344656,344660,344664,344668,344672,344676,344680,344684,344688,344692,344696,344700,344704,344708,344712,344716,344720,344724,344728,344732,344736,344740,344744,344748,344752,344756,344760,344764,344768,344772,344776,344780,344784,344788,344792,344796,344800,344804,344808,344812,344816,344820,344824,344828,344832,344836,344840,344844,344848,344852,344856,344860,344864,344868,344872,344876,344880,344884,344888,344892,344896,344900,344904,344908,344912,344916,344920,344924,344928,344932,344936,344940,344944,344948,344952,344956,344960,344964,344968,344972,344976,344980,344984,344988,344992,344996,345000,345004,345008,345012,345016,345020,345024,345028,345032,345036,345040,345044,345048,345052,345056,345060,345064,345068,345072,345076,345080,345084,345088,345092,345096,345100,345104,345108,345112,345116,345120,345124,345128,345132,345136,345140,345144,345148,345152,345156,345160,345164,345168,345172,345176,345180,345184,345188,345192,345196,345200,345204,345208,345212,345216,345220,345224,345228,345232,345236,345240,345244,345248,345252,345256,345260,345264,345268,345272,345276,345280,345284,345288,345292,345296,345300,345304,345308,345312,345316,345320,345324,345328,345332,345336,345340,345344,345348,345352,345356,345360,345364,345368,345372,345376,345380,345384,345388,345392,345396,345400,345404,345408,345412,345416,345420,345424,345428,345432,345436,345440,345444,345448,345452,345456,345460,345464,345468,345472,345476,345480,345484,345488,345492,345496,345500,345504,345508,345512,345516,345520,345524,345528,345532,345536,345540,345544,345548,345552,345556,345560,345564,345568,345572,345576,345580,345584,345588,345592,345596,345600,345604,345608,345612,345616,345620,345624,345628,345632,345636,345640,345644,345648,345652,345656,345660,345664,345668,345672,345676,345680,345684,345688,345692,345696,345700,345704,345708,345712,345716,345720,345724,345728,345732,345736,345740,345744,345748,345752,345756,345760,345764,345768,345772,345776,345780,345784,345788,345792,345796,345800,345804,345808,345812,345816,345820,345824,345828,345832,345836,345840,345844,345848,345852,345856,345860,345864,345868,345872,345876,345880,345884,345888,345892,345896,345900,345904,345908,345912,345916,345920,345924,345928,345932,345936,345940,345944,345948,345952,345956,345960,345964,345968,345972,345976,345980,345984,345988,345992,345996,346000,346004,346008,346012,346016,346020,346024,346028,346032,346036,346040,346044,346048,346052,346056,346060,346064,346068,346072,346076,346080,346084,346088,346092,346096,346100,346104,346108,346112,346116,346120,346124,346128,346132,346136,346140,346144,346148,346152,346156,346160,346164,346168,346172,346176,346180,346184,346188,346192,346196,346200,346204,346208,346212,346216,346220,346224,346228,346232,346236,346240,346244,346248,346252,346256,346260,346264,346268,346272,346276,346280,346284,346288,346292,346296,346300,346304,346308,346312,346316,346320,346324,346328,346332,346336,346340,346344,346348,346352,346356,346360,346364,346368,346372,346376,346380,346384,346388,346392,346396,346400,346404,346408,346412,346416,346420,346424,346428,346432,346436,346440,346444,346448,346452,346456,346460,346464,346468,346472,346476,346480,346484,346488,346492,346496,346500,346504,346508,346512,346516,346520,346524,346528,346532,346536,346540,346544,346548,346552,346556,346560,346564,346568,346572,346576,346580,346584,346588,346592,346596,346600,346604,346608,346612,346616,346620,346624,346628,346632,346636,346640,346644,346648,346652,346656,346660,346664,346668,346672,346676,346680,346684,346688,346692,346696,346700,346704,346708,346712,346716,346720,346724,346728,346732,346736,346740,346744,346748,346752,346756,346760,346764,346768,346772,346776,346780,346784,346788,346792,346796,346800,346804,346808,346812,346816,346820,346824,346828,346832,346836,346840,346844,346848,346852,346856,346860,346864,346868,346872,346876,346880,346884,346888,346892,346896,346900,346904,346908,346912,346916,346920,346924,346928,346932,346936,346940,346944,346948,346952,346956,346960,346964,346968,346972,346976,346980,346984,346988,346992,346996,347000,347004,347008,347012,347016,347020,347024,347028,347032,347036,347040,347044,347048,347052,347056,347060,347064,347068,347072,347076,347080,347084,347088,347092,347096,347100,347104,347108,347112,347116,347120,347124,347128,347132,347136,347140,347144,347148,347152,347156,347160,347164,347168,347172,347176,347180,347184,347188,347192,347196,347200,347204,347208,347212,347216,347220,347224,347228,347232,347236,347240,347244,347248,347252,347256,347260,347264,347268,347272,347276,347280,347284,347288,347292,347296,347300,347304,347308,347312,347316,347320,347324,347328,347332,347336,347340,347344,347348,347352,347356,347360,347364,347368,347372,347376,347380,347384,347388,347392,347396,347400,347404,347408,347412,347416,347420,347424,347428,347432,347436,347440,347444,347448,347452,347456,347460,347464,347468,347472,347476,347480,347484,347488,347492,347496,347500,347504,347508,347512,347516,347520,347524,347528,347532,347536,347540,347544,347548,347552,347556,347560,347564,347568,347572,347576,347580,347584,347588,347592,347596,347600,347604,347608,347612,347616,347620,347624,347628,347632,347636,347640,347644,347648,347652,347656,347660,347664,347668,347672,347676,347680,347684,347688,347692,347696,347700,347704,347708,347712,347716,347720,347724,347728,347732,347736,347740,347744,347748,347752,347756,347760,347764,347768,347772,347776,347780,347784,347788,347792,347796,347800,347804,347808,347812,347816,347820,347824,347828,347832,347836,347840,347844,347848,347852,347856,347860,347864,347868,347872,347876,347880,347884,347888,347892,347896,347900,347904,347908,347912,347916,347920,347924,347928,347932,347936,347940,347944,347948,347952,347956,347960,347964,347968,347972,347976,347980,347984,347988,347992,347996,348000,348004,348008,348012,348016,348020,348024,348028,348032,348036,348040,348044,348048,348052,348056,348060,348064,348068,348072,348076,348080,348084,348088,348092,348096,348100,348104,348108,348112,348116,348120,348124,348128,348132,348136,348140,348144,348148,348152,348156,348160,348164,348168,348172,348176,348180,348184,348188,348192,348196,348200,348204,348208,348212,348216,348220,348224,348228,348232,348236,348240,348244,348248,348252,348256,348260,348264,348268,348272,348276,348280,348284,348288,348292,348296,348300,348304,348308,348312,348316,348320,348324,348328,348332,348336,348340,348344,348348,348352,348356,348360,348364,348368,348372,348376,348380,348384,348388,348392,348396,348400,348404,348408,348412,348416,348420,348424,348428,348432,348436,348440,348444,348448,348452,348456,348460,348464,348468,348472,348476,348480,348484,348488,348492,348496,348500,348504,348508,348512,348516,348520,348524,348528,348532,348536,348540,348544,348548,348552,348556,348560,348564,348568,348572,348576,348580,348584,348588,348592,348596,348600,348604,348608,348612,348616,348620,348624,348628,348632,348636,348640,348644,348648,348652,348656,348660,348664,348668,348672,348676,348680,348684,348688,348692,348696,348700,348704,348708,348712,348716,348720,348724,348728,348732,348736,348740,348744,348748,348752,348756,348760,348764,348768,348772,348776,348780,348784,348788,348792,348796,348800,348804,348808,348812,348816,348820,348824,348828,348832,348836,348840,348844,348848,348852,348856,348860,348864,348868,348872,348876,348880,348884,348888,348892,348896,348900,348904,348908,348912,348916,348920,348924,348928,348932,348936,348940,348944,348948,348952,348956,348960,348964,348968,348972,348976,348980,348984,348988,348992,348996,349000,349004,349008,349012,349016,349020,349024,349028,349032,349036,349040,349044,349048,349052,349056,349060,349064,349068,349072,349076,349080,349084,349088,349092,349096,349100,349104,349108,349112,349116,349120,349124,349128,349132,349136,349140,349144,349148,349152,349156,349160,349164,349168,349172,349176,349180,349184,349188,349192,349196,349200,349204,349208,349212,349216,349220,349224,349228,349232,349236,349240,349244,349248,349252,349256,349260,349264,349268,349272,349276,349280,349284,349288,349292,349296,349300,349304,349308,349312,349316,349320,349324,349328,349332,349336,349340,349344,349348,349352,349356,349360,349364,349368,349372,349376,349380,349384,349388,349392,349396,349400,349404,349408,349412,349416,349420,349424,349428,349432,349436,349440,349444,349448,349452,349456,349460,349464,349468,349472,349476,349480,349484,349488,349492,349496,349500,349504,349508,349512,349516,349520,349524,349528,349532,349536,349540,349544,349548,349552,349556,349560,349564,349568,349572,349576,349580,349584,349588,349592,349596,349600,349604,349608,349612,349616,349620,349624,349628,349632,349636,349640,349644,349648,349652,349656,349660,349664,349668,349672,349676,349680,349684,349688,349692,349696,349700,349704,349708,349712,349716,349720,349724,349728,349732,349736,349740,349744,349748,349752,349756,349760,349764,349768,349772,349776,349780,349784,349788,349792,349796,349800,349804,349808,349812,349816,349820,349824,349828,349832,349836,349840,349844,349848,349852,349856,349860,349864,349868,349872,349876,349880,349884,349888,349892,349896,349900,349904,349908,349912,349916,349920,349924,349928,349932,349936,349940,349944,349948,349952,349956,349960,349964,349968,349972,349976,349980,349984,349988,349992,349996,350000,350004,350008,350012,350016,350020,350024,350028,350032,350036,350040,350044,350048,350052,350056,350060,350064,350068,350072,350076,350080,350084,350088,350092,350096,350100,350104,350108,350112,350116,350120,350124,350128,350132,350136,350140,350144,350148,350152,350156,350160,350164,350168,350172,350176,350180,350184,350188,350192,350196,350200,350204,350208,350212,350216,350220,350224,350228,350232,350236,350240,350244,350248,350252,350256,350260,350264,350268,350272,350276,350280,350284,350288,350292,350296,350300,350304,350308,350312,350316,350320,350324,350328,350332,350336,350340,350344,350348,350352,350356,350360,350364,350368,350372,350376,350380,350384,350388,350392,350396,350400,350404,350408,350412,350416,350420,350424,350428,350432,350436,350440,350444,350448,350452,350456,350460,350464,350468,350472,350476,350480,350484,350488,350492,350496,350500,350504,350508,350512,350516,350520,350524,350528,350532,350536,350540,350544,350548,350552,350556,350560,350564,350568,350572,350576,350580,350584,350588,350592,350596,350600,350604,350608,350612,350616,350620,350624,350628,350632,350636,350640,350644,350648,350652,350656,350660,350664,350668,350672,350676,350680,350684,350688,350692,350696,350700,350704,350708,350712,350716,350720,350724,350728,350732,350736,350740,350744,350748,350752,350756,350760,350764,350768,350772,350776,350780,350784,350788,350792,350796,350800,350804,350808,350812,350816,350820,350824,350828,350832,350836,350840,350844,350848,350852,350856,350860,350864,350868,350872,350876,350880,350884,350888,350892,350896,350900,350904,350908,350912,350916,350920,350924,350928,350932,350936,350940,350944,350948,350952,350956,350960,350964,350968,350972,350976,350980,350984,350988,350992,350996,351000,351004,351008,351012,351016,351020,351024,351028,351032,351036,351040,351044,351048,351052,351056,351060,351064,351068,351072,351076,351080,351084,351088,351092,351096,351100,351104,351108,351112,351116,351120,351124,351128,351132,351136,351140,351144,351148,351152,351156,351160,351164,351168,351172,351176,351180,351184,351188,351192,351196,351200,351204,351208,351212,351216,351220,351224,351228,351232,351236,351240,351244,351248,351252,351256,351260,351264,351268,351272,351276,351280,351284,351288,351292,351296,351300,351304,351308,351312,351316,351320,351324,351328,351332,351336,351340,351344,351348,351352,351356,351360,351364,351368,351372,351376,351380,351384,351388,351392,351396,351400,351404,351408,351412,351416,351420,351424,351428,351432,351436,351440,351444,351448,351452,351456,351460,351464,351468,351472,351476,351480,351484,351488,351492,351496,351500,351504,351508,351512,351516,351520,351524,351528,351532,351536,351540,351544,351548,351552,351556,351560,351564,351568,351572,351576,351580,351584,351588,351592,351596,351600,351604,351608,351612,351616,351620,351624,351628,351632,351636,351640,351644,351648,351652,351656,351660,351664,351668,351672,351676,351680,351684,351688,351692,351696,351700,351704,351708,351712,351716,351720,351724,351728,351732,351736,351740,351744,351748,351752,351756,351760,351764,351768,351772,351776,351780,351784,351788,351792,351796,351800,351804,351808,351812,351816,351820,351824,351828,351832,351836,351840,351844,351848,351852,351856,351860,351864,351868,351872,351876,351880,351884,351888,351892,351896,351900,351904,351908,351912,351916,351920,351924,351928,351932,351936,351940,351944,351948,351952,351956,351960,351964,351968,351972,351976,351980,351984,351988,351992,351996,352000,352004,352008,352012,352016,352020,352024,352028,352032,352036,352040,352044,352048,352052,352056,352060,352064,352068,352072,352076,352080,352084,352088,352092,352096,352100,352104,352108,352112,352116,352120,352124,352128,352132,352136,352140,352144,352148,352152,352156,352160,352164,352168,352172,352176,352180,352184,352188,352192,352196,352200,352204,352208,352212,352216,352220,352224,352228,352232,352236,352240,352244,352248,352252,352256,352260,352264,352268,352272,352276,352280,352284,352288,352292,352296,352300,352304,352308,352312,352316,352320,352324,352328,352332,352336,352340,352344,352348,352352,352356,352360,352364,352368,352372,352376,352380,352384,352388,352392,352396,352400,352404,352408,352412,352416,352420,352424,352428,352432,352436,352440,352444,352448,352452,352456,352460,352672,352984,353476,353712,353748,353940,354144,354348,354556,354728,354936,355224,355436,355480,355484,355488,355492,355496,355500,355728,355972,356216,356416,356636,356856,357032,357528,357780,357868,357872,357876,357880,358048,358308,358552,358772,358972,359192,359420,359688,359864,360076,360320,360564,361532,361696,361860,362024,362228,362592,362864,363076,363312,363584,363768,363952,364136,364320,364508,364692,364876,364952,364956,364960,364964,364968,364972,364976,364980,364984,364988,364992,365148,365376,365772,366016,366208,366420,366612,366792,367044,367284,367464,367652,367832,368012,368200,368408,368652,368828,369028,369228,369376,369832,370028,370268,370436,370628,370788,370956,371148,371344,371504,371668,372032,372096,372204,372368,372568,372748,372964,373132,373336,373540,373736,373896,374060,374256,374388,374524,374656,374792,375072,375208,375380,375532,375664,375796,375932,376116,376268,376424,376556,376680,376840,376920,376976,377104,377244,377396,377544,377696,377848,378000,378144,378312,378392,378448,378632,378772,378916,379056,379204,379332,379460,379588,379716,379844,379972,380100,380228,380356,380484,380612,380740,380868,380996,381124,381252,381380,381508,381636,381764,381892,382016,382156,382220,382292,382420,382480,382552,382704,382828,382892,382964,383088,383292,383440,383608,383748,383924,384124,384276,384400,384576,384736,384872,384996,385120,385284,385408,385544,385708,385872,385928,386136,386272,386416,386552,386604,386676,386868,386996,387140,387276,387396,387524,387580,387652,387756,387884,387940,388088,388220,388336,388468,388600,388712,388828,388944,389076,389192,389308,389468,389628,389756,389884,390044,390172,390388,390520,390628,390744,390900,391180,391280,391328,391332,391420,391548,391596,391600,391824,391924,392052,392164,392308,392448,392596,392744,392872,393016,393136,393260,393364,393472,393600,393696,393824,393940,394072,394196,394324,394432,394552,394660,394784,394896,395020,395124,395228,395340,395480,395620,395804,395920,396064,396172,396428,396544,396664,396780,396884,396988,397084,397184,397288,397400,397512,397624,397728,397840,397952,398064,398176,398288,398400,398512,398624,398736,398840,398952,399064,399200,399312,399408,399504,399600,399696,399840,399936,400032,400128,400224,400320,400416,400512,400608,400704,400800,400896,400992,401088,401184,401280,401376,401472,401568,401664,401760,401856,401948,402080,402176,402276,402368,402484,402572,402668,402768,402856,402964,403060,403160,403272,403372,403468,403564,403660,403760,403860,403968,404076,404172,404268,404364,404460,404556,404652,404748,404844,404940,405036,405132,405228,405324,405420,405516,405612,405708,405804,405912,406004,406096,406188,406280,406372,406464,406556,406648,406740,406832,406924,407016,407108,407200,407292,407384,407476,407568,407660,407752,407844,407936,408028,408148,408248,408344,408440,408660,408756,408852,408948,409044,409164,409260,409356,409452,409548,409644,409740,409836,409932,410028,410124,410220,410316,410412,410508,410604,410700,410796,410892,410988,411084,411164,411240,411336,411428,411520,411612,411704,411796,411888,411980,412072,412164,412256,412348,412440,412532,412624,412716,412804,412896,413016,413232,413320,413436,413552,413668,413780,413884,413984,414088,414204,414296,414412,414528,414652,414768,414872,414956,415040,415124,415236,415320,415420,415508,415608,415696,415780,416040,416128,416228,416300,416400,416472,416576,416772,416844,416936,417012,417088,417156,417292,417472,417552,417648,417724,417820,417900,417980,418060,418128,418212,418288,418368,418448,418776,418856,418936,419016,419096,419176,419256,419336,419416,419496,419576,419656,419736,420064,420208,420288,420368,420512,420680,420744,420924,420988,421052,421276,421340,421404,421468,421616,48500,48532,48684,48884,49340,49548,49568,49644,49784,50016,50108,50192,50216,51192,51480,51668,51840,51948,52004,52164,52184,52280,52400,52588,52776,52796,52988,53012,53192,53208,53420,53508,53548,53620,54180,54844,55732,55804,55948,56492,56520,56928,57116,58900,58996,59044,61240,61264,61292,61316,61860,62300,62384,62496,62720,62956,62976,63572,64192,66796,67444,67648,68124,68624,69304,69352,69400,69464,69528,69584,69628,70280,70320,70372,74304,74628,74676,74716,74808,75088,75184,75276,75476,75616,75732,75876,75972,76232,76368,76440,76476,76672,76712,76784,76824,76964,76976,78572,78684,78948,79124,79256,79340,79452,79988,80036,80088,80124,80180,80228,80428,101084,101116,101188,101424,101464,101528,101644,101928,101956,101980,102016,102080,102148,102176,102300,102400,102492,102688,102980,103012,103048,103132,103176,103236,103304,103352,103440,103520,103860,103896,103924,103948,104032,104096,104468,104564,104712,104852,104896,104928,105032,105096,105196,105292,105464,105604,105664,105720,105768,105872,105936,106000,106052,106148,106320,106512,106616,106680,106724,106752,106948,107128,107172,107216,107440,107512,107600,107640,107684,107892,107920,107944,107988,108036,108268,108340,108424,108460,108696,108756,108984,109084,109184,109284,109424,109524,109624,109724,110000,110100,110200,110300,110452,110552,110652,110752,110868,110960,111060,111160,111256,111344,111432,111520,111612,111700,111788,111876,111964,112052,112140,112228,112360,112388,112420,112596,112740,112784,112824,113040,113112,113200,113240,113280,113452,113480,113504,113548,113592,113816,113888,113972,114008,114244,114304,114512,114612,114712,114812,114948,115048,115148,115248,115504,115604,115704,115804,115952,116052,116152,116252,116368,116460,116560,116660,116756,116844,116932,117020,117112,117200,117288,117376,117464,117552,117640,117728,117860,117888,117920,118064,118236,118372,118484,118632,118728,118780,118940,119516,119684,119824,119964,120084,120240,120360,120936,121104,121244,121800,121964,122104,122272,122452,123068,123236,123376,123920,124084,124228,124432,124512,124576,124656,124780,124936,125012,125328,125416,125524,125612,125720,125808,125916,126004,126116,126204,126324,126412,126532,126620,126740,126824,127068,127168,127284,127384,127500,127600,127716,127816,127936,128036,128164,128264,128388,128480,128608,128708,128880,128988,129040,129060,129428,129456,129892,129920,130332,130384,130404,130488,130540,130560,131032,131364,131392,131804,131976,132028,132048,132152,132256,132308,132328,132704,132732,133184,133212,133844,133896,133916,134000,134052,134072,134552,134752,134780,135204,135356,135408,135428,135532,135596,135648,135668,136384,136412,136448,137788,137808,137860,137880,137976,138044,138060,138192,138292,138412,138492,138672,138684,138808,138940,139048,139108,139488,139792,140004,140168,140276,140376,140440,140660,140708,140896,140920,140976,141052,141404,141680,141944,142208,142472,142736,143000,143276,143540,143804,144068,144344,144608,144704,144740,144780,144804,146088,147200,148076,148136,148172,148232,148268,148328,149540,149600,149692,149752,149844,149904,150888,150948,150984,151044,151080,151140,152352,152412,152504,152564,152656,152716,153060,153096,153120,153156,153196,153220,153268,153292,153328,153344,153380,153396,153432,153448,153464,153480,153496,153512,153524,153536,153552,153588,153624,153660,153680,153768,153812,153844,153880,153900,154004,154028,154072,154104,154152,154172,154260,154304,154336,154372,154392,154476,154520,154552,154588,154608,154692,154736,154768,154804,154824,154904,154920,154940,154956,154972,154984,154996,155012,155056,155088,158080,158216,158268,158288,159004,159032,159612,159648,159812,159864,159884,159996,160132,160184,160204,160920,160948,161496,161532,161728,161780,161800,161916,161936,162012,162056,162100,162136,162172,162208,162244,162280,162316,162352,162388,162424,162460,162496,162532,162564,162596,162628,162992,163024,163108,163140,163204,163404,163428,163456,163508,163696,163844,163924,163980,164028,164048,164340,164460,164472,164576,164648,164836,165132,165552,165596,166104,166136,166440,166472,166820,166852,167156,167188,167504,167516,167536,167556,167576,167596,167744,167808,167848,168048,168792,168884,169520,169628,169656,169668,169680,172296,172316,172332,172360,172384,172420,172448,172464,172564,172656,172704,172796,172924,172972,173076,173124,173188,173216,173240,173272,173300,173324,173480,173524,173704,173808,174024,174044,174112,174388,174724,174744,174772,175036,175288,175308,175332,175344,175380,175808,176084,176348,176368,176392,176408,178896,178920,179004,179052,179496,179780,179840,179876,179972,180036,180100,180160,180272,180340,180400,180512,182844,182864,182892,182920,182948,182976,183020,183040,183060,183080,183164,183184,183204,183224,183316,183336,183356,183376,183444,183464,183484,183504,183628,183700,184052,184408,184660,184920,185396,185480,185524,185588,185664,185788,185864,186080,186164,186208,186284,186328,186980,187064,187108,187172,187248,187372,187448,187664,187748,187792,187868,187912,188240,188292,188312,188340,188368,188420,188440,188468,188524,188628,188644,188672,188704,188724,188744,188784,188796,188816,188832,188864,188880,188896,188928,188940,189152,189172,189240,189264,189284,189316,189356,189380,189436,189456,189524,189580,190912,190932,190952,190972,190992,191012,191032,191052,191072,191092,191112,191132,192912,192948,193008,193184,193384,193508,193660,193780,193968,194004,194024,194108,194140,194516,194540,194564,194588,194612,194636,194660,194684,194708,194732,194756,194780,194804,194828,194852,194876,194900,194924,194948,194972,194996,195020,195044,195192,195372,195464,195488,195704,195812,196124,196296,196340,196368,196500,196544,196572,196624,196768,196792,196824,196968,197028,197096,197124,197276,197336,197404,197432,197736,197760,197784,197808,197832,197856,197880,197904,197928,197952,197976,198000,198024,198048,198072,198096,198120,198144,198168,198192,198216,198240,198264,198412,198592,198684,198708,198924,199032,199132,200456,200472,200564,201888,201904,202228,202836,202960,203068,203192,203676,203768,203860,204176,204316,204408,204500,204592,204924,205224,205316,205408,205724,205864,205956,206048,206140,206472,206832,206908,206984,207496,207572,207648,207724,208988,209140,209520,209776,211444,211464,211516,211528,211572,212152,212820,212844,212952,213012,213036,213060,213084,213148,213172,213264,213280,213332,213352,213376,213400,213424,213448,213520,213588,213664,213716,213760,213804,213848,213892,213936,213980,214024,214056,214080,214104,214128,214180,214224,214268,214312,214344,214400,214444,214604,214744,214764,214808,214856,214880,215540,215588,215608,215780,215920,215940,215984,216008,216668,216716,216736,219296,219344,219368,219404,219560,219632,219664,219680,219728,219744,219832,219872,219888,219908,219936,219976,220096,220128,220156,220172,220564,220580,220600,220624,220644,220684,220716,220748,220780,220812,220844,220876,220908,220940,220972,221004,221040,221072,221104,221136,221168,221200,221232,221264,221296,221328,221360,221392,221424,221456,221488,221520,221552,221584,221616,221648,221680,221712,221744,221776,221808,221840,221872,221904,221936,221968,222000,222032,222128,222160,222504,222632,222708,222752,222940,223120,223260,223276,223368,223400,223420,223444,223788,223836,223948,223996,226384,226480,226556,226652,227592,227816,227860,227888,227996,228040,228068,228152,228304,228528,228548,228576,228660,228740,228840,228880,228920,228972,229004,229044,229072,229116,229148,229180,229272,230072,230088,230192,230264,230324,230340,230868,230916,230932,230984,231008,231636,232100,232208,232320,232568,232688,232732,232752,232816,232988,233060,233324,233548,233592,233620,233728,233772,233800,233856,234008,234408,234424,234800,234816,234920,234944,234972,234988,235132,235148,235344,235588,235604,235632,235680,235700,235760,235776,235792,236192,236584,236944,236964,237024,237060,237172,237192,237308,237328,237364,237388,237440,237548,238004,238348,238448,238496,238532,238620,238652,238748,238816,238896,238984,239016,239120,239152,240996,241072,241120,241160,241208,241248,241328,241368,241400,241436,241516,241556,241604,241636,241708,241748,241780,241820,241852,241896,241944,241984,242032,242128,242148,242192,242212,242272,242292,242352,242368,242392,242652,242664,242716,242740,242764,242780,243008,243072,243672,243716,243828,243872,243892,243912,243932,243952,243972,243988,244008,244028,244100,244124,244196,244220,244300,244328,244448,244472,244560,244620,245184,245216,245304,245336,245360,245376,245420,245436,245452,245472,245544,245616,245640,245700,245768,245808,245856,245952,246040,246088,246124,246244,246364,246416,246452,246504,246540,246592,246628,246648,246668,246784,246900,247036,247644,247800,247824,247856,247880,247932,247968,247988,248004,248112,248152,248168,248212,248228,248336,248380,248492,248532,248548,252816,252848,252912,252936,253100,253124,253188,253236,253252,253312,253328,253376,253392,254240,254344,254492,254828,254932,255080,255272,255280,255328,255360,255416,255452,255508,255544,255600,255636,255692,255728,255784,255820,255860,255892,255932,255964,256020,256048,256136,256984,257020,257056,257092,257128,257164,257200,257236,257272,257308,257344,257460,257500,257624,257684,257700,257744,257804,257820,257852,257892,257952,258004,258028,258072,258088,258152,258176,258516,258648,258836,259324,259344,259360,259472,259960,259980,259996,260136,260196,260212,260300,260380,260416,260452,260488,260516,260580,260604,260712,260732,260800,260824,260892,260916,260976,261000,261020,261044,261064,261084,261116,261212,261252,261276,261292,261308,261428,261532,261864,261988,262264,262456,262524,262584,262644,262748,262972,263112,263256,263292,263368,263480,263540,263656,263680,264044,264084,264124,264164,264216,264248,264288,264316,264360,264392,264424,264440,264472,264488,264592,264632,264792,264812,264908,264928,264960,265000,265020,265036,265120,265152,265240,265272,265296,265316,265348,265436,265468,265492,265516,265532,265556,265572,265628,265644,265660,265676,265884,265960,266300,266356,266404,266652,267308,267532,267596,267620,267636,267656,267720,267828,267880,267920,267960,268000,268052,268084,268124,268152,268196,268228,268260,272644,272684,272724,272764,272816,272848,272888,272916,272960,272992,273024,273040,273176,273216,273256,273296,273348,273380,273420,273448,273492,273524,273556,273572,273812,273828,273848,273864,273880,273996,274080,274216,274268,274404,274540,274608,275124,275656,275812,275852,275892,275932,275984,276016,276056,276084,276128,276160,276192,276328,276368,276408,276448,276500,276532,276572,276600,276644,276676,276708,276848,276916,276940,276964,276984,277044,277104,277136,277164,277244,277268,277292,277316,277340,277352,277376,277400,277424,277448,277472,277496,277520,277544,277568,277592,277616,277640,277664,277676,277700,277724,277736,277760,277784,277808,279576,279612,279652,279764,279812,279828,280356,280464,280688,281516,281532,281708,281796,282012,282644,282872,282944,282964,282984,283144,283204,283220,283252,283276,283328,283352,283380,283444,283468,283548,283576,283744,283824,283848,283872,283900,283984,284116,284160,284220,284288,284312,284372,284432,284516,284544,284564,284592,284696,284740,284764,284812,284836,284860,284876,284932,284972,284996,285080,285272,285380,285436,285552,285588,285612,285640,285656,285708,285728,285756,285776,285788,285856,285876,285976,286328,286728,286800,286816,286980,287028,287044,287156,287184,287536,287564,287604,287672,287760,287788,287876,287908,287928,287952,287968,287988,288056,288080,288160,288188,288304,288436,288620,288868,288908,289016,289180,289400,289580,289800,290052,290168,290188,290320,290420,290476,290492,290648,290664,290728,290748,290872,290932,290948,291084,291100,291164,291188,291296,291324,291356,291372,291456,291488,291512,291592,291624,291648,291672,292212,292312,292532,292824,293024,293056,293168,293244,293320,293396,293540,293560,293604,293624,293760,293780,293800,293824,293848,293872,293896,293920,293940,294872,294900,294932,294948,295028,295128,295160,295184,295208,295316,295396,295444,295484,295572,295592,295608,295632,296800,296912,296940,296984,297012,297056,297084,297128,297156,297200,297228,297256,297644,298036,298428,298540,298616,298692,298768,298880,298928,298964,298988,299024,299044,299064,299100,299140,299232,300100,300204,300244,300284,300376,300572,300692,300788,300812,300848,300860,300896,300944,301028,301156,301204,301396,301412,301532,301576,301600,301636,301656,301676,301688,301712,301796,302024,302176,302292,302332,302356,302388,302408,302428,302440,302464,302544,302912,303280,303412,303436,303508,303524,303544,303560,303576,303600,303636,303652,303680,303732,303748,304288,304480,304572,306064,306152,306484,306868,307224,307336,307416,307496,307576,307620,307976,308084,308484,308580,308672,308692,309036,309104,309132,309208,309236,309400,309428,309448,309468,309692,309880,309912,309928,309940,310268,310300,310316,310328,310532,310968,311016,311088,311124,311144,311160,311252,311276,311308,311336,311592,311940,312284,312376,312400,312440,312480,312508,312544,312584,312624,312652,312900,312932,312948,313052,313080,313096,313276,313388,313552,313604,313900,313924,313952,313996,314064,314120,314244,314328,314424,314580,314604,314624,314692,314716,314800,314832,314864,315036,315056,315076,315096,315116,315136,315156,315176,315196,315216,315236,315256,315276,315292,315688,315716,315824,315848,315864,315924,315972,316124,316192,316208,316232,316336,316496,316528,316544,316556,316852,316924,317088,317132,317176,317220,317356,317368,317404,317424,317456,317492,317524,317588,317620,317640,317656,317684,318056,318092,318144,318160,318192,318276,318364,318400,318516,318544,318596,318760,318792,318808,318820,319020,319088,319140,319212,319232,319436,319536,319700,319764,319808,320100,320196,320232,320256,320324,320372,320388,320676,321524,321572,321588,321880,322164,322252,322312,322380,322408,322772,322868,322880,322948,322996,323040,323060,323160,323184,323212,323260,323280,323300,323324,323340,323368,323448,323476,323556,323660,323684,323892,323912,323932,323952,323980,324068,324100,324120,324264,324364,324732,325012,325288,325576,325852,326376,326664,326832,327176,327448,327732,328004,328288,328560,328640,328668,328756,328788,328808,328992,329008,329068,329088,329104,329140,329156,329212,329228,329256,329276,329552,330068,330324,330600,330856,331124,331304,331336,331352,331408,331436,331452,331720,331816,331880,331924,331952,332052,332128,332276,332444,332468,332492,332556,332584,332728,332764,333072,333092,333140,333252,333288,333772,333804,333860,333880,333900,333936,334220,334468,334620,334672,334764,334896,334936,334952,334980,335020,335132,335176,335220,335248,335276,335372,335392,335440,335468,335520,335560,335600,335852,336100,336260,336336,336496,336572,336976,336992,337060,337084,337120,337168,337184,337208,337536,337556,337584,337860,338192,338644,338748,338800,338816,338848,338876,338912,338932,339032,339080,339096,339112,339144,339188,339204,339228,339312,339384,339408,339424,339472,339508,339524,339608,339680,339704,339720,339768,339804,339820,339932,340028,340132,340172,340196,340340,340352,340388,340440,340968,341052,341156,341196,341212,341748,342152,342172,342440,342524,342552,342640,342672,342692,342708,342800,342820,342868,342920,342960,342972,342992,343112,343204,343396,343440,343456,343588,343840,343856,344016,344128,344160,352568,352724,352736,352748,352772,352796,352820,352856,352880,352896,352916,353012,353032,353056,353076,353100,353120,353144,353164,353292,353344,353500,353800,353816,354024,354228,354380,354408,354636,354760,354776,354792,354872,354956,354976,355008,355036,355064,355092,355120,355148,355332,355376,355516,355536,355552,355572,355588,355608,355628,355644,355664,355784,355836,355880,355988,356000,356020,356124,356156,356260,356304,356668,356888,356920,356952,356972,357064,357112,357124,357152,357184,357244,357304,357348,357560,357608,357620,357648,357680,358068,358092,358116,358140,358164,358176,358200,358224,358248,358336,358600,358652,358676,358712,358824,358856,358876,358912,359080,359128,359212,359228,359308,359340,359356,359440,359560,359580,359596,359612,359804,359964,360000,360016,360108,360224,360244,360260,360352,360468,360488,360504,360604,360636,360648,360804,360844,360884,360924,360964,361000,361032,361068,361104,361136,361384,361412,361428,361460,361584,361636,361748,361800,361912,361964,362060,362092,362116,362136,362168,362612,362636,362668,362696,362800,362964,363000,363016,363124,363148,363172,363216,363232,363248,363332,363356,363388,363416,363520,363632,363816,364000,364184,364444,364556,364740,365012,365036,365060,365084,365316,365408,365488,366124,366148,366328,366528,366552,366660,366808,366820,366848,366872,366884,366908,366956,367096,367108,367120,367156,367180,367196,367216,367332,367700,367880,368104,368132,368228,368252,368276,368300,368324,368348,368420,368436,368456,368472,368500,368528,368700,368852,368936,368964,369052,369136,369164,369272,369316,369420,369464,369684,369712,369748,369776,369904,369928,369952,369968,370048,370068,370092,370124,370144,370164,370184,370204,370312,370356,370468,370552,370568,370728,370812,370844,370876,370896,370984,371084,371184,371580,371720,371740,371768,371780,371880,371896,371920,371940,372056,372116,372144,372308,372388,372408,372468,372492,372592,372672,372768,372788,372812,372844,372864,372884,373072,373152,373172,373192,373356,373376,373396,373456,373476,373568,373608,373648,373808,373948,374080,374100,374132,374160,374184,374560,374596,374820,374844,374900,375228,375240,375288,375848,375868,375980,375996,376032,376056,376208,376360,376472,376604,376620,376708,376880,377024,377320,377336,378188,378252,378352,378468,378492,378540,378556,378572,378664,378816,378852,378948,379116,379252,381952,382084,382492,382752,383012,383136,383180,383200,383216,383312,383460,383476,383532,383660,383768,383788,383820,383848,383956,383984,383996,384012,384064,384136,384184,384336,384420,384440,384472,384500,384600,384640,384768,384812,384932,385056,385224,385344,385440,385484,385564,385588,385632,385648,385728,385752,385796,385812,385940,386196,386212,386292,386304,386336,386356,386476,386492,386616,386696,386712,386728,386744,386760,386776,386792,386808,387020,387052,387080,387192,387216,387464,387592,387952,387988,388132,388160,388272,388384,388408,388496,388520,388540,388764,388880,388972,389000,389244,389328,389348,389376,389408,389488,389508,389536,389568,389672,389696,389824,389904,389924,389940,389968,390088,390112,390200,390224,390244,390416,390440,390460,390564,390756,390772,390832,390912,390928,391220,391436,391468,391488,391864,391940,391972,391992,392092,392184,392208,392232,392248,392332,392388,392468,392488,392520,392616,392636,392668,392772,392796,392900,392924,392940,392956,393076,393412,393524,393540,393748,393764,393876,393964,393984,394116,394136,394248,394264,394372,394588,394684,394704,394724,394800,394836,394944,394960,395044,395060,395148,395164,395260,395280,395360,395384,395400,395500,395520,395540,395668,395828,395856,395940,395960,395980,396000,396096,396204,396456,396484,396564,396604,396692,396720,396824,396928,397124,397228,397316,397340,397436,397452,397540,397564,397668,397764,397780,397876,397892,397988,398004,398100,398116,398212,398228,398324,398340,398436,398452,398548,398564,398660,398676,398868,398892,398988,399004,399084,399108,399220,399236,399252,399708,399724,399744,399776,401968,401992,402216,402508,402792,402880,402904,403096,403180,403308,403408,403504,403600,403696,403796,403884,403908,403980,404112,404208,404304,404400,404496,404592,404688,404784,404880,404976,405072,405168,405264,405360,405456,405552,405648,405744,405828,405852,408048,408072,408088,408172,408284,408380,408584,408696,408792,408888,408984,409064,409084,409200,409296,409392,409488,409584,409680,409776,409872,409968,410064,410160,410256,410352,410448,410544,410640,410736,410832,410928,411004,411024,411104,411276,412744,412916,412940,413044,413340,413460,413476,413492,413572,413592,413608,413688,413704,413720,413808,413824,413924,414012,414028,414112,414128,414144,414236,414316,414336,414352,414432,414456,414548,414576,414672,414696,414796,414812,415056,415144,415164,415340,415360,415448,415528,415548,415636,415808,415952,415964,415972,416068,416152,416168,416324,416340,416492,416512,416600,416616,416696,416876,417224,417312,417328,417368,417492,417572,417588,417744,417760,418152,418388,418468,418536,418560,418628,418708,418796,418876,418956,419036,419116,419196,419276,419356,419436,419516,419596,419676,419756,419828,419912,419992,420004,420084,420148,420228,420308,420444,420532,420600,420616,420856,421112,421164,421208,421548,421652,421756,421812,421848,421884,421924,421960,422004,422048,422092,422136,422208]);

  for (var i = 0; i < relocations.length; i++) {
    assert(relocations[i] % 4 === 0);
    assert(relocations[i] >= 0 && relocations[i] < eb + 444216); // in range
    assert(HEAPU32[eb + relocations[i] >> 2] + eb < (-1 >>> 0), [i, relocations[i]]); // no overflows
    HEAPU32[eb + relocations[i] >> 2] = HEAPU32[eb + relocations[i] >> 2] + eb;
  }
});



  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function _pthread_mutex_lock() {}

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          writeStringToMemory(e.key ? e.key : "", JSEvents.keyEvent + 0 );
          writeStringToMemory(e.code ? e.code : "", JSEvents.keyEvent + 32 );
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          writeStringToMemory(e.locale ? e.locale : "", JSEvents.keyEvent + 88 );
          writeStringToMemory(e.char ? e.char : "", JSEvents.keyEvent + 120 );
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.keyEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.mouseEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-e["wheelDeltaY"] /* Invert to unify direction with the DOM Level 3 wheel event. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.uiEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          writeStringToMemory(nodeName, JSEvents.focusEvent + 0 );
          writeStringToMemory(id, JSEvents.focusEvent + 128 );
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.focusEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceOrientationEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceMotionEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.orientationChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 8 );
        writeStringToMemory(id, eventStruct + 136 );
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.fullscreenChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Runtime.dynCall('iiii', strategy.canvasResizedCallback, [37, 0, strategy.canvasResizedCallbackUserData]);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 4 );
        writeStringToMemory(id, eventStruct + 132);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.pointerlockChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.visibilityChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.touchEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // XXX Currently disabled, see bug https://bugzilla.mozilla.org/show_bug.cgi?id=966493
          // Once the above bug is resolved, enable the following condition if possible:
          // allowsDeferredCalls: eventTypeString == 'touchstart',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        writeStringToMemory(e.id, eventStruct + 1304 );
        writeStringToMemory(e.mapping, eventStruct + 1368 );
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.gamepadEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.batteryEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};function _emscripten_set_mouseleave_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave");
      return 0;
    }

  var _DtoILow=true;

  function _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _pthread_mutex_init() {}

  function _glUniform2fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[1];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(location, view);
    }

  function _emscripten_set_mouseup_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup");
      return 0;
    }

  function _emscripten_set_mouseout_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 36, "mouseout");
      return 0;
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function ___syscall39(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdir
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _glUniform4iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 4;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform4iv(location, value);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _glColorMask(x0, x1, x2, x3) { GLctx.colorMask(x0, x1, x2, x3) }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  var _cosf=Math_cos;

  function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _glDisable(x0) { GLctx.disable(x0) }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glDepthFunc(x0) { GLctx.depthFunc(x0) }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  
  
  function _emscripten_get_now() {
      if (!_emscripten_get_now.actual) {
        if (ENVIRONMENT_IS_NODE) {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() {
            var t = process['hrtime']();
            return t[0] * 1e3 + t[1] / 1e6;
          }
        } else if (typeof dateNow !== 'undefined') {
          _emscripten_get_now.actual = dateNow;
        } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return self['performance']['now'](); };
        } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
          _emscripten_get_now.actual = function _emscripten_get_now_actual() { return performance['now'](); };
        } else {
          _emscripten_get_now.actual = Date.now;
        }
      }
      return _emscripten_get_now.actual();
    }var GLFW={Window:function (id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      },WindowFromId:function (id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },errorFunc:null,monitorFunc:null,active:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0},DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x61:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 94; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
  
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function (win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        return mod;
      },onKeyPress:function (event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
        Runtime.dynCall('vii', GLFW.active.charFunc, [charCode, 1]);
  
      },onKeyChanged:function (event, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key == -1) return;
  
        GLFW.active.keys[key] = status;
        if (!GLFW.active.keyFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.keyFunc, [key, status]);
  
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1); // GLFW_PRESS
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0); // GLFW_RELEASE
      },onMousemove:function (event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.cursorPosFunc, [Browser.mouseX, Browser.mouseY]);
  
      },onMouseButtonChanged:function (event, status) {
        if (!GLFW.active || !GLFW.active.mouseButtonFunc) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        if (status == 1) { // GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        // DOM and glfw have different button codes
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
  
        Runtime.dynCall('vii', GLFW.active.mouseButtonFunc, [eventButton, status]);
  
      },onMouseButtonDown:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function (event) {
        if (!GLFW.active) return;
        GLFW.active.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function (event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
  
        Runtime.dynCall('vi', GLFW.active.scrollFunc, [GLFW.wheelPos]);
  
  
        event.preventDefault();
      },onFullScreenEventChange:function () {
        if (!GLFW.active) return;
  
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
        } else {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
        }
  
        Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true); // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
  
        if (!GLFW.active.windowSizeFunc) return;
  
        Runtime.dynCall('vii', GLFW.active.windowSizeFunc, [GLFW.active.width, GLFW.active.height]);
  
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      },getTime:function () {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function (winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = Pointer_stringify(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setKeyCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.keyFunc = cbfun;
      },setCharCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.charFunc = cbfun;
      },setMouseButtonCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.mouseButtonFunc = cbfun;
      },setCursorPosCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.cursorPosFunc = cbfun;
      },setScrollCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.scrollFunc = cbfun;
      },setWindowSizeCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowSizeFunc = cbfun;
      },setWindowCloseCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowCloseFunc = cbfun;
      },setWindowRefreshCallback:function (winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.windowRefreshFunc = cbfun;
      },getKey:function (winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function (winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'double');
        setValue(y, Browser.mouseY, 'double');
      },getMousePos:function (winid, x, y) {
        setValue(x, Browser.mouseX, 'i32');
        setValue(y, Browser.mouseY, 'i32');
      },setCursorPos:function (winid, x, y) {
      },getWindowPos:function (winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        setValue(x, wx, 'i32');
        setValue(y, wy, 'i32');
      },setWindowPos:function (winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function (winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        setValue(width, ww, 'i32');
        setValue(height, wh, 'i32');
      },setWindowSize:function (winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            GLFW.requestFullScreen();
          } else {
            GLFW.cancelFullScreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (!win.windowResizeFunc) return;
  
        Runtime.dynCall('vii', win.windowResizeFunc, [width, height]);
  
      },createWindow:function (width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++);
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          GLFW.requestFullScreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++);
        if (i == GLFW.windows.length) {
          var contextAttributes = {
            antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
            depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
            stencil: (GLFW.hints[0x00021006] > 0)    // GLFW_STENCIL_BITS
          }
          Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx) return 0;
  
        // Get non alive id
        var win = new GLFW.Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function (winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function (winid) {
      },GLFW2ParamToGLFW3Param:function (param) {
        table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
  
      Browser.resizeListeners.push(function(width, height) {
         GLFW.onFullScreenEventChange();
      });
      return 1; // GL_TRUE
    }

  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _emscripten_set_touchcancel_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel");
      return 0;
    }

  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function ___lock() {}

  function _glUniform4fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[3];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
        view[3] = HEAPF32[(((value)+(12))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(location, view);
    }

  function _emscripten_set_touchstart_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart");
      return 0;
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_set_mousedown_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown");
      return 0;
    }

  function _glCheckFramebufferStatus(x0) { return GLctx.checkFramebufferStatus(x0) }

  function _emscripten_set_mousemove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove");
      return 0;
    }

  var _sinf=Math_sin;

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
        case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
          ret = 0x1401; // GL_UNSIGNED_BYTE
          break;
        case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
          ret = 0x1908; // GL_RGBA
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  function _glUniform2iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 2;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform2iv(location, value);
    }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glGenVertexArrays(n, arrays) {
  
      for(var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  var _cos=Math_cos;

  function _glUniform1iv(location, count, value) {
      location = GL.uniforms[location];
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform1iv(location, value);
    }

  
  var EmterpreterAsync={initted:false,state:0,saveStack:"",yieldCallbacks:[],postAsync:null,asyncFinalizers:[],ensureInit:function () {
        if (this.initted) return;
        this.initted = true;
        abortDecorators.push(function(output, what) {
          if (EmterpreterAsync.state !== 0) {
            return output + '\nThis error happened during an emterpreter-async save or load of the stack. Was there non-emterpreted code on the stack during save (which is unallowed)? You may want to adjust EMTERPRETIFY_BLACKLIST, EMTERPRETIFY_WHITELIST.\nThis is what the stack looked like when we tried to save it: ' + [EmterpreterAsync.state, EmterpreterAsync.saveStack];
          }
          return output;
        });
      },setState:function (s) {
        this.ensureInit();
        this.state = s;
        asm.setAsyncState(s);
      },handle:function (doAsyncOp, yieldDuring) {
        Module['noExitRuntime'] = true;
        if (EmterpreterAsync.state === 0) {
          // save the stack we want to resume. this lets other code run in between
          // XXX this assumes that this stack top never ever leak! exceptions might violate that
          var stack = new Int32Array(HEAP32.subarray(EMTSTACKTOP>>2, asm.emtStackSave()>>2));
          var stacktop = asm.stackSave();
  
          var resumedCallbacksForYield = false;
          function resumeCallbacksForYield() {
            if (resumedCallbacksForYield) return;
            resumedCallbacksForYield = true;
            // allow async callbacks, and also make sure to call the specified yield callbacks. we must
            // do this when nothing is on the stack, i.e. after it unwound
            EmterpreterAsync.yieldCallbacks.forEach(function(func) {
              func();
            });
            Browser.resumeAsyncCallbacks(); // if we were paused (e.g. we are after a sleep), then since we are now yielding, it is safe to call callbacks
          }
  
          var callingDoAsyncOp = 1; // if resume is called synchronously - during the doAsyncOp - we must make it truly async, for consistency
  
          doAsyncOp(function resume(post) {
            if (callingDoAsyncOp) {
              assert(callingDoAsyncOp === 1); // avoid infinite recursion
              callingDoAsyncOp++;
              setTimeout(function() {
                resume(post);
              }, 0);
              return;
            }
  
            assert(EmterpreterAsync.state === 1 || EmterpreterAsync.state === 3);
            EmterpreterAsync.setState(3);
            if (yieldDuring) {
              resumeCallbacksForYield();
            }
            // copy the stack back in and resume
            HEAP32.set(stack, EMTSTACKTOP>>2);
            assert(stacktop === asm.stackSave()); // nothing should have modified the stack meanwhile
            EmterpreterAsync.setState(2);
            // Resume the main loop
            if (Browser.mainLoop.func) {
              Browser.mainLoop.resume();
            }
            assert(!EmterpreterAsync.postAsync);
            EmterpreterAsync.postAsync = post || null;
            asm.emterpret(stack[0]); // pc of the first function, from which we can reconstruct the rest, is at position 0 on the stack
            if (!yieldDuring && EmterpreterAsync.state === 0) {
              // if we did *not* do another async operation, then we know that nothing is conceptually on the stack now, and we can re-allow async callbacks as well as run the queued ones right now
              Browser.resumeAsyncCallbacks();
            }
            if (EmterpreterAsync.state === 0) {
              EmterpreterAsync.asyncFinalizers.forEach(function(func) {
                func();
              });
              EmterpreterAsync.asyncFinalizers.length = 0;
            }
          });
  
          callingDoAsyncOp = 0;
  
          EmterpreterAsync.setState(1);
          EmterpreterAsync.saveStack = new Error().stack; // we can't call  stackTrace()  as it calls compiled code
          // Pause the main loop, until we resume
          if (Browser.mainLoop.func) {
            Browser.mainLoop.pause();
          }
          if (yieldDuring) {
            // do this when we are not on the stack, i.e., the stack unwound. we might be too late, in which case we do it in resume()
            setTimeout(function() {
              resumeCallbacksForYield();
            }, 0);
          } else {
            Browser.pauseAsyncCallbacks();
          }
        } else {
          // nothing to do here, the stack was just recreated. reset the state.
          assert(EmterpreterAsync.state === 2);
          EmterpreterAsync.setState(0);
  
          if (EmterpreterAsync.postAsync) {
            var ret = EmterpreterAsync.postAsync();
            EmterpreterAsync.postAsync = null;
            return ret;
          }
        }
      }};function _emscripten_wget_data(url, pbuffer, pnum, perror) {
      EmterpreterAsync.handle(function(resume) {
        Browser.asyncLoad(Pointer_stringify(url), function(byteArray) {
          resume(function() {
            // can only allocate the buffer after the resume, not during an asyncing
            var buffer = _malloc(byteArray.length); // must be freed by caller!
            HEAPU8.set(byteArray, buffer);
            HEAP32[((pbuffer)>>2)]=buffer;
            HEAP32[((pnum)>>2)]=byteArray.length;
            HEAP32[((perror)>>2)]=0;
          });
        }, function() {
          HEAP32[((perror)>>2)]=1;
          resume();
        }, true /* no need for run dependency, this is async but will not do any prepare etc. step */ );
      });
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

   
  Module["_i64Add"] = _i64Add;

  function _emscripten_set_touchmove_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove");
      return 0;
    }

  function _emscripten_set_touchend_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend");
      return 0;
    }

  var _FtoIHigh=true;

  function _glfwTerminate() {
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glStencilOp(x0, x1, x2) { GLctx.stencilOp(x0, x1, x2) }

  function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _glUniformMatrix2fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[3];
        for (var i = 0; i < 4; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(location, transpose, view);
    }

  function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
      GLFW.hints[0x00021001] = redbits;     // GLFW_RED_BITS
      GLFW.hints[0x00021002] = greenbits;   // GLFW_GREEN_BITS
      GLFW.hints[0x00021003] = bluebits;    // GLFW_BLUE_BITS
      GLFW.hints[0x00021004] = alphabits;   // GLFW_ALPHA_BITS
      GLFW.hints[0x00021005] = depthbits;   // GLFW_DEPTH_BITS
      GLFW.hints[0x00021006] = stencilbits; // GLFW_STENCIL_BITS
      GLFW.createWindow(width, height, "GLFW2 Window", 0, 0);
      return 1; // GL_TRUE
    }

  function _glUniform3fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[2];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(location, view);
    }

  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  var _BDtoIHigh=true;

  function _sched_yield() {
      return 0;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_mutex_unlock() {}

  function _glUniform3iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 3;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform3iv(location, value);
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  var _tanf=Math_tan;

  function _glStencilFunc(x0, x1, x2) { GLctx.stencilFunc(x0, x1, x2) }

  var _BItoD=true;

  function _pthread_mutex_destroy() {}

  function _glfwSwapBuffers() {
      GLFW.swapBuffers(GLFW.active.id);
    }

  function _glDeleteVertexArrays(n, vaos) {
      for(var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
        case 0x1903 /* GL_RED */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
        case 0x8227 /* GL_RG */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return {
            pixels: null,
            internalFormat: 0x0
          };
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* UNSIGNED_INT_24_8_WEBGL/UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return {
            pixels: null,
            internalFormat: 0x0
          };
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
        pixels = HEAPU8.subarray((pixels),(pixels+bytes));
      } else if (type == 0x1406 /* GL_FLOAT */) {
        pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
      } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
        pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
      } else {
        pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
      }
      return {
        pixels: pixels,
        internalFormat: internalFormat
      };
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      var pixelData;
      if (pixels) {
        var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
        pixelData = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixelData = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _glStencilMask(x0) { GLctx.stencilMask(x0) }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _abort() {
      Module['abort']();
    }

  function _glUniform1fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[0];
        view[0] = HEAPF32[((value)>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(location, view);
    }

  function _emscripten_sleep(ms) {
      EmterpreterAsync.handle(function(resume) {
        setTimeout(function() {
          if (ABORT) return; // do this manually; we can't call into Browser.safeSetTimeout, because that is paused/resumed!
          resume();
        }, ms);
      });
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function ___unlock() {}

  function _glUniformMatrix3fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[8];
        for (var i = 0; i < 9; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(location, transpose, view);
    }

  var _emscripten_asm_const=true;

  function _glEnable(x0) { GLctx.enable(x0) }

  var _fabs=Math_abs;

  var _sqrt=Math_sqrt;

  var _emscripten_asm_const_int=true;

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  var _sin=Math_sin;

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }


  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _glDepthMask(x0) { GLctx.depthMask(x0) }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  var _DtoIHigh=true;

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _FtoILow=true;

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  var _llvm_nacl_atomic_cmpxchg_i32=undefined;
var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


var debug_table_iiii = ["0", "_sn_write", "0", "___stdout_write", "___stdio_seek", "0", "_mouse_down", "_mouse_up", "_mouse_move", "_mouse_cancel", "_touch_down", "_touch_up", "_touch_move", "_touch_cancel", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_parser_view", "_parser_label", "_parser_textfield", "_parser_textview", "_parser_listview", "_parser_pageview", "_parser_image", "_parser_link", "_parser_touch", "_parser_controller", "_parser_template", "_parser_end_template", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___stdio_read", "___stdio_write
var debug_table_vidi = ["0"];
var debug_table_vid = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_on_process", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___list_view_update", "0", "0", "0", "0"];
var debug_table_vi = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_sfree", "_on_linked", "_on_removed", "0", "_exec_data_free", "0", "0", "0", "0", "_on_linked29", "_on_removed30", "_exec_data_free32", "0", "0", "0", "0", "_on_linked54", "_on_removed55", "_exec_data_free57", "0", "_process_action", "_game_free", "0", "_map_free", "_string_free", "_file_close", "_array_free", "_bytes_free", "_render_pass_free", "___render_texture_data_free", "_shader_free", "_texture_free", "0", "_camera_free", "_light_free", "_link_uniform_free", "_node_free", "_node_request_update_transform", "___node_rotate_step_free", "_node_manager_free", "_node_render_buffer_group_free", "_node_render_content_free", "0", "0", "_texture_frame_free", "_uniform_buffer_free", "_image_free", "_device_buffer_free", "_device_buffer_group_free", "_action_free", "_naction_free", "_ntask_free", "_nmanager_free", "0", "_nparser_free", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_nview_touch_data_free", "_ntouch_free", "___intercept_head_free", "_nexec_free", "_nview_free", "0", "_nview_align_free", "_nlyt_exec_free", "___nview_list_view_data_free", "0", "_sdata_free", "_sobj_free", "_sarray_free", "_smart_network_data_free", "_smartfox_client_free", "_smart_room_free", "___xml_element_free", "___xml_attribute_free", "0", "0", "_cleanup521", "_cleanup
var debug_table_vii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_on_net", "_on_slotmachine_update_jackpot", "_on_user_info", "0", "0", "0", "_on_net33", "_on_user_info35", "_on_play_slot_machine", "_on_slotmachine_get_table_info", "0"];
var debug_table_ii = ["0", "0", "___stdio_close", "0"];
var debug_table_viii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_touch_3d", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_touch_3d58", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_v = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_do_frame", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___clear", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_texture_cache_dispose", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_free_cache", "_free_cache349", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___clear534", "0", "___clear551", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "___clear705", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "0", "0", "0", "0", "_mc_nexec_alloc", "0", "0"];
var debug_table_viiii = ["0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "_parse_common_width", "_parse_common_height", "_parse_common_x", "_parse_common_y", "_parse_common_scale", "_parse_common_rotation_x", "_parse_common_rotation_y", "_parse_common_rotation_z", "_parse_common_type", "_parse_common_align", "_parse_common_touch", "_parse_common_color", "_parse_common_border", "_parse_common_alpha", "_parse_common_visible", "_parse_common_clip", "_parse_common_round", "_parse_common_margin_top", "_parse_common_margin_left", "_parse_common_margin_bottom", "_parse_common_margin_right", "_parse_common_padding_top", "_parse_common_padding_left", "_parse_common_padding_bottom", "_parse_common_padding_right", "_parse_common_hash", "_parse_common_touch_delegate", "_parse_common_intercept_vertical", "_parse_common_intercept_horizontal", "_parse_common_anchor_x", "_parse_common_anchor_y", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  vidi: " + debug_table_vidi[x] + "  vid: " + debug_table_vid[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_vidi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vid: " + debug_table_vid[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  ii: " + debug_table_ii[x] + "  viii: " + debug_table_viii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  viiii: " + debug_table_viiii[x] + "  "); abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vidi: " + debug_table_vidi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  ii: " + debug_table_ii[x] + "  viii: " + debug_table_viii[x] + "  iii: " + debug_table_iii[x] + "  viiii: " + debug_table_viiii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vid: " + debug_table_vid[x] + "  vii: " + debug_table_vii[x] + "  vidi: " + debug_table_vidi[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  ii: " + debug_table_ii[x] + "  vidi: " + debug_table_vidi[x] + "  vid: " + debug_table_vid[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  vidi: " + debug_table_vidi[x] + "  viii: " + debug_table_viii[x] + "  vid: " + debug_table_vid[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  vidi: " + debug_table_vidi[x] + "  vid: " + debug_table_vid[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vid: " + debug_table_vid[x] + "  vii: " + debug_table_vii[x] + "  vidi: " + debug_table_vidi[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  vidi: " + debug_table_vidi[x] + "  vid: " + debug_table_vid[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  vidi: " + debug_table_vidi[x] + "  vid: " + debug_table_vid[x] + "  "); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidi(index,a1,a2,a3) {
  try {
    Module["dynCall_vidi"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vidi": nullFunc_vidi, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_vidi": invoke_vidi, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_fabs": _fabs, "_emscripten_set_mouseleave_callback": _emscripten_set_mouseleave_callback, "_glUniformMatrix3fv": _glUniformMatrix3fv, "_glUniformMatrix2fv": _glUniformMatrix2fv, "_glStencilFunc": _glStencilFunc, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_emscripten_wget_data": _emscripten_wget_data, "_glStencilOp": _glStencilOp, "___setErrNo": ___setErrNo, "_glUniform2fv": _glUniform2fv, "_glDeleteProgram": _glDeleteProgram, "_glBindBuffer": _glBindBuffer, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_emscripten_set_touchmove_callback": _emscripten_set_touchmove_callback, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_glBlendFunc": _glBlendFunc, "_glGetAttribLocation": _glGetAttribLocation, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_emscripten_set_touchstart_callback": _emscripten_set_touchstart_callback, "_tanf": _tanf, "___syscall221": ___syscall221, "_cos": _cos, "_glfwInit": _glfwInit, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "_glFramebufferRenderbuffer": _glFramebufferRenderbuffer, "_emscripten_sleep": _emscripten_sleep, "_pthread_cleanup_push": _pthread_cleanup_push, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_glVertexAttribPointer": _glVertexAttribPointer, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glfwOpenWindow": _glfwOpenWindow, "_glBindRenderbuffer": _glBindRenderbuffer, "_glDepthMask": _glDepthMask, "_glViewport": _glViewport, "_glDeleteVertexArrays": _glDeleteVertexArrays, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_emscripten_set_mousedown_callback": _emscripten_set_mousedown_callback, "_glEnable": _glEnable, "_glGenTextures": _glGenTextures, "_glGetIntegerv": _glGetIntegerv, "_glUniform3iv": _glUniform3iv, "emscriptenWebGLGet": emscriptenWebGLGet, "_emscripten_set_mouseup_callback": _emscripten_set_mouseup_callback, "_emscripten_get_now": _emscripten_get_now, "_glUniform1iv": _glUniform1iv, "_glAttachShader": _glAttachShader, "_glCreateProgram": _glCreateProgram, "___lock": ___lock, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_emscripten_set_mouseout_callback": _emscripten_set_mouseout_callback, "_time": _time, "_glBindFramebuffer": _glBindFramebuffer, "_glGenFramebuffers": _glGenFramebuffers, "_emscripten_asm_const_5": _emscripten_asm_const_5, "_emscripten_asm_const_4": _emscripten_asm_const_4, "_emscripten_asm_const_3": _emscripten_asm_const_3, "_emscripten_asm_const_2": _emscripten_asm_const_2, "_emscripten_asm_const_1": _emscripten_asm_const_1, "_emscripten_asm_const_0": _emscripten_asm_const_0, "_glUniform1fv": _glUniform1fv, "_llvm_pow_f64": _llvm_pow_f64, "_glDeleteFramebuffers": _glDeleteFramebuffers, "_sched_yield": _sched_yield, "_glDeleteShader": _glDeleteShader, "_glCheckFramebufferStatus": _glCheckFramebufferStatus, "_glClearColor": _glClearColor, "_glUniform3fv": _glUniform3fv, "_fabsf": _fabsf, "_glBindTexture": _glBindTexture, "___syscall195": ___syscall195, "_glDrawArrays": _glDrawArrays, "_sinf": _sinf, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_glUniform2iv": _glUniform2iv, "_glActiveTexture": _glActiveTexture, "_glfwSwapBuffers": _glfwSwapBuffers, "___syscall39": ___syscall39, "_glfwTerminate": _glfwTerminate, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_glBindVertexArray": _glBindVertexArray, "_glDeleteBuffers": _glDeleteBuffers, "_glBufferData": _glBufferData, "_glTexImage2D": _glTexImage2D, "_sin": _sin, "_cosf": _cosf, "_glGetProgramiv": _glGetProgramiv, "_glGenVertexArrays": _glGenVertexArrays, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "_emscripten_set_touchcancel_callback": _emscripten_set_touchcancel_callback, "_emscripten_set_mousemove_callback": _emscripten_set_mousemove_callback, "_glDeleteRenderbuffers": _glDeleteRenderbuffers, "_glLinkProgram": _glLinkProgram, "_emscripten_set_touchend_callback": _emscripten_set_touchend_callback, "_pthread_mutex_lock": _pthread_mutex_lock, "_glGenRenderbuffers": _glGenRenderbuffers, "_glGetUniformLocation": _glGetUniformLocation, "_glClear": _glClear, "_glUniform4fv": _glUniform4fv, "_glRenderbufferStorage": _glRenderbufferStorage, "_glGetShaderiv": _glGetShaderiv, "_pthread_self": _pthread_self, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_glStencilMask": _glStencilMask, "___syscall54": ___syscall54, "___unlock": ___unlock, "_glFramebufferTexture2D": _glFramebufferTexture2D, "_glUniform4iv": _glUniform4iv, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_glColorMask": _glColorMask, "_glDisable": _glDisable, "_glTexParameteri": _glTexParameteri, "_sqrt": _sqrt, "_pthread_mutex_init": _pthread_mutex_init, "_glCreateShader": _glCreateShader, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
Module.asmLibraryArg['EMTSTACKTOP'] = EMTSTACKTOP; Module.asmLibraryArg['EMT_STACK_MAX'] = EMT_STACK_MAX; Module.asmLibraryArg['eb'] = eb;
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vidi=env.nullFunc_vidi;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vidi=env.invoke_vidi;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _fabs=env._fabs;
  var _emscripten_set_mouseleave_callback=env._emscripten_set_mouseleave_callback;
  var _glUniformMatrix3fv=env._glUniformMatrix3fv;
  var _glUniformMatrix2fv=env._glUniformMatrix2fv;
  var _glStencilFunc=env._glStencilFunc;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _emscripten_wget_data=env._emscripten_wget_data;
  var _glStencilOp=env._glStencilOp;
  var ___setErrNo=env.___setErrNo;
  var _glUniform2fv=env._glUniform2fv;
  var _glDeleteProgram=env._glDeleteProgram;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var _emscripten_set_touchmove_callback=env._emscripten_set_touchmove_callback;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _glBlendFunc=env._glBlendFunc;
  var _glGetAttribLocation=env._glGetAttribLocation;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _emscripten_set_touchstart_callback=env._emscripten_set_touchstart_callback;
  var _tanf=env._tanf;
  var ___syscall221=env.___syscall221;
  var _cos=env._cos;
  var _glfwInit=env._glfwInit;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var _glFramebufferRenderbuffer=env._glFramebufferRenderbuffer;
  var _emscripten_sleep=env._emscripten_sleep;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var _glfwOpenWindow=env._glfwOpenWindow;
  var _glBindRenderbuffer=env._glBindRenderbuffer;
  var _glDepthMask=env._glDepthMask;
  var _glViewport=env._glViewport;
  var _glDeleteVertexArrays=env._glDeleteVertexArrays;
  var _glDeleteTextures=env._glDeleteTextures;
  var _glDepthFunc=env._glDepthFunc;
  var _emscripten_set_mousedown_callback=env._emscripten_set_mousedown_callback;
  var _glEnable=env._glEnable;
  var _glGenTextures=env._glGenTextures;
  var _glGetIntegerv=env._glGetIntegerv;
  var _glUniform3iv=env._glUniform3iv;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var _emscripten_set_mouseup_callback=env._emscripten_set_mouseup_callback;
  var _emscripten_get_now=env._emscripten_get_now;
  var _glUniform1iv=env._glUniform1iv;
  var _glAttachShader=env._glAttachShader;
  var _glCreateProgram=env._glCreateProgram;
  var ___lock=env.___lock;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _emscripten_set_mouseout_callback=env._emscripten_set_mouseout_callback;
  var _time=env._time;
  var _glBindFramebuffer=env._glBindFramebuffer;
  var _glGenFramebuffers=env._glGenFramebuffers;
  var _emscripten_asm_const_5=env._emscripten_asm_const_5;
  var _emscripten_asm_const_4=env._emscripten_asm_const_4;
  var _emscripten_asm_const_3=env._emscripten_asm_const_3;
  var _emscripten_asm_const_2=env._emscripten_asm_const_2;
  var _emscripten_asm_const_1=env._emscripten_asm_const_1;
  var _emscripten_asm_const_0=env._emscripten_asm_const_0;
  var _glUniform1fv=env._glUniform1fv;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _glDeleteFramebuffers=env._glDeleteFramebuffers;
  var _sched_yield=env._sched_yield;
  var _glDeleteShader=env._glDeleteShader;
  var _glCheckFramebufferStatus=env._glCheckFramebufferStatus;
  var _glClearColor=env._glClearColor;
  var _glUniform3fv=env._glUniform3fv;
  var _fabsf=env._fabsf;
  var _glBindTexture=env._glBindTexture;
  var ___syscall195=env.___syscall195;
  var _glDrawArrays=env._glDrawArrays;
  var _sinf=env._sinf;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _glUniform2iv=env._glUniform2iv;
  var _glActiveTexture=env._glActiveTexture;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var ___syscall39=env.___syscall39;
  var _glfwTerminate=env._glfwTerminate;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _glBindVertexArray=env._glBindVertexArray;
  var _glDeleteBuffers=env._glDeleteBuffers;
  var _glBufferData=env._glBufferData;
  var _glTexImage2D=env._glTexImage2D;
  var _sin=env._sin;
  var _cosf=env._cosf;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glGenVertexArrays=env._glGenVertexArrays;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _emscripten_set_touchcancel_callback=env._emscripten_set_touchcancel_callback;
  var _emscripten_set_mousemove_callback=env._emscripten_set_mousemove_callback;
  var _glDeleteRenderbuffers=env._glDeleteRenderbuffers;
  var _glLinkProgram=env._glLinkProgram;
  var _emscripten_set_touchend_callback=env._emscripten_set_touchend_callback;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _glGenRenderbuffers=env._glGenRenderbuffers;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _glClear=env._glClear;
  var _glUniform4fv=env._glUniform4fv;
  var _glRenderbufferStorage=env._glRenderbufferStorage;
  var _glGetShaderiv=env._glGetShaderiv;
  var _pthread_self=env._pthread_self;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _glStencilMask=env._glStencilMask;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _glFramebufferTexture2D=env._glFramebufferTexture2D;
  var _glUniform4iv=env._glUniform4iv;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _glColorMask=env._glColorMask;
  var _glDisable=env._glDisable;
  var _glTexParameteri=env._glTexParameteri;
  var _sqrt=env._sqrt;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _glCreateShader=env._glCreateShader;
  var tempFloat = 0.0;
  var asyncState = 0;

var EMTSTACKTOP = env.EMTSTACKTOP|0;
var EMT_STACK_MAX = env.EMT_STACK_MAX|0;
var eb = env.eb|0;
// EMSCRIPTEN_START_FUNCS

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $bytes >>> 0 < 245;
 asyncState ? abort(-12) | 0 : 0;
 do {
  if ($0) {
   $1 = $bytes >>> 0 < 11;
   $2 = $bytes + 11 | 0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[1892 >> 2] | 0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8 | 0) == 0;
   if (!$9) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = $11 + $5 | 0;
    $13 = $12 << 1;
    $14 = 1932 + ($13 << 2) | 0;
    $$sum10 = $13 + 2 | 0;
    $15 = 1932 + ($$sum10 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16 + 8 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ($14 | 0) == ($18 | 0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[1892 >> 2] = $22;
     } else {
      $23 = HEAP32[1908 >> 2] | 0;
      $24 = $18 >>> 0 < $23 >>> 0;
      if ($24) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
      $25 = $18 + 12 | 0;
      $26 = HEAP32[$25 >> 2] | 0;
      $27 = ($26 | 0) == ($16 | 0);
      if ($27) {
       HEAP32[$25 >> 2] = $14;
       HEAP32[$15 >> 2] = $18;
       break;
      } else {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
     }
    } while (0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = $16 + 4 | 0;
    HEAP32[$30 >> 2] = $29;
    $$sum1112 = $28 | 4;
    $31 = $16 + $$sum1112 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = $32 | 1;
    HEAP32[$31 >> 2] = $33;
    $mem$0 = $17;
    return $mem$0 | 0;
   }
   $34 = HEAP32[1900 >> 2] | 0;
   $35 = $4 >>> 0 > $34 >>> 0;
   if ($35) {
    $36 = ($7 | 0) == 0;
    if (!$36) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = 0 - $38 | 0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = 0 - $41 | 0;
     $43 = $41 & $42;
     $44 = $43 + -1 | 0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = $62 + $63 | 0;
     $65 = $64 << 1;
     $66 = 1932 + ($65 << 2) | 0;
     $$sum4 = $65 + 2 | 0;
     $67 = 1932 + ($$sum4 << 2) | 0;
     $68 = HEAP32[$67 >> 2] | 0;
     $69 = $68 + 8 | 0;
     $70 = HEAP32[$69 >> 2] | 0;
     $71 = ($66 | 0) == ($70 | 0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[1892 >> 2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[1908 >> 2] | 0;
       $76 = $70 >>> 0 < $75 >>> 0;
       if ($76) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $77 = $70 + 12 | 0;
       $78 = HEAP32[$77 >> 2] | 0;
       $79 = ($78 | 0) == ($68 | 0);
       if ($79) {
        HEAP32[$77 >> 2] = $66;
        HEAP32[$67 >> 2] = $70;
        $$pre = HEAP32[1900 >> 2] | 0;
        $88 = $$pre;
        break;
       } else {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
      }
     } while (0);
     $80 = $64 << 3;
     $81 = $80 - $4 | 0;
     $82 = $4 | 3;
     $83 = $68 + 4 | 0;
     HEAP32[$83 >> 2] = $82;
     $84 = $68 + $4 | 0;
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = $68 + $$sum56 | 0;
     HEAP32[$86 >> 2] = $85;
     $87 = $68 + $80 | 0;
     HEAP32[$87 >> 2] = $81;
     $89 = ($88 | 0) == 0;
     if (!$89) {
      $90 = HEAP32[1912 >> 2] | 0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = 1932 + ($92 << 2) | 0;
      $94 = HEAP32[1892 >> 2] | 0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96 | 0) == 0;
      if ($97) {
       $98 = $94 | $95;
       HEAP32[1892 >> 2] = $98;
       $$pre105 = $92 + 2 | 0;
       $$pre106 = 1932 + ($$pre105 << 2) | 0;
       $$pre$phiZ2D = $$pre106;
       $F4$0 = $93;
      } else {
       $$sum9 = $92 + 2 | 0;
       $99 = 1932 + ($$sum9 << 2) | 0;
       $100 = HEAP32[$99 >> 2] | 0;
       $101 = HEAP32[1908 >> 2] | 0;
       $102 = $100 >>> 0 < $101 >>> 0;
       if ($102) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       } else {
        $$pre$phiZ2D = $99;
        $F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $90;
      $103 = $F4$0 + 12 | 0;
      HEAP32[$103 >> 2] = $90;
      $104 = $90 + 8 | 0;
      HEAP32[$104 >> 2] = $F4$0;
      $105 = $90 + 12 | 0;
      HEAP32[$105 >> 2] = $93;
     }
     HEAP32[1900 >> 2] = $81;
     HEAP32[1912 >> 2] = $84;
     $mem$0 = $69;
     return $mem$0 | 0;
    }
    $106 = HEAP32[1896 >> 2] | 0;
    $107 = ($106 | 0) == 0;
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = 0 - $106 | 0;
     $109 = $106 & $108;
     $110 = $109 + -1 | 0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = $128 + $129 | 0;
     $131 = 2196 + ($130 << 2) | 0;
     $132 = HEAP32[$131 >> 2] | 0;
     $133 = $132 + 4 | 0;
     $134 = HEAP32[$133 >> 2] | 0;
     $135 = $134 & -8;
     $136 = $135 - $4 | 0;
     $rsize$0$i = $136;
     $t$0$i = $132;
     $v$0$i = $132;
     while (1) {
      $137 = $t$0$i + 16 | 0;
      $138 = HEAP32[$137 >> 2] | 0;
      $139 = ($138 | 0) == (0 | 0);
      if ($139) {
       $140 = $t$0$i + 20 | 0;
       $141 = HEAP32[$140 >> 2] | 0;
       $142 = ($141 | 0) == (0 | 0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;
        $v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = $144 + 4 | 0;
      $145 = HEAP32[$143 >> 2] | 0;
      $146 = $145 & -8;
      $147 = $146 - $4 | 0;
      $148 = $147 >>> 0 < $rsize$0$i >>> 0;
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;
      $t$0$i = $144;
      $v$0$i = $$v$0$i;
     }
     $149 = HEAP32[1908 >> 2] | 0;
     $150 = $v$0$i$lcssa >>> 0 < $149 >>> 0;
     if ($150) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $151 = $v$0$i$lcssa + $4 | 0;
     $152 = $v$0$i$lcssa >>> 0 < $151 >>> 0;
     if (!$152) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $153 = $v$0$i$lcssa + 24 | 0;
     $154 = HEAP32[$153 >> 2] | 0;
     $155 = $v$0$i$lcssa + 12 | 0;
     $156 = HEAP32[$155 >> 2] | 0;
     $157 = ($156 | 0) == ($v$0$i$lcssa | 0);
     do {
      if ($157) {
       $167 = $v$0$i$lcssa + 20 | 0;
       $168 = HEAP32[$167 >> 2] | 0;
       $169 = ($168 | 0) == (0 | 0);
       if ($169) {
        $170 = $v$0$i$lcssa + 16 | 0;
        $171 = HEAP32[$170 >> 2] | 0;
        $172 = ($171 | 0) == (0 | 0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;
         $RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;
        $RP$0$i = $167;
       }
       while (1) {
        $173 = $R$0$i + 20 | 0;
        $174 = HEAP32[$173 >> 2] | 0;
        $175 = ($174 | 0) == (0 | 0);
        if (!$175) {
         $R$0$i = $174;
         $RP$0$i = $173;
         continue;
        }
        $176 = $R$0$i + 16 | 0;
        $177 = HEAP32[$176 >> 2] | 0;
        $178 = ($177 | 0) == (0 | 0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;
         $RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;
         $RP$0$i = $176;
        }
       }
       $179 = $RP$0$i$lcssa >>> 0 < $149 >>> 0;
       if ($179) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       } else {
        HEAP32[$RP$0$i$lcssa >> 2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = $v$0$i$lcssa + 8 | 0;
       $159 = HEAP32[$158 >> 2] | 0;
       $160 = $159 >>> 0 < $149 >>> 0;
       if ($160) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $161 = $159 + 12 | 0;
       $162 = HEAP32[$161 >> 2] | 0;
       $163 = ($162 | 0) == ($v$0$i$lcssa | 0);
       if (!$163) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $164 = $156 + 8 | 0;
       $165 = HEAP32[$164 >> 2] | 0;
       $166 = ($165 | 0) == ($v$0$i$lcssa | 0);
       if ($166) {
        HEAP32[$161 >> 2] = $156;
        HEAP32[$164 >> 2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
      }
     } while (0);
     $180 = ($154 | 0) == (0 | 0);
     do {
      if (!$180) {
       $181 = $v$0$i$lcssa + 28 | 0;
       $182 = HEAP32[$181 >> 2] | 0;
       $183 = 2196 + ($182 << 2) | 0;
       $184 = HEAP32[$183 >> 2] | 0;
       $185 = ($v$0$i$lcssa | 0) == ($184 | 0);
       if ($185) {
        HEAP32[$183 >> 2] = $R$1$i;
        $cond$i = ($R$1$i | 0) == (0 | 0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[1896 >> 2] | 0;
         $189 = $188 & $187;
         HEAP32[1896 >> 2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[1908 >> 2] | 0;
        $191 = $154 >>> 0 < $190 >>> 0;
        if ($191) {
         _abort(), asyncState ? abort(-12) | 0 : 0;
        }
        $192 = $154 + 16 | 0;
        $193 = HEAP32[$192 >> 2] | 0;
        $194 = ($193 | 0) == ($v$0$i$lcssa | 0);
        if ($194) {
         HEAP32[$192 >> 2] = $R$1$i;
        } else {
         $195 = $154 + 20 | 0;
         HEAP32[$195 >> 2] = $R$1$i;
        }
        $196 = ($R$1$i | 0) == (0 | 0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[1908 >> 2] | 0;
       $198 = $R$1$i >>> 0 < $197 >>> 0;
       if ($198) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $199 = $R$1$i + 24 | 0;
       HEAP32[$199 >> 2] = $154;
       $200 = $v$0$i$lcssa + 16 | 0;
       $201 = HEAP32[$200 >> 2] | 0;
       $202 = ($201 | 0) == (0 | 0);
       do {
        if (!$202) {
         $203 = $201 >>> 0 < $197 >>> 0;
         if ($203) {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         } else {
          $204 = $R$1$i + 16 | 0;
          HEAP32[$204 >> 2] = $201;
          $205 = $201 + 24 | 0;
          HEAP32[$205 >> 2] = $R$1$i;
          break;
         }
        }
       } while (0);
       $206 = $v$0$i$lcssa + 20 | 0;
       $207 = HEAP32[$206 >> 2] | 0;
       $208 = ($207 | 0) == (0 | 0);
       if (!$208) {
        $209 = HEAP32[1908 >> 2] | 0;
        $210 = $207 >>> 0 < $209 >>> 0;
        if ($210) {
         _abort(), asyncState ? abort(-12) | 0 : 0;
        } else {
         $211 = $R$1$i + 20 | 0;
         HEAP32[$211 >> 2] = $207;
         $212 = $207 + 24 | 0;
         HEAP32[$212 >> 2] = $R$1$i;
         break;
        }
       }
      }
     } while (0);
     $213 = $rsize$0$i$lcssa >>> 0 < 16;
     if ($213) {
      $214 = $rsize$0$i$lcssa + $4 | 0;
      $215 = $214 | 3;
      $216 = $v$0$i$lcssa + 4 | 0;
      HEAP32[$216 >> 2] = $215;
      $$sum4$i = $214 + 4 | 0;
      $217 = $v$0$i$lcssa + $$sum4$i | 0;
      $218 = HEAP32[$217 >> 2] | 0;
      $219 = $218 | 1;
      HEAP32[$217 >> 2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = $v$0$i$lcssa + 4 | 0;
      HEAP32[$221 >> 2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = $v$0$i$lcssa + $$sum$i35 | 0;
      HEAP32[$223 >> 2] = $222;
      $$sum1$i = $rsize$0$i$lcssa + $4 | 0;
      $224 = $v$0$i$lcssa + $$sum1$i | 0;
      HEAP32[$224 >> 2] = $rsize$0$i$lcssa;
      $225 = HEAP32[1900 >> 2] | 0;
      $226 = ($225 | 0) == 0;
      if (!$226) {
       $227 = HEAP32[1912 >> 2] | 0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = 1932 + ($229 << 2) | 0;
       $231 = HEAP32[1892 >> 2] | 0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233 | 0) == 0;
       if ($234) {
        $235 = $231 | $232;
        HEAP32[1892 >> 2] = $235;
        $$pre$i = $229 + 2 | 0;
        $$pre8$i = 1932 + ($$pre$i << 2) | 0;
        $$pre$phi$iZ2D = $$pre8$i;
        $F1$0$i = $230;
       } else {
        $$sum3$i = $229 + 2 | 0;
        $236 = 1932 + ($$sum3$i << 2) | 0;
        $237 = HEAP32[$236 >> 2] | 0;
        $238 = HEAP32[1908 >> 2] | 0;
        $239 = $237 >>> 0 < $238 >>> 0;
        if ($239) {
         _abort(), asyncState ? abort(-12) | 0 : 0;
        } else {
         $$pre$phi$iZ2D = $236;
         $F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $227;
       $240 = $F1$0$i + 12 | 0;
       HEAP32[$240 >> 2] = $227;
       $241 = $227 + 8 | 0;
       HEAP32[$241 >> 2] = $F1$0$i;
       $242 = $227 + 12 | 0;
       HEAP32[$242 >> 2] = $230;
      }
      HEAP32[1900 >> 2] = $rsize$0$i$lcssa;
      HEAP32[1912 >> 2] = $151;
     }
     $243 = $v$0$i$lcssa + 8 | 0;
     $mem$0 = $243;
     return $mem$0 | 0;
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = $bytes >>> 0 > 4294967231;
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = $bytes + 11 | 0;
    $246 = $245 & -8;
    $247 = HEAP32[1896 >> 2] | 0;
    $248 = ($247 | 0) == 0;
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = 0 - $246 | 0;
     $250 = $245 >>> 8;
     $251 = ($250 | 0) == 0;
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = $246 >>> 0 > 16777215;
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = $250 + 1048320 | 0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = $256 + 520192 | 0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = $261 + 245760 | 0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = 14 - $265 | 0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = $266 + $268 | 0;
       $270 = $269 << 1;
       $271 = $269 + 7 | 0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = 2196 + ($idx$0$i << 2) | 0;
     $276 = HEAP32[$275 >> 2] | 0;
     $277 = ($276 | 0) == (0 | 0);
     L123 : do {
      if ($277) {
       $rsize$2$i = $249;
       $t$1$i = 0;
       $v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i | 0) == 31;
       $279 = $idx$0$i >>> 1;
       $280 = 25 - $279 | 0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;
       $rst$0$i = 0;
       $sizebits$0$i = $282;
       $t$0$i14 = $276;
       $v$0$i16 = 0;
       while (1) {
        $283 = $t$0$i14 + 4 | 0;
        $284 = HEAP32[$283 >> 2] | 0;
        $285 = $284 & -8;
        $286 = $285 - $246 | 0;
        $287 = $286 >>> 0 < $rsize$0$i15 >>> 0;
        if ($287) {
         $288 = ($285 | 0) == ($246 | 0);
         if ($288) {
          $rsize$331$i = $286;
          $t$230$i = $t$0$i14;
          $v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;
          $v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;
         $v$1$i = $v$0$i16;
        }
        $289 = $t$0$i14 + 20 | 0;
        $290 = HEAP32[$289 >> 2] | 0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ($t$0$i14 + 16 | 0) + ($291 << 2) | 0;
        $293 = HEAP32[$292 >> 2] | 0;
        $294 = ($290 | 0) == (0 | 0);
        $295 = ($290 | 0) == ($293 | 0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293 | 0) == (0 | 0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;
         $t$1$i = $rst$1$i;
         $v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;
         $rst$0$i = $rst$1$i;
         $sizebits$0$i = $297;
         $t$0$i14 = $293;
         $v$0$i16 = $v$1$i;
        }
       }
      }
     } while (0);
     if ((label | 0) == 86) {
      $298 = ($t$1$i | 0) == (0 | 0);
      $299 = ($v$2$i | 0) == (0 | 0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = 0 - $300 | 0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303 | 0) == 0;
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = 0 - $303 | 0;
       $306 = $303 & $305;
       $307 = $306 + -1 | 0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = $325 + $326 | 0;
       $328 = 2196 + ($327 << 2) | 0;
       $329 = HEAP32[$328 >> 2] | 0;
       $t$2$ph$i = $329;
       $v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;
       $v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i | 0) == (0 | 0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;
       $v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;
       $t$230$i = $t$2$ph$i;
       $v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label | 0) == 90) {
      while (1) {
       label = 0;
       $331 = $t$230$i + 4 | 0;
       $332 = HEAP32[$331 >> 2] | 0;
       $333 = $332 & -8;
       $334 = $333 - $246 | 0;
       $335 = $334 >>> 0 < $rsize$331$i >>> 0;
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = $t$230$i + 16 | 0;
       $337 = HEAP32[$336 >> 2] | 0;
       $338 = ($337 | 0) == (0 | 0);
       if (!$338) {
        $rsize$331$i = $$rsize$3$i;
        $t$230$i = $337;
        $v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = $t$230$i + 20 | 0;
       $340 = HEAP32[$339 >> 2] | 0;
       $341 = ($340 | 0) == (0 | 0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;
        $v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;
        $t$230$i = $340;
        $v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i | 0) == (0 | 0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[1900 >> 2] | 0;
      $344 = $343 - $246 | 0;
      $345 = $rsize$3$lcssa$i >>> 0 < $344 >>> 0;
      if ($345) {
       $346 = HEAP32[1908 >> 2] | 0;
       $347 = $v$3$lcssa$i >>> 0 < $346 >>> 0;
       if ($347) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $348 = $v$3$lcssa$i + $246 | 0;
       $349 = $v$3$lcssa$i >>> 0 < $348 >>> 0;
       if (!$349) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       }
       $350 = $v$3$lcssa$i + 24 | 0;
       $351 = HEAP32[$350 >> 2] | 0;
       $352 = $v$3$lcssa$i + 12 | 0;
       $353 = HEAP32[$352 >> 2] | 0;
       $354 = ($353 | 0) == ($v$3$lcssa$i | 0);
       do {
        if ($354) {
         $364 = $v$3$lcssa$i + 20 | 0;
         $365 = HEAP32[$364 >> 2] | 0;
         $366 = ($365 | 0) == (0 | 0);
         if ($366) {
          $367 = $v$3$lcssa$i + 16 | 0;
          $368 = HEAP32[$367 >> 2] | 0;
          $369 = ($368 | 0) == (0 | 0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;
           $RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;
          $RP$0$i17 = $364;
         }
         while (1) {
          $370 = $R$0$i18 + 20 | 0;
          $371 = HEAP32[$370 >> 2] | 0;
          $372 = ($371 | 0) == (0 | 0);
          if (!$372) {
           $R$0$i18 = $371;
           $RP$0$i17 = $370;
           continue;
          }
          $373 = $R$0$i18 + 16 | 0;
          $374 = HEAP32[$373 >> 2] | 0;
          $375 = ($374 | 0) == (0 | 0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;
           $RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;
           $RP$0$i17 = $373;
          }
         }
         $376 = $RP$0$i17$lcssa >>> 0 < $346 >>> 0;
         if ($376) {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         } else {
          HEAP32[$RP$0$i17$lcssa >> 2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = $v$3$lcssa$i + 8 | 0;
         $356 = HEAP32[$355 >> 2] | 0;
         $357 = $356 >>> 0 < $346 >>> 0;
         if ($357) {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         }
         $358 = $356 + 12 | 0;
         $359 = HEAP32[$358 >> 2] | 0;
         $360 = ($359 | 0) == ($v$3$lcssa$i | 0);
         if (!$360) {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         }
         $361 = $353 + 8 | 0;
         $362 = HEAP32[$361 >> 2] | 0;
         $363 = ($362 | 0) == ($v$3$lcssa$i | 0);
         if ($363) {
          HEAP32[$358 >> 2] = $353;
          HEAP32[$361 >> 2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         }
        }
       } while (0);
       $377 = ($351 | 0) == (0 | 0);
       do {
        if (!$377) {
         $378 = $v$3$lcssa$i + 28 | 0;
         $379 = HEAP32[$378 >> 2] | 0;
         $380 = 2196 + ($379 << 2) | 0;
         $381 = HEAP32[$380 >> 2] | 0;
         $382 = ($v$3$lcssa$i | 0) == ($381 | 0);
         if ($382) {
          HEAP32[$380 >> 2] = $R$1$i20;
          $cond$i21 = ($R$1$i20 | 0) == (0 | 0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[1896 >> 2] | 0;
           $386 = $385 & $384;
           HEAP32[1896 >> 2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[1908 >> 2] | 0;
          $388 = $351 >>> 0 < $387 >>> 0;
          if ($388) {
           _abort(), asyncState ? abort(-12) | 0 : 0;
          }
          $389 = $351 + 16 | 0;
          $390 = HEAP32[$389 >> 2] | 0;
          $391 = ($390 | 0) == ($v$3$lcssa$i | 0);
          if ($391) {
           HEAP32[$389 >> 2] = $R$1$i20;
          } else {
           $392 = $351 + 20 | 0;
           HEAP32[$392 >> 2] = $R$1$i20;
          }
          $393 = ($R$1$i20 | 0) == (0 | 0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[1908 >> 2] | 0;
         $395 = $R$1$i20 >>> 0 < $394 >>> 0;
         if ($395) {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         }
         $396 = $R$1$i20 + 24 | 0;
         HEAP32[$396 >> 2] = $351;
         $397 = $v$3$lcssa$i + 16 | 0;
         $398 = HEAP32[$397 >> 2] | 0;
         $399 = ($398 | 0) == (0 | 0);
         do {
          if (!$399) {
           $400 = $398 >>> 0 < $394 >>> 0;
           if ($400) {
            _abort(), asyncState ? abort(-12) | 0 : 0;
           } else {
            $401 = $R$1$i20 + 16 | 0;
            HEAP32[$401 >> 2] = $398;
            $402 = $398 + 24 | 0;
            HEAP32[$402 >> 2] = $R$1$i20;
            break;
           }
          }
         } while (0);
         $403 = $v$3$lcssa$i + 20 | 0;
         $404 = HEAP32[$403 >> 2] | 0;
         $405 = ($404 | 0) == (0 | 0);
         if (!$405) {
          $406 = HEAP32[1908 >> 2] | 0;
          $407 = $404 >>> 0 < $406 >>> 0;
          if ($407) {
           _abort(), asyncState ? abort(-12) | 0 : 0;
          } else {
           $408 = $R$1$i20 + 20 | 0;
           HEAP32[$408 >> 2] = $404;
           $409 = $404 + 24 | 0;
           HEAP32[$409 >> 2] = $R$1$i20;
           break;
          }
         }
        }
       } while (0);
       $410 = $rsize$3$lcssa$i >>> 0 < 16;
       L199 : do {
        if ($410) {
         $411 = $rsize$3$lcssa$i + $246 | 0;
         $412 = $411 | 3;
         $413 = $v$3$lcssa$i + 4 | 0;
         HEAP32[$413 >> 2] = $412;
         $$sum18$i = $411 + 4 | 0;
         $414 = $v$3$lcssa$i + $$sum18$i | 0;
         $415 = HEAP32[$414 >> 2] | 0;
         $416 = $415 | 1;
         HEAP32[$414 >> 2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = $v$3$lcssa$i + 4 | 0;
         HEAP32[$418 >> 2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = $v$3$lcssa$i + $$sum$i2334 | 0;
         HEAP32[$420 >> 2] = $419;
         $$sum1$i24 = $rsize$3$lcssa$i + $246 | 0;
         $421 = $v$3$lcssa$i + $$sum1$i24 | 0;
         HEAP32[$421 >> 2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = $rsize$3$lcssa$i >>> 0 < 256;
         if ($423) {
          $424 = $422 << 1;
          $425 = 1932 + ($424 << 2) | 0;
          $426 = HEAP32[1892 >> 2] | 0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428 | 0) == 0;
          if ($429) {
           $430 = $426 | $427;
           HEAP32[1892 >> 2] = $430;
           $$pre$i25 = $424 + 2 | 0;
           $$pre43$i = 1932 + ($$pre$i25 << 2) | 0;
           $$pre$phi$i26Z2D = $$pre43$i;
           $F5$0$i = $425;
          } else {
           $$sum17$i = $424 + 2 | 0;
           $431 = 1932 + ($$sum17$i << 2) | 0;
           $432 = HEAP32[$431 >> 2] | 0;
           $433 = HEAP32[1908 >> 2] | 0;
           $434 = $432 >>> 0 < $433 >>> 0;
           if ($434) {
            _abort(), asyncState ? abort(-12) | 0 : 0;
           } else {
            $$pre$phi$i26Z2D = $431;
            $F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D >> 2] = $348;
          $435 = $F5$0$i + 12 | 0;
          HEAP32[$435 >> 2] = $348;
          $$sum15$i = $246 + 8 | 0;
          $436 = $v$3$lcssa$i + $$sum15$i | 0;
          HEAP32[$436 >> 2] = $F5$0$i;
          $$sum16$i = $246 + 12 | 0;
          $437 = $v$3$lcssa$i + $$sum16$i | 0;
          HEAP32[$437 >> 2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438 | 0) == 0;
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = $rsize$3$lcssa$i >>> 0 > 16777215;
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = $438 + 1048320 | 0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = $444 + 520192 | 0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = $449 + 245760 | 0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = 14 - $453 | 0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = $454 + $456 | 0;
           $458 = $457 << 1;
           $459 = $457 + 7 | 0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = 2196 + ($I7$0$i << 2) | 0;
         $$sum2$i = $246 + 28 | 0;
         $464 = $v$3$lcssa$i + $$sum2$i | 0;
         HEAP32[$464 >> 2] = $I7$0$i;
         $$sum3$i27 = $246 + 16 | 0;
         $465 = $v$3$lcssa$i + $$sum3$i27 | 0;
         $$sum4$i28 = $246 + 20 | 0;
         $466 = $v$3$lcssa$i + $$sum4$i28 | 0;
         HEAP32[$466 >> 2] = 0;
         HEAP32[$465 >> 2] = 0;
         $467 = HEAP32[1896 >> 2] | 0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469 | 0) == 0;
         if ($470) {
          $471 = $467 | $468;
          HEAP32[1896 >> 2] = $471;
          HEAP32[$463 >> 2] = $348;
          $$sum5$i = $246 + 24 | 0;
          $472 = $v$3$lcssa$i + $$sum5$i | 0;
          HEAP32[$472 >> 2] = $463;
          $$sum6$i = $246 + 12 | 0;
          $473 = $v$3$lcssa$i + $$sum6$i | 0;
          HEAP32[$473 >> 2] = $348;
          $$sum7$i = $246 + 8 | 0;
          $474 = $v$3$lcssa$i + $$sum7$i | 0;
          HEAP32[$474 >> 2] = $348;
          break;
         }
         $475 = HEAP32[$463 >> 2] | 0;
         $476 = $475 + 4 | 0;
         $477 = HEAP32[$476 >> 2] | 0;
         $478 = $477 & -8;
         $479 = ($478 | 0) == ($rsize$3$lcssa$i | 0);
         L217 : do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i | 0) == 31;
           $481 = $I7$0$i >>> 1;
           $482 = 25 - $481 | 0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;
           $T$028$i = $475;
           while (1) {
            $491 = $K12$029$i >>> 31;
            $492 = ($T$028$i + 16 | 0) + ($491 << 2) | 0;
            $487 = HEAP32[$492 >> 2] | 0;
            $493 = ($487 | 0) == (0 | 0);
            if ($493) {
             $$lcssa232 = $492;
             $T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = $487 + 4 | 0;
            $488 = HEAP32[$486 >> 2] | 0;
            $489 = $488 & -8;
            $490 = ($489 | 0) == ($rsize$3$lcssa$i | 0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;
             $T$028$i = $487;
            }
           }
           $494 = HEAP32[1908 >> 2] | 0;
           $495 = $$lcssa232 >>> 0 < $494 >>> 0;
           if ($495) {
            _abort(), asyncState ? abort(-12) | 0 : 0;
           } else {
            HEAP32[$$lcssa232 >> 2] = $348;
            $$sum11$i = $246 + 24 | 0;
            $496 = $v$3$lcssa$i + $$sum11$i | 0;
            HEAP32[$496 >> 2] = $T$028$i$lcssa;
            $$sum12$i = $246 + 12 | 0;
            $497 = $v$3$lcssa$i + $$sum12$i | 0;
            HEAP32[$497 >> 2] = $348;
            $$sum13$i = $246 + 8 | 0;
            $498 = $v$3$lcssa$i + $$sum13$i | 0;
            HEAP32[$498 >> 2] = $348;
            break L199;
           }
          }
         } while (0);
         $499 = $T$0$lcssa$i + 8 | 0;
         $500 = HEAP32[$499 >> 2] | 0;
         $501 = HEAP32[1908 >> 2] | 0;
         $502 = $500 >>> 0 >= $501 >>> 0;
         $not$$i = $T$0$lcssa$i >>> 0 >= $501 >>> 0;
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = $500 + 12 | 0;
          HEAP32[$504 >> 2] = $348;
          HEAP32[$499 >> 2] = $348;
          $$sum8$i = $246 + 8 | 0;
          $505 = $v$3$lcssa$i + $$sum8$i | 0;
          HEAP32[$505 >> 2] = $500;
          $$sum9$i = $246 + 12 | 0;
          $506 = $v$3$lcssa$i + $$sum9$i | 0;
          HEAP32[$506 >> 2] = $T$0$lcssa$i;
          $$sum10$i = $246 + 24 | 0;
          $507 = $v$3$lcssa$i + $$sum10$i | 0;
          HEAP32[$507 >> 2] = 0;
          break;
         } else {
          _abort(), asyncState ? abort(-12) | 0 : 0;
         }
        }
       } while (0);
       $508 = $v$3$lcssa$i + 8 | 0;
       $mem$0 = $508;
       return $mem$0 | 0;
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while (0);
 $509 = HEAP32[1900 >> 2] | 0;
 $510 = $509 >>> 0 < $nb$0 >>> 0;
 if (!$510) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[1912 >> 2] | 0;
  $513 = $511 >>> 0 > 15;
  if ($513) {
   $514 = $512 + $nb$0 | 0;
   HEAP32[1912 >> 2] = $514;
   HEAP32[1900 >> 2] = $511;
   $515 = $511 | 1;
   $$sum2 = $nb$0 + 4 | 0;
   $516 = $512 + $$sum2 | 0;
   HEAP32[$516 >> 2] = $515;
   $517 = $512 + $509 | 0;
   HEAP32[$517 >> 2] = $511;
   $518 = $nb$0 | 3;
   $519 = $512 + 4 | 0;
   HEAP32[$519 >> 2] = $518;
  } else {
   HEAP32[1900 >> 2] = 0;
   HEAP32[1912 >> 2] = 0;
   $520 = $509 | 3;
   $521 = $512 + 4 | 0;
   HEAP32[$521 >> 2] = $520;
   $$sum1 = $509 + 4 | 0;
   $522 = $512 + $$sum1 | 0;
   $523 = HEAP32[$522 >> 2] | 0;
   $524 = $523 | 1;
   HEAP32[$522 >> 2] = $524;
  }
  $525 = $512 + 8 | 0;
  $mem$0 = $525;
  return $mem$0 | 0;
 }
 $526 = HEAP32[1904 >> 2] | 0;
 $527 = $526 >>> 0 > $nb$0 >>> 0;
 if ($527) {
  $528 = $526 - $nb$0 | 0;
  HEAP32[1904 >> 2] = $528;
  $529 = HEAP32[1916 >> 2] | 0;
  $530 = $529 + $nb$0 | 0;
  HEAP32[1916 >> 2] = $530;
  $531 = $528 | 1;
  $$sum = $nb$0 + 4 | 0;
  $532 = $529 + $$sum | 0;
  HEAP32[$532 >> 2] = $531;
  $533 = $nb$0 | 3;
  $534 = $529 + 4 | 0;
  HEAP32[$534 >> 2] = $533;
  $535 = $529 + 8 | 0;
  $mem$0 = $535;
  return $mem$0 | 0;
 }
 $536 = HEAP32[2364 >> 2] | 0;
 $537 = ($536 | 0) == 0;
 do {
  if ($537) {
   $538 = (tempInt = _sysconf(30) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $539 = $538 + -1 | 0;
   $540 = $539 & $538;
   $541 = ($540 | 0) == 0;
   if ($541) {
    HEAP32[2372 >> 2] = $538;
    HEAP32[2368 >> 2] = $538;
    HEAP32[2376 >> 2] = -1;
    HEAP32[2380 >> 2] = -1;
    HEAP32[2384 >> 2] = 0;
    HEAP32[2336 >> 2] = 0;
    $542 = (tempInt = _time(0 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[2364 >> 2] = $544;
    break;
   } else {
    _abort(), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 $545 = $nb$0 + 48 | 0;
 $546 = HEAP32[2372 >> 2] | 0;
 $547 = $nb$0 + 47 | 0;
 $548 = $546 + $547 | 0;
 $549 = 0 - $546 | 0;
 $550 = $548 & $549;
 $551 = $550 >>> 0 > $nb$0 >>> 0;
 if (!$551) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $552 = HEAP32[2332 >> 2] | 0;
 $553 = ($552 | 0) == 0;
 if (!$553) {
  $554 = HEAP32[2324 >> 2] | 0;
  $555 = $554 + $550 | 0;
  $556 = $555 >>> 0 <= $554 >>> 0;
  $557 = $555 >>> 0 > $552 >>> 0;
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return $mem$0 | 0;
  }
 }
 $558 = HEAP32[2336 >> 2] | 0;
 $559 = $558 & 4;
 $560 = ($559 | 0) == 0;
 L258 : do {
  if ($560) {
   $561 = HEAP32[1916 >> 2] | 0;
   $562 = ($561 | 0) == (0 | 0);
   L260 : do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = 2340;
     while (1) {
      $563 = HEAP32[$sp$0$i$i >> 2] | 0;
      $564 = $563 >>> 0 > $561 >>> 0;
      if (!$564) {
       $565 = $sp$0$i$i + 4 | 0;
       $566 = HEAP32[$565 >> 2] | 0;
       $567 = $563 + $566 | 0;
       $568 = $567 >>> 0 > $561 >>> 0;
       if ($568) {
        $$lcssa228 = $sp$0$i$i;
        $$lcssa230 = $565;
        break;
       }
      }
      $569 = $sp$0$i$i + 8 | 0;
      $570 = HEAP32[$569 >> 2] | 0;
      $571 = ($570 | 0) == (0 | 0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[1904 >> 2] | 0;
     $595 = $548 - $594 | 0;
     $596 = $595 & $549;
     $597 = $596 >>> 0 < 2147483647;
     if ($597) {
      $598 = (tempInt = _sbrk($596 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
      $599 = HEAP32[$$lcssa228 >> 2] | 0;
      $600 = HEAP32[$$lcssa230 >> 2] | 0;
      $601 = $599 + $600 | 0;
      $602 = ($598 | 0) == ($601 | 0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598 | 0) == (-1 | 0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;
        $tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;
       $ssize$1$ph$i = $596;
       $tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 174) {
     $572 = (tempInt = _sbrk(0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
     $573 = ($572 | 0) == (-1 | 0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[2368 >> 2] | 0;
      $576 = $575 + -1 | 0;
      $577 = $576 & $574;
      $578 = ($577 | 0) == 0;
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = $576 + $574 | 0;
       $580 = 0 - $575 | 0;
       $581 = $579 & $580;
       $582 = $550 - $574 | 0;
       $583 = $582 + $581 | 0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[2324 >> 2] | 0;
      $585 = $584 + $ssize$0$i | 0;
      $586 = $ssize$0$i >>> 0 > $nb$0 >>> 0;
      $587 = $ssize$0$i >>> 0 < 2147483647;
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[2332 >> 2] | 0;
       $589 = ($588 | 0) == 0;
       if (!$589) {
        $590 = $585 >>> 0 <= $584 >>> 0;
        $591 = $585 >>> 0 > $588 >>> 0;
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (tempInt = _sbrk($ssize$0$i | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
       $593 = ($592 | 0) == ($572 | 0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;
        $tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;
        $ssize$1$ph$i = $ssize$0$i;
        $tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while (0);
   L280 : do {
    if ((label | 0) == 184) {
     $604 = 0 - $ssize$1$ph$i | 0;
     $605 = ($br$0$ph$i | 0) != (-1 | 0);
     $606 = $ssize$1$ph$i >>> 0 < 2147483647;
     $or$cond5$i = $606 & $605;
     $607 = $545 >>> 0 > $ssize$1$ph$i >>> 0;
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[2372 >> 2] | 0;
       $609 = $547 - $ssize$1$ph$i | 0;
       $610 = $609 + $608 | 0;
       $611 = 0 - $608 | 0;
       $612 = $610 & $611;
       $613 = $612 >>> 0 < 2147483647;
       if ($613) {
        $614 = (tempInt = _sbrk($612 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
        $615 = ($614 | 0) == (-1 | 0);
        if ($615) {
         (tempInt = _sbrk($604 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = $612 + $ssize$1$ph$i | 0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while (0);
     $617 = ($br$0$ph$i | 0) == (-1 | 0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;
      $tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while (0);
   $618 = HEAP32[2336 >> 2] | 0;
   $619 = $618 | 4;
   HEAP32[2336 >> 2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while (0);
 if ((label | 0) == 191) {
  $620 = $550 >>> 0 < 2147483647;
  if ($620) {
   $621 = (tempInt = _sbrk($550 | 0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $622 = (tempInt = _sbrk(0) | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
   $623 = ($621 | 0) != (-1 | 0);
   $624 = ($622 | 0) != (-1 | 0);
   $or$cond3$i = $623 & $624;
   $625 = $621 >>> 0 < $622 >>> 0;
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = $626 - $627 | 0;
    $629 = $nb$0 + 40 | 0;
    $630 = $628 >>> 0 > $629 >>> 0;
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;
     $tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label | 0) == 194) {
  $631 = HEAP32[2324 >> 2] | 0;
  $632 = $631 + $tsize$254$i | 0;
  HEAP32[2324 >> 2] = $632;
  $633 = HEAP32[2328 >> 2] | 0;
  $634 = $632 >>> 0 > $633 >>> 0;
  if ($634) {
   HEAP32[2328 >> 2] = $632;
  }
  $635 = HEAP32[1916 >> 2] | 0;
  $636 = ($635 | 0) == (0 | 0);
  L299 : do {
   if ($636) {
    $637 = HEAP32[1908 >> 2] | 0;
    $638 = ($637 | 0) == (0 | 0);
    $639 = $tbase$255$i >>> 0 < $637 >>> 0;
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[1908 >> 2] = $tbase$255$i;
    }
    HEAP32[2340 >> 2] = $tbase$255$i;
    HEAP32[2344 >> 2] = $tsize$254$i;
    HEAP32[2352 >> 2] = 0;
    $640 = HEAP32[2364 >> 2] | 0;
    HEAP32[1928 >> 2] = $640;
    HEAP32[1924 >> 2] = -1;
    $i$02$i$i = 0;
    while (1) {
     $641 = $i$02$i$i << 1;
     $642 = 1932 + ($641 << 2) | 0;
     $$sum$i$i = $641 + 3 | 0;
     $643 = 1932 + ($$sum$i$i << 2) | 0;
     HEAP32[$643 >> 2] = $642;
     $$sum1$i$i = $641 + 2 | 0;
     $644 = 1932 + ($$sum1$i$i << 2) | 0;
     HEAP32[$644 >> 2] = $642;
     $645 = $i$02$i$i + 1 | 0;
     $exitcond$i$i = ($645 | 0) == 32;
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = $tsize$254$i + -40 | 0;
    $647 = $tbase$255$i + 8 | 0;
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649 | 0) == 0;
    $651 = 0 - $648 | 0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = $tbase$255$i + $653 | 0;
    $655 = $646 - $653 | 0;
    HEAP32[1916 >> 2] = $654;
    HEAP32[1904 >> 2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = $653 + 4 | 0;
    $657 = $tbase$255$i + $$sum$i13$i | 0;
    HEAP32[$657 >> 2] = $656;
    $$sum2$i$i = $tsize$254$i + -36 | 0;
    $658 = $tbase$255$i + $$sum2$i$i | 0;
    HEAP32[$658 >> 2] = 40;
    $659 = HEAP32[2380 >> 2] | 0;
    HEAP32[1920 >> 2] = $659;
   } else {
    $sp$084$i = 2340;
    while (1) {
     $660 = HEAP32[$sp$084$i >> 2] | 0;
     $661 = $sp$084$i + 4 | 0;
     $662 = HEAP32[$661 >> 2] | 0;
     $663 = $660 + $662 | 0;
     $664 = ($tbase$255$i | 0) == ($663 | 0);
     if ($664) {
      $$lcssa222 = $660;
      $$lcssa224 = $661;
      $$lcssa226 = $662;
      $sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = $sp$084$i + 8 | 0;
     $666 = HEAP32[$665 >> 2] | 0;
     $667 = ($666 | 0) == (0 | 0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label | 0) == 204) {
     $668 = $sp$084$i$lcssa + 12 | 0;
     $669 = HEAP32[$668 >> 2] | 0;
     $670 = $669 & 8;
     $671 = ($670 | 0) == 0;
     if ($671) {
      $672 = $635 >>> 0 >= $$lcssa222 >>> 0;
      $673 = $635 >>> 0 < $tbase$255$i >>> 0;
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = $$lcssa226 + $tsize$254$i | 0;
       HEAP32[$$lcssa224 >> 2] = $674;
       $675 = HEAP32[1904 >> 2] | 0;
       $676 = $675 + $tsize$254$i | 0;
       $677 = $635 + 8 | 0;
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679 | 0) == 0;
       $681 = 0 - $678 | 0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = $635 + $683 | 0;
       $685 = $676 - $683 | 0;
       HEAP32[1916 >> 2] = $684;
       HEAP32[1904 >> 2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = $683 + 4 | 0;
       $687 = $635 + $$sum$i17$i | 0;
       HEAP32[$687 >> 2] = $686;
       $$sum2$i18$i = $676 + 4 | 0;
       $688 = $635 + $$sum2$i18$i | 0;
       HEAP32[$688 >> 2] = 40;
       $689 = HEAP32[2380 >> 2] | 0;
       HEAP32[1920 >> 2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[1908 >> 2] | 0;
    $691 = $tbase$255$i >>> 0 < $690 >>> 0;
    if ($691) {
     HEAP32[1908 >> 2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = $tbase$255$i + $tsize$254$i | 0;
    $sp$183$i = 2340;
    while (1) {
     $693 = HEAP32[$sp$183$i >> 2] | 0;
     $694 = ($693 | 0) == ($692 | 0);
     if ($694) {
      $$lcssa219 = $sp$183$i;
      $sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = $sp$183$i + 8 | 0;
     $696 = HEAP32[$695 >> 2] | 0;
     $697 = ($696 | 0) == (0 | 0);
     if ($697) {
      $sp$0$i$i$i = 2340;
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label | 0) == 212) {
     $698 = $sp$183$i$lcssa + 12 | 0;
     $699 = HEAP32[$698 >> 2] | 0;
     $700 = $699 & 8;
     $701 = ($700 | 0) == 0;
     if ($701) {
      HEAP32[$$lcssa219 >> 2] = $tbase$255$i;
      $702 = $sp$183$i$lcssa + 4 | 0;
      $703 = HEAP32[$702 >> 2] | 0;
      $704 = $703 + $tsize$254$i | 0;
      HEAP32[$702 >> 2] = $704;
      $705 = $tbase$255$i + 8 | 0;
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707 | 0) == 0;
      $709 = 0 - $706 | 0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = $tbase$255$i + $711 | 0;
      $$sum112$i = $tsize$254$i + 8 | 0;
      $713 = $tbase$255$i + $$sum112$i | 0;
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715 | 0) == 0;
      $717 = 0 - $714 | 0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = $719 + $tsize$254$i | 0;
      $720 = $tbase$255$i + $$sum113$i | 0;
      $721 = $720;
      $722 = $712;
      $723 = $721 - $722 | 0;
      $$sum$i19$i = $711 + $nb$0 | 0;
      $724 = $tbase$255$i + $$sum$i19$i | 0;
      $725 = $723 - $nb$0 | 0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = $711 + 4 | 0;
      $727 = $tbase$255$i + $$sum1$i20$i | 0;
      HEAP32[$727 >> 2] = $726;
      $728 = ($720 | 0) == ($635 | 0);
      L324 : do {
       if ($728) {
        $729 = HEAP32[1904 >> 2] | 0;
        $730 = $729 + $725 | 0;
        HEAP32[1904 >> 2] = $730;
        HEAP32[1916 >> 2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = $$sum$i19$i + 4 | 0;
        $732 = $tbase$255$i + $$sum42$i$i | 0;
        HEAP32[$732 >> 2] = $731;
       } else {
        $733 = HEAP32[1912 >> 2] | 0;
        $734 = ($720 | 0) == ($733 | 0);
        if ($734) {
         $735 = HEAP32[1900 >> 2] | 0;
         $736 = $735 + $725 | 0;
         HEAP32[1900 >> 2] = $736;
         HEAP32[1912 >> 2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = $$sum$i19$i + 4 | 0;
         $738 = $tbase$255$i + $$sum40$i$i | 0;
         HEAP32[$738 >> 2] = $737;
         $$sum41$i$i = $736 + $$sum$i19$i | 0;
         $739 = $tbase$255$i + $$sum41$i$i | 0;
         HEAP32[$739 >> 2] = $736;
         break;
        }
        $$sum2$i21$i = $tsize$254$i + 4 | 0;
        $$sum114$i = $$sum2$i21$i + $719 | 0;
        $740 = $tbase$255$i + $$sum114$i | 0;
        $741 = HEAP32[$740 >> 2] | 0;
        $742 = $741 & 3;
        $743 = ($742 | 0) == 1;
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = $741 >>> 0 < 256;
         L332 : do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = $$sum3738$i$i + $tsize$254$i | 0;
           $747 = $tbase$255$i + $$sum124$i | 0;
           $748 = HEAP32[$747 >> 2] | 0;
           $$sum39$i$i = $tsize$254$i + 12 | 0;
           $$sum125$i = $$sum39$i$i + $719 | 0;
           $749 = $tbase$255$i + $$sum125$i | 0;
           $750 = HEAP32[$749 >> 2] | 0;
           $751 = $745 << 1;
           $752 = 1932 + ($751 << 2) | 0;
           $753 = ($748 | 0) == ($752 | 0);
           do {
            if (!$753) {
             $754 = $748 >>> 0 < $755 >>> 0;
             if ($754) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
             $756 = $748 + 12 | 0;
             $757 = HEAP32[$756 >> 2] | 0;
             $758 = ($757 | 0) == ($720 | 0);
             if ($758) {
              break;
             }
             _abort(), asyncState ? abort(-12) | 0 : 0;
            }
           } while (0);
           $759 = ($750 | 0) == ($748 | 0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[1892 >> 2] | 0;
            $763 = $762 & $761;
            HEAP32[1892 >> 2] = $763;
            break;
           }
           $764 = ($750 | 0) == ($752 | 0);
           do {
            if ($764) {
             $$pre57$i$i = $750 + 8 | 0;
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = $750 >>> 0 < $755 >>> 0;
             if ($765) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
             $766 = $750 + 8 | 0;
             $767 = HEAP32[$766 >> 2] | 0;
             $768 = ($767 | 0) == ($720 | 0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort(), asyncState ? abort(-12) | 0 : 0;
            }
           } while (0);
           $769 = $748 + 12 | 0;
           HEAP32[$769 >> 2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D >> 2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = $$sum34$i$i + $tsize$254$i | 0;
           $770 = $tbase$255$i + $$sum115$i | 0;
           $771 = HEAP32[$770 >> 2] | 0;
           $$sum5$i$i = $tsize$254$i + 12 | 0;
           $$sum116$i = $$sum5$i$i + $719 | 0;
           $772 = $tbase$255$i + $$sum116$i | 0;
           $773 = HEAP32[$772 >> 2] | 0;
           $774 = ($773 | 0) == ($720 | 0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = $$sum2$i21$i + $$sum67$i$i | 0;
             $784 = $tbase$255$i + $$sum122$i | 0;
             $785 = HEAP32[$784 >> 2] | 0;
             $786 = ($785 | 0) == (0 | 0);
             if ($786) {
              $$sum123$i = $$sum67$i$i + $tsize$254$i | 0;
              $787 = $tbase$255$i + $$sum123$i | 0;
              $788 = HEAP32[$787 >> 2] | 0;
              $789 = ($788 | 0) == (0 | 0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;
               $RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;
              $RP$0$i$i = $784;
             }
             while (1) {
              $790 = $R$0$i$i + 20 | 0;
              $791 = HEAP32[$790 >> 2] | 0;
              $792 = ($791 | 0) == (0 | 0);
              if (!$792) {
               $R$0$i$i = $791;
               $RP$0$i$i = $790;
               continue;
              }
              $793 = $R$0$i$i + 16 | 0;
              $794 = HEAP32[$793 >> 2] | 0;
              $795 = ($794 | 0) == (0 | 0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;
               $RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;
               $RP$0$i$i = $793;
              }
             }
             $796 = $RP$0$i$i$lcssa >>> 0 < $755 >>> 0;
             if ($796) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             } else {
              HEAP32[$RP$0$i$i$lcssa >> 2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = $$sum3536$i$i + $tsize$254$i | 0;
             $775 = $tbase$255$i + $$sum117$i | 0;
             $776 = HEAP32[$775 >> 2] | 0;
             $777 = $776 >>> 0 < $755 >>> 0;
             if ($777) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
             $778 = $776 + 12 | 0;
             $779 = HEAP32[$778 >> 2] | 0;
             $780 = ($779 | 0) == ($720 | 0);
             if (!$780) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
             $781 = $773 + 8 | 0;
             $782 = HEAP32[$781 >> 2] | 0;
             $783 = ($782 | 0) == ($720 | 0);
             if ($783) {
              HEAP32[$778 >> 2] = $773;
              HEAP32[$781 >> 2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
            }
           } while (0);
           $797 = ($771 | 0) == (0 | 0);
           if ($797) {
            break;
           }
           $$sum30$i$i = $tsize$254$i + 28 | 0;
           $$sum118$i = $$sum30$i$i + $719 | 0;
           $798 = $tbase$255$i + $$sum118$i | 0;
           $799 = HEAP32[$798 >> 2] | 0;
           $800 = 2196 + ($799 << 2) | 0;
           $801 = HEAP32[$800 >> 2] | 0;
           $802 = ($720 | 0) == ($801 | 0);
           do {
            if ($802) {
             HEAP32[$800 >> 2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i | 0) == (0 | 0);
             if (!$cond$i$i) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[1896 >> 2] | 0;
             $806 = $805 & $804;
             HEAP32[1896 >> 2] = $806;
             break L332;
            } else {
             $807 = HEAP32[1908 >> 2] | 0;
             $808 = $771 >>> 0 < $807 >>> 0;
             if ($808) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             }
             $809 = $771 + 16 | 0;
             $810 = HEAP32[$809 >> 2] | 0;
             $811 = ($810 | 0) == ($720 | 0);
             if ($811) {
              HEAP32[$809 >> 2] = $R$1$i$i;
             } else {
              $812 = $771 + 20 | 0;
              HEAP32[$812 >> 2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i | 0) == (0 | 0);
             if ($813) {
              break L332;
             }
            }
           } while (0);
           $814 = HEAP32[1908 >> 2] | 0;
           $815 = $R$1$i$i >>> 0 < $814 >>> 0;
           if ($815) {
            _abort(), asyncState ? abort(-12) | 0 : 0;
           }
           $816 = $R$1$i$i + 24 | 0;
           HEAP32[$816 >> 2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = $$sum3132$i$i + $tsize$254$i | 0;
           $817 = $tbase$255$i + $$sum119$i | 0;
           $818 = HEAP32[$817 >> 2] | 0;
           $819 = ($818 | 0) == (0 | 0);
           do {
            if (!$819) {
             $820 = $818 >>> 0 < $814 >>> 0;
             if ($820) {
              _abort(), asyncState ? abort(-12) | 0 : 0;
             } else {
              $821 = $R$1$i$i + 16 | 0;
              HEAP32[$821 >> 2] = $818;
              $822 = $818 + 24 | 0;
              HEAP32[$822 >> 2] = $R$1$i$i;
              break;
             }
            }
           } while (0);
           $$sum120$i = $$sum2$i21$i + $$sum3132$i$i | 0;
           $823 = $tbase$255$i + $$sum120$i | 0;
           $824 = HEAP32[$823 >> 2] | 0;
           $825 = ($824 | 0) == (0 | 0);
           if ($825) {
            break;
           }
           $826 = HEAP32[1908 >> 2] | 0;
           $827 = $824 >>> 0 < $826 >>> 0;
           if ($827) {
            _abort(), asyncState ? abort(-12) | 0 : 0;
           } else {
            $828 = $R$1$i$i + 20 | 0;
            HEAP32[$828 >> 2] = $824;
            $829 = $824 + 24 | 0;
            HEAP32[$829 >> 2] = $R$1$i$i;
            break;
           }
          }
         } while (0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = $$sum9$i$i + $tsize$254$i | 0;
         $830 = $tbase$255$i + $$sum121$i | 0;
         $831 = $744 + $725 | 0;
         $oldfirst$0$i$i = $830;
         $qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;
         $qsize$0$i$i = $725;
        }
        $832 = $oldfirst$0$i$i + 4 | 0;
        $833 = HEAP32[$832 >> 2] | 0;
        $834 = $833 & -2;
        HEAP32[$832 >> 2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = $$sum$i19$i + 4 | 0;
        $836 = $tbase$255$i + $$sum10$i$i | 0;
        HEAP32[$836 >> 2] = $835;
        $$sum11$i$i = $qsize$0$i$i + $$sum$i19$i | 0;
        $837 = $tbase$255$i + $$sum11$i$i | 0;
        HEAP32[$837 >> 2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = $qsize$0$i$i >>> 0 < 256;
        if ($839) {
         $840 = $838 << 1;
         $841 = 1932 + ($840 << 2) | 0;
         $842 = HEAP32[1892 >> 2] | 0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844 | 0) == 0;
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[1892 >> 2] = $846;
           $$pre$i22$i = $840 + 2 | 0;
           $$pre56$i$i = 1932 + ($$pre$i22$i << 2) | 0;
           $$pre$phi$i23$iZ2D = $$pre56$i$i;
           $F4$0$i$i = $841;
          } else {
           $$sum29$i$i = $840 + 2 | 0;
           $847 = 1932 + ($$sum29$i$i << 2) | 0;
           $848 = HEAP32[$847 >> 2] | 0;
           $849 = HEAP32[1908 >> 2] | 0;
           $850 = $848 >>> 0 < $849 >>> 0;
           if (!$850) {
            $$pre$phi$i23$iZ2D = $847;
            $F4$0$i$i = $848;
            break;
           }
           _abort(), asyncState ? abort(-12) | 0 : 0;
          }
         } while (0);
         HEAP32[$$pre$phi$i23$iZ2D >> 2] = $724;
         $851 = $F4$0$i$i + 12 | 0;
         HEAP32[$851 >> 2] = $724;
         $$sum27$i$i = $$sum$i19$i + 8 | 0;
         $852 = $tbase$255$i + $$sum27$i$i | 0;
         HEAP32[$852 >> 2] = $F4$0$i$i;
         $$sum28$i$i = $$sum$i19$i + 12 | 0;
         $853 = $tbase$255$i + $$sum28$i$i | 0;
         HEAP32[$853 >> 2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854 | 0) == 0;
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = $qsize$0$i$i >>> 0 > 16777215;
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = $854 + 1048320 | 0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = $860 + 520192 | 0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = $865 + 245760 | 0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = 14 - $869 | 0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = $870 + $872 | 0;
          $874 = $873 << 1;
          $875 = $873 + 7 | 0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while (0);
        $879 = 2196 + ($I7$0$i$i << 2) | 0;
        $$sum12$i$i = $$sum$i19$i + 28 | 0;
        $880 = $tbase$255$i + $$sum12$i$i | 0;
        HEAP32[$880 >> 2] = $I7$0$i$i;
        $$sum13$i$i = $$sum$i19$i + 16 | 0;
        $881 = $tbase$255$i + $$sum13$i$i | 0;
        $$sum14$i$i = $$sum$i19$i + 20 | 0;
        $882 = $tbase$255$i + $$sum14$i$i | 0;
        HEAP32[$882 >> 2] = 0;
        HEAP32[$881 >> 2] = 0;
        $883 = HEAP32[1896 >> 2] | 0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885 | 0) == 0;
        if ($886) {
         $887 = $883 | $884;
         HEAP32[1896 >> 2] = $887;
         HEAP32[$879 >> 2] = $724;
         $$sum15$i$i = $$sum$i19$i + 24 | 0;
         $888 = $tbase$255$i + $$sum15$i$i | 0;
         HEAP32[$888 >> 2] = $879;
         $$sum16$i$i = $$sum$i19$i + 12 | 0;
         $889 = $tbase$255$i + $$sum16$i$i | 0;
         HEAP32[$889 >> 2] = $724;
         $$sum17$i$i = $$sum$i19$i + 8 | 0;
         $890 = $tbase$255$i + $$sum17$i$i | 0;
         HEAP32[$890 >> 2] = $724;
         break;
        }
        $891 = HEAP32[$879 >> 2] | 0;
        $892 = $891 + 4 | 0;
        $893 = HEAP32[$892 >> 2] | 0;
        $894 = $893 & -8;
        $895 = ($894 | 0) == ($qsize$0$i$i | 0);
        L418 : do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i | 0) == 31;
          $897 = $I7$0$i$i >>> 1;
          $898 = 25 - $897 | 0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;
          $T$050$i$i = $891;
          while (1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = ($T$050$i$i + 16 | 0) + ($907 << 2) | 0;
           $903 = HEAP32[$908 >> 2] | 0;
           $909 = ($903 | 0) == (0 | 0);
           if ($909) {
            $$lcssa = $908;
            $T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = $903 + 4 | 0;
           $904 = HEAP32[$902 >> 2] | 0;
           $905 = $904 & -8;
           $906 = ($905 | 0) == ($qsize$0$i$i | 0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;
            $T$050$i$i = $903;
           }
          }
          $910 = HEAP32[1908 >> 2] | 0;
          $911 = $$lcssa >>> 0 < $910 >>> 0;
          if ($911) {
           _abort(), asyncState ? abort(-12) | 0 : 0;
          } else {
           HEAP32[$$lcssa >> 2] = $724;
           $$sum23$i$i = $$sum$i19$i + 24 | 0;
           $912 = $tbase$255$i + $$sum23$i$i | 0;
           HEAP32[$912 >> 2] = $T$050$i$i$lcssa;
           $$sum24$i$i = $$sum$i19$i + 12 | 0;
           $913 = $tbase$255$i + $$sum24$i$i | 0;
           HEAP32[$913 >> 2] = $724;
           $$sum25$i$i = $$sum$i19$i + 8 | 0;
           $914 = $tbase$255$i + $$sum25$i$i | 0;
           HEAP32[$914 >> 2] = $724;
           break L324;
          }
         }
        } while (0);
        $915 = $T$0$lcssa$i25$i + 8 | 0;
        $916 = HEAP32[$915 >> 2] | 0;
        $917 = HEAP32[1908 >> 2] | 0;
        $918 = $916 >>> 0 >= $917 >>> 0;
        $not$$i26$i = $T$0$lcssa$i25$i >>> 0 >= $917 >>> 0;
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = $916 + 12 | 0;
         HEAP32[$920 >> 2] = $724;
         HEAP32[$915 >> 2] = $724;
         $$sum20$i$i = $$sum$i19$i + 8 | 0;
         $921 = $tbase$255$i + $$sum20$i$i | 0;
         HEAP32[$921 >> 2] = $916;
         $$sum21$i$i = $$sum$i19$i + 12 | 0;
         $922 = $tbase$255$i + $$sum21$i$i | 0;
         HEAP32[$922 >> 2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = $$sum$i19$i + 24 | 0;
         $923 = $tbase$255$i + $$sum22$i$i | 0;
         HEAP32[$923 >> 2] = 0;
         break;
        } else {
         _abort(), asyncState ? abort(-12) | 0 : 0;
        }
       }
      } while (0);
      $$sum1819$i$i = $711 | 8;
      $924 = $tbase$255$i + $$sum1819$i$i | 0;
      $mem$0 = $924;
      return $mem$0 | 0;
     } else {
      $sp$0$i$i$i = 2340;
     }
    }
    while (1) {
     $925 = HEAP32[$sp$0$i$i$i >> 2] | 0;
     $926 = $925 >>> 0 > $635 >>> 0;
     if (!$926) {
      $927 = $sp$0$i$i$i + 4 | 0;
      $928 = HEAP32[$927 >> 2] | 0;
      $929 = $925 + $928 | 0;
      $930 = $929 >>> 0 > $635 >>> 0;
      if ($930) {
       $$lcssa215 = $925;
       $$lcssa216 = $928;
       $$lcssa217 = $929;
       break;
      }
     }
     $931 = $sp$0$i$i$i + 8 | 0;
     $932 = HEAP32[$931 >> 2] | 0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = $$lcssa216 + -47 | 0;
    $$sum1$i15$i = $$lcssa216 + -39 | 0;
    $933 = $$lcssa215 + $$sum1$i15$i | 0;
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935 | 0) == 0;
    $937 = 0 - $934 | 0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = $$sum$i14$i + $939 | 0;
    $940 = $$lcssa215 + $$sum2$i16$i | 0;
    $941 = $635 + 16 | 0;
    $942 = $940 >>> 0 < $941 >>> 0;
    $943 = $942 ? $635 : $940;
    $944 = $943 + 8 | 0;
    $945 = $tsize$254$i + -40 | 0;
    $946 = $tbase$255$i + 8 | 0;
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948 | 0) == 0;
    $950 = 0 - $947 | 0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = $tbase$255$i + $952 | 0;
    $954 = $945 - $952 | 0;
    HEAP32[1916 >> 2] = $953;
    HEAP32[1904 >> 2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = $952 + 4 | 0;
    $956 = $tbase$255$i + $$sum$i$i$i | 0;
    HEAP32[$956 >> 2] = $955;
    $$sum2$i$i$i = $tsize$254$i + -36 | 0;
    $957 = $tbase$255$i + $$sum2$i$i$i | 0;
    HEAP32[$957 >> 2] = 40;
    $958 = HEAP32[2380 >> 2] | 0;
    HEAP32[1920 >> 2] = $958;
    $959 = $943 + 4 | 0;
    HEAP32[$959 >> 2] = 27;
    HEAP32[$944 >> 2] = HEAP32[2340 >> 2] | 0;
    HEAP32[$944 + 4 >> 2] = HEAP32[2340 + 4 >> 2] | 0;
    HEAP32[$944 + 8 >> 2] = HEAP32[2340 + 8 >> 2] | 0;
    HEAP32[$944 + 12 >> 2] = HEAP32[2340 + 12 >> 2] | 0;
    HEAP32[2340 >> 2] = $tbase$255$i;
    HEAP32[2344 >> 2] = $tsize$254$i;
    HEAP32[2352 >> 2] = 0;
    HEAP32[2348 >> 2] = $944;
    $960 = $943 + 28 | 0;
    HEAP32[$960 >> 2] = 7;
    $961 = $943 + 32 | 0;
    $962 = $961 >>> 0 < $$lcssa217 >>> 0;
    if ($962) {
     $964 = $960;
     while (1) {
      $963 = $964 + 4 | 0;
      HEAP32[$963 >> 2] = 7;
      $965 = $964 + 8 | 0;
      $966 = $965 >>> 0 < $$lcssa217 >>> 0;
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943 | 0) == ($635 | 0);
    if (!$967) {
     $968 = $943;
     $969 = $635;
     $970 = $968 - $969 | 0;
     $971 = HEAP32[$959 >> 2] | 0;
     $972 = $971 & -2;
     HEAP32[$959 >> 2] = $972;
     $973 = $970 | 1;
     $974 = $635 + 4 | 0;
     HEAP32[$974 >> 2] = $973;
     HEAP32[$943 >> 2] = $970;
     $975 = $970 >>> 3;
     $976 = $970 >>> 0 < 256;
     if ($976) {
      $977 = $975 << 1;
      $978 = 1932 + ($977 << 2) | 0;
      $979 = HEAP32[1892 >> 2] | 0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981 | 0) == 0;
      if ($982) {
       $983 = $979 | $980;
       HEAP32[1892 >> 2] = $983;
       $$pre$i$i = $977 + 2 | 0;
       $$pre14$i$i = 1932 + ($$pre$i$i << 2) | 0;
       $$pre$phi$i$iZ2D = $$pre14$i$i;
       $F$0$i$i = $978;
      } else {
       $$sum4$i$i = $977 + 2 | 0;
       $984 = 1932 + ($$sum4$i$i << 2) | 0;
       $985 = HEAP32[$984 >> 2] | 0;
       $986 = HEAP32[1908 >> 2] | 0;
       $987 = $985 >>> 0 < $986 >>> 0;
       if ($987) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       } else {
        $$pre$phi$i$iZ2D = $984;
        $F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
      $988 = $F$0$i$i + 12 | 0;
      HEAP32[$988 >> 2] = $635;
      $989 = $635 + 8 | 0;
      HEAP32[$989 >> 2] = $F$0$i$i;
      $990 = $635 + 12 | 0;
      HEAP32[$990 >> 2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991 | 0) == 0;
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = $970 >>> 0 > 16777215;
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = $991 + 1048320 | 0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = $997 + 520192 | 0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = $1002 + 245760 | 0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = 14 - $1006 | 0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = $1007 + $1009 | 0;
       $1011 = $1010 << 1;
       $1012 = $1010 + 7 | 0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = 2196 + ($I1$0$i$i << 2) | 0;
     $1017 = $635 + 28 | 0;
     HEAP32[$1017 >> 2] = $I1$0$i$i;
     $1018 = $635 + 20 | 0;
     HEAP32[$1018 >> 2] = 0;
     HEAP32[$941 >> 2] = 0;
     $1019 = HEAP32[1896 >> 2] | 0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021 | 0) == 0;
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[1896 >> 2] = $1023;
      HEAP32[$1016 >> 2] = $635;
      $1024 = $635 + 24 | 0;
      HEAP32[$1024 >> 2] = $1016;
      $1025 = $635 + 12 | 0;
      HEAP32[$1025 >> 2] = $635;
      $1026 = $635 + 8 | 0;
      HEAP32[$1026 >> 2] = $635;
      break;
     }
     $1027 = HEAP32[$1016 >> 2] | 0;
     $1028 = $1027 + 4 | 0;
     $1029 = HEAP32[$1028 >> 2] | 0;
     $1030 = $1029 & -8;
     $1031 = ($1030 | 0) == ($970 | 0);
     L459 : do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i | 0) == 31;
       $1033 = $I1$0$i$i >>> 1;
       $1034 = 25 - $1033 | 0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;
       $T$06$i$i = $1027;
       while (1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = ($T$06$i$i + 16 | 0) + ($1043 << 2) | 0;
        $1039 = HEAP32[$1044 >> 2] | 0;
        $1045 = ($1039 | 0) == (0 | 0);
        if ($1045) {
         $$lcssa211 = $1044;
         $T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = $1039 + 4 | 0;
        $1040 = HEAP32[$1038 >> 2] | 0;
        $1041 = $1040 & -8;
        $1042 = ($1041 | 0) == ($970 | 0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;
         $T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[1908 >> 2] | 0;
       $1047 = $$lcssa211 >>> 0 < $1046 >>> 0;
       if ($1047) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       } else {
        HEAP32[$$lcssa211 >> 2] = $635;
        $1048 = $635 + 24 | 0;
        HEAP32[$1048 >> 2] = $T$06$i$i$lcssa;
        $1049 = $635 + 12 | 0;
        HEAP32[$1049 >> 2] = $635;
        $1050 = $635 + 8 | 0;
        HEAP32[$1050 >> 2] = $635;
        break L299;
       }
      }
     } while (0);
     $1051 = $T$0$lcssa$i$i + 8 | 0;
     $1052 = HEAP32[$1051 >> 2] | 0;
     $1053 = HEAP32[1908 >> 2] | 0;
     $1054 = $1052 >>> 0 >= $1053 >>> 0;
     $not$$i$i = $T$0$lcssa$i$i >>> 0 >= $1053 >>> 0;
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = $1052 + 12 | 0;
      HEAP32[$1056 >> 2] = $635;
      HEAP32[$1051 >> 2] = $635;
      $1057 = $635 + 8 | 0;
      HEAP32[$1057 >> 2] = $1052;
      $1058 = $635 + 12 | 0;
      HEAP32[$1058 >> 2] = $T$0$lcssa$i$i;
      $1059 = $635 + 24 | 0;
      HEAP32[$1059 >> 2] = 0;
      break;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
   }
  } while (0);
  $1060 = HEAP32[1904 >> 2] | 0;
  $1061 = $1060 >>> 0 > $nb$0 >>> 0;
  if ($1061) {
   $1062 = $1060 - $nb$0 | 0;
   HEAP32[1904 >> 2] = $1062;
   $1063 = HEAP32[1916 >> 2] | 0;
   $1064 = $1063 + $nb$0 | 0;
   HEAP32[1916 >> 2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = $nb$0 + 4 | 0;
   $1066 = $1063 + $$sum$i32 | 0;
   HEAP32[$1066 >> 2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = $1063 + 4 | 0;
   HEAP32[$1068 >> 2] = $1067;
   $1069 = $1063 + 8 | 0;
   $mem$0 = $1069;
   return $mem$0 | 0;
  }
 }
 $1070 = (tempInt = ___errno_location() | 0, asyncState ? abort(-12) | 0 : tempInt) | 0;
 HEAP32[$1070 >> 2] = 12;
 $mem$0 = 0;
 return $mem$0 | 0;
}
function emterpret(pc) {
 pc = pc | 0;
 var sp = 0, inst = 0, lx = 0, ly = 0, lz = 0;
 var ld = 0.0;
 HEAP32[EMTSTACKTOP >> 2] = pc;
 sp = EMTSTACKTOP + 8 | 0;
 assert(HEAPU8[pc >> 0] >>> 0 == 140 | 0);
 lx = HEAPU16[pc + 2 >> 1] | 0;
 EMTSTACKTOP = EMTSTACKTOP + (lx + 1 << 3) | 0;
 assert((EMTSTACKTOP | 0) <= (EMT_STACK_MAX | 0) | 0);
 if ((asyncState | 0) != 2) {} else {
  pc = (HEAP32[sp - 4 >> 2] | 0) - 8 | 0;
 }
 pc = pc + 4 | 0;
 while (1) {
  pc = pc + 4 | 0;
  inst = HEAP32[pc >> 2] | 0;
  lx = inst >> 8 & 255;
  ly = inst >> 16 & 255;
  lz = inst >>> 24;
  switch (inst & 255) {
  case 0:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 1:
   HEAP32[sp + (lx << 3) >> 2] = inst >> 16;
   break;
  case 2:
   pc = pc + 4 | 0;
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[pc >> 2] | 0;
   break;
  case 3:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 4:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) - (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 5:
   HEAP32[sp + (lx << 3) >> 2] = Math_imul(HEAP32[sp + (ly << 3) >> 2] | 0, HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 6:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) / (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 7:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) / (HEAP32[sp + (lz << 3) >> 2] >>> 0) >>> 0;
   break;
  case 9:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) % (HEAP32[sp + (lz << 3) >> 2] >>> 0) >>> 0;
   break;
  case 12:
   HEAP32[sp + (lx << 3) >> 2] = !(HEAP32[sp + (ly << 3) >> 2] | 0);
   break;
  case 13:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 14:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 15:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 16:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] >>> 0 < HEAP32[sp + (lz << 3) >> 2] >>> 0 | 0;
   break;
  case 17:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) <= (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 18:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] >>> 0 <= HEAP32[sp + (lz << 3) >> 2] >>> 0 | 0;
   break;
  case 19:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) & (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 20:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0 | (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 21:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) ^ (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 22:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) << (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 24:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) >>> (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 25:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) | 0;
   break;
  case 26:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) - (inst >> 24) | 0;
   break;
  case 27:
   HEAP32[sp + (lx << 3) >> 2] = Math_imul(HEAP32[sp + (ly << 3) >> 2] | 0, inst >> 24) | 0;
   break;
  case 28:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) / (inst >> 24) | 0;
   break;
  case 29:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) / (lz >>> 0) >>> 0;
   break;
  case 30:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) % (inst >> 24) | 0;
   break;
  case 31:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) % (lz >>> 0) >>> 0;
   break;
  case 32:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) == inst >> 24 | 0;
   break;
  case 33:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) != inst >> 24 | 0;
   break;
  case 34:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) < inst >> 24 | 0;
   break;
  case 35:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] >>> 0 < lz >>> 0 | 0;
   break;
  case 36:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) <= inst >> 24 | 0;
   break;
  case 37:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] >>> 0 <= lz >>> 0 | 0;
   break;
  case 38:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) & inst >> 24;
   break;
  case 39:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0 | inst >> 24;
   break;
  case 40:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) ^ inst >> 24;
   break;
  case 41:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) << lz;
   break;
  case 42:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) >> lz;
   break;
  case 43:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) >>> lz;
   break;
  case 45:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 46:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 47:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 48:
   if (HEAP32[sp + (ly << 3) >> 2] >>> 0 < HEAP32[sp + (lz << 3) >> 2] >>> 0) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 49:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) <= (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 50:
   if (HEAP32[sp + (ly << 3) >> 2] >>> 0 <= HEAP32[sp + (lz << 3) >> 2] >>> 0) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 52:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 53:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 54:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 55:
   if (HEAP32[sp + (ly << 3) >> 2] >>> 0 < HEAP32[sp + (lz << 3) >> 2] >>> 0) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 58:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 59:
   HEAPF64[sp + (lx << 3) >> 3] = +(inst >> 16);
   break;
  case 60:
   pc = pc + 4 | 0;
   HEAPF64[sp + (lx << 3) >> 3] = +(HEAP32[pc >> 2] | 0);
   break;
  case 61:
   pc = pc + 4 | 0;
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF32[pc >> 2];
   break;
  case 62:
   HEAP32[tempDoublePtr >> 2] = HEAP32[pc + 4 >> 2];
   HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[pc + 8 >> 2];
   pc = pc + 8 | 0;
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[tempDoublePtr >> 3];
   break;
  case 63:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] + +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 64:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] - +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 65:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] * +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 66:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] / +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 68:
   HEAPF64[sp + (lx << 3) >> 3] = -+HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 69:
   HEAP32[sp + (lx << 3) >> 2] = +HEAPF64[sp + (ly << 3) >> 3] == +HEAPF64[sp + (lz << 3) >> 3] | 0;
   break;
  case 70:
   HEAP32[sp + (lx << 3) >> 2] = +HEAPF64[sp + (ly << 3) >> 3] != +HEAPF64[sp + (lz << 3) >> 3] | 0;
   break;
  case 71:
   HEAP32[sp + (lx << 3) >> 2] = +HEAPF64[sp + (ly << 3) >> 3] < +HEAPF64[sp + (lz << 3) >> 3] | 0;
   break;
  case 72:
   HEAP32[sp + (lx << 3) >> 2] = +HEAPF64[sp + (ly << 3) >> 3] <= +HEAPF64[sp + (lz << 3) >> 3] | 0;
   break;
  case 73:
   HEAP32[sp + (lx << 3) >> 2] = +HEAPF64[sp + (ly << 3) >> 3] > +HEAPF64[sp + (lz << 3) >> 3] | 0;
   break;
  case 74:
   HEAP32[sp + (lx << 3) >> 2] = +HEAPF64[sp + (ly << 3) >> 3] >= +HEAPF64[sp + (lz << 3) >> 3] | 0;
   break;
  case 75:
   HEAP32[sp + (lx << 3) >> 2] = ~~+HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 76:
   HEAPF64[sp + (lx << 3) >> 3] = +(HEAP32[sp + (ly << 3) >> 2] | 0);
   break;
  case 77:
   HEAPF64[sp + (lx << 3) >> 3] = +(HEAP32[sp + (ly << 3) >> 2] >>> 0);
   break;
  case 78:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[HEAP32[sp + (ly << 3) >> 2] >> 0];
   break;
  case 80:
   HEAP32[sp + (lx << 3) >> 2] = HEAP16[HEAP32[sp + (ly << 3) >> 2] >> 1];
   break;
  case 82:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[HEAP32[sp + (ly << 3) >> 2] >> 2];
   break;
  case 83:
   HEAP8[HEAP32[sp + (lx << 3) >> 2] >> 0] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 84:
   HEAP16[HEAP32[sp + (lx << 3) >> 2] >> 1] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 85:
   HEAP32[HEAP32[sp + (lx << 3) >> 2] >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 86:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[HEAP32[sp + (ly << 3) >> 2] >> 3];
   break;
  case 87:
   HEAPF64[HEAP32[sp + (lx << 3) >> 2] >> 3] = +HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 88:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF32[HEAP32[sp + (ly << 3) >> 2] >> 2];
   break;
  case 89:
   HEAPF32[HEAP32[sp + (lx << 3) >> 2] >> 2] = +HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 90:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 0];
   break;
  case 94:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 2];
   break;
  case 95:
   HEAP8[(HEAP32[sp + (lx << 3) >> 2] | 0) + (HEAP32[sp + (ly << 3) >> 2] | 0) >> 0] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 97:
   HEAP32[(HEAP32[sp + (lx << 3) >> 2] | 0) + (HEAP32[sp + (ly << 3) >> 2] | 0) >> 2] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 100:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF32[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 2];
   break;
  case 101:
   HEAPF32[(HEAP32[sp + (lx << 3) >> 2] | 0) + (HEAP32[sp + (ly << 3) >> 2] | 0) >> 2] = +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 102:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 0];
   break;
  case 106:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 2];
   break;
  case 107:
   HEAP8[(HEAP32[sp + (lx << 3) >> 2] | 0) + (ly << 24 >> 24) >> 0] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 109:
   HEAP32[(HEAP32[sp + (lx << 3) >> 2] | 0) + (ly << 24 >> 24) >> 2] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 110:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 3];
   break;
  case 111:
   HEAPF64[(HEAP32[sp + (lx << 3) >> 2] | 0) + (ly << 24 >> 24) >> 3] = +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 112:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF32[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 2];
   break;
  case 113:
   HEAPF32[(HEAP32[sp + (lx << 3) >> 2] | 0) + (ly << 24 >> 24) >> 2] = +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 114:
   HEAP8[HEAP32[sp + (lx << 3) >> 2] >> 0] = HEAP8[HEAP32[sp + (ly << 3) >> 2] >> 0] | 0;
   break;
  case 119:
   pc = pc + (inst >> 16 << 2) | 0;
   pc = pc - 4 | 0;
   continue;
   break;
  case 120:
   if (HEAP32[sp + (lx << 3) >> 2] | 0) {
    pc = pc + (inst >> 16 << 2) | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 121:
   if (!(HEAP32[sp + (lx << 3) >> 2] | 0)) {
    pc = pc + (inst >> 16 << 2) | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 125:
   pc = pc + 4 | 0;
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0 ? HEAP32[sp + (lz << 3) >> 2] | 0 : HEAP32[sp + ((HEAPU8[pc >> 0] | 0) << 3) >> 2] | 0;
   break;
  case 126:
   pc = pc + 4 | 0;
   HEAPF64[sp + (lx << 3) >> 3] = HEAP32[sp + (ly << 3) >> 2] | 0 ? +HEAPF64[sp + (lz << 3) >> 3] : +HEAPF64[sp + ((HEAPU8[pc >> 0] | 0) << 3) >> 3];
   break;
  case 127:
   HEAP32[sp + (lx << 3) >> 2] = tempDoublePtr;
   break;
  case 128:
   HEAP32[sp + (lx << 3) >> 2] = tempRet0;
   break;
  case 129:
   tempRet0 = HEAP32[sp + (lx << 3) >> 2] | 0;
   break;
  case 130:
   switch (ly | 0) {
   case 0:
    {
     HEAP32[sp + (lx << 3) >> 2] = STACK_MAX;
     continue;
    }
   case 1:
    {
     HEAP32[sp + (lx << 3) >> 2] = cttz_i8;
     continue;
    }
   default:
    assert(0);
   }
   break;
  case 132:
   switch (inst >> 8 & 255) {
   case 0:
    {
     STACK_MAX = HEAP32[sp + (lz << 3) >> 2] | 0;
     continue;
    }
   case 1:
    {
     cttz_i8 = HEAP32[sp + (lz << 3) >> 2] | 0;
     continue;
    }
   default:
    assert(0);
   }
   break;
  case 134:
   lz = HEAPU8[(HEAP32[pc + 4 >> 2] | 0) + 1 | 0] | 0;
   ly = 0;
   assert((EMTSTACKTOP + 8 | 0) <= (EMT_STACK_MAX | 0) | 0);
   if ((asyncState | 0) != 2) {
    while ((ly | 0) < (lz | 0)) {
     HEAP32[EMTSTACKTOP + (ly << 3) + 8 >> 2] = HEAP32[sp + (HEAPU8[pc + 8 + ly >> 0] << 3) >> 2] | 0;
     HEAP32[EMTSTACKTOP + (ly << 3) + 12 >> 2] = HEAP32[sp + (HEAPU8[pc + 8 + ly >> 0] << 3) + 4 >> 2] | 0;
     ly = ly + 1 | 0;
    }
   }
   HEAP32[sp - 4 >> 2] = pc;
   emterpret(HEAP32[pc + 4 >> 2] | 0);
   if ((asyncState | 0) == 1) {
    EMTSTACKTOP = sp - 8 | 0;
    return;
   }
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[EMTSTACKTOP >> 2] | 0;
   HEAP32[sp + (lx << 3) + 4 >> 2] = HEAP32[EMTSTACKTOP + 4 >> 2] | 0;
   pc = pc + (4 + lz + 3 >> 2 << 2) | 0;
   break;
  case 135:
   switch (inst >>> 16 | 0) {
   case 0:
    {
     HEAP32[sp - 4 >> 2] = pc;
     abort();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 1:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _bitshift64Shl(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 2:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ld = +Math_abs(+HEAPF64[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 3]);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAPF64[sp + (lx << 3) >> 3] = ld;
     pc = pc + 4 | 0;
     continue;
    }
   case 3:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _bitshift64Lshr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 4:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _strlen(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 5:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = FUNCTION_TABLE_iiii[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 255](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 6:
    {
     HEAP32[sp - 4 >> 2] = pc;
     FUNCTION_TABLE_viiii[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 127](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 7:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _pthread_mutex_lock(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 8:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _pthread_mutex_unlock(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 9:
    {
     HEAP32[sp - 4 >> 2] = pc;
     FUNCTION_TABLE_vi[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 255](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 10:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glEnable(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 11:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glStencilFunc(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 12:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glStencilOp(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 13:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glStencilMask(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 14:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glDepthMask(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 15:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glClear(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 16:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glColorMask(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 17:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glDrawArrays(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 18:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glDisable(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 19:
    {
     HEAP32[sp - 4 >> 2] = pc;
     FUNCTION_TABLE_viii[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 63](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 20:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = Math_clz32(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 21:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _emscripten_wget_data(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 22:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _free(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 23:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _emscripten_asm_const_0(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 24:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ld = +Math_tan(+HEAPF64[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 3]);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAPF64[sp + (lx << 3) >> 3] = ld;
     pc = pc + 4 | 0;
     continue;
    }
   case 25:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_asm_const_5(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, +HEAPF64[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 3], +HEAPF64[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 3], +HEAPF64[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 3], +HEAPF64[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 3]) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 8 | 0;
     continue;
    }
   case 26:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_asm_const_1(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 27:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_asm_const_2(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 28:
    {
     HEAP32[sp - 4 >> 2] = pc;
     FUNCTION_TABLE_vii[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 31](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 29:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall146(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 30:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _pthread_cleanup_push(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 31:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _pthread_cleanup_pop(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 32:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _malloc(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 33:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall221(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 34:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall54(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 35:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ___lock(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 36:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ___unlock(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 37:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_asm_const_5(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 8 | 0;
     continue;
    }
   case 38:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ld = +Math_floor(+HEAPF64[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 3]);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAPF64[sp + (lx << 3) >> 3] = ld;
     pc = pc + 4 | 0;
     continue;
    }
   case 39:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ld = +Math_min(+HEAPF64[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 3], +HEAPF64[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 3]);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAPF64[sp + (lx << 3) >> 3] = ld;
     pc = pc + 4 | 0;
     continue;
    }
   case 40:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ld = +Math_ceil(+HEAPF64[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 3]);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAPF64[sp + (lx << 3) >> 3] = ld;
     pc = pc + 4 | 0;
     continue;
    }
   case 41:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUniform1fv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 42:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUniform2fv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 43:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUniform3fv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 44:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUniform4fv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 45:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUniform1iv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 46:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUniform2iv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 47:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUniform3iv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 48:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUniform4iv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 49:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUniformMatrix2fv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 50:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUniformMatrix3fv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 51:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUniformMatrix4fv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 52:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _glGetAttribLocation(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 53:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glEnableVertexAttribArray(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 54:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glVertexAttribPointer(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 55:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _glCreateShader(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 56:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glShaderSource(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 57:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glCompileShader(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 58:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glGetShaderiv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 59:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glGetShaderInfoLog(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 60:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _glCreateProgram() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 61:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glAttachShader(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 62:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glLinkProgram(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 63:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glGetProgramiv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 64:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glDeleteShader(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 65:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glGetProgramInfoLog(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 66:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall145(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 67:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ld = +Math_sqrt(+HEAPF64[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 3]);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAPF64[sp + (lx << 3) >> 3] = ld;
     pc = pc + 4 | 0;
     continue;
    }
   case 68:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glGenFramebuffers(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 69:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glBindFramebuffer(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 70:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glGenRenderbuffers(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 71:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glBindRenderbuffer(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 72:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glRenderbufferStorage(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 73:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glFramebufferRenderbuffer(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 74:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glFramebufferTexture2D(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 75:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _glCheckFramebufferStatus(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 76:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _memcpy(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 77:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glGenTextures(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 78:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glActiveTexture(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 79:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glBindTexture(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 80:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glTexImage2D(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 10 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 11 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 12 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 12 | 0;
     continue;
    }
   case 81:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glTexParameteri(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 82:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glViewport(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 83:
    {
     HEAP32[sp - 4 >> 2] = pc;
     FUNCTION_TABLE_vid[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 127](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, +HEAPF64[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 3]);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 84:
    {
     HEAP32[sp - 4 >> 2] = pc;
     FUNCTION_TABLE_vidi[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 0](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, +HEAPF64[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 3], HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 85:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ld = +Math_sin(+HEAPF64[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 3]);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAPF64[sp + (lx << 3) >> 3] = ld;
     pc = pc + 4 | 0;
     continue;
    }
   case 86:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ld = +Math_cos(+HEAPF64[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 3]);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAPF64[sp + (lx << 3) >> 3] = ld;
     pc = pc + 4 | 0;
     continue;
    }
   case 87:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_asm_const_4(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 8 | 0;
     continue;
    }
   case 88:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_asm_const_3(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 89:
    {
     HEAP32[sp - 4 >> 2] = pc;
     ld = +Math_pow(+HEAPF64[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 3], +HEAPF64[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 3]);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAPF64[sp + (lx << 3) >> 3] = ld;
     pc = pc + 4 | 0;
     continue;
    }
   case 90:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _glfwInit() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 91:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _glfwOpenWindow(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 10 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 11 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 12 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 12 | 0;
     continue;
    }
   case 92:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_set_mousedown_callback(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 93:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_set_mouseup_callback(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 94:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_set_mousemove_callback(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 95:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_set_mouseout_callback(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 96:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_set_mouseleave_callback(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 97:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_set_touchstart_callback(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 98:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_set_touchend_callback(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 99:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_set_touchmove_callback(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 100:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_set_touchcancel_callback(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 101:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _emscripten_sleep(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 102:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_asm_const_4(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, +HEAPF64[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 3], +HEAPF64[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 3], +HEAPF64[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 3]) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 8 | 0;
     continue;
    }
   case 103:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _memset(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 104:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glDeleteProgram(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 105:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glfwSwapBuffers();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 106:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = FUNCTION_TABLE_ii[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 3](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 107:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall5(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 108:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall6(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 109:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glBufferData(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 110:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glDepthFunc(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 111:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glClearColor(+HEAPF64[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 3], +HEAPF64[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 3], +HEAPF64[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 3], +HEAPF64[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 3]);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 112:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glDeleteVertexArrays(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 113:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall140(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 114:
    {
     HEAP32[sp - 4 >> 2] = pc;
     FUNCTION_TABLE_v[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 127]();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 115:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glGenBuffers(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 116:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glBlendFunc(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 117:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glDeleteTextures(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 118:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glBindBuffer(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 119:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_asm_const_3(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, +HEAPF64[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 3], +HEAPF64[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 3]) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 120:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _sched_yield() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 121:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _glGetUniformLocation(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 122:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = FUNCTION_TABLE_iii[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 7](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 123:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _emscripten_set_main_loop(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 124:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glDeleteBuffers(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 125:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _emscripten_asm_const_2(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, +HEAPF64[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 3]) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 126:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glBindVertexArray(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 127:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall39(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 128:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = ___syscall195(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 129:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glDeleteFramebuffers(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 130:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glDeleteRenderbuffers(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 131:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glUseProgram(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 132:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glGenVertexArrays(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 133:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glGetIntegerv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 134:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _pthread_self() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 135:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _glfwTerminate();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 136:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _pthread_mutex_init(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 137:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _pthread_mutex_destroy(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 138:
    {
     HEAP32[sp - 4 >> 2] = pc;
     nullFunc_viiii(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 139:
    {
     HEAP32[sp - 4 >> 2] = pc;
     nullFunc_iiii(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 140:
    {
     HEAP32[sp - 4 >> 2] = pc;
     nullFunc_viii(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 141:
    {
     HEAP32[sp - 4 >> 2] = pc;
     nullFunc_vidi(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 142:
    {
     HEAP32[sp - 4 >> 2] = pc;
     nullFunc_iii(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 143:
    {
     HEAP32[sp - 4 >> 2] = pc;
     nullFunc_vii(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 144:
    {
     HEAP32[sp - 4 >> 2] = pc;
     nullFunc_vid(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 145:
    {
     HEAP32[sp - 4 >> 2] = pc;
     nullFunc_ii(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 146:
    {
     HEAP32[sp - 4 >> 2] = pc;
     nullFunc_vi(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 147:
    {
     HEAP32[sp - 4 >> 2] = pc;
     nullFunc_v(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   default:
    assert(0);
   }
   break;
  case 136:
   HEAP32[sp + (lx << 3) >> 2] = STACKTOP;
   break;
  case 137:
   STACKTOP = HEAP32[sp + (lx << 3) >> 2] | 0;
   break;
  case 138:
   lz = HEAP32[sp + (lz << 3) >> 2] | 0;
   lx = (HEAP32[sp + (lx << 3) >> 2] | 0) - (HEAP32[sp + (ly << 3) >> 2] | 0) >>> 0;
   if (lx >>> 0 >= lz >>> 0) {
    pc = pc + (lz << 2) | 0;
    continue;
   }
   pc = HEAP32[pc + 4 + (lx << 2) >> 2] | 0;
   pc = pc - 4 | 0;
   continue;
   break;
  case 139:
   EMTSTACKTOP = sp - 8 | 0;
   HEAP32[EMTSTACKTOP >> 2] = HEAP32[sp + (lx << 3) >> 2] | 0;
   HEAP32[EMTSTACKTOP + 4 >> 2] = HEAP32[sp + (lx << 3) + 4 >> 2] | 0;
   return;
   break;
  case 141:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (inst >>> 16 << 3) >> 2] | 0;
   break;
  case 142:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (inst >>> 16 << 3) >> 3];
   break;
  case 143:
   HEAP32[sp + (inst >>> 16 << 3) >> 2] = HEAP32[sp + (lx << 3) >> 2] | 0;
   break;
  case 144:
   HEAPF64[sp + (inst >>> 16 << 3) >> 3] = +HEAPF64[sp + (lx << 3) >> 3];
   break;
  default:
   assert(0);
  }
 }
 assert(0);
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($mem | 0) == (0 | 0);
 asyncState ? abort(-12) | 0 : 0;
 if ($0) {
  return;
 }
 $1 = $mem + -8 | 0;
 $2 = HEAP32[1908 >> 2] | 0;
 $3 = $1 >>> 0 < $2 >>> 0;
 if ($3) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $4 = $mem + -4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 & 3;
 $7 = ($6 | 0) == 1;
 if ($7) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $8 = $5 & -8;
 $$sum = $8 + -8 | 0;
 $9 = $mem + $$sum | 0;
 $10 = $5 & 1;
 $11 = ($10 | 0) == 0;
 do {
  if ($11) {
   $12 = HEAP32[$1 >> 2] | 0;
   $13 = ($6 | 0) == 0;
   if ($13) {
    return;
   }
   $$sum2 = -8 - $12 | 0;
   $14 = $mem + $$sum2 | 0;
   $15 = $12 + $8 | 0;
   $16 = $14 >>> 0 < $2 >>> 0;
   if ($16) {
    _abort(), asyncState ? abort(-12) | 0 : 0;
   }
   $17 = HEAP32[1912 >> 2] | 0;
   $18 = ($14 | 0) == ($17 | 0);
   if ($18) {
    $$sum3 = $8 + -4 | 0;
    $103 = $mem + $$sum3 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = $104 & 3;
    $106 = ($105 | 0) == 3;
    if (!$106) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    HEAP32[1900 >> 2] = $15;
    $107 = $104 & -2;
    HEAP32[$103 >> 2] = $107;
    $108 = $15 | 1;
    $$sum20 = $$sum2 + 4 | 0;
    $109 = $mem + $$sum20 | 0;
    HEAP32[$109 >> 2] = $108;
    HEAP32[$9 >> 2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = $12 >>> 0 < 256;
   if ($20) {
    $$sum30 = $$sum2 + 8 | 0;
    $21 = $mem + $$sum30 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $$sum31 = $$sum2 + 12 | 0;
    $23 = $mem + $$sum31 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $19 << 1;
    $26 = 1932 + ($25 << 2) | 0;
    $27 = ($22 | 0) == ($26 | 0);
    if (!$27) {
     $28 = $22 >>> 0 < $2 >>> 0;
     if ($28) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $29 = $22 + 12 | 0;
     $30 = HEAP32[$29 >> 2] | 0;
     $31 = ($30 | 0) == ($14 | 0);
     if (!$31) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $32 = ($24 | 0) == ($22 | 0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[1892 >> 2] | 0;
     $36 = $35 & $34;
     HEAP32[1892 >> 2] = $36;
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    $37 = ($24 | 0) == ($26 | 0);
    if ($37) {
     $$pre60 = $24 + 8 | 0;
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = $24 >>> 0 < $2 >>> 0;
     if ($38) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $39 = $24 + 8 | 0;
     $40 = HEAP32[$39 >> 2] | 0;
     $41 = ($40 | 0) == ($14 | 0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $42 = $22 + 12 | 0;
    HEAP32[$42 >> 2] = $24;
    HEAP32[$$pre$phi61Z2D >> 2] = $22;
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   $$sum22 = $$sum2 + 24 | 0;
   $43 = $mem + $$sum22 | 0;
   $44 = HEAP32[$43 >> 2] | 0;
   $$sum23 = $$sum2 + 12 | 0;
   $45 = $mem + $$sum23 | 0;
   $46 = HEAP32[$45 >> 2] | 0;
   $47 = ($46 | 0) == ($14 | 0);
   do {
    if ($47) {
     $$sum25 = $$sum2 + 20 | 0;
     $57 = $mem + $$sum25 | 0;
     $58 = HEAP32[$57 >> 2] | 0;
     $59 = ($58 | 0) == (0 | 0);
     if ($59) {
      $$sum24 = $$sum2 + 16 | 0;
      $60 = $mem + $$sum24 | 0;
      $61 = HEAP32[$60 >> 2] | 0;
      $62 = ($61 | 0) == (0 | 0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;
       $RP$0 = $60;
      }
     } else {
      $R$0 = $58;
      $RP$0 = $57;
     }
     while (1) {
      $63 = $R$0 + 20 | 0;
      $64 = HEAP32[$63 >> 2] | 0;
      $65 = ($64 | 0) == (0 | 0);
      if (!$65) {
       $R$0 = $64;
       $RP$0 = $63;
       continue;
      }
      $66 = $R$0 + 16 | 0;
      $67 = HEAP32[$66 >> 2] | 0;
      $68 = ($67 | 0) == (0 | 0);
      if ($68) {
       $R$0$lcssa = $R$0;
       $RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;
       $RP$0 = $66;
      }
     }
     $69 = $RP$0$lcssa >>> 0 < $2 >>> 0;
     if ($69) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$RP$0$lcssa >> 2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = $$sum2 + 8 | 0;
     $48 = $mem + $$sum29 | 0;
     $49 = HEAP32[$48 >> 2] | 0;
     $50 = $49 >>> 0 < $2 >>> 0;
     if ($50) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $51 = $49 + 12 | 0;
     $52 = HEAP32[$51 >> 2] | 0;
     $53 = ($52 | 0) == ($14 | 0);
     if (!$53) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $54 = $46 + 8 | 0;
     $55 = HEAP32[$54 >> 2] | 0;
     $56 = ($55 | 0) == ($14 | 0);
     if ($56) {
      HEAP32[$51 >> 2] = $46;
      HEAP32[$54 >> 2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
   } while (0);
   $70 = ($44 | 0) == (0 | 0);
   if ($70) {
    $p$0 = $14;
    $psize$0 = $15;
   } else {
    $$sum26 = $$sum2 + 28 | 0;
    $71 = $mem + $$sum26 | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = 2196 + ($72 << 2) | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = ($14 | 0) == ($74 | 0);
    if ($75) {
     HEAP32[$73 >> 2] = $R$1;
     $cond = ($R$1 | 0) == (0 | 0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[1896 >> 2] | 0;
      $79 = $78 & $77;
      HEAP32[1896 >> 2] = $79;
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[1908 >> 2] | 0;
     $81 = $44 >>> 0 < $80 >>> 0;
     if ($81) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $82 = $44 + 16 | 0;
     $83 = HEAP32[$82 >> 2] | 0;
     $84 = ($83 | 0) == ($14 | 0);
     if ($84) {
      HEAP32[$82 >> 2] = $R$1;
     } else {
      $85 = $44 + 20 | 0;
      HEAP32[$85 >> 2] = $R$1;
     }
     $86 = ($R$1 | 0) == (0 | 0);
     if ($86) {
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[1908 >> 2] | 0;
    $88 = $R$1 >>> 0 < $87 >>> 0;
    if ($88) {
     _abort(), asyncState ? abort(-12) | 0 : 0;
    }
    $89 = $R$1 + 24 | 0;
    HEAP32[$89 >> 2] = $44;
    $$sum27 = $$sum2 + 16 | 0;
    $90 = $mem + $$sum27 | 0;
    $91 = HEAP32[$90 >> 2] | 0;
    $92 = ($91 | 0) == (0 | 0);
    do {
     if (!$92) {
      $93 = $91 >>> 0 < $87 >>> 0;
      if ($93) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      } else {
       $94 = $R$1 + 16 | 0;
       HEAP32[$94 >> 2] = $91;
       $95 = $91 + 24 | 0;
       HEAP32[$95 >> 2] = $R$1;
       break;
      }
     }
    } while (0);
    $$sum28 = $$sum2 + 20 | 0;
    $96 = $mem + $$sum28 | 0;
    $97 = HEAP32[$96 >> 2] | 0;
    $98 = ($97 | 0) == (0 | 0);
    if ($98) {
     $p$0 = $14;
     $psize$0 = $15;
    } else {
     $99 = HEAP32[1908 >> 2] | 0;
     $100 = $97 >>> 0 < $99 >>> 0;
     if ($100) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     } else {
      $101 = $R$1 + 20 | 0;
      HEAP32[$101 >> 2] = $97;
      $102 = $97 + 24 | 0;
      HEAP32[$102 >> 2] = $R$1;
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;
   $psize$0 = $8;
  }
 } while (0);
 $110 = $p$0 >>> 0 < $9 >>> 0;
 if (!$110) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $$sum19 = $8 + -4 | 0;
 $111 = $mem + $$sum19 | 0;
 $112 = HEAP32[$111 >> 2] | 0;
 $113 = $112 & 1;
 $114 = ($113 | 0) == 0;
 if ($114) {
  _abort(), asyncState ? abort(-12) | 0 : 0;
 }
 $115 = $112 & 2;
 $116 = ($115 | 0) == 0;
 if ($116) {
  $117 = HEAP32[1916 >> 2] | 0;
  $118 = ($9 | 0) == ($117 | 0);
  if ($118) {
   $119 = HEAP32[1904 >> 2] | 0;
   $120 = $119 + $psize$0 | 0;
   HEAP32[1904 >> 2] = $120;
   HEAP32[1916 >> 2] = $p$0;
   $121 = $120 | 1;
   $122 = $p$0 + 4 | 0;
   HEAP32[$122 >> 2] = $121;
   $123 = HEAP32[1912 >> 2] | 0;
   $124 = ($p$0 | 0) == ($123 | 0);
   if (!$124) {
    return;
   }
   HEAP32[1912 >> 2] = 0;
   HEAP32[1900 >> 2] = 0;
   return;
  }
  $125 = HEAP32[1912 >> 2] | 0;
  $126 = ($9 | 0) == ($125 | 0);
  if ($126) {
   $127 = HEAP32[1900 >> 2] | 0;
   $128 = $127 + $psize$0 | 0;
   HEAP32[1900 >> 2] = $128;
   HEAP32[1912 >> 2] = $p$0;
   $129 = $128 | 1;
   $130 = $p$0 + 4 | 0;
   HEAP32[$130 >> 2] = $129;
   $131 = $p$0 + $128 | 0;
   HEAP32[$131 >> 2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = $132 + $psize$0 | 0;
  $134 = $112 >>> 3;
  $135 = $112 >>> 0 < 256;
  do {
   if ($135) {
    $136 = $mem + $8 | 0;
    $137 = HEAP32[$136 >> 2] | 0;
    $$sum1718 = $8 | 4;
    $138 = $mem + $$sum1718 | 0;
    $139 = HEAP32[$138 >> 2] | 0;
    $140 = $134 << 1;
    $141 = 1932 + ($140 << 2) | 0;
    $142 = ($137 | 0) == ($141 | 0);
    if (!$142) {
     $143 = HEAP32[1908 >> 2] | 0;
     $144 = $137 >>> 0 < $143 >>> 0;
     if ($144) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $145 = $137 + 12 | 0;
     $146 = HEAP32[$145 >> 2] | 0;
     $147 = ($146 | 0) == ($9 | 0);
     if (!$147) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $148 = ($139 | 0) == ($137 | 0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[1892 >> 2] | 0;
     $152 = $151 & $150;
     HEAP32[1892 >> 2] = $152;
     break;
    }
    $153 = ($139 | 0) == ($141 | 0);
    if ($153) {
     $$pre58 = $139 + 8 | 0;
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[1908 >> 2] | 0;
     $155 = $139 >>> 0 < $154 >>> 0;
     if ($155) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $156 = $139 + 8 | 0;
     $157 = HEAP32[$156 >> 2] | 0;
     $158 = ($157 | 0) == ($9 | 0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
    }
    $159 = $137 + 12 | 0;
    HEAP32[$159 >> 2] = $139;
    HEAP32[$$pre$phi59Z2D >> 2] = $137;
   } else {
    $$sum5 = $8 + 16 | 0;
    $160 = $mem + $$sum5 | 0;
    $161 = HEAP32[$160 >> 2] | 0;
    $$sum67 = $8 | 4;
    $162 = $mem + $$sum67 | 0;
    $163 = HEAP32[$162 >> 2] | 0;
    $164 = ($163 | 0) == ($9 | 0);
    do {
     if ($164) {
      $$sum9 = $8 + 12 | 0;
      $175 = $mem + $$sum9 | 0;
      $176 = HEAP32[$175 >> 2] | 0;
      $177 = ($176 | 0) == (0 | 0);
      if ($177) {
       $$sum8 = $8 + 8 | 0;
       $178 = $mem + $$sum8 | 0;
       $179 = HEAP32[$178 >> 2] | 0;
       $180 = ($179 | 0) == (0 | 0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;
        $RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;
       $RP9$0 = $175;
      }
      while (1) {
       $181 = $R7$0 + 20 | 0;
       $182 = HEAP32[$181 >> 2] | 0;
       $183 = ($182 | 0) == (0 | 0);
       if (!$183) {
        $R7$0 = $182;
        $RP9$0 = $181;
        continue;
       }
       $184 = $R7$0 + 16 | 0;
       $185 = HEAP32[$184 >> 2] | 0;
       $186 = ($185 | 0) == (0 | 0);
       if ($186) {
        $R7$0$lcssa = $R7$0;
        $RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;
        $RP9$0 = $184;
       }
      }
      $187 = HEAP32[1908 >> 2] | 0;
      $188 = $RP9$0$lcssa >>> 0 < $187 >>> 0;
      if ($188) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      } else {
       HEAP32[$RP9$0$lcssa >> 2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = $mem + $8 | 0;
      $166 = HEAP32[$165 >> 2] | 0;
      $167 = HEAP32[1908 >> 2] | 0;
      $168 = $166 >>> 0 < $167 >>> 0;
      if ($168) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
      $169 = $166 + 12 | 0;
      $170 = HEAP32[$169 >> 2] | 0;
      $171 = ($170 | 0) == ($9 | 0);
      if (!$171) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
      $172 = $163 + 8 | 0;
      $173 = HEAP32[$172 >> 2] | 0;
      $174 = ($173 | 0) == ($9 | 0);
      if ($174) {
       HEAP32[$169 >> 2] = $163;
       HEAP32[$172 >> 2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
     }
    } while (0);
    $189 = ($161 | 0) == (0 | 0);
    if (!$189) {
     $$sum12 = $8 + 20 | 0;
     $190 = $mem + $$sum12 | 0;
     $191 = HEAP32[$190 >> 2] | 0;
     $192 = 2196 + ($191 << 2) | 0;
     $193 = HEAP32[$192 >> 2] | 0;
     $194 = ($9 | 0) == ($193 | 0);
     if ($194) {
      HEAP32[$192 >> 2] = $R7$1;
      $cond47 = ($R7$1 | 0) == (0 | 0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[1896 >> 2] | 0;
       $198 = $197 & $196;
       HEAP32[1896 >> 2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[1908 >> 2] | 0;
      $200 = $161 >>> 0 < $199 >>> 0;
      if ($200) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      }
      $201 = $161 + 16 | 0;
      $202 = HEAP32[$201 >> 2] | 0;
      $203 = ($202 | 0) == ($9 | 0);
      if ($203) {
       HEAP32[$201 >> 2] = $R7$1;
      } else {
       $204 = $161 + 20 | 0;
       HEAP32[$204 >> 2] = $R7$1;
      }
      $205 = ($R7$1 | 0) == (0 | 0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[1908 >> 2] | 0;
     $207 = $R7$1 >>> 0 < $206 >>> 0;
     if ($207) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     }
     $208 = $R7$1 + 24 | 0;
     HEAP32[$208 >> 2] = $161;
     $$sum13 = $8 + 8 | 0;
     $209 = $mem + $$sum13 | 0;
     $210 = HEAP32[$209 >> 2] | 0;
     $211 = ($210 | 0) == (0 | 0);
     do {
      if (!$211) {
       $212 = $210 >>> 0 < $206 >>> 0;
       if ($212) {
        _abort(), asyncState ? abort(-12) | 0 : 0;
       } else {
        $213 = $R7$1 + 16 | 0;
        HEAP32[$213 >> 2] = $210;
        $214 = $210 + 24 | 0;
        HEAP32[$214 >> 2] = $R7$1;
        break;
       }
      }
     } while (0);
     $$sum14 = $8 + 12 | 0;
     $215 = $mem + $$sum14 | 0;
     $216 = HEAP32[$215 >> 2] | 0;
     $217 = ($216 | 0) == (0 | 0);
     if (!$217) {
      $218 = HEAP32[1908 >> 2] | 0;
      $219 = $216 >>> 0 < $218 >>> 0;
      if ($219) {
       _abort(), asyncState ? abort(-12) | 0 : 0;
      } else {
       $220 = $R7$1 + 20 | 0;
       HEAP32[$220 >> 2] = $216;
       $221 = $216 + 24 | 0;
       HEAP32[$221 >> 2] = $R7$1;
       break;
      }
     }
    }
   }
  } while (0);
  $222 = $133 | 1;
  $223 = $p$0 + 4 | 0;
  HEAP32[$223 >> 2] = $222;
  $224 = $p$0 + $133 | 0;
  HEAP32[$224 >> 2] = $133;
  $225 = HEAP32[1912 >> 2] | 0;
  $226 = ($p$0 | 0) == ($225 | 0);
  if ($226) {
   HEAP32[1900 >> 2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111 >> 2] = $227;
  $228 = $psize$0 | 1;
  $229 = $p$0 + 4 | 0;
  HEAP32[$229 >> 2] = $228;
  $230 = $p$0 + $psize$0 | 0;
  HEAP32[$230 >> 2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = $psize$1 >>> 0 < 256;
 if ($232) {
  $233 = $231 << 1;
  $234 = 1932 + ($233 << 2) | 0;
  $235 = HEAP32[1892 >> 2] | 0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237 | 0) == 0;
  if ($238) {
   $239 = $235 | $236;
   HEAP32[1892 >> 2] = $239;
   $$pre = $233 + 2 | 0;
   $$pre57 = 1932 + ($$pre << 2) | 0;
   $$pre$phiZ2D = $$pre57;
   $F16$0 = $234;
  } else {
   $$sum11 = $233 + 2 | 0;
   $240 = 1932 + ($$sum11 << 2) | 0;
   $241 = HEAP32[$240 >> 2] | 0;
   $242 = HEAP32[1908 >> 2] | 0;
   $243 = $241 >>> 0 < $242 >>> 0;
   if ($243) {
    _abort(), asyncState ? abort(-12) | 0 : 0;
   } else {
    $$pre$phiZ2D = $240;
    $F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0;
  $244 = $F16$0 + 12 | 0;
  HEAP32[$244 >> 2] = $p$0;
  $245 = $p$0 + 8 | 0;
  HEAP32[$245 >> 2] = $F16$0;
  $246 = $p$0 + 12 | 0;
  HEAP32[$246 >> 2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247 | 0) == 0;
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = $psize$1 >>> 0 > 16777215;
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = $247 + 1048320 | 0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = $253 + 520192 | 0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = $258 + 245760 | 0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = 14 - $262 | 0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = $263 + $265 | 0;
   $267 = $266 << 1;
   $268 = $266 + 7 | 0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = 2196 + ($I18$0 << 2) | 0;
 $273 = $p$0 + 28 | 0;
 HEAP32[$273 >> 2] = $I18$0;
 $274 = $p$0 + 16 | 0;
 $275 = $p$0 + 20 | 0;
 HEAP32[$275 >> 2] = 0;
 HEAP32[$274 >> 2] = 0;
 $276 = HEAP32[1896 >> 2] | 0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278 | 0) == 0;
 L199 : do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[1896 >> 2] = $280;
   HEAP32[$272 >> 2] = $p$0;
   $281 = $p$0 + 24 | 0;
   HEAP32[$281 >> 2] = $272;
   $282 = $p$0 + 12 | 0;
   HEAP32[$282 >> 2] = $p$0;
   $283 = $p$0 + 8 | 0;
   HEAP32[$283 >> 2] = $p$0;
  } else {
   $284 = HEAP32[$272 >> 2] | 0;
   $285 = $284 + 4 | 0;
   $286 = HEAP32[$285 >> 2] | 0;
   $287 = $286 & -8;
   $288 = ($287 | 0) == ($psize$1 | 0);
   L202 : do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0 | 0) == 31;
     $290 = $I18$0 >>> 1;
     $291 = 25 - $290 | 0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;
     $T$051 = $284;
     while (1) {
      $300 = $K19$052 >>> 31;
      $301 = ($T$051 + 16 | 0) + ($300 << 2) | 0;
      $296 = HEAP32[$301 >> 2] | 0;
      $302 = ($296 | 0) == (0 | 0);
      if ($302) {
       $$lcssa = $301;
       $T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = $296 + 4 | 0;
      $297 = HEAP32[$295 >> 2] | 0;
      $298 = $297 & -8;
      $299 = ($298 | 0) == ($psize$1 | 0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;
       $T$051 = $296;
      }
     }
     $303 = HEAP32[1908 >> 2] | 0;
     $304 = $$lcssa >>> 0 < $303 >>> 0;
     if ($304) {
      _abort(), asyncState ? abort(-12) | 0 : 0;
     } else {
      HEAP32[$$lcssa >> 2] = $p$0;
      $305 = $p$0 + 24 | 0;
      HEAP32[$305 >> 2] = $T$051$lcssa;
      $306 = $p$0 + 12 | 0;
      HEAP32[$306 >> 2] = $p$0;
      $307 = $p$0 + 8 | 0;
      HEAP32[$307 >> 2] = $p$0;
      break L199;
     }
    }
   } while (0);
   $308 = $T$0$lcssa + 8 | 0;
   $309 = HEAP32[$308 >> 2] | 0;
   $310 = HEAP32[1908 >> 2] | 0;
   $311 = $309 >>> 0 >= $310 >>> 0;
   $not$ = $T$0$lcssa >>> 0 >= $310 >>> 0;
   $312 = $311 & $not$;
   if ($312) {
    $313 = $309 + 12 | 0;
    HEAP32[$313 >> 2] = $p$0;
    HEAP32[$308 >> 2] = $p$0;
    $314 = $p$0 + 8 | 0;
    HEAP32[$314 >> 2] = $309;
    $315 = $p$0 + 12 | 0;
    HEAP32[$315 >> 2] = $T$0$lcssa;
    $316 = $p$0 + 24 | 0;
    HEAP32[$316 >> 2] = 0;
    break;
   } else {
    _abort(), asyncState ? abort(-12) | 0 : 0;
   }
  }
 } while (0);
 $317 = HEAP32[1924 >> 2] | 0;
 $318 = $317 + -1 | 0;
 HEAP32[1924 >> 2] = $318;
 $319 = ($318 | 0) == 0;
 if ($319) {
  $sp$0$in$i = 2348;
 } else {
  return;
 }
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  $320 = ($sp$0$i | 0) == (0 | 0);
  $321 = $sp$0$i + 8 | 0;
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[1924 >> 2] = -1;
 return;
}

function _strlen($s) {
 $s = $s | 0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1 | 0) == 0;
 L1 : do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;
   $21 = $0;
   while (1) {
    $3 = HEAP8[$$014 >> 0] | 0;
    $4 = $3 << 24 >> 24 == 0;
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = $$014 + 1 | 0;
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7 | 0) == 0;
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;
     $21 = $6;
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $$01$lcssa;
  while (1) {
   $9 = HEAP32[$w$0 >> 2] | 0;
   $10 = $9 + -16843009 | 0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13 | 0) == 0;
   $15 = $w$0 + 4 | 0;
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;
    $w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20 & 255;
  $17 = $16 << 24 >> 24 == 0;
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while (1) {
    $18 = $$pn15 + 1 | 0;
    $$pre = HEAP8[$18 >> 0] | 0;
    $19 = $$pre << 24 >> 24 == 0;
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = $$pn - $0 | 0;
 return $$0 | 0;
}

function runPostSets() {}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function _smart_native_on_extension_response($client, $sourceRoom, $cmd, $cmd_length, $params, $params_length) {
 $client = $client | 0;
 $sourceRoom = $sourceRoom | 0;
 $cmd = $cmd | 0;
 $cmd_length = $cmd_length | 0;
 $params = $params | 0;
 $params_length = $params_length | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $client;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $sourceRoom;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $cmd;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $cmd_length;
  HEAP32[EMTSTACKTOP + 40 >> 2] = $params;
  HEAP32[EMTSTACKTOP + 48 >> 2] = $params_length;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 313816 | 0);
}

function _smart_native_on_public_message($client, $message, $message_length, $send_name, $send_name_length) {
 $client = $client | 0;
 $message = $message | 0;
 $message_length = $message_length | 0;
 $send_name = $send_name | 0;
 $send_name_length = $send_name_length | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $client;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $message;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $message_length;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $send_name;
  HEAP32[EMTSTACKTOP + 40 >> 2] = $send_name_length;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 356812 | 0);
}

function _smart_native_on_join_room($client, $room_soi, $room_id, $room_name, $room_name_length) {
 $client = $client | 0;
 $room_soi = $room_soi | 0;
 $room_id = $room_id | 0;
 $room_name = $room_name | 0;
 $room_name_length = $room_name_length | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $client;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $room_soi;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $room_id;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $room_name;
  HEAP32[EMTSTACKTOP + 40 >> 2] = $room_name_length;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 285452 | 0);
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}

function _smart_native_on_login_error($client, $message, $message_length) {
 $client = $client | 0;
 $message = $message | 0;
 $message_length = $message_length | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $client;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $message;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $message_length;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 370744 | 0);
}

function _touch_cancel($eventType, $e, $userData) {
 $eventType = $eventType | 0;
 $e = $e | 0;
 $userData = $userData | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $eventType;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $userData;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 384232 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _mouse_cancel($eventType, $e, $userData) {
 $eventType = $eventType | 0;
 $e = $e | 0;
 $userData = $userData | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $eventType;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $userData;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 388176 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parse_common_intercept_horizontal($v, $e, $p, $parent) {
 $v = $v | 0;
 $e = $e | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 336116 | 0);
}

function _touch_move($eventType, $e, $userData) {
 $eventType = $eventType | 0;
 $e = $e | 0;
 $userData = $userData | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $eventType;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $userData;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 384828 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _touch_down($eventType, $e, $userData) {
 $eventType = $eventType | 0;
 $e = $e | 0;
 $userData = $userData | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $eventType;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $userData;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 384952 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _mouse_move($eventType, $e, $userData) {
 $eventType = $eventType | 0;
 $e = $e | 0;
 $userData = $userData | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $eventType;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $userData;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 388668 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _mouse_down($eventType, $e, $userData) {
 $eventType = $eventType | 0;
 $e = $e | 0;
 $userData = $userData | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $eventType;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $userData;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 388784 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parse_common_intercept_vertical($v, $e, $p, $parent) {
 $v = $v | 0;
 $e = $e | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 336352 | 0);
}

function _touch_up($eventType, $e, $userData) {
 $eventType = $eventType | 0;
 $e = $e | 0;
 $userData = $userData | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $eventType;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $userData;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 385240 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _mouse_up($eventType, $e, $userData) {
 $eventType = $eventType | 0;
 $e = $e | 0;
 $userData = $userData | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $eventType;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $userData;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 389148 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parse_common_touch_delegate($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 326680 | 0);
}

function _parse_common_padding_bottom($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 363540 | 0);
}

function _parse_common_padding_right($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 363724 | 0);
}

function _parse_common_margin_bottom($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 364092 | 0);
}

function _parse_common_padding_left($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 363908 | 0);
}

function _parse_common_margin_right($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 364464 | 0);
}

function _parse_common_padding_top($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 366568 | 0);
}

function _parse_common_margin_left($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 364648 | 0);
}

function _parse_common_rotation_z($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 367608 | 0);
}

function _parse_common_rotation_y($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 367788 | 0);
}

function _parse_common_rotation_x($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 368608 | 0);
}

function _parse_common_margin_top($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 367240 | 0);
}

function _parser_end_template($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 393556 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parse_common_anchor_y($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 376380 | 0);
}

function _parse_common_anchor_x($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 379160 | 0);
}

function _parse_common_visible($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 316992 | 0);
}

function _parser_controller($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 365332 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parse_common_height($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 298444 | 0);
}

function _parse_common_border($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 203392 | 0);
}

function _parser_textfield($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 354684 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parse_common_width($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 293072 | 0);
}

function _parse_common_touch($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 335036 | 0);
}

function _parse_common_scale($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 339836 | 0);
}

function _parse_common_round($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 307992 | 0);
}

function _parse_common_color($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 204940 | 0);
}

function _parse_common_alpha($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 382660 | 0);
}

function _parse_common_align($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 161828 | 0);
}

function _smart_native_on_login($client, $data, $data_length) {
 $client = $client | 0;
 $data = $data | 0;
 $data_length = $data_length | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $client;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $data;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $data_length;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 361980 | 0);
}

function _parser_textview($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 394976 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parser_template($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 343012 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parser_pageview($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 402440 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parser_listview($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 395080 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parse_common_type($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 296816 | 0);
}

function _parse_common_hash($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 276724 | 0);
}

function _parse_common_clip($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 373852 | 0);
}

function _parser_touch($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 284036 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parser_label($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 213188 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parser_image($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 319552 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parse_common_y($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 376932 | 0);
}

function _parse_common_x($v, $a, $p, $parent) {
 $v = $v | 0;
 $a = $a | 0;
 $p = $p | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $a;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 32 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 382920 | 0);
}

function _parser_view($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 402724 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _parser_link($e, $parser, $parent) {
 $e = $e | 0;
 $parser = $parser | 0;
 $parent = $parent | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $e;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $parser;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $parent;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 283596 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = a;
  HEAP32[EMTSTACKTOP + 16 >> 2] = b;
  HEAP32[EMTSTACKTOP + 24 >> 2] = c;
  HEAP32[EMTSTACKTOP + 32 >> 2] = d;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 421488 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = a;
  HEAP32[EMTSTACKTOP + 16 >> 2] = b;
  HEAP32[EMTSTACKTOP + 24 >> 2] = c;
  HEAP32[EMTSTACKTOP + 32 >> 2] = d;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 421668 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $off;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $whence;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 354512 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $buf;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $len;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 359644 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $buf;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $len;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 242804 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function ___stdio_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $buf;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $len;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 265692 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function b879(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422292 | 0);
}

function b878(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422316 | 0);
}

function b877(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422340 | 0);
}

function b876(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422364 | 0);
}

function b875(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422388 | 0);
}

function b874(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422412 | 0);
}

function b873(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422436 | 0);
}

function b872(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422460 | 0);
}

function b871(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422484 | 0);
}

function b870(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422508 | 0);
}

function b869(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422532 | 0);
}

function b868(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422556 | 0);
}

function b867(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422580 | 0);
}

function b866(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422604 | 0);
}

function b865(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422628 | 0);
}

function b864(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422652 | 0);
}

function b863(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422676 | 0);
}

function b862(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422700 | 0);
}

function b861(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422724 | 0);
}

function b860(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422748 | 0);
}

function b859(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422772 | 0);
}

function b858(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422796 | 0);
}

function b857(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422820 | 0);
}

function b856(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422844 | 0);
}

function b855(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422868 | 0);
}

function b854(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422892 | 0);
}

function b853(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422916 | 0);
}

function b852(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422940 | 0);
}

function b851(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422964 | 0);
}

function b850(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422988 | 0);
}

function b849(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423012 | 0);
}

function b848(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423036 | 0);
}

function b847(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423060 | 0);
}

function b846(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423084 | 0);
}

function b845(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423108 | 0);
}

function b844(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423132 | 0);
}

function b843(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423156 | 0);
}

function b842(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423180 | 0);
}

function b841(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423204 | 0);
}

function b840(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423228 | 0);
}

function b839(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423252 | 0);
}

function b838(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423276 | 0);
}

function b837(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423300 | 0);
}

function b836(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423324 | 0);
}

function b835(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423348 | 0);
}

function b834(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423372 | 0);
}

function b833(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423396 | 0);
}

function b832(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423420 | 0);
}

function b831(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423444 | 0);
}

function b830(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423468 | 0);
}

function b829(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423492 | 0);
}

function b828(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423516 | 0);
}

function b827(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423540 | 0);
}

function b826(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423564 | 0);
}

function b825(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423588 | 0);
}

function b824(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423612 | 0);
}

function b823(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423636 | 0);
}

function b822(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423660 | 0);
}

function b821(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423684 | 0);
}

function b820(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423708 | 0);
}

function b819(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423732 | 0);
}

function b818(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423756 | 0);
}

function b817(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423780 | 0);
}

function b816(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423804 | 0);
}

function b815(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423828 | 0);
}

function b814(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423852 | 0);
}

function b813(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423876 | 0);
}

function b812(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423900 | 0);
}

function b811(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423924 | 0);
}

function b810(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423948 | 0);
}

function b809(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423972 | 0);
}

function b808(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 423996 | 0);
}

function b807(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424020 | 0);
}

function b806(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424044 | 0);
}

function b805(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424068 | 0);
}

function b804(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424092 | 0);
}

function b803(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424116 | 0);
}

function b802(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424140 | 0);
}

function b801(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424164 | 0);
}

function b800(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424188 | 0);
}

function b799(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424212 | 0);
}

function b798(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424236 | 0);
}

function b797(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424260 | 0);
}

function b796(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424284 | 0);
}

function b795(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424308 | 0);
}

function b794(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424332 | 0);
}

function b793(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424356 | 0);
}

function b792(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424380 | 0);
}

function b791(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424404 | 0);
}

function b790(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424428 | 0);
}

function b789(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424452 | 0);
}

function b788(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424476 | 0);
}

function b787(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424500 | 0);
}

function b786(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424524 | 0);
}

function b785(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424548 | 0);
}

function b784(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424572 | 0);
}

function b783(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  HEAP32[EMTSTACKTOP + 32 >> 2] = p3;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424596 | 0);
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high << bits | (low & ander << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $s;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $l;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 390260 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 asyncState ? abort(-12) | 0 : 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >>> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function b231(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424672 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b230(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424700 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b229(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424728 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b228(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424756 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b227(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424784 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b226(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424812 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b225(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424840 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b224(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424868 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b223(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424896 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b222(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424924 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b221(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424952 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b220(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 424980 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b219(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425008 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b218(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425036 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b217(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425064 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b216(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425092 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b215(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425120 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b214(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425148 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b213(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425176 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b212(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425204 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b211(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425232 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b210(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425260 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b209(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425288 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b208(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425316 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b207(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425344 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b206(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425372 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b205(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425400 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b204(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425428 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b203(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425456 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b202(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425484 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b201(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425512 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b200(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425540 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b199(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425568 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b198(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425596 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b197(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425624 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b196(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425652 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b195(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425680 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b194(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425708 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b193(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425736 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b192(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425764 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b191(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425792 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b190(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425820 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b189(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425848 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b188(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425876 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b187(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425904 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b186(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425932 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b185(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425960 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b184(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 425988 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b183(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426016 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b182(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426044 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b181(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426072 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b180(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426100 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b179(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426128 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b178(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426156 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b177(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426184 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b176(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426212 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b175(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426240 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b174(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426268 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b173(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426296 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b172(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426324 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b171(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426352 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b170(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426380 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b169(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426408 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b168(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426436 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b167(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426464 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b166(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426492 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b165(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426520 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b164(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426548 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b163(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426576 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b162(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426604 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b161(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426632 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b160(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426660 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b159(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426688 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b158(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426716 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b157(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426744 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b156(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426772 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b155(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426800 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b154(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426828 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b153(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426856 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b152(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426884 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b151(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426912 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b150(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426940 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b149(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426968 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b148(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 426996 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b147(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427024 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b146(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427052 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b145(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427080 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b144(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427108 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b143(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427136 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b142(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427164 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b141(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427192 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b140(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427220 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b139(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427248 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b138(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427276 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b137(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427304 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b136(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427332 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b135(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427360 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b134(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427388 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b133(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427416 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b132(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427444 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b131(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427472 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b130(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427500 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b129(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427528 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b128(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427556 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b127(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427584 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b126(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427612 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b125(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427640 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b124(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427668 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b123(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427696 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b122(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427724 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b121(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427752 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b120(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427780 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b119(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427808 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b118(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427836 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b117(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427864 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b116(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427892 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b115(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427920 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b114(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427948 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b113(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 427976 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b112(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428004 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b111(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428032 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b110(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428060 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b109(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428088 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b108(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428116 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b107(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428144 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b106(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428172 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b105(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428200 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b104(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428228 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b103(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428256 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b102(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428284 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b101(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428312 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b100(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428340 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b99(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428368 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b98(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428396 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b97(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428424 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b96(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428452 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b95(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428480 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b94(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428508 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b93(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428536 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b92(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428564 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b91(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428592 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b90(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428620 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b89(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428648 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b88(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428676 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b87(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428704 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b86(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428732 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b85(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428760 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b84(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428788 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b83(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428816 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b82(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428844 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b81(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428872 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b80(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428900 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b79(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428928 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b78(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428956 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b77(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 428984 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b76(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429012 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b75(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429040 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b74(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429068 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b73(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429096 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b72(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429124 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b71(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429152 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b70(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429180 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b69(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429208 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b68(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429236 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b67(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429264 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b66(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429292 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b65(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429320 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b64(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429348 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b63(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429376 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b62(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429404 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b61(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429432 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b60(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429460 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b59(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429488 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b58(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429516 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b57(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429544 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b56(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429572 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b55(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429600 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b54(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429628 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b53(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429656 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b52(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429684 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b51(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429712 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b50(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429740 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b49(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429768 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b48(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429796 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b47(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429824 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b46(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429852 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b45(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429880 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b44(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429908 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b43(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429936 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b42(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429964 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b41(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 429992 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430020 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430048 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430076 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430104 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430132 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430160 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430188 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430216 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430244 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430272 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430300 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430328 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430356 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b27(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430384 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b26(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430412 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b25(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430440 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b24(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430468 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b23(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430496 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b22(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430524 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b21(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430552 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b20(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430580 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b19(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430608 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b18(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430636 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b17(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430664 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b16(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430692 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b15(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430720 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b14(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430748 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b13(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430776 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b12(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430804 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b11(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430832 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b10(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430860 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _touch_3d($p, $sender, $type) {
 $p = $p | 0;
 $sender = $sender | 0;
 $type = $type | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $sender;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $type;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 416356 | 0);
}

function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430888 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b8(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430916 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b7(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430944 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b6(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 430972 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b4(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431028 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b3(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431056 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b2(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431084 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431112 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b5(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431e3 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _js_nview_touch_cancelled($v, $x, $y) {
 $v = $v | 0;
 $x = +$x;
 $y = +$y;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = $x;
  HEAPF64[EMTSTACKTOP + 24 >> 3] = $y;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 309712 | 0);
}

function _mc_nexec_alloc($name, $len) {
 $name = $name | 0;
 $len = $len | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $name;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $len;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 352940 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _js_nview_touch_moved($v, $x, $y) {
 $v = $v | 0;
 $x = +$x;
 $y = +$y;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = $x;
  HEAPF64[EMTSTACKTOP + 24 >> 3] = $y;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 318632 | 0);
}

function _js_nview_touch_ended($v, $x, $y) {
 $v = $v | 0;
 $x = +$x;
 $y = +$y;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = $x;
  HEAPF64[EMTSTACKTOP + 24 >> 3] = $y;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 310100 | 0);
}

function _js_nview_touch_began($v, $x, $y) {
 $v = $v | 0;
 $x = +$x;
 $y = +$y;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $v;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = $x;
  HEAPF64[EMTSTACKTOP + 24 >> 3] = $y;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 316352 | 0);
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = stackBase;
  HEAP32[EMTSTACKTOP + 16 >> 2] = stackMax;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 421768 | 0);
}

function _touch_3d58($p, $s, $t) {
 $p = $p | 0;
 $s = $s | 0;
 $t = $t | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $s;
  HEAP32[EMTSTACKTOP + 24 >> 2] = $t;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 167248 | 0);
}

function _main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $argc;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $argv;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 383880 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b652(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431164 | 0);
}

function b651(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431188 | 0);
}

function b650(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431212 | 0);
}

function b649(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431236 | 0);
}

function b648(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431260 | 0);
}

function b647(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431284 | 0);
}

function b646(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431308 | 0);
}

function b645(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431332 | 0);
}

function b644(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431356 | 0);
}

function b643(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431380 | 0);
}

function b642(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431404 | 0);
}

function b641(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431428 | 0);
}

function b640(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431452 | 0);
}

function b639(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431476 | 0);
}

function b638(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431500 | 0);
}

function b637(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431524 | 0);
}

function b636(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431548 | 0);
}

function b635(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431572 | 0);
}

function b634(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431596 | 0);
}

function b633(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431620 | 0);
}

function b632(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431644 | 0);
}

function b631(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431668 | 0);
}

function b630(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431692 | 0);
}

function b629(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431716 | 0);
}

function b628(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431740 | 0);
}

function b627(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431764 | 0);
}

function b626(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431788 | 0);
}

function b625(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431812 | 0);
}

function b624(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431836 | 0);
}

function b623(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431860 | 0);
}

function b622(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431884 | 0);
}

function b621(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431908 | 0);
}

function b620(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431932 | 0);
}

function b619(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431956 | 0);
}

function b618(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 431980 | 0);
}

function b617(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432004 | 0);
}

function b616(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432028 | 0);
}

function b615(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432052 | 0);
}

function b614(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432076 | 0);
}

function b613(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432100 | 0);
}

function b612(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432124 | 0);
}

function b611(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432148 | 0);
}

function b610(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432172 | 0);
}

function b609(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432196 | 0);
}

function b608(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432220 | 0);
}

function b607(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432244 | 0);
}

function b606(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432268 | 0);
}

function b605(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432292 | 0);
}

function b604(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432316 | 0);
}

function b603(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432340 | 0);
}

function b602(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432364 | 0);
}

function b601(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432388 | 0);
}

function b600(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432412 | 0);
}

function b599(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432436 | 0);
}

function b598(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432460 | 0);
}

function b597(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432484 | 0);
}

function b596(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432508 | 0);
}

function b595(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432532 | 0);
}

function b594(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432556 | 0);
}

function b593(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432580 | 0);
}

function b592(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432604 | 0);
}

function b591(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432628 | 0);
}

function b233(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = +p1;
 p2 = p2 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  HEAP32[EMTSTACKTOP + 24 >> 2] = p2;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432652 | 0);
}

function _macao_resize($width, $height) {
 $width = $width | 0;
 $height = $height | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $width;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $height;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 289860 | 0);
}

function b781(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432676 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b780(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432704 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b779(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432732 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b778(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432760 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b777(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432788 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b776(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432816 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b775(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432844 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _on_slotmachine_update_jackpot($p, $out) {
 $p = $p | 0;
 $out = $out | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $out;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 394028 | 0);
}

function _on_slotmachine_get_table_info($p, $out) {
 $p = $p | 0;
 $out = $out | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $out;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 418016 | 0);
}

function ___list_view_update($p, $delta) {
 $p = $p | 0;
 $delta = +$delta;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = $delta;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 343940 | 0);
}

function _on_play_slot_machine($p, $out) {
 $p = $p | 0;
 $out = $out | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $out;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 322788 | 0);
}

function _on_net33($lis, $head) {
 $lis = $lis | 0;
 $head = $head | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $lis;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $head;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 364832 | 0);
}

function _on_net($lis, $head) {
 $lis = $lis | 0;
 $head = $head | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $lis;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $head;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 376072 | 0);
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}

function _on_user_info35($p, $out) {
 $p = $p | 0;
 $out = $out | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $out;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 386228 | 0);
}

function _on_user_info($p, $out) {
 $p = $p | 0;
 $out = $out | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $out;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 240928 | 0);
}

function _on_process($p, $d) {
 $p = $p | 0;
 $d = +$d;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = $d;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 399156 | 0);
}

function b585(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432872 | 0);
}

function b584(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432896 | 0);
}

function b583(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432920 | 0);
}

function b582(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432944 | 0);
}

function b581(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432968 | 0);
}

function b580(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 432992 | 0);
}

function b579(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433016 | 0);
}

function b578(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433040 | 0);
}

function b577(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433064 | 0);
}

function b576(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433088 | 0);
}

function b575(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433112 | 0);
}

function b574(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433136 | 0);
}

function b573(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433160 | 0);
}

function b572(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433184 | 0);
}

function b571(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433208 | 0);
}

function b570(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433232 | 0);
}

function b569(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433256 | 0);
}

function b568(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433280 | 0);
}

function b567(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433304 | 0);
}

function b566(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433328 | 0);
}

function b565(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433352 | 0);
}

function b564(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433376 | 0);
}

function b563(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433400 | 0);
}

function b562(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433424 | 0);
}

function b561(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAP32[EMTSTACKTOP + 16 >> 2] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433448 | 0);
}

function b360(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433472 | 0);
}

function b359(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433496 | 0);
}

function b358(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433520 | 0);
}

function b357(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433544 | 0);
}

function b356(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433568 | 0);
}

function b355(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433592 | 0);
}

function b354(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433616 | 0);
}

function b353(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433640 | 0);
}

function b352(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433664 | 0);
}

function b351(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433688 | 0);
}

function b350(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433712 | 0);
}

function b349(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433736 | 0);
}

function b348(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433760 | 0);
}

function b347(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433784 | 0);
}

function b346(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433808 | 0);
}

function b345(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433832 | 0);
}

function b344(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433856 | 0);
}

function b343(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433880 | 0);
}

function b342(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433904 | 0);
}

function b341(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433928 | 0);
}

function b340(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433952 | 0);
}

function b339(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 433976 | 0);
}

function b337(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434024 | 0);
}

function b336(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434048 | 0);
}

function b335(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434072 | 0);
}

function b334(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434096 | 0);
}

function b333(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434120 | 0);
}

function b332(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434144 | 0);
}

function b331(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434168 | 0);
}

function b330(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434192 | 0);
}

function b329(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434216 | 0);
}

function b328(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434240 | 0);
}

function b327(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434264 | 0);
}

function b326(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434288 | 0);
}

function b325(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434312 | 0);
}

function b324(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434336 | 0);
}

function b323(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434360 | 0);
}

function b322(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434384 | 0);
}

function b321(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434408 | 0);
}

function b320(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434432 | 0);
}

function b319(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434456 | 0);
}

function b318(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434480 | 0);
}

function b317(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434504 | 0);
}

function b316(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434528 | 0);
}

function b315(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434552 | 0);
}

function b314(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434576 | 0);
}

function b313(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434600 | 0);
}

function b312(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434624 | 0);
}

function b311(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434648 | 0);
}

function b310(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434672 | 0);
}

function b309(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434696 | 0);
}

function b308(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434720 | 0);
}

function b307(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434744 | 0);
}

function b306(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434768 | 0);
}

function b305(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434792 | 0);
}

function b304(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434816 | 0);
}

function b303(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434840 | 0);
}

function b302(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434864 | 0);
}

function b301(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434888 | 0);
}

function b300(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434912 | 0);
}

function b299(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434936 | 0);
}

function b298(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434960 | 0);
}

function b297(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434984 | 0);
}

function b296(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435008 | 0);
}

function b295(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435032 | 0);
}

function b294(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435056 | 0);
}

function b293(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435080 | 0);
}

function b292(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435104 | 0);
}

function b291(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435128 | 0);
}

function b290(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435152 | 0);
}

function b289(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435176 | 0);
}

function b288(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435200 | 0);
}

function b287(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435224 | 0);
}

function b286(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435248 | 0);
}

function b285(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435272 | 0);
}

function b284(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435296 | 0);
}

function b283(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435320 | 0);
}

function b282(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435344 | 0);
}

function b281(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435368 | 0);
}

function b280(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435392 | 0);
}

function b279(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435416 | 0);
}

function b278(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435440 | 0);
}

function b277(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435464 | 0);
}

function b276(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435488 | 0);
}

function b275(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435512 | 0);
}

function b274(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435536 | 0);
}

function b273(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435560 | 0);
}

function b272(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435584 | 0);
}

function b271(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435608 | 0);
}

function b270(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435632 | 0);
}

function b269(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435656 | 0);
}

function b268(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435680 | 0);
}

function b267(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435704 | 0);
}

function b266(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435728 | 0);
}

function b265(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435752 | 0);
}

function b264(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435776 | 0);
}

function b263(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435800 | 0);
}

function b262(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435824 | 0);
}

function b261(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435848 | 0);
}

function b260(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435872 | 0);
}

function b259(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435896 | 0);
}

function b258(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435920 | 0);
}

function b257(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435944 | 0);
}

function b256(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435968 | 0);
}

function b255(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 435992 | 0);
}

function b254(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436016 | 0);
}

function b253(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436040 | 0);
}

function b252(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436064 | 0);
}

function b251(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436088 | 0);
}

function b250(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436112 | 0);
}

function b249(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436136 | 0);
}

function b248(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436160 | 0);
}

function b247(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436184 | 0);
}

function b246(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436208 | 0);
}

function b245(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436232 | 0);
}

function b244(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436256 | 0);
}

function b243(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436280 | 0);
}

function b242(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436304 | 0);
}

function b241(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436328 | 0);
}

function b240(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436352 | 0);
}

function b239(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436376 | 0);
}

function b238(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436400 | 0);
}

function b237(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436424 | 0);
}

function b236(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436448 | 0);
}

function b235(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436472 | 0);
}

function b338(p0, p1) {
 p0 = p0 | 0;
 p1 = +p1;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  HEAPF64[EMTSTACKTOP + 16 >> 3] = p1;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 434e3 | 0);
}

function _smart_native_on_join_room_error($client) {
 $client = $client | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $client;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 394740 | 0);
}

function _smart_native_on_connection_lost($client) {
 $client = $client | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $client;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 391376 | 0);
}

function ___stdio_close($f) {
 $f = $f | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 397040 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _smart_native_on_disconnect($client) {
 $client = $client | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $client;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 420636 | 0);
}

function _smart_native_on_connection($client) {
 $client = $client | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $client;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 391880 | 0);
}

function _fflush($f) {
 $f = $f | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $f;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 295236 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _smart_native_on_logout($client) {
 $client = $client | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $client;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 410944 | 0);
}

function b589(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436496 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b588(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436524 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function b587(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436552 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _smart_network_data_free($head) {
 $head = $head | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $head;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 314884 | 0);
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 return ret | 0;
}

function _node_request_update_transform($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 236600 | 0);
}

function _node_render_buffer_group_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 340984 | 0);
}

function ___nview_list_view_data_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 418732 | 0);
}

function ___render_texture_data_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 392264 | 0);
}

function _node_render_content_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 359820 | 0);
}

function _device_buffer_group_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 343224 | 0);
}

function ___node_rotate_step_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 417248 | 0);
}

function _nview_touch_data_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 413392 | 0);
}

function ___intercept_head_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 413508 | 0);
}

function _smartfox_client_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 260644 | 0);
}

function ___xml_attribute_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 392828 | 0);
}

function _uniform_buffer_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 369788 | 0);
}

function _texture_frame_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 377200 | 0);
}

function _device_buffer_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 385076 | 0);
}

function ___xml_element_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 314512 | 0);
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 127](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function _node_manager_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 287692 | 0);
}

function _link_uniform_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 416084 | 0);
}

function _render_pass_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 378100 | 0);
}

function _nview_align_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 420468 | 0);
}

function _exec_data_free57($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 416256 | 0);
}

function _exec_data_free32($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 392120 | 0);
}

function _smart_room_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 394852 | 0);
}

function _process_action($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 418084 | 0);
}

function _nlyt_exec_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 416532 | 0);
}

function _exec_data_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 407984 | 0);
}

function _sfree($ptr) {
 $ptr = $ptr | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $ptr;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 370392 | 0);
}

function _nmanager_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 283044 | 0);
}

function _texture_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 365104 | 0);
}

function _on_removed55($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 421360 | 0);
}

function _on_removed30($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 421424 | 0);
}

function _nparser_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 265052 | 0);
}

function _naction_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 339244 | 0);
}

function _string_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 420244 | 0);
}

function _shader_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 321300 | 0);
}

function _sarray_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 362820 | 0);
}

function _on_linked54($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 389264 | 0);
}

function _on_linked29($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 395184 | 0);
}

function _camera_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 413940 | 0);
}

function _action_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 339540 | 0);
}

function _sdata_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 417680 | 0);
}

function _on_removed($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 421572 | 0);
}

function _nview_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 417508 | 0);
}

function _ntouch_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 316e3 | 0);
}

function _ntask_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 414252 | 0);
}

function _nexec_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 245112 | 0);
}

function _light_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 413736 | 0);
}

function _image_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 413840 | 0);
}

function _file_close($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 393428 | 0);
}

function _cleanup526($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 421072 | 0);
}

function _cleanup521($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 421124 | 0);
}

function _bytes_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 394152 | 0);
}

function _array_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 393652 | 0);
}

function _sobj_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 342456 | 0);
}

function _on_linked($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 389424 | 0);
}

function _node_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 243448 | 0);
}

function _game_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 307240 | 0);
}

function _map_free($p) {
 $p = $p | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $p;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 279348 | 0);
}

function b559(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436580 | 0);
}

function b558(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436604 | 0);
}

function b557(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436628 | 0);
}

function b556(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436652 | 0);
}

function b555(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436676 | 0);
}

function b554(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436700 | 0);
}

function b553(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436724 | 0);
}

function b552(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436748 | 0);
}

function b551(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436772 | 0);
}

function b550(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436796 | 0);
}

function b549(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436820 | 0);
}

function b548(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436844 | 0);
}

function b547(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436868 | 0);
}

function b546(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436892 | 0);
}

function b545(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436916 | 0);
}

function b544(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436940 | 0);
}

function b543(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436964 | 0);
}

function b542(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 436988 | 0);
}

function b541(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437012 | 0);
}

function b540(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437036 | 0);
}

function b539(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437060 | 0);
}

function b538(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437084 | 0);
}

function b537(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437108 | 0);
}

function b536(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437132 | 0);
}

function b535(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437156 | 0);
}

function b534(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437180 | 0);
}

function b533(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437204 | 0);
}

function b532(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437228 | 0);
}

function b531(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437252 | 0);
}

function b530(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437276 | 0);
}

function b529(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437300 | 0);
}

function b528(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437324 | 0);
}

function b527(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437348 | 0);
}

function b526(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437372 | 0);
}

function b525(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437396 | 0);
}

function b524(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437420 | 0);
}

function b523(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437444 | 0);
}

function b522(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437468 | 0);
}

function b521(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437492 | 0);
}

function b520(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437516 | 0);
}

function b519(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437540 | 0);
}

function b518(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437564 | 0);
}

function b517(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437588 | 0);
}

function b516(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437612 | 0);
}

function b515(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437636 | 0);
}

function b514(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437660 | 0);
}

function b513(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437684 | 0);
}

function b512(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437708 | 0);
}

function b511(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437732 | 0);
}

function b510(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437756 | 0);
}

function b509(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437780 | 0);
}

function b508(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437804 | 0);
}

function b507(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437828 | 0);
}

function b506(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437852 | 0);
}

function b505(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437876 | 0);
}

function b504(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437900 | 0);
}

function b503(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437924 | 0);
}

function b502(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437948 | 0);
}

function b501(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437972 | 0);
}

function b500(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 437996 | 0);
}

function b499(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438020 | 0);
}

function b498(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438044 | 0);
}

function b497(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438068 | 0);
}

function b496(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438092 | 0);
}

function b495(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438116 | 0);
}

function b494(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438140 | 0);
}

function b493(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438164 | 0);
}

function b492(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438188 | 0);
}

function b491(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438212 | 0);
}

function b490(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438236 | 0);
}

function b489(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438260 | 0);
}

function b488(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438284 | 0);
}

function b487(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438308 | 0);
}

function b486(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438332 | 0);
}

function b485(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438356 | 0);
}

function b484(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438380 | 0);
}

function b483(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438404 | 0);
}

function b482(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438428 | 0);
}

function b481(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438452 | 0);
}

function b480(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438476 | 0);
}

function b479(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438500 | 0);
}

function b478(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438524 | 0);
}

function b477(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438548 | 0);
}

function b476(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438572 | 0);
}

function b475(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438596 | 0);
}

function b474(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438620 | 0);
}

function b473(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438644 | 0);
}

function b472(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438668 | 0);
}

function b471(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438692 | 0);
}

function b470(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438716 | 0);
}

function b469(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438740 | 0);
}

function b468(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438764 | 0);
}

function b467(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438788 | 0);
}

function b466(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438812 | 0);
}

function b465(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438836 | 0);
}

function b464(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438860 | 0);
}

function b463(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438884 | 0);
}

function b462(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438908 | 0);
}

function b461(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438932 | 0);
}

function b460(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438956 | 0);
}

function b459(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 438980 | 0);
}

function b458(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439004 | 0);
}

function b457(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439028 | 0);
}

function b456(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439052 | 0);
}

function b455(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439076 | 0);
}

function b454(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439100 | 0);
}

function b453(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439124 | 0);
}

function b452(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439148 | 0);
}

function b451(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439172 | 0);
}

function b450(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439196 | 0);
}

function b449(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439220 | 0);
}

function b448(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439244 | 0);
}

function b447(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439268 | 0);
}

function b446(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439292 | 0);
}

function b445(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439316 | 0);
}

function b444(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439340 | 0);
}

function b443(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439364 | 0);
}

function b442(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439388 | 0);
}

function b441(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439412 | 0);
}

function b440(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439436 | 0);
}

function b439(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439460 | 0);
}

function b438(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439484 | 0);
}

function b437(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439508 | 0);
}

function b436(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439532 | 0);
}

function b435(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439556 | 0);
}

function b434(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439580 | 0);
}

function b433(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439604 | 0);
}

function b432(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439628 | 0);
}

function b431(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439652 | 0);
}

function b430(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439676 | 0);
}

function b429(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439700 | 0);
}

function b428(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439724 | 0);
}

function b427(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439748 | 0);
}

function b426(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439772 | 0);
}

function b425(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439796 | 0);
}

function b424(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439820 | 0);
}

function b423(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439844 | 0);
}

function b422(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439868 | 0);
}

function b421(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439892 | 0);
}

function b420(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439916 | 0);
}

function b419(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439940 | 0);
}

function b418(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439964 | 0);
}

function b417(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 439988 | 0);
}

function b416(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440012 | 0);
}

function b415(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440036 | 0);
}

function b414(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440060 | 0);
}

function b413(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440084 | 0);
}

function b412(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440108 | 0);
}

function b411(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440132 | 0);
}

function b410(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440156 | 0);
}

function b409(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440180 | 0);
}

function b408(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440204 | 0);
}

function b407(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440228 | 0);
}

function b406(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440252 | 0);
}

function b405(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440276 | 0);
}

function b404(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440300 | 0);
}

function b403(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440324 | 0);
}

function b402(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440348 | 0);
}

function b401(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440372 | 0);
}

function b400(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440396 | 0);
}

function b399(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440420 | 0);
}

function b398(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440444 | 0);
}

function b397(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440468 | 0);
}

function b396(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440492 | 0);
}

function b395(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440516 | 0);
}

function b394(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440540 | 0);
}

function b393(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440564 | 0);
}

function b392(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440588 | 0);
}

function b391(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440612 | 0);
}

function b390(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440636 | 0);
}

function b389(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440660 | 0);
}

function b388(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440684 | 0);
}

function b387(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440708 | 0);
}

function b386(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440732 | 0);
}

function b385(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440756 | 0);
}

function b384(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440780 | 0);
}

function b383(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440804 | 0);
}

function b382(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440828 | 0);
}

function b381(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440852 | 0);
}

function b380(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440876 | 0);
}

function b379(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440900 | 0);
}

function b378(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440924 | 0);
}

function b377(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440948 | 0);
}

function b376(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440972 | 0);
}

function b375(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 440996 | 0);
}

function b374(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441020 | 0);
}

function b373(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441044 | 0);
}

function b372(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441068 | 0);
}

function b371(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441092 | 0);
}

function b370(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441116 | 0);
}

function b369(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441140 | 0);
}

function b368(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441164 | 0);
}

function b367(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441188 | 0);
}

function b366(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441212 | 0);
}

function b365(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441236 | 0);
}

function b364(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441260 | 0);
}

function b363(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441284 | 0);
}

function b362(p0) {
 p0 = p0 | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = p0;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441308 | 0);
}

function ___errno_location() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 415824 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 255](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 63](a1 | 0, a2 | 0, a3 | 0);
}

function dynCall_vidi(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 a3 = a3 | 0;
 FUNCTION_TABLE_vidi[index & 0](a1 | 0, +a2, a3 | 0);
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 7](a1 | 0, a2 | 0) | 0;
}

function _texture_cache_dispose() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 328576 | 0);
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 31](a1 | 0, a2 | 0);
}

function _free_cache349() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 418572 | 0);
}

function _file_web_sync() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422256 | 0);
}

function _macao_start() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 366748 | 0);
}

function _free_cache() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 419772 | 0);
}

function ___clear705() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 422220 | 0);
}

function ___clear551() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 323800 | 0);
}

function ___clear534() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 418652 | 0);
}

function dynCall_vid(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = +a2;
 FUNCTION_TABLE_vid[index & 127](a1 | 0, +a2);
}

function _do_frame() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 328908 | 0);
}

function ___clear() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 420388 | 0);
}

function b773() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441332 | 0);
}

function b772() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441356 | 0);
}

function b771() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441380 | 0);
}

function b770() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441404 | 0);
}

function b769() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441428 | 0);
}

function b768() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441452 | 0);
}

function b767() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441476 | 0);
}

function b766() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441500 | 0);
}

function b765() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441524 | 0);
}

function b764() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441548 | 0);
}

function b763() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441572 | 0);
}

function b762() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441596 | 0);
}

function b761() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441620 | 0);
}

function b760() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441644 | 0);
}

function b759() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441668 | 0);
}

function b758() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441692 | 0);
}

function b757() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441716 | 0);
}

function b756() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441740 | 0);
}

function b755() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441764 | 0);
}

function b754() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441788 | 0);
}

function b753() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441812 | 0);
}

function b752() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441836 | 0);
}

function b751() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441860 | 0);
}

function b750() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441884 | 0);
}

function b749() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441908 | 0);
}

function b748() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441932 | 0);
}

function b747() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441956 | 0);
}

function b746() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 441980 | 0);
}

function b745() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442004 | 0);
}

function b744() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442028 | 0);
}

function b743() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442052 | 0);
}

function b742() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442076 | 0);
}

function b741() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442100 | 0);
}

function b740() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442124 | 0);
}

function b739() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442148 | 0);
}

function b738() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442172 | 0);
}

function b737() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442196 | 0);
}

function b736() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442220 | 0);
}

function b735() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442244 | 0);
}

function b734() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442268 | 0);
}

function b733() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442292 | 0);
}

function b732() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442316 | 0);
}

function b731() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442340 | 0);
}

function b730() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442364 | 0);
}

function b729() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442388 | 0);
}

function b728() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442412 | 0);
}

function b727() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442436 | 0);
}

function b726() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442460 | 0);
}

function b725() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442484 | 0);
}

function b724() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442508 | 0);
}

function b723() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442532 | 0);
}

function b722() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442556 | 0);
}

function b721() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442580 | 0);
}

function b720() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442604 | 0);
}

function b719() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442628 | 0);
}

function b718() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442652 | 0);
}

function b717() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442676 | 0);
}

function b716() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442700 | 0);
}

function b715() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442724 | 0);
}

function b714() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442748 | 0);
}

function b713() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442772 | 0);
}

function b712() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442796 | 0);
}

function b711() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442820 | 0);
}

function b710() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442844 | 0);
}

function b709() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442868 | 0);
}

function b708() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442892 | 0);
}

function b707() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442916 | 0);
}

function b706() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442940 | 0);
}

function b705() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442964 | 0);
}

function b704() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 442988 | 0);
}

function b703() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443012 | 0);
}

function b702() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443036 | 0);
}

function b701() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443060 | 0);
}

function b700() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443084 | 0);
}

function b699() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443108 | 0);
}

function b698() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443132 | 0);
}

function b697() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443156 | 0);
}

function b696() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443180 | 0);
}

function b695() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443204 | 0);
}

function b694() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443228 | 0);
}

function b693() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443252 | 0);
}

function b692() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443276 | 0);
}

function b691() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443300 | 0);
}

function b690() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443324 | 0);
}

function b689() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443348 | 0);
}

function b688() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443372 | 0);
}

function b687() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443396 | 0);
}

function b686() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443420 | 0);
}

function b685() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443444 | 0);
}

function b684() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443468 | 0);
}

function b683() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443492 | 0);
}

function b682() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443516 | 0);
}

function b681() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443540 | 0);
}

function b680() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443564 | 0);
}

function b679() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443588 | 0);
}

function b678() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443612 | 0);
}

function b677() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443636 | 0);
}

function b676() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443660 | 0);
}

function b675() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443684 | 0);
}

function b674() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443708 | 0);
}

function b673() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443732 | 0);
}

function b672() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443756 | 0);
}

function b671() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443780 | 0);
}

function b670() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443804 | 0);
}

function b669() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443828 | 0);
}

function b668() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443852 | 0);
}

function b667() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443876 | 0);
}

function b666() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443900 | 0);
}

function b665() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443924 | 0);
}

function b664() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443948 | 0);
}

function b663() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443972 | 0);
}

function b662() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 443996 | 0);
}

function b661() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 444020 | 0);
}

function b660() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 444044 | 0);
}

function b659() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 444068 | 0);
}

function b658() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 444092 | 0);
}

function b657() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 444116 | 0);
}

function b656() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 444140 | 0);
}

function b655() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 444164 | 0);
}

function b654() {
 if ((asyncState | 0) != 2) {
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 444188 | 0);
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 3](a1 | 0) | 0;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 255](a1 | 0);
}

function emtStackSave() {
 asyncState ? abort(-12) | 0 : 0;
 return EMTSTACKTOP | 0;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 127]();
}

function getTempRet0() {
 asyncState ? abort(-12) | 0 : 0;
 return tempRet0 | 0;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function emtStackRestore(x) {
 x = x | 0;
 EMTSTACKTOP = x;
}

function setAsyncState(x) {
 x = x | 0;
 asyncState = x;
}

function stackSave() {
 return STACKTOP | 0;
}

// EMSCRIPTEN_END_FUNCS

var FUNCTION_TABLE_iiii = [b1,_sn_write,b2,___stdout_write,___stdio_seek,b3,_mouse_down,_mouse_up,_mouse_move,_mouse_cancel,_touch_down,_touch_up,_touch_move,_touch_cancel,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13,b14,b15,b16,b17,b18
,b19,b20,b21,b22,b23,b24,b25,b26,b27,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38,b39,b40,b41,b42,b43,b44,b45,b46,b47,b48
,b49,b50,b51,b52,b53,b54,b55,b56,b57,b58,b59,b60,_parser_view,_parser_label,_parser_textfield,_parser_textview,_parser_listview,_parser_pageview,_parser_image,_parser_link,_parser_touch,_parser_controller,_parser_template,_parser_end_template,b61,b62,b63,b64,b65,b66
,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96
,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,___stdio_read,___stdio_write,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124
,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154
,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184
,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214
,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,b227,b228,b229,b230,b231];
var FUNCTION_TABLE_vidi = [b233];
var FUNCTION_TABLE_vid = [b235,b236,b237,b238,b239,b240,b241,b242,b243,b244,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,_on_process,b255,b256,b257,b258,b259,b260,b261,b262
,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274,b275,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285,b286,b287,b288,b289,b290,b291,b292
,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302,b303,b304,b305,b306,b307,b308,b309,b310,b311,b312,b313,b314,b315,b316,b317,b318,b319,b320,b321,b322
,b323,b324,b325,b326,b327,b328,b329,b330,b331,b332,b333,b334,b335,b336,b337,b338,b339,b340,b341,b342,b343,b344,b345,b346,b347,b348,b349,b350,b351,b352
,b353,b354,b355,b356,___list_view_update,b357,b358,b359,b360];
var FUNCTION_TABLE_vi = [b362,b363,b364,b365,b366,b367,b368,b369,b370,b371,b372,b373,b374,b375,b376,_sfree,_on_linked,_on_removed,b377,_exec_data_free,b378,b379,b380,b381,_on_linked29,_on_removed30,_exec_data_free32,b382,b383
,b384,b385,_on_linked54,_on_removed55,_exec_data_free57,b386,_process_action,_game_free,b387,_map_free,_string_free,_file_close,_array_free,_bytes_free,_render_pass_free,___render_texture_data_free,_shader_free,_texture_free,b388,_camera_free,_light_free,_link_uniform_free,_node_free,_node_request_update_transform,___node_rotate_step_free,_node_manager_free,_node_render_buffer_group_free,_node_render_content_free,b389,b390
,_texture_frame_free,_uniform_buffer_free,_image_free,_device_buffer_free,_device_buffer_group_free,_action_free,_naction_free,_ntask_free,_nmanager_free,b391,_nparser_free,b392,b393,b394,b395,b396,b397,b398,b399,b400,b401,b402,b403,b404,b405,b406,b407,b408,b409,b410
,b411,b412,b413,b414,b415,b416,b417,b418,b419,b420,b421,b422,b423,b424,b425,b426,b427,b428,b429,b430,b431,b432,b433,b434,b435,_nview_touch_data_free,_ntouch_free,___intercept_head_free,_nexec_free,_nview_free
,b436,_nview_align_free,_nlyt_exec_free,___nview_list_view_data_free,b437,_sdata_free,_sobj_free,_sarray_free,_smart_network_data_free,_smartfox_client_free,_smart_room_free,___xml_element_free,___xml_attribute_free,b438,b439,_cleanup521,_cleanup526,b440,b441,b442,b443,b444,b445,b446,b447,b448,b449,b450,b451,b452
,b453,b454,b455,b456,b457,b458,b459,b460,b461,b462,b463,b464,b465,b466,b467,b468,b469,b470,b471,b472,b473,b474,b475,b476,b477,b478,b479,b480,b481,b482
,b483,b484,b485,b486,b487,b488,b489,b490,b491,b492,b493,b494,b495,b496,b497,b498,b499,b500,b501,b502,b503,b504,b505,b506,b507,b508,b509,b510,b511,b512
,b513,b514,b515,b516,b517,b518,b519,b520,b521,b522,b523,b524,b525,b526,b527,b528,b529,b530,b531,b532,b533,b534,b535,b536,b537,b538,b539,b540,b541,b542
,b543,b544,b545,b546,b547,b548,b549,b550,b551,b552,b553,b554,b555,b556,b557,b558,b559];
var FUNCTION_TABLE_vii = [b561,b562,b563,b564,b565,b566,b567,b568,b569,b570,b571,b572,b573,b574,b575,b576,b577,b578,b579,b580,b581,_on_net,_on_slotmachine_update_jackpot,_on_user_info,b582,b583,b584,_on_net33,_on_user_info35
,_on_play_slot_machine,_on_slotmachine_get_table_info,b585];
var FUNCTION_TABLE_ii = [b587,b588,___stdio_close,b589];
var FUNCTION_TABLE_viii = [b591,b592,b593,b594,b595,b596,b597,b598,b599,b600,b601,b602,b603,b604,b605,b606,b607,b608,_touch_3d,b609,b610,b611,b612,b613,b614,b615,b616,b617,b618
,b619,b620,b621,b622,b623,_touch_3d58,b624,b625,b626,b627,b628,b629,b630,b631,b632,b633,b634,b635,b636,b637,b638,b639,b640,b641,b642,b643,b644,b645,b646,b647
,b648,b649,b650,b651,b652];
var FUNCTION_TABLE_v = [b654,b655,b656,b657,b658,b659,b660,b661,b662,b663,b664,b665,b666,b667,_do_frame,b668,b669,b670,b671,b672,b673,b674,b675,b676,b677,b678,b679,b680,b681
,b682,b683,b684,b685,b686,b687,b688,b689,___clear,b690,b691,b692,b693,b694,b695,b696,b697,b698,_texture_cache_dispose,b699,b700,b701,b702,b703,b704,b705,b706,b707,_free_cache,_free_cache349
,b708,b709,b710,b711,b712,b713,b714,b715,b716,___clear534,b717,___clear551,b718,b719,b720,b721,b722,b723,b724,b725,b726,b727,b728,b729,b730,b731,b732,b733,b734,b735
,b736,b737,b738,b739,b740,b741,b742,b743,b744,b745,b746,b747,b748,b749,b750,b751,b752,b753,b754,b755,b756,b757,b758,b759,b760,b761,b762,b763,b764,b765
,___clear705,b766,b767,b768,b769,b770,b771,b772,b773];
var FUNCTION_TABLE_iii = [b775,b776,b777,b778,b779,_mc_nexec_alloc,b780,b781];
var FUNCTION_TABLE_viiii = [b783,b784,b785,b786,b787,b788,b789,b790,b791,b792,b793,b794,b795,b796,b797,b798,b799,b800,b801,b802,b803,b804,b805,b806,b807,b808,b809,b810,b811
,b812,b813,b814,b815,b816,b817,b818,b819,b820,b821,b822,b823,b824,b825,b826,b827,b828,b829,b830,b831,b832,b833,b834,b835,b836,b837,b838,b839,b840,b841
,b842,b843,b844,b845,b846,b847,b848,b849,b850,b851,b852,b853,b854,b855,b856,b857,b858,b859,b860,b861,b862,b863,b864,b865,_parse_common_width,_parse_common_height,_parse_common_x,_parse_common_y,_parse_common_scale,_parse_common_rotation_x
,_parse_common_rotation_y,_parse_common_rotation_z,_parse_common_type,_parse_common_align,_parse_common_touch,_parse_common_color,_parse_common_border,_parse_common_alpha,_parse_common_visible,_parse_common_clip,_parse_common_round,_parse_common_margin_top,_parse_common_margin_left,_parse_common_margin_bottom,_parse_common_margin_right,_parse_common_padding_top,_parse_common_padding_left,_parse_common_padding_bottom,_parse_common_padding_right,_parse_common_hash,_parse_common_touch_delegate,_parse_common_intercept_vertical,_parse_common_intercept_horizontal,_parse_common_anchor_x,_parse_common_anchor_y,b866,b867,b868,b869,b870
,b871,b872,b873,b874,b875,b876,b877,b878,b879];

  return { _macao_resize: _macao_resize, _smart_native_on_connection: _smart_native_on_connection, _main: _main, _js_nview_touch_ended: _js_nview_touch_ended, _js_nview_touch_began: _js_nview_touch_began, _js_nview_touch_cancelled: _js_nview_touch_cancelled, _smart_native_on_login: _smart_native_on_login, _bitshift64Lshr: _bitshift64Lshr, _smart_native_on_logout: _smart_native_on_logout, _smart_native_on_public_message: _smart_native_on_public_message, _fflush: _fflush, _memset: _memset, _memcpy: _memcpy, _bitshift64Shl: _bitshift64Shl, _i64Subtract: _i64Subtract, _smart_native_on_extension_response: _smart_native_on_extension_response, _smart_native_on_disconnect: _smart_native_on_disconnect, _js_nview_touch_moved: _js_nview_touch_moved, _i64Add: _i64Add, _macao_start: _macao_start, _smart_native_on_login_error: _smart_native_on_login_error, _smart_native_on_connection_lost: _smart_native_on_connection_lost, ___errno_location: ___errno_location, _free: _free, _smart_native_on_join_room: _smart_native_on_join_room, _malloc: _malloc, _file_web_sync: _file_web_sync, _smart_native_on_join_room_error: _smart_native_on_join_room_error, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, emterpret: emterpret, setAsyncState: setAsyncState, emtStackSave: emtStackSave, emtStackRestore: emtStackRestore, dynCall_iiii: dynCall_iiii, dynCall_vidi: dynCall_vidi, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__macao_resize = asm["_macao_resize"]; asm["_macao_resize"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__macao_resize.apply(null, arguments);
};

var real__smart_native_on_connection = asm["_smart_native_on_connection"]; asm["_smart_native_on_connection"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__smart_native_on_connection.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__js_nview_touch_ended = asm["_js_nview_touch_ended"]; asm["_js_nview_touch_ended"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__js_nview_touch_ended.apply(null, arguments);
};

var real__smart_native_on_join_room = asm["_smart_native_on_join_room"]; asm["_smart_native_on_join_room"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__smart_native_on_join_room.apply(null, arguments);
};

var real__js_nview_touch_cancelled = asm["_js_nview_touch_cancelled"]; asm["_js_nview_touch_cancelled"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__js_nview_touch_cancelled.apply(null, arguments);
};

var real__smart_native_on_login = asm["_smart_native_on_login"]; asm["_smart_native_on_login"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__smart_native_on_login.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__smart_native_on_logout = asm["_smart_native_on_logout"]; asm["_smart_native_on_logout"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__smart_native_on_logout.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__smart_native_on_public_message = asm["_smart_native_on_public_message"]; asm["_smart_native_on_public_message"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__smart_native_on_public_message.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__smart_native_on_extension_response = asm["_smart_native_on_extension_response"]; asm["_smart_native_on_extension_response"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__smart_native_on_extension_response.apply(null, arguments);
};

var real__smart_native_on_disconnect = asm["_smart_native_on_disconnect"]; asm["_smart_native_on_disconnect"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__smart_native_on_disconnect.apply(null, arguments);
};

var real__js_nview_touch_moved = asm["_js_nview_touch_moved"]; asm["_js_nview_touch_moved"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__js_nview_touch_moved.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__smart_native_on_login_error = asm["_smart_native_on_login_error"]; asm["_smart_native_on_login_error"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__smart_native_on_login_error.apply(null, arguments);
};

var real__macao_start = asm["_macao_start"]; asm["_macao_start"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__macao_start.apply(null, arguments);
};

var real__smart_native_on_connection_lost = asm["_smart_native_on_connection_lost"]; asm["_smart_native_on_connection_lost"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__smart_native_on_connection_lost.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__js_nview_touch_began = asm["_js_nview_touch_began"]; asm["_js_nview_touch_began"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__js_nview_touch_began.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__file_web_sync = asm["_file_web_sync"]; asm["_file_web_sync"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__file_web_sync.apply(null, arguments);
};

var real__smart_native_on_join_room_error = asm["_smart_native_on_join_room_error"]; asm["_smart_native_on_join_room_error"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__smart_native_on_join_room_error.apply(null, arguments);
};
var _macao_resize = Module["_macao_resize"] = asm["_macao_resize"];
var _smart_native_on_connection = Module["_smart_native_on_connection"] = asm["_smart_native_on_connection"];
var _main = Module["_main"] = asm["_main"];
var _js_nview_touch_ended = Module["_js_nview_touch_ended"] = asm["_js_nview_touch_ended"];
var _smart_native_on_join_room = Module["_smart_native_on_join_room"] = asm["_smart_native_on_join_room"];
var _js_nview_touch_cancelled = Module["_js_nview_touch_cancelled"] = asm["_js_nview_touch_cancelled"];
var _smart_native_on_login = Module["_smart_native_on_login"] = asm["_smart_native_on_login"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _smart_native_on_logout = Module["_smart_native_on_logout"] = asm["_smart_native_on_logout"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _memset = Module["_memset"] = asm["_memset"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _smart_native_on_public_message = Module["_smart_native_on_public_message"] = asm["_smart_native_on_public_message"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _smart_native_on_extension_response = Module["_smart_native_on_extension_response"] = asm["_smart_native_on_extension_response"];
var _smart_native_on_disconnect = Module["_smart_native_on_disconnect"] = asm["_smart_native_on_disconnect"];
var _js_nview_touch_moved = Module["_js_nview_touch_moved"] = asm["_js_nview_touch_moved"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _smart_native_on_login_error = Module["_smart_native_on_login_error"] = asm["_smart_native_on_login_error"];
var _macao_start = Module["_macao_start"] = asm["_macao_start"];
var _smart_native_on_connection_lost = Module["_smart_native_on_connection_lost"] = asm["_smart_native_on_connection_lost"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _js_nview_touch_began = Module["_js_nview_touch_began"] = asm["_js_nview_touch_began"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _file_web_sync = Module["_file_web_sync"] = asm["_file_web_sync"];
var _smart_native_on_join_room_error = Module["_smart_native_on_join_room_error"] = asm["_smart_native_on_join_room_error"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vidi = Module["dynCall_vidi"] = asm["dynCall_vidi"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  var initialEmtStackTop = asm.emtStackSave();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      asm.emtStackRestore(initialEmtStackTop);
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}








